diff --git a/node_modules/maplestory/dist/bundle.js b/node_modules/maplestory/dist/bundle.js
index 270641d..0bb6fab 100644
--- a/node_modules/maplestory/dist/bundle.js
+++ b/node_modules/maplestory/dist/bundle.js
@@ -1,3 +1,3 @@
 /*! For license information please see bundle.js.LICENSE.txt */
-!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t():"function"==typeof define&&define.amd?define("maplestory",[],t):"object"==typeof exports?exports.maplestory=t():e.maplestory=t()}(self,(function(){return(()=>{var e={802:function(e,t){!function(e){"use strict";var t=(e,t,n,r)=>{let i=65535&e|0,s=e>>>16&65535|0,a=0;for(;0!==n;){a=n>2e3?2e3:n,n-=a;do{i=i+t[r++]|0,s=s+i|0}while(--a);i%=65521,s%=65521}return i|s<<16|0};const n=new Uint32Array((()=>{let e,t=[];for(var n=0;n<256;n++){e=n;for(var r=0;r<8;r++)e=1&e?3988292384^e>>>1:e>>>1;t[n]=e}return t})());var r=(e,t,r,i)=>{const s=n,a=i+r;e^=-1;for(let n=i;n<a;n++)e=e>>>8^s[255&(e^t[n])];return-1^e};var i=function(e,t){let n,r,i,s,a,o,l,c,u,h,d,f,m,p,y,v,g,b,w,_,k,x,R,E;const P=e.state;n=e.next_in,R=e.input,r=n+(e.avail_in-5),i=e.next_out,E=e.output,s=i-(t-e.avail_out),a=i+(e.avail_out-257),o=P.dmax,l=P.wsize,c=P.whave,u=P.wnext,h=P.window,d=P.hold,f=P.bits,m=P.lencode,p=P.distcode,y=(1<<P.lenbits)-1,v=(1<<P.distbits)-1;e:do{f<15&&(d+=R[n++]<<f,f+=8,d+=R[n++]<<f,f+=8),g=m[d&y];t:for(;;){if(b=g>>>24,d>>>=b,f-=b,b=g>>>16&255,0===b)E[i++]=65535&g;else{if(!(16&b)){if(0==(64&b)){g=m[(65535&g)+(d&(1<<b)-1)];continue t}if(32&b){P.mode=12;break e}e.msg="invalid literal/length code",P.mode=30;break e}w=65535&g,b&=15,b&&(f<b&&(d+=R[n++]<<f,f+=8),w+=d&(1<<b)-1,d>>>=b,f-=b),f<15&&(d+=R[n++]<<f,f+=8,d+=R[n++]<<f,f+=8),g=p[d&v];n:for(;;){if(b=g>>>24,d>>>=b,f-=b,b=g>>>16&255,!(16&b)){if(0==(64&b)){g=p[(65535&g)+(d&(1<<b)-1)];continue n}e.msg="invalid distance code",P.mode=30;break e}if(_=65535&g,b&=15,f<b&&(d+=R[n++]<<f,f+=8,f<b&&(d+=R[n++]<<f,f+=8)),_+=d&(1<<b)-1,_>o){e.msg="invalid distance too far back",P.mode=30;break e}if(d>>>=b,f-=b,b=i-s,_>b){if(b=_-b,b>c&&P.sane){e.msg="invalid distance too far back",P.mode=30;break e}if(k=0,x=h,0===u){if(k+=l-b,b<w){w-=b;do{E[i++]=h[k++]}while(--b);k=i-_,x=E}}else if(u<b){if(k+=l+u-b,b-=u,b<w){w-=b;do{E[i++]=h[k++]}while(--b);if(k=0,u<w){b=u,w-=b;do{E[i++]=h[k++]}while(--b);k=i-_,x=E}}}else if(k+=u-b,b<w){w-=b;do{E[i++]=h[k++]}while(--b);k=i-_,x=E}for(;w>2;)E[i++]=x[k++],E[i++]=x[k++],E[i++]=x[k++],w-=3;w&&(E[i++]=x[k++],w>1&&(E[i++]=x[k++]))}else{k=i-_;do{E[i++]=E[k++],E[i++]=E[k++],E[i++]=E[k++],w-=3}while(w>2);w&&(E[i++]=E[k++],w>1&&(E[i++]=E[k++]))}break}}break}}while(n<r&&i<a);w=f>>3,n-=w,f-=w<<3,d&=(1<<f)-1,e.next_in=n,e.next_out=i,e.avail_in=n<r?r-n+5:5-(n-r),e.avail_out=i<a?a-i+257:257-(i-a),P.hold=d,P.bits=f};const s=15,a=new Uint16Array([3,4,5,6,7,8,9,10,11,13,15,17,19,23,27,31,35,43,51,59,67,83,99,115,131,163,195,227,258,0,0]),o=new Uint8Array([16,16,16,16,16,16,16,16,17,17,17,17,18,18,18,18,19,19,19,19,20,20,20,20,21,21,21,21,16,72,78]),l=new Uint16Array([1,2,3,4,5,7,9,13,17,25,33,49,65,97,129,193,257,385,513,769,1025,1537,2049,3073,4097,6145,8193,12289,16385,24577,0,0]),c=new Uint8Array([16,16,16,16,17,17,18,18,19,19,20,20,21,21,22,22,23,23,24,24,25,25,26,26,27,27,28,28,29,29,64,64]);var u=(e,t,n,r,i,u,h,d)=>{const f=d.bits;let m,p,y,v,g,b,w=0,_=0,k=0,x=0,R=0,E=0,P=0,I=0,S=0,C=0,O=null,A=0;const D=new Uint16Array(16),T=new Uint16Array(16);let j,B,M,F=null,N=0;for(w=0;w<=s;w++)D[w]=0;for(_=0;_<r;_++)D[t[n+_]]++;for(R=f,x=s;x>=1&&0===D[x];x--);if(R>x&&(R=x),0===x)return i[u++]=20971520,i[u++]=20971520,d.bits=1,0;for(k=1;k<x&&0===D[k];k++);for(R<k&&(R=k),I=1,w=1;w<=s;w++)if(I<<=1,I-=D[w],I<0)return-1;if(I>0&&(0===e||1!==x))return-1;for(T[1]=0,w=1;w<s;w++)T[w+1]=T[w]+D[w];for(_=0;_<r;_++)0!==t[n+_]&&(h[T[t[n+_]]++]=_);if(0===e?(O=F=h,b=19):1===e?(O=a,A-=257,F=o,N-=257,b=256):(O=l,F=c,b=-1),C=0,_=0,w=k,g=u,E=R,P=0,y=-1,S=1<<R,v=S-1,1===e&&S>852||2===e&&S>592)return 1;for(;;){j=w-P,h[_]<b?(B=0,M=h[_]):h[_]>b?(B=F[N+h[_]],M=O[A+h[_]]):(B=96,M=0),m=1<<w-P,p=1<<E,k=p;do{p-=m,i[g+(C>>P)+p]=j<<24|B<<16|M|0}while(0!==p);for(m=1<<w-1;C&m;)m>>=1;if(0!==m?(C&=m-1,C+=m):C=0,_++,0==--D[w]){if(w===x)break;w=t[n+h[_]]}if(w>R&&(C&v)!==y){for(0===P&&(P=R),g+=k,E=w-P,I=1<<E;E+P<x&&(I-=D[E+P],!(I<=0));)E++,I<<=1;if(S+=1<<E,1===e&&S>852||2===e&&S>592)return 1;y=C&v,i[y]=R<<24|E<<16|g-u|0}}return 0!==C&&(i[g+C]=w-P<<24|64<<16|0),d.bits=R,0},h={Z_NO_FLUSH:0,Z_PARTIAL_FLUSH:1,Z_SYNC_FLUSH:2,Z_FULL_FLUSH:3,Z_FINISH:4,Z_BLOCK:5,Z_TREES:6,Z_OK:0,Z_STREAM_END:1,Z_NEED_DICT:2,Z_ERRNO:-1,Z_STREAM_ERROR:-2,Z_DATA_ERROR:-3,Z_MEM_ERROR:-4,Z_BUF_ERROR:-5,Z_NO_COMPRESSION:0,Z_BEST_SPEED:1,Z_BEST_COMPRESSION:9,Z_DEFAULT_COMPRESSION:-1,Z_FILTERED:1,Z_HUFFMAN_ONLY:2,Z_RLE:3,Z_FIXED:4,Z_DEFAULT_STRATEGY:0,Z_BINARY:0,Z_TEXT:1,Z_UNKNOWN:2,Z_DEFLATED:8};const{Z_FINISH:d,Z_BLOCK:f,Z_TREES:m,Z_OK:p,Z_STREAM_END:y,Z_NEED_DICT:v,Z_STREAM_ERROR:g,Z_DATA_ERROR:b,Z_MEM_ERROR:w,Z_BUF_ERROR:_,Z_DEFLATED:k}=h,x=12,R=30,E=e=>(e>>>24&255)+(e>>>8&65280)+((65280&e)<<8)+((255&e)<<24);function P(){this.mode=0,this.last=!1,this.wrap=0,this.havedict=!1,this.flags=0,this.dmax=0,this.check=0,this.total=0,this.head=null,this.wbits=0,this.wsize=0,this.whave=0,this.wnext=0,this.window=null,this.hold=0,this.bits=0,this.length=0,this.offset=0,this.extra=0,this.lencode=null,this.distcode=null,this.lenbits=0,this.distbits=0,this.ncode=0,this.nlen=0,this.ndist=0,this.have=0,this.next=null,this.lens=new Uint16Array(320),this.work=new Uint16Array(288),this.lendyn=null,this.distdyn=null,this.sane=0,this.back=0,this.was=0}const I=e=>{if(!e||!e.state)return g;const t=e.state;return e.total_in=e.total_out=t.total=0,e.msg="",t.wrap&&(e.adler=1&t.wrap),t.mode=1,t.last=0,t.havedict=0,t.dmax=32768,t.head=null,t.hold=0,t.bits=0,t.lencode=t.lendyn=new Int32Array(852),t.distcode=t.distdyn=new Int32Array(592),t.sane=1,t.back=-1,p},S=e=>{if(!e||!e.state)return g;const t=e.state;return t.wsize=0,t.whave=0,t.wnext=0,I(e)},C=(e,t)=>{let n;if(!e||!e.state)return g;const r=e.state;return t<0?(n=0,t=-t):(n=1+(t>>4),t<48&&(t&=15)),t&&(t<8||t>15)?g:(null!==r.window&&r.wbits!==t&&(r.window=null),r.wrap=n,r.wbits=t,S(e))},O=(e,t)=>{if(!e)return g;const n=new P;e.state=n,n.window=null;const r=C(e,t);return r!==p&&(e.state=null),r};let A,D,T=!0;const j=e=>{if(T){A=new Int32Array(512),D=new Int32Array(32);let t=0;for(;t<144;)e.lens[t++]=8;for(;t<256;)e.lens[t++]=9;for(;t<280;)e.lens[t++]=7;for(;t<288;)e.lens[t++]=8;for(u(1,e.lens,0,288,A,0,e.work,{bits:9}),t=0;t<32;)e.lens[t++]=5;u(2,e.lens,0,32,D,0,e.work,{bits:5}),T=!1}e.lencode=A,e.lenbits=9,e.distcode=D,e.distbits=5},B=(e,t,n,r)=>{let i;const s=e.state;return null===s.window&&(s.wsize=1<<s.wbits,s.wnext=0,s.whave=0,s.window=new Uint8Array(s.wsize)),r>=s.wsize?(s.window.set(t.subarray(n-s.wsize,n),0),s.wnext=0,s.whave=s.wsize):(i=s.wsize-s.wnext,i>r&&(i=r),s.window.set(t.subarray(n-r,n-r+i),s.wnext),(r-=i)?(s.window.set(t.subarray(n-r,n),0),s.wnext=r,s.whave=s.wsize):(s.wnext+=i,s.wnext===s.wsize&&(s.wnext=0),s.whave<s.wsize&&(s.whave+=i))),0};var M=S,F=O,N=(e,n)=>{let s,a,o,l,c,h,P,I,S,C,O,A,D,T,M,F,N,K,L,$,U,q,z=0;const Z=new Uint8Array(4);let W,G;const V=new Uint8Array([16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15]);if(!e||!e.state||!e.output||!e.input&&0!==e.avail_in)return g;s=e.state,s.mode===x&&(s.mode=13),c=e.next_out,o=e.output,P=e.avail_out,l=e.next_in,a=e.input,h=e.avail_in,I=s.hold,S=s.bits,C=h,O=P,q=p;e:for(;;)switch(s.mode){case 1:if(0===s.wrap){s.mode=13;break}for(;S<16;){if(0===h)break e;h--,I+=a[l++]<<S,S+=8}if(2&s.wrap&&35615===I){s.check=0,Z[0]=255&I,Z[1]=I>>>8&255,s.check=r(s.check,Z,2,0),I=0,S=0,s.mode=2;break}if(s.flags=0,s.head&&(s.head.done=!1),!(1&s.wrap)||(((255&I)<<8)+(I>>8))%31){e.msg="incorrect header check",s.mode=R;break}if((15&I)!==k){e.msg="unknown compression method",s.mode=R;break}if(I>>>=4,S-=4,U=8+(15&I),0===s.wbits)s.wbits=U;else if(U>s.wbits){e.msg="invalid window size",s.mode=R;break}s.dmax=1<<s.wbits,e.adler=s.check=1,s.mode=512&I?10:x,I=0,S=0;break;case 2:for(;S<16;){if(0===h)break e;h--,I+=a[l++]<<S,S+=8}if(s.flags=I,(255&s.flags)!==k){e.msg="unknown compression method",s.mode=R;break}if(57344&s.flags){e.msg="unknown header flags set",s.mode=R;break}s.head&&(s.head.text=I>>8&1),512&s.flags&&(Z[0]=255&I,Z[1]=I>>>8&255,s.check=r(s.check,Z,2,0)),I=0,S=0,s.mode=3;case 3:for(;S<32;){if(0===h)break e;h--,I+=a[l++]<<S,S+=8}s.head&&(s.head.time=I),512&s.flags&&(Z[0]=255&I,Z[1]=I>>>8&255,Z[2]=I>>>16&255,Z[3]=I>>>24&255,s.check=r(s.check,Z,4,0)),I=0,S=0,s.mode=4;case 4:for(;S<16;){if(0===h)break e;h--,I+=a[l++]<<S,S+=8}s.head&&(s.head.xflags=255&I,s.head.os=I>>8),512&s.flags&&(Z[0]=255&I,Z[1]=I>>>8&255,s.check=r(s.check,Z,2,0)),I=0,S=0,s.mode=5;case 5:if(1024&s.flags){for(;S<16;){if(0===h)break e;h--,I+=a[l++]<<S,S+=8}s.length=I,s.head&&(s.head.extra_len=I),512&s.flags&&(Z[0]=255&I,Z[1]=I>>>8&255,s.check=r(s.check,Z,2,0)),I=0,S=0}else s.head&&(s.head.extra=null);s.mode=6;case 6:if(1024&s.flags&&(A=s.length,A>h&&(A=h),A&&(s.head&&(U=s.head.extra_len-s.length,s.head.extra||(s.head.extra=new Uint8Array(s.head.extra_len)),s.head.extra.set(a.subarray(l,l+A),U)),512&s.flags&&(s.check=r(s.check,a,A,l)),h-=A,l+=A,s.length-=A),s.length))break e;s.length=0,s.mode=7;case 7:if(2048&s.flags){if(0===h)break e;A=0;do{U=a[l+A++],s.head&&U&&s.length<65536&&(s.head.name+=String.fromCharCode(U))}while(U&&A<h);if(512&s.flags&&(s.check=r(s.check,a,A,l)),h-=A,l+=A,U)break e}else s.head&&(s.head.name=null);s.length=0,s.mode=8;case 8:if(4096&s.flags){if(0===h)break e;A=0;do{U=a[l+A++],s.head&&U&&s.length<65536&&(s.head.comment+=String.fromCharCode(U))}while(U&&A<h);if(512&s.flags&&(s.check=r(s.check,a,A,l)),h-=A,l+=A,U)break e}else s.head&&(s.head.comment=null);s.mode=9;case 9:if(512&s.flags){for(;S<16;){if(0===h)break e;h--,I+=a[l++]<<S,S+=8}if(I!==(65535&s.check)){e.msg="header crc mismatch",s.mode=R;break}I=0,S=0}s.head&&(s.head.hcrc=s.flags>>9&1,s.head.done=!0),e.adler=s.check=0,s.mode=x;break;case 10:for(;S<32;){if(0===h)break e;h--,I+=a[l++]<<S,S+=8}e.adler=s.check=E(I),I=0,S=0,s.mode=11;case 11:if(0===s.havedict)return e.next_out=c,e.avail_out=P,e.next_in=l,e.avail_in=h,s.hold=I,s.bits=S,v;e.adler=s.check=1,s.mode=x;case x:if(n===f||n===m)break e;case 13:if(s.last){I>>>=7&S,S-=7&S,s.mode=27;break}for(;S<3;){if(0===h)break e;h--,I+=a[l++]<<S,S+=8}switch(s.last=1&I,I>>>=1,S-=1,3&I){case 0:s.mode=14;break;case 1:if(j(s),s.mode=20,n===m){I>>>=2,S-=2;break e}break;case 2:s.mode=17;break;case 3:e.msg="invalid block type",s.mode=R}I>>>=2,S-=2;break;case 14:for(I>>>=7&S,S-=7&S;S<32;){if(0===h)break e;h--,I+=a[l++]<<S,S+=8}if((65535&I)!=(I>>>16^65535)){e.msg="invalid stored block lengths",s.mode=R;break}if(s.length=65535&I,I=0,S=0,s.mode=15,n===m)break e;case 15:s.mode=16;case 16:if(A=s.length,A){if(A>h&&(A=h),A>P&&(A=P),0===A)break e;o.set(a.subarray(l,l+A),c),h-=A,l+=A,P-=A,c+=A,s.length-=A;break}s.mode=x;break;case 17:for(;S<14;){if(0===h)break e;h--,I+=a[l++]<<S,S+=8}if(s.nlen=257+(31&I),I>>>=5,S-=5,s.ndist=1+(31&I),I>>>=5,S-=5,s.ncode=4+(15&I),I>>>=4,S-=4,s.nlen>286||s.ndist>30){e.msg="too many length or distance symbols",s.mode=R;break}s.have=0,s.mode=18;case 18:for(;s.have<s.ncode;){for(;S<3;){if(0===h)break e;h--,I+=a[l++]<<S,S+=8}s.lens[V[s.have++]]=7&I,I>>>=3,S-=3}for(;s.have<19;)s.lens[V[s.have++]]=0;if(s.lencode=s.lendyn,s.lenbits=7,W={bits:s.lenbits},q=u(0,s.lens,0,19,s.lencode,0,s.work,W),s.lenbits=W.bits,q){e.msg="invalid code lengths set",s.mode=R;break}s.have=0,s.mode=19;case 19:for(;s.have<s.nlen+s.ndist;){for(;z=s.lencode[I&(1<<s.lenbits)-1],M=z>>>24,F=z>>>16&255,N=65535&z,!(M<=S);){if(0===h)break e;h--,I+=a[l++]<<S,S+=8}if(N<16)I>>>=M,S-=M,s.lens[s.have++]=N;else{if(16===N){for(G=M+2;S<G;){if(0===h)break e;h--,I+=a[l++]<<S,S+=8}if(I>>>=M,S-=M,0===s.have){e.msg="invalid bit length repeat",s.mode=R;break}U=s.lens[s.have-1],A=3+(3&I),I>>>=2,S-=2}else if(17===N){for(G=M+3;S<G;){if(0===h)break e;h--,I+=a[l++]<<S,S+=8}I>>>=M,S-=M,U=0,A=3+(7&I),I>>>=3,S-=3}else{for(G=M+7;S<G;){if(0===h)break e;h--,I+=a[l++]<<S,S+=8}I>>>=M,S-=M,U=0,A=11+(127&I),I>>>=7,S-=7}if(s.have+A>s.nlen+s.ndist){e.msg="invalid bit length repeat",s.mode=R;break}for(;A--;)s.lens[s.have++]=U}}if(s.mode===R)break;if(0===s.lens[256]){e.msg="invalid code -- missing end-of-block",s.mode=R;break}if(s.lenbits=9,W={bits:s.lenbits},q=u(1,s.lens,0,s.nlen,s.lencode,0,s.work,W),s.lenbits=W.bits,q){e.msg="invalid literal/lengths set",s.mode=R;break}if(s.distbits=6,s.distcode=s.distdyn,W={bits:s.distbits},q=u(2,s.lens,s.nlen,s.ndist,s.distcode,0,s.work,W),s.distbits=W.bits,q){e.msg="invalid distances set",s.mode=R;break}if(s.mode=20,n===m)break e;case 20:s.mode=21;case 21:if(h>=6&&P>=258){e.next_out=c,e.avail_out=P,e.next_in=l,e.avail_in=h,s.hold=I,s.bits=S,i(e,O),c=e.next_out,o=e.output,P=e.avail_out,l=e.next_in,a=e.input,h=e.avail_in,I=s.hold,S=s.bits,s.mode===x&&(s.back=-1);break}for(s.back=0;z=s.lencode[I&(1<<s.lenbits)-1],M=z>>>24,F=z>>>16&255,N=65535&z,!(M<=S);){if(0===h)break e;h--,I+=a[l++]<<S,S+=8}if(F&&0==(240&F)){for(K=M,L=F,$=N;z=s.lencode[$+((I&(1<<K+L)-1)>>K)],M=z>>>24,F=z>>>16&255,N=65535&z,!(K+M<=S);){if(0===h)break e;h--,I+=a[l++]<<S,S+=8}I>>>=K,S-=K,s.back+=K}if(I>>>=M,S-=M,s.back+=M,s.length=N,0===F){s.mode=26;break}if(32&F){s.back=-1,s.mode=x;break}if(64&F){e.msg="invalid literal/length code",s.mode=R;break}s.extra=15&F,s.mode=22;case 22:if(s.extra){for(G=s.extra;S<G;){if(0===h)break e;h--,I+=a[l++]<<S,S+=8}s.length+=I&(1<<s.extra)-1,I>>>=s.extra,S-=s.extra,s.back+=s.extra}s.was=s.length,s.mode=23;case 23:for(;z=s.distcode[I&(1<<s.distbits)-1],M=z>>>24,F=z>>>16&255,N=65535&z,!(M<=S);){if(0===h)break e;h--,I+=a[l++]<<S,S+=8}if(0==(240&F)){for(K=M,L=F,$=N;z=s.distcode[$+((I&(1<<K+L)-1)>>K)],M=z>>>24,F=z>>>16&255,N=65535&z,!(K+M<=S);){if(0===h)break e;h--,I+=a[l++]<<S,S+=8}I>>>=K,S-=K,s.back+=K}if(I>>>=M,S-=M,s.back+=M,64&F){e.msg="invalid distance code",s.mode=R;break}s.offset=N,s.extra=15&F,s.mode=24;case 24:if(s.extra){for(G=s.extra;S<G;){if(0===h)break e;h--,I+=a[l++]<<S,S+=8}s.offset+=I&(1<<s.extra)-1,I>>>=s.extra,S-=s.extra,s.back+=s.extra}if(s.offset>s.dmax){e.msg="invalid distance too far back",s.mode=R;break}s.mode=25;case 25:if(0===P)break e;if(A=O-P,s.offset>A){if(A=s.offset-A,A>s.whave&&s.sane){e.msg="invalid distance too far back",s.mode=R;break}A>s.wnext?(A-=s.wnext,D=s.wsize-A):D=s.wnext-A,A>s.length&&(A=s.length),T=s.window}else T=o,D=c-s.offset,A=s.length;A>P&&(A=P),P-=A,s.length-=A;do{o[c++]=T[D++]}while(--A);0===s.length&&(s.mode=21);break;case 26:if(0===P)break e;o[c++]=s.length,P--,s.mode=21;break;case 27:if(s.wrap){for(;S<32;){if(0===h)break e;h--,I|=a[l++]<<S,S+=8}if(O-=P,e.total_out+=O,s.total+=O,O&&(e.adler=s.check=s.flags?r(s.check,o,O,c-O):t(s.check,o,O,c-O)),O=P,(s.flags?I:E(I))!==s.check){e.msg="incorrect data check",s.mode=R;break}I=0,S=0}s.mode=28;case 28:if(s.wrap&&s.flags){for(;S<32;){if(0===h)break e;h--,I+=a[l++]<<S,S+=8}if(I!==(4294967295&s.total)){e.msg="incorrect length check",s.mode=R;break}I=0,S=0}s.mode=29;case 29:q=y;break e;case R:q=b;break e;case 31:return w;default:return g}return e.next_out=c,e.avail_out=P,e.next_in=l,e.avail_in=h,s.hold=I,s.bits=S,(s.wsize||O!==e.avail_out&&s.mode<R&&(s.mode<27||n!==d))&&B(e,e.output,e.next_out,O-e.avail_out),C-=e.avail_in,O-=e.avail_out,e.total_in+=C,e.total_out+=O,s.total+=O,s.wrap&&O&&(e.adler=s.check=s.flags?r(s.check,o,O,e.next_out-O):t(s.check,o,O,e.next_out-O)),e.data_type=s.bits+(s.last?64:0)+(s.mode===x?128:0)+(20===s.mode||15===s.mode?256:0),(0===C&&0===O||n===d)&&q===p&&(q=_),q},K=e=>{if(!e||!e.state)return g;let t=e.state;return t.window&&(t.window=null),e.state=null,p},L=(e,t)=>{if(!e||!e.state)return g;const n=e.state;return 0==(2&n.wrap)?g:(n.head=t,t.done=!1,p)},$=(e,n)=>{const r=n.length;let i,s,a;return e&&e.state?(i=e.state,0!==i.wrap&&11!==i.mode?g:11===i.mode&&(s=1,s=t(s,n,r,0),s!==i.check)?b:(a=B(e,n,r,r),a?(i.mode=31,w):(i.havedict=1,p))):g};const U=(e,t)=>Object.prototype.hasOwnProperty.call(e,t);var q=function(e){const t=Array.prototype.slice.call(arguments,1);for(;t.length;){const n=t.shift();if(n){if("object"!=typeof n)throw new TypeError(n+"must be non-object");for(const t in n)U(n,t)&&(e[t]=n[t])}}return e},z=e=>{let t=0;for(let n=0,r=e.length;n<r;n++)t+=e[n].length;const n=new Uint8Array(t);for(let t=0,r=0,i=e.length;t<i;t++){let i=e[t];n.set(i,r),r+=i.length}return n};let Z=!0;try{String.fromCharCode.apply(null,new Uint8Array(1))}catch(e){Z=!1}const W=new Uint8Array(256);for(let e=0;e<256;e++)W[e]=e>=252?6:e>=248?5:e>=240?4:e>=224?3:e>=192?2:1;W[254]=W[254]=1;var G=e=>{if("function"==typeof TextEncoder&&TextEncoder.prototype.encode)return(new TextEncoder).encode(e);let t,n,r,i,s,a=e.length,o=0;for(i=0;i<a;i++)n=e.charCodeAt(i),55296==(64512&n)&&i+1<a&&(r=e.charCodeAt(i+1),56320==(64512&r)&&(n=65536+(n-55296<<10)+(r-56320),i++)),o+=n<128?1:n<2048?2:n<65536?3:4;for(t=new Uint8Array(o),s=0,i=0;s<o;i++)n=e.charCodeAt(i),55296==(64512&n)&&i+1<a&&(r=e.charCodeAt(i+1),56320==(64512&r)&&(n=65536+(n-55296<<10)+(r-56320),i++)),n<128?t[s++]=n:n<2048?(t[s++]=192|n>>>6,t[s++]=128|63&n):n<65536?(t[s++]=224|n>>>12,t[s++]=128|n>>>6&63,t[s++]=128|63&n):(t[s++]=240|n>>>18,t[s++]=128|n>>>12&63,t[s++]=128|n>>>6&63,t[s++]=128|63&n);return t},V=(e,t)=>{const n=t||e.length;if("function"==typeof TextDecoder&&TextDecoder.prototype.decode)return(new TextDecoder).decode(e.subarray(0,t));let r,i;const s=new Array(2*n);for(i=0,r=0;r<n;){let t=e[r++];if(t<128){s[i++]=t;continue}let a=W[t];if(a>4)s[i++]=65533,r+=a-1;else{for(t&=2===a?31:3===a?15:7;a>1&&r<n;)t=t<<6|63&e[r++],a--;a>1?s[i++]=65533:t<65536?s[i++]=t:(t-=65536,s[i++]=55296|t>>10&1023,s[i++]=56320|1023&t)}}return((e,t)=>{if(t<65534&&e.subarray&&Z)return String.fromCharCode.apply(null,e.length===t?e:e.subarray(0,t));let n="";for(let r=0;r<t;r++)n+=String.fromCharCode(e[r]);return n})(s,i)},H=(e,t)=>{(t=t||e.length)>e.length&&(t=e.length);let n=t-1;for(;n>=0&&128==(192&e[n]);)n--;return n<0||0===n?t:n+W[e[n]]>t?n:t},X={2:"need dictionary",1:"stream end",0:"","-1":"file error","-2":"stream error","-3":"data error","-4":"insufficient memory","-5":"buffer error","-6":"incompatible version"};var Y=function(){this.input=null,this.next_in=0,this.avail_in=0,this.total_in=0,this.output=null,this.next_out=0,this.avail_out=0,this.total_out=0,this.msg="",this.state=null,this.data_type=2,this.adler=0};var J=function(){this.text=0,this.time=0,this.xflags=0,this.os=0,this.extra=null,this.extra_len=0,this.name="",this.comment="",this.hcrc=0,this.done=!1};const Q=Object.prototype.toString,{Z_NO_FLUSH:ee,Z_FINISH:te,Z_OK:ne,Z_STREAM_END:re,Z_NEED_DICT:ie,Z_STREAM_ERROR:se,Z_DATA_ERROR:ae,Z_MEM_ERROR:oe}=h;function le(e){this.options=q({chunkSize:65536,windowBits:15,to:""},e||{});const t=this.options;t.raw&&t.windowBits>=0&&t.windowBits<16&&(t.windowBits=-t.windowBits,0===t.windowBits&&(t.windowBits=-15)),!(t.windowBits>=0&&t.windowBits<16)||e&&e.windowBits||(t.windowBits+=32),t.windowBits>15&&t.windowBits<48&&0==(15&t.windowBits)&&(t.windowBits|=15),this.err=0,this.msg="",this.ended=!1,this.chunks=[],this.strm=new Y,this.strm.avail_out=0;let n=F(this.strm,t.windowBits);if(n!==ne)throw new Error(X[n]);if(this.header=new J,L(this.strm,this.header),t.dictionary&&("string"==typeof t.dictionary?t.dictionary=G(t.dictionary):"[object ArrayBuffer]"===Q.call(t.dictionary)&&(t.dictionary=new Uint8Array(t.dictionary)),t.raw&&(n=$(this.strm,t.dictionary),n!==ne)))throw new Error(X[n])}function ce(e,t){const n=new le(t);if(n.push(e),n.err)throw n.msg||X[n.err];return n.result}le.prototype.push=function(e,t){const n=this.strm,r=this.options.chunkSize,i=this.options.dictionary;let s,a,o;if(this.ended)return!1;for(a=t===~~t?t:!0===t?te:ee,"[object ArrayBuffer]"===Q.call(e)?n.input=new Uint8Array(e):n.input=e,n.next_in=0,n.avail_in=n.input.length;;){for(0===n.avail_out&&(n.output=new Uint8Array(r),n.next_out=0,n.avail_out=r),s=N(n,a),s===ie&&i&&(s=$(n,i),s===ne?s=N(n,a):s===ae&&(s=ie));n.avail_in>0&&s===re&&n.state.wrap>0&&0!==e[n.next_in];)M(n),s=N(n,a);switch(s){case se:case ae:case ie:case oe:return this.onEnd(s),this.ended=!0,!1}if(o=n.avail_out,n.next_out&&(0===n.avail_out||s===re))if("string"===this.options.to){let e=H(n.output,n.next_out),t=n.next_out-e,i=V(n.output,e);n.next_out=t,n.avail_out=r-t,t&&n.output.set(n.output.subarray(e,e+t),0),this.onData(i)}else this.onData(n.output.length===n.next_out?n.output:n.output.subarray(0,n.next_out));if(s!==ne||0!==o){if(s===re)return s=K(this.strm),this.onEnd(s),this.ended=!0,!0;if(0===n.avail_in)break}}return!0},le.prototype.onData=function(e){this.chunks.push(e)},le.prototype.onEnd=function(e){e===ne&&("string"===this.options.to?this.result=this.chunks.join(""):this.result=z(this.chunks)),this.chunks=[],this.err=e,this.msg=this.strm.msg};var ue=le,he=ce,de=function(e,t){return(t=t||{}).raw=!0,ce(e,t)},fe=ce,me=h,pe={Inflate:ue,inflate:he,inflateRaw:de,ungzip:fe,constants:me};e.Inflate=ue,e.constants=me,e.default=pe,e.inflate=he,e.inflateRaw=de,e.ungzip=fe,Object.defineProperty(e,"__esModule",{value:!0})}(t)}},t={};function n(r){var i=t[r];if(void 0!==i)return i.exports;var s=t[r]={exports:{}};return e[r].call(s.exports,s,s.exports,n),s.exports}n.d=(e,t)=>{for(var r in t)n.o(t,r)&&!n.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),n.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})};var r={};return(()=>{"use strict";n.r(r),n.d(r,{default:()=>zr});const e="undefined"!=typeof globalThis?globalThis:"undefined"!=typeof self?self:"undefined"!=typeof window?window:global,t=Object.keys,i=Array.isArray;function s(e,n){return"object"!=typeof n||t(n).forEach((function(t){e[t]=n[t]})),e}"undefined"==typeof Promise||e.Promise||(e.Promise=Promise);const a=Object.getPrototypeOf,o={}.hasOwnProperty;function l(e,t){return o.call(e,t)}function c(e,n){"function"==typeof n&&(n=n(a(e))),("undefined"==typeof Reflect?t:Reflect.ownKeys)(n).forEach((t=>{h(e,t,n[t])}))}const u=Object.defineProperty;function h(e,t,n,r){u(e,t,s(n&&l(n,"get")&&"function"==typeof n.get?{get:n.get,set:n.set,configurable:!0}:{value:n,configurable:!0,writable:!0},r))}function d(e){return{from:function(t){return e.prototype=Object.create(t.prototype),h(e.prototype,"constructor",e),{extend:c.bind(null,e.prototype)}}}}const f=Object.getOwnPropertyDescriptor;function m(e,t){let n;return f(e,t)||(n=a(e))&&m(n,t)}const p=[].slice;function y(e,t,n){return p.call(e,t,n)}function v(e,t){return t(e)}function g(e){if(!e)throw new Error("Assertion Failed")}function b(t){e.setImmediate?setImmediate(t):setTimeout(t,0)}function w(e,t){return e.reduce(((e,n,r)=>{var i=t(n,r);return i&&(e[i[0]]=i[1]),e}),{})}function _(e,t){if(l(e,t))return e[t];if(!t)return e;if("string"!=typeof t){for(var n=[],r=0,i=t.length;r<i;++r){var s=_(e,t[r]);n.push(s)}return n}var a=t.indexOf(".");if(-1!==a){var o=e[t.substr(0,a)];return void 0===o?void 0:_(o,t.substr(a+1))}}function k(e,t,n){if(e&&void 0!==t&&(!("isFrozen"in Object)||!Object.isFrozen(e)))if("string"!=typeof t&&"length"in t){g("string"!=typeof n&&"length"in n);for(var r=0,s=t.length;r<s;++r)k(e,t[r],n[r])}else{var a=t.indexOf(".");if(-1!==a){var o=t.substr(0,a),l=t.substr(a+1);if(""===l)void 0===n?i(e)&&!isNaN(parseInt(o))?e.splice(o,1):delete e[o]:e[o]=n;else{var c=e[o];c||(c=e[o]={}),k(c,l,n)}}else void 0===n?i(e)&&!isNaN(parseInt(t))?e.splice(t,1):delete e[t]:e[t]=n}}function x(e){var t={};for(var n in e)l(e,n)&&(t[n]=e[n]);return t}const R=[].concat;function E(e){return R.apply([],e)}const P="Boolean,String,Date,RegExp,Blob,File,FileList,FileSystemFileHandle,ArrayBuffer,DataView,Uint8ClampedArray,ImageBitmap,ImageData,Map,Set,CryptoKey".split(",").concat(E([8,16,32,64].map((e=>["Int","Uint","Float"].map((t=>t+e+"Array")))))).filter((t=>e[t])),I=P.map((t=>e[t]));w(P,(e=>[e,!0]));let S=null;function C(e){S="undefined"!=typeof WeakMap&&new WeakMap;const t=O(e);return S=null,t}function O(e){if(!e||"object"!=typeof e)return e;let t=S&&S.get(e);if(t)return t;if(i(e)){t=[],S&&S.set(e,t);for(var n=0,r=e.length;n<r;++n)t.push(O(e[n]))}else if(I.indexOf(e.constructor)>=0)t=e;else{const n=a(e);for(var s in t=n===Object.prototype?{}:Object.create(n),S&&S.set(e,t),e)l(e,s)&&(t[s]=O(e[s]))}return t}const{toString:A}={};function D(e){return A.call(e).slice(8,-1)}const T="undefined"!=typeof Symbol?Symbol.iterator:"@@iterator",j="symbol"==typeof T?function(e){var t;return null!=e&&(t=e[T])&&t.apply(e)}:function(){return null},B={};function M(e){var t,n,r,s;if(1===arguments.length){if(i(e))return e.slice();if(this===B&&"string"==typeof e)return[e];if(s=j(e)){for(n=[];!(r=s.next()).done;)n.push(r.value);return n}if(null==e)return[e];if("number"==typeof(t=e.length)){for(n=new Array(t);t--;)n[t]=e[t];return n}return[e]}for(t=arguments.length,n=new Array(t);t--;)n[t]=arguments[t];return n}const F="undefined"!=typeof Symbol?e=>"AsyncFunction"===e[Symbol.toStringTag]:()=>!1;var N="undefined"!=typeof location&&/^(http|https):\/\/(localhost|127\.0\.0\.1)/.test(location.href);function K(e,t){N=e,L=t}var L=()=>!0;const $=!new Error("").stack;function U(){if($)try{throw U.arguments,new Error}catch(e){return e}return new Error}function q(e,t){var n=e.stack;return n?(t=t||0,0===n.indexOf(e.name)&&(t+=(e.name+e.message).split("\n").length),n.split("\n").slice(t).filter(L).map((e=>"\n"+e)).join("")):""}var z=["Unknown","Constraint","Data","TransactionInactive","ReadOnly","Version","NotFound","InvalidState","InvalidAccess","Abort","Timeout","QuotaExceeded","Syntax","DataClone"],Z=["Modify","Bulk","OpenFailed","VersionChange","Schema","Upgrade","InvalidTable","MissingAPI","NoSuchDatabase","InvalidArgument","SubTransaction","Unsupported","Internal","DatabaseClosed","PrematureCommit","ForeignAwait"].concat(z),W={VersionChanged:"Database version changed by other database connection",DatabaseClosed:"Database has been closed",Abort:"Transaction aborted",TransactionInactive:"Transaction has already completed or failed",MissingAPI:"IndexedDB API missing. Please visit https://tinyurl.com/y2uuvskb"};function G(e,t){this._e=U(),this.name=e,this.message=t}function V(e,t){return e+". Errors: "+Object.keys(t).map((e=>t[e].toString())).filter(((e,t,n)=>n.indexOf(e)===t)).join("\n")}function H(e,t,n,r){this._e=U(),this.failures=t,this.failedKeys=r,this.successCount=n,this.message=V(e,t)}function X(e,t){this._e=U(),this.name="BulkError",this.failures=Object.keys(t).map((e=>t[e])),this.failuresByPos=t,this.message=V(e,t)}d(G).from(Error).extend({stack:{get:function(){return this._stack||(this._stack=this.name+": "+this.message+q(this._e,2))}},toString:function(){return this.name+": "+this.message}}),d(H).from(G),d(X).from(G);var Y=Z.reduce(((e,t)=>(e[t]=t+"Error",e)),{});const J=G;var Q=Z.reduce(((e,t)=>{var n=t+"Error";function r(e,r){this._e=U(),this.name=n,e?"string"==typeof e?(this.message=`${e}${r?"\n "+r:""}`,this.inner=r||null):"object"==typeof e&&(this.message=`${e.name} ${e.message}`,this.inner=e):(this.message=W[t]||n,this.inner=null)}return d(r).from(J),e[t]=r,e}),{});Q.Syntax=SyntaxError,Q.Type=TypeError,Q.Range=RangeError;var ee=z.reduce(((e,t)=>(e[t+"Error"]=Q[t],e)),{}),te=Z.reduce(((e,t)=>(-1===["Syntax","Type","Range"].indexOf(t)&&(e[t+"Error"]=Q[t]),e)),{});function ne(){}function re(e){return e}function ie(e,t){return null==e||e===re?t:function(n){return t(e(n))}}function se(e,t){return function(){e.apply(this,arguments),t.apply(this,arguments)}}function ae(e,t){return e===ne?t:function(){var n=e.apply(this,arguments);void 0!==n&&(arguments[0]=n);var r=this.onsuccess,i=this.onerror;this.onsuccess=null,this.onerror=null;var s=t.apply(this,arguments);return r&&(this.onsuccess=this.onsuccess?se(r,this.onsuccess):r),i&&(this.onerror=this.onerror?se(i,this.onerror):i),void 0!==s?s:n}}function oe(e,t){return e===ne?t:function(){e.apply(this,arguments);var n=this.onsuccess,r=this.onerror;this.onsuccess=this.onerror=null,t.apply(this,arguments),n&&(this.onsuccess=this.onsuccess?se(n,this.onsuccess):n),r&&(this.onerror=this.onerror?se(r,this.onerror):r)}}function le(e,t){return e===ne?t:function(n){var r=e.apply(this,arguments);s(n,r);var i=this.onsuccess,a=this.onerror;this.onsuccess=null,this.onerror=null;var o=t.apply(this,arguments);return i&&(this.onsuccess=this.onsuccess?se(i,this.onsuccess):i),a&&(this.onerror=this.onerror?se(a,this.onerror):a),void 0===r?void 0===o?void 0:o:s(r,o)}}function ce(e,t){return e===ne?t:function(){return!1!==t.apply(this,arguments)&&e.apply(this,arguments)}}function ue(e,t){return e===ne?t:function(){var n=e.apply(this,arguments);if(n&&"function"==typeof n.then){for(var r=this,i=arguments.length,s=new Array(i);i--;)s[i]=arguments[i];return n.then((function(){return t.apply(r,s)}))}return t.apply(this,arguments)}}te.ModifyError=H,te.DexieError=G,te.BulkError=X;var he={};const[de,fe,me]="undefined"==typeof Promise?[]:(()=>{let e=Promise.resolve();if("undefined"==typeof crypto||!crypto.subtle)return[e,a(e),e];const t=crypto.subtle.digest("SHA-512",new Uint8Array([0]));return[t,a(t),e]})(),pe=fe&&fe.then,ye=de&&de.constructor,ve=!!me;var ge=!1,be=me?()=>{me.then(Ue)}:e.setImmediate?setImmediate.bind(null,Ue):e.MutationObserver?()=>{var e=document.createElement("div");new MutationObserver((()=>{Ue(),e=null})).observe(e,{attributes:!0}),e.setAttribute("i","1")}:()=>{setTimeout(Ue,0)},we=function(e,t){Ce.push([e,t]),ke&&(be(),ke=!1)},_e=!0,ke=!0,xe=[],Re=[],Ee=null,Pe=re,Ie={id:"global",global:!0,ref:0,unhandleds:[],onunhandled:dt,pgp:!1,env:{},finalize:function(){this.unhandleds.forEach((e=>{try{dt(e[0],e[1])}catch(e){}}))}},Se=Ie,Ce=[],Oe=0,Ae=[];function De(e){if("object"!=typeof this)throw new TypeError("Promises must be constructed via new");this._listeners=[],this.onuncatched=ne,this._lib=!1;var t=this._PSD=Se;if(N&&(this._stackHolder=U(),this._prev=null,this._numPrev=0),"function"!=typeof e){if(e!==he)throw new TypeError("Not a function");return this._state=arguments[1],this._value=arguments[2],void(!1===this._state&&Me(this,this._value))}this._state=null,this._value=null,++t.ref,Be(this,e)}const Te={get:function(){var e=Se,t=Je;function n(n,r){var i=!e.global&&(e!==Se||t!==Je);const s=i&&!nt();var a=new De(((t,a)=>{Ne(this,new je(ut(n,e,i,s),ut(r,e,i,s),t,a,e))}));return N&&$e(a,this),a}return n.prototype=he,n},set:function(e){h(this,"then",e&&e.prototype===he?Te:{get:function(){return e},set:Te.set})}};function je(e,t,n,r,i){this.onFulfilled="function"==typeof e?e:null,this.onRejected="function"==typeof t?t:null,this.resolve=n,this.reject=r,this.psd=i}function Be(e,t){try{t((t=>{if(null===e._state){if(t===e)throw new TypeError("A promise cannot be resolved with itself.");var n=e._lib&&qe();t&&"function"==typeof t.then?Be(e,((e,n)=>{t instanceof De?t._then(e,n):t.then(e,n)})):(e._state=!0,e._value=t,Fe(e)),n&&ze()}}),Me.bind(null,e))}catch(t){Me(e,t)}}function Me(e,t){if(Re.push(t),null===e._state){var n=e._lib&&qe();t=Pe(t),e._state=!1,e._value=t,N&&null!==t&&"object"==typeof t&&!t._promise&&function(e,t,n){try{e.apply(null,void 0)}catch(e){}}((()=>{var n=m(t,"stack");t._promise=e,h(t,"stack",{get:()=>ge?n&&(n.get?n.get.apply(t):n.value):e.stack})})),function(e){xe.some((t=>t._value===e._value))||xe.push(e)}(e),Fe(e),n&&ze()}}function Fe(e){var t=e._listeners;e._listeners=[];for(var n=0,r=t.length;n<r;++n)Ne(e,t[n]);var i=e._PSD;--i.ref||i.finalize(),0===Oe&&(++Oe,we((()=>{0==--Oe&&Ze()}),[]))}function Ne(e,t){if(null!==e._state){var n=e._state?t.onFulfilled:t.onRejected;if(null===n)return(e._state?t.resolve:t.reject)(e._value);++t.psd.ref,++Oe,we(Ke,[n,e,t])}else e._listeners.push(t)}function Ke(e,t,n){try{Ee=t;var r,i=t._value;t._state?r=e(i):(Re.length&&(Re=[]),r=e(i),-1===Re.indexOf(i)&&function(e){for(var t=xe.length;t;)if(xe[--t]._value===e._value)return void xe.splice(t,1)}(t)),n.resolve(r)}catch(e){n.reject(e)}finally{Ee=null,0==--Oe&&Ze(),--n.psd.ref||n.psd.finalize()}}function Le(e,t,n){if(t.length===n)return t;var r="";if(!1===e._state){var i,s,a=e._value;null!=a?(i=a.name||"Error",s=a.message||a,r=q(a,0)):(i=a,s=""),t.push(i+(s?": "+s:"")+r)}return N&&((r=q(e._stackHolder,2))&&-1===t.indexOf(r)&&t.push(r),e._prev&&Le(e._prev,t,n)),t}function $e(e,t){var n=t?t._numPrev+1:0;n<100&&(e._prev=t,e._numPrev=n)}function Ue(){qe()&&ze()}function qe(){var e=_e;return _e=!1,ke=!1,e}function ze(){var e,t,n;do{for(;Ce.length>0;)for(e=Ce,Ce=[],n=e.length,t=0;t<n;++t){var r=e[t];r[0].apply(null,r[1])}}while(Ce.length>0);_e=!0,ke=!0}function Ze(){var e=xe;xe=[],e.forEach((e=>{e._PSD.onunhandled.call(null,e._value,e)}));for(var t=Ae.slice(0),n=t.length;n;)t[--n]()}function We(e){return new De(he,!1,e)}function Ge(e,t){var n=Se;return function(){var r=qe(),i=Se;try{return at(n,!0),e.apply(this,arguments)}catch(e){t&&t(e)}finally{at(i,!1),r&&ze()}}}c(De.prototype,{then:Te,_then:function(e,t){Ne(this,new je(null,null,e,t,Se))},catch:function(e){if(1===arguments.length)return this.then(null,e);var t=arguments[0],n=arguments[1];return"function"==typeof t?this.then(null,(e=>e instanceof t?n(e):We(e))):this.then(null,(e=>e&&e.name===t?n(e):We(e)))},finally:function(e){return this.then((t=>(e(),t)),(t=>(e(),We(t))))},stack:{get:function(){if(this._stack)return this._stack;try{ge=!0;var e=Le(this,[],20).join("\nFrom previous: ");return null!==this._state&&(this._stack=e),e}finally{ge=!1}}},timeout:function(e,t){return e<1/0?new De(((n,r)=>{var i=setTimeout((()=>r(new Q.Timeout(t))),e);this.then(n,r).finally(clearTimeout.bind(null,i))})):this}}),"undefined"!=typeof Symbol&&Symbol.toStringTag&&h(De.prototype,Symbol.toStringTag,"Dexie.Promise"),Ie.env=ot(),c(De,{all:function(){var e=M.apply(null,arguments).map(rt);return new De((function(t,n){0===e.length&&t([]);var r=e.length;e.forEach(((i,s)=>De.resolve(i).then((n=>{e[s]=n,--r||t(e)}),n)))}))},resolve:e=>{if(e instanceof De)return e;if(e&&"function"==typeof e.then)return new De(((t,n)=>{e.then(t,n)}));var t=new De(he,!0,e);return $e(t,Ee),t},reject:We,race:function(){var e=M.apply(null,arguments).map(rt);return new De(((t,n)=>{e.map((e=>De.resolve(e).then(t,n)))}))},PSD:{get:()=>Se,set:e=>Se=e},totalEchoes:{get:()=>Je},newPSD:et,usePSD:lt,scheduler:{get:()=>we,set:e=>{we=e}},rejectionMapper:{get:()=>Pe,set:e=>{Pe=e}},follow:(e,t)=>new De(((n,r)=>et(((t,n)=>{var r=Se;r.unhandleds=[],r.onunhandled=n,r.finalize=se((function(){!function(e){Ae.push((function t(){e(),Ae.splice(Ae.indexOf(t),1)})),++Oe,we((()=>{0==--Oe&&Ze()}),[])}((()=>{0===this.unhandleds.length?t():n(this.unhandleds[0])}))}),r.finalize),e()}),t,n,r)))}),ye&&(ye.allSettled&&h(De,"allSettled",(function(){const e=M.apply(null,arguments).map(rt);return new De((t=>{0===e.length&&t([]);let n=e.length;const r=new Array(n);e.forEach(((e,i)=>De.resolve(e).then((e=>r[i]={status:"fulfilled",value:e}),(e=>r[i]={status:"rejected",reason:e})).then((()=>--n||t(r)))))}))})),ye.any&&"undefined"!=typeof AggregateError&&h(De,"any",(function(){const e=M.apply(null,arguments).map(rt);return new De(((t,n)=>{0===e.length&&n(new AggregateError([]));let r=e.length;const i=new Array(r);e.forEach(((e,s)=>De.resolve(e).then((e=>t(e)),(e=>{i[s]=e,--r||n(new AggregateError(i))}))))}))})));const Ve={awaits:0,echoes:0,id:0};var He=0,Xe=[],Ye=0,Je=0,Qe=0;function et(e,t,n,r){var i=Se,a=Object.create(i);a.parent=i,a.ref=0,a.global=!1,a.id=++Qe;var o=Ie.env;a.env=ve?{Promise:De,PromiseProp:{value:De,configurable:!0,writable:!0},all:De.all,race:De.race,allSettled:De.allSettled,any:De.any,resolve:De.resolve,reject:De.reject,nthen:ht(o.nthen,a),gthen:ht(o.gthen,a)}:{},t&&s(a,t),++i.ref,a.finalize=function(){--this.parent.ref||this.parent.finalize()};var l=lt(a,e,n,r);return 0===a.ref&&a.finalize(),l}function tt(){return Ve.id||(Ve.id=++He),++Ve.awaits,Ve.echoes+=100,Ve.id}function nt(){return!!Ve.awaits&&(0==--Ve.awaits&&(Ve.id=0),Ve.echoes=100*Ve.awaits,!0)}function rt(e){return Ve.echoes&&e&&e.constructor===ye?(tt(),e.then((e=>(nt(),e)),(e=>(nt(),ft(e))))):e}function it(e){++Je,Ve.echoes&&0!=--Ve.echoes||(Ve.echoes=Ve.id=0),Xe.push(Se),at(e,!0)}function st(){var e=Xe[Xe.length-1];Xe.pop(),at(e,!1)}function at(t,n){var r=Se;if((n?!Ve.echoes||Ye++&&t===Se:!Ye||--Ye&&t===Se)||ct(n?it.bind(null,t):st),t!==Se&&(Se=t,r===Ie&&(Ie.env=ot()),ve)){var i=Ie.env.Promise,s=t.env;fe.then=s.nthen,i.prototype.then=s.gthen,(r.global||t.global)&&(Object.defineProperty(e,"Promise",s.PromiseProp),i.all=s.all,i.race=s.race,i.resolve=s.resolve,i.reject=s.reject,s.allSettled&&(i.allSettled=s.allSettled),s.any&&(i.any=s.any))}}function ot(){var t=e.Promise;return ve?{Promise:t,PromiseProp:Object.getOwnPropertyDescriptor(e,"Promise"),all:t.all,race:t.race,allSettled:t.allSettled,any:t.any,resolve:t.resolve,reject:t.reject,nthen:fe.then,gthen:t.prototype.then}:{}}function lt(e,t,n,r,i){var s=Se;try{return at(e,!0),t(n,r,i)}finally{at(s,!1)}}function ct(e){pe.call(de,e)}function ut(e,t,n,r){return"function"!=typeof e?e:function(){var i=Se;n&&tt(),at(t,!0);try{return e.apply(this,arguments)}finally{at(i,!1),r&&ct(nt)}}}function ht(e,t){return function(n,r){return e.call(this,ut(n,t),ut(r,t))}}function dt(t,n){var r;try{r=n.onuncatched(t)}catch(e){}if(!1!==r)try{var i,a={promise:n,reason:t};if(e.document&&document.createEvent?((i=document.createEvent("Event")).initEvent("unhandledrejection",!0,!0),s(i,a)):e.CustomEvent&&s(i=new CustomEvent("unhandledrejection",{detail:a}),a),i&&e.dispatchEvent&&(dispatchEvent(i),!e.PromiseRejectionEvent&&e.onunhandledrejection))try{e.onunhandledrejection(i)}catch(e){}N&&i&&!i.defaultPrevented&&console.warn(`Unhandled rejection: ${t.stack||t}`)}catch(e){}}-1===(""+pe).indexOf("[native code]")&&(tt=nt=ne);var ft=De.reject;function mt(e,t,n,r){if(e.idbdb&&(e._state.openComplete||Se.letThrough||e._vip)){var i=e._createTransaction(t,n,e._dbSchema);try{i.create(),e._state.PR1398_maxLoop=3}catch(i){return i.name===Y.InvalidState&&e.isOpen()&&--e._state.PR1398_maxLoop>0?(console.warn("Dexie: Need to reopen db"),e._close(),e.open().then((()=>mt(e,t,n,r)))):ft(i)}return i._promise(t,((e,t)=>et((()=>(Se.trans=i,r(e,t,i)))))).then((e=>i._completion.then((()=>e))))}if(e._state.openComplete)return ft(new Q.DatabaseClosed(e._state.dbOpenError));if(!e._state.isBeingOpened){if(!e._options.autoOpen)return ft(new Q.DatabaseClosed);e.open().catch(ne)}return e._state.dbReadyPromise.then((()=>mt(e,t,n,r)))}const pt=String.fromCharCode(65535),yt="Invalid key provided. Keys must be of type string, number, Date or Array<string | number | Date>.",vt=[],gt="undefined"!=typeof navigator&&/(MSIE|Trident|Edge)/.test(navigator.userAgent),bt=gt,wt=gt,_t=e=>!/(dexie\.js|dexie\.min\.js)/.test(e);function kt(e,t){return e?t?function(){return e.apply(this,arguments)&&t.apply(this,arguments)}:e:t}const xt={type:3,lower:-1/0,lowerOpen:!1,upper:[[]],upperOpen:!1};function Rt(e){return"string"!=typeof e||/\./.test(e)?e=>e:t=>(void 0===t[e]&&e in t&&delete(t=C(t))[e],t)}class Et{_trans(e,t,n){const r=this._tx||Se.trans,i=this.name;function s(e,n,r){if(!r.schema[i])throw new Q.NotFound("Table "+i+" not part of transaction");return t(r.idbtrans,r)}const a=qe();try{return r&&r.db===this.db?r===Se.trans?r._promise(e,s,n):et((()=>r._promise(e,s,n)),{trans:r,transless:Se.transless||Se}):mt(this.db,e,[this.name],s)}finally{a&&ze()}}get(e,t){return e&&e.constructor===Object?this.where(e).first(t):this._trans("readonly",(t=>this.core.get({trans:t,key:e}).then((e=>this.hook.reading.fire(e))))).then(t)}where(e){if("string"==typeof e)return new this.db.WhereClause(this,e);if(i(e))return new this.db.WhereClause(this,`[${e.join("+")}]`);const n=t(e);if(1===n.length)return this.where(n[0]).equals(e[n[0]]);const r=this.schema.indexes.concat(this.schema.primKey).filter((e=>e.compound&&n.every((t=>e.keyPath.indexOf(t)>=0))&&e.keyPath.every((e=>n.indexOf(e)>=0))))[0];if(r&&this.db._maxKey!==pt)return this.where(r.name).equals(r.keyPath.map((t=>e[t])));!r&&N&&console.warn(`The query ${JSON.stringify(e)} on ${this.name} would benefit of a compound index [${n.join("+")}]`);const{idxByName:s}=this.schema,a=this.db._deps.indexedDB;function o(e,t){try{return 0===a.cmp(e,t)}catch(e){return!1}}const[l,c]=n.reduce((([t,n],r)=>{const a=s[r],l=e[r];return[t||a,t||!a?kt(n,a&&a.multi?e=>{const t=_(e,r);return i(t)&&t.some((e=>o(l,e)))}:e=>o(l,_(e,r))):n]}),[null,null]);return l?this.where(l.name).equals(e[l.keyPath]).filter(c):r?this.filter(c):this.where(n).equals("")}filter(e){return this.toCollection().and(e)}count(e){return this.toCollection().count(e)}offset(e){return this.toCollection().offset(e)}limit(e){return this.toCollection().limit(e)}each(e){return this.toCollection().each(e)}toArray(e){return this.toCollection().toArray(e)}toCollection(){return new this.db.Collection(new this.db.WhereClause(this))}orderBy(e){return new this.db.Collection(new this.db.WhereClause(this,i(e)?`[${e.join("+")}]`:e))}reverse(){return this.toCollection().reverse()}mapToClass(e){this.schema.mappedClass=e;const t=t=>{if(!t)return t;const n=Object.create(e.prototype);for(var r in t)if(l(t,r))try{n[r]=t[r]}catch(e){}return n};return this.schema.readHook&&this.hook.reading.unsubscribe(this.schema.readHook),this.schema.readHook=t,this.hook("reading",t),e}defineClass(){return this.mapToClass((function(e){s(this,e)}))}add(e,t){const{auto:n,keyPath:r}=this.schema.primKey;let i=e;return r&&n&&(i=Rt(r)(e)),this._trans("readwrite",(e=>this.core.mutate({trans:e,type:"add",keys:null!=t?[t]:null,values:[i]}))).then((e=>e.numFailures?De.reject(e.failures[0]):e.lastResult)).then((t=>{if(r)try{k(e,r,t)}catch(e){}return t}))}update(e,n){if("object"!=typeof e||i(e))return this.where(":id").equals(e).modify(n);{const r=_(e,this.schema.primKey.keyPath);if(void 0===r)return ft(new Q.InvalidArgument("Given object does not contain its primary key"));try{"function"!=typeof n?t(n).forEach((t=>{k(e,t,n[t])})):n(e,{value:e,primKey:r})}catch(e){}return this.where(":id").equals(r).modify(n)}}put(e,t){const{auto:n,keyPath:r}=this.schema.primKey;let i=e;return r&&n&&(i=Rt(r)(e)),this._trans("readwrite",(e=>this.core.mutate({trans:e,type:"put",values:[i],keys:null!=t?[t]:null}))).then((e=>e.numFailures?De.reject(e.failures[0]):e.lastResult)).then((t=>{if(r)try{k(e,r,t)}catch(e){}return t}))}delete(e){return this._trans("readwrite",(t=>this.core.mutate({trans:t,type:"delete",keys:[e]}))).then((e=>e.numFailures?De.reject(e.failures[0]):void 0))}clear(){return this._trans("readwrite",(e=>this.core.mutate({trans:e,type:"deleteRange",range:xt}))).then((e=>e.numFailures?De.reject(e.failures[0]):void 0))}bulkGet(e){return this._trans("readonly",(t=>this.core.getMany({keys:e,trans:t}).then((e=>e.map((e=>this.hook.reading.fire(e)))))))}bulkAdd(e,t,n){const r=Array.isArray(t)?t:void 0,i=(n=n||(r?void 0:t))?n.allKeys:void 0;return this._trans("readwrite",(t=>{const{auto:n,keyPath:s}=this.schema.primKey;if(s&&r)throw new Q.InvalidArgument("bulkAdd(): keys argument invalid on tables with inbound keys");if(r&&r.length!==e.length)throw new Q.InvalidArgument("Arguments objects and keys must have the same length");const a=e.length;let o=s&&n?e.map(Rt(s)):e;return this.core.mutate({trans:t,type:"add",keys:r,values:o,wantResults:i}).then((({numFailures:e,results:t,lastResult:n,failures:r})=>{if(0===e)return i?t:n;throw new X(`${this.name}.bulkAdd(): ${e} of ${a} operations failed`,r)}))}))}bulkPut(e,t,n){const r=Array.isArray(t)?t:void 0,i=(n=n||(r?void 0:t))?n.allKeys:void 0;return this._trans("readwrite",(t=>{const{auto:n,keyPath:s}=this.schema.primKey;if(s&&r)throw new Q.InvalidArgument("bulkPut(): keys argument invalid on tables with inbound keys");if(r&&r.length!==e.length)throw new Q.InvalidArgument("Arguments objects and keys must have the same length");const a=e.length;let o=s&&n?e.map(Rt(s)):e;return this.core.mutate({trans:t,type:"put",keys:r,values:o,wantResults:i}).then((({numFailures:e,results:t,lastResult:n,failures:r})=>{if(0===e)return i?t:n;throw new X(`${this.name}.bulkPut(): ${e} of ${a} operations failed`,r)}))}))}bulkDelete(e){const t=e.length;return this._trans("readwrite",(t=>this.core.mutate({trans:t,type:"delete",keys:e}))).then((({numFailures:e,lastResult:n,failures:r})=>{if(0===e)return n;throw new X(`${this.name}.bulkDelete(): ${e} of ${t} operations failed`,r)}))}}function Pt(e){var n={},r=function(t,r){if(r){for(var i=arguments.length,s=new Array(i-1);--i;)s[i-1]=arguments[i];return n[t].subscribe.apply(null,s),e}if("string"==typeof t)return n[t]};r.addEventType=o;for(var s=1,a=arguments.length;s<a;++s)o(arguments[s]);return r;function o(e,t,i){if("object"==typeof e)return l(e);t||(t=ce),i||(i=ne);var s={subscribers:[],fire:i,subscribe:function(e){-1===s.subscribers.indexOf(e)&&(s.subscribers.push(e),s.fire=t(s.fire,e))},unsubscribe:function(e){s.subscribers=s.subscribers.filter((function(t){return t!==e})),s.fire=s.subscribers.reduce(t,i)}};return n[e]=r[e]=s,s}function l(e){t(e).forEach((function(t){var n=e[t];if(i(n))o(t,e[t][0],e[t][1]);else{if("asap"!==n)throw new Q.InvalidArgument("Invalid event config");var r=o(t,re,(function(){for(var e=arguments.length,t=new Array(e);e--;)t[e]=arguments[e];r.subscribers.forEach((function(e){b((function(){e.apply(null,t)}))}))}))}}))}}function It(e,t){return d(t).from({prototype:e}),t}function St(e,t){return!(e.filter||e.algorithm||e.or)&&(t?e.justLimit:!e.replayFilter)}function Ct(e,t){e.filter=kt(e.filter,t)}function Ot(e,t,n){var r=e.replayFilter;e.replayFilter=r?()=>kt(r(),t()):t,e.justLimit=n&&!r}function At(e,t){if(e.isPrimKey)return t.primaryKey;const n=t.getIndexByKeyPath(e.index);if(!n)throw new Q.Schema("KeyPath "+e.index+" on object store "+t.name+" is not indexed");return n}function Dt(e,t,n){const r=At(e,t.schema);return t.openCursor({trans:n,values:!e.keysOnly,reverse:"prev"===e.dir,unique:!!e.unique,query:{index:r,range:e.range}})}function Tt(e,t,n,r){const i=e.replayFilter?kt(e.filter,e.replayFilter()):e.filter;if(e.or){const s={},a=(e,n,r)=>{if(!i||i(n,r,(e=>n.stop(e)),(e=>n.fail(e)))){var a=n.primaryKey,o=""+a;"[object ArrayBuffer]"===o&&(o=""+new Uint8Array(a)),l(s,o)||(s[o]=!0,t(e,n,r))}};return Promise.all([e.or._iterate(a,n),jt(Dt(e,r,n),e.algorithm,a,!e.keysOnly&&e.valueMapper)])}return jt(Dt(e,r,n),kt(e.algorithm,i),t,!e.keysOnly&&e.valueMapper)}function jt(e,t,n,r){var i=Ge(r?(e,t,i)=>n(r(e),t,i):n);return e.then((e=>{if(e)return e.start((()=>{var n=()=>e.continue();t&&!t(e,(e=>n=e),(t=>{e.stop(t),n=ne}),(t=>{e.fail(t),n=ne}))||i(e.value,e,(e=>n=e)),n()}))}))}function Bt(e,t){try{const n=Mt(e),r=Mt(t);if(n!==r)return"Array"===n?1:"Array"===r?-1:"binary"===n?1:"binary"===r?-1:"string"===n?1:"string"===r?-1:"Date"===n?1:"Date"!==r?NaN:-1;switch(n){case"number":case"Date":case"string":return e>t?1:e<t?-1:0;case"binary":return function(e,t){const n=e.length,r=t.length,i=n<r?n:r;for(let n=0;n<i;++n)if(e[n]!==t[n])return e[n]<t[n]?-1:1;return n===r?0:n<r?-1:1}(Ft(e),Ft(t));case"Array":return function(e,t){const n=e.length,r=t.length,i=n<r?n:r;for(let n=0;n<i;++n){const r=Bt(e[n],t[n]);if(0!==r)return r}return n===r?0:n<r?-1:1}(e,t)}}catch(e){}return NaN}function Mt(e){const t=typeof e;if("object"!==t)return t;if(ArrayBuffer.isView(e))return"binary";const n=D(e);return"ArrayBuffer"===n?"binary":n}function Ft(e){return e instanceof Uint8Array?e:ArrayBuffer.isView(e)?new Uint8Array(e.buffer,e.byteOffset,e.byteLength):new Uint8Array(e)}class Nt{_read(e,t){var n=this._ctx;return n.error?n.table._trans(null,ft.bind(null,n.error)):n.table._trans("readonly",e).then(t)}_write(e){var t=this._ctx;return t.error?t.table._trans(null,ft.bind(null,t.error)):t.table._trans("readwrite",e,"locked")}_addAlgorithm(e){var t=this._ctx;t.algorithm=kt(t.algorithm,e)}_iterate(e,t){return Tt(this._ctx,e,t,this._ctx.table.core)}clone(e){var t=Object.create(this.constructor.prototype),n=Object.create(this._ctx);return e&&s(n,e),t._ctx=n,t}raw(){return this._ctx.valueMapper=null,this}each(e){var t=this._ctx;return this._read((n=>Tt(t,e,n,t.table.core)))}count(e){return this._read((e=>{const t=this._ctx,n=t.table.core;if(St(t,!0))return n.count({trans:e,query:{index:At(t,n.schema),range:t.range}}).then((e=>Math.min(e,t.limit)));var r=0;return Tt(t,(()=>(++r,!1)),e,n).then((()=>r))})).then(e)}sortBy(e,t){const n=e.split(".").reverse(),r=n[0],i=n.length-1;function s(e,t){return t?s(e[n[t]],t-1):e[r]}var a="next"===this._ctx.dir?1:-1;function o(e,t){var n=s(e,i),r=s(t,i);return n<r?-a:n>r?a:0}return this.toArray((function(e){return e.sort(o)})).then(t)}toArray(e){return this._read((e=>{var t=this._ctx;if("next"===t.dir&&St(t,!0)&&t.limit>0){const{valueMapper:n}=t,r=At(t,t.table.core.schema);return t.table.core.query({trans:e,limit:t.limit,values:!0,query:{index:r,range:t.range}}).then((({result:e})=>n?e.map(n):e))}{const n=[];return Tt(t,(e=>n.push(e)),e,t.table.core).then((()=>n))}}),e)}offset(e){var t=this._ctx;return e<=0||(t.offset+=e,St(t)?Ot(t,(()=>{var t=e;return(e,n)=>0===t||(1===t?(--t,!1):(n((()=>{e.advance(t),t=0})),!1))})):Ot(t,(()=>{var t=e;return()=>--t<0}))),this}limit(e){return this._ctx.limit=Math.min(this._ctx.limit,e),Ot(this._ctx,(()=>{var t=e;return function(e,n,r){return--t<=0&&n(r),t>=0}}),!0),this}until(e,t){return Ct(this._ctx,(function(n,r,i){return!e(n.value)||(r(i),t)})),this}first(e){return this.limit(1).toArray((function(e){return e[0]})).then(e)}last(e){return this.reverse().first(e)}filter(e){var t,n;return Ct(this._ctx,(function(t){return e(t.value)})),t=this._ctx,n=e,t.isMatch=kt(t.isMatch,n),this}and(e){return this.filter(e)}or(e){return new this.db.WhereClause(this._ctx.table,e,this)}reverse(){return this._ctx.dir="prev"===this._ctx.dir?"next":"prev",this._ondirectionchange&&this._ondirectionchange(this._ctx.dir),this}desc(){return this.reverse()}eachKey(e){var t=this._ctx;return t.keysOnly=!t.isMatch,this.each((function(t,n){e(n.key,n)}))}eachUniqueKey(e){return this._ctx.unique="unique",this.eachKey(e)}eachPrimaryKey(e){var t=this._ctx;return t.keysOnly=!t.isMatch,this.each((function(t,n){e(n.primaryKey,n)}))}keys(e){var t=this._ctx;t.keysOnly=!t.isMatch;var n=[];return this.each((function(e,t){n.push(t.key)})).then((function(){return n})).then(e)}primaryKeys(e){var t=this._ctx;if("next"===t.dir&&St(t,!0)&&t.limit>0)return this._read((e=>{var n=At(t,t.table.core.schema);return t.table.core.query({trans:e,values:!1,limit:t.limit,query:{index:n,range:t.range}})})).then((({result:e})=>e)).then(e);t.keysOnly=!t.isMatch;var n=[];return this.each((function(e,t){n.push(t.primaryKey)})).then((function(){return n})).then(e)}uniqueKeys(e){return this._ctx.unique="unique",this.keys(e)}firstKey(e){return this.limit(1).keys((function(e){return e[0]})).then(e)}lastKey(e){return this.reverse().firstKey(e)}distinct(){var e=this._ctx,t=e.index&&e.table.schema.idxByName[e.index];if(!t||!t.multi)return this;var n={};return Ct(this._ctx,(function(e){var t=e.primaryKey.toString(),r=l(n,t);return n[t]=!0,!r})),this}modify(e){var n=this._ctx;return this._write((r=>{var i;if("function"==typeof e)i=e;else{var s=t(e),a=s.length;i=function(t){for(var n=!1,r=0;r<a;++r){var i=s[r],o=e[i];_(t,i)!==o&&(k(t,i,o),n=!0)}return n}}const o=n.table.core,{outbound:l,extractKey:c}=o.schema.primaryKey,u=this.db._options.modifyChunkSize||200,h=[];let d=0;const f=[],m=(e,n)=>{const{failures:r,numFailures:i}=n;d+=e-i;for(let e of t(r))h.push(r[e])};return this.clone().primaryKeys().then((t=>{const s=a=>{const h=Math.min(u,t.length-a);return o.getMany({trans:r,keys:t.slice(a,a+h),cache:"immutable"}).then((d=>{const f=[],p=[],y=l?[]:null,v=[];for(let e=0;e<h;++e){const n=d[e],r={value:C(n),primKey:t[a+e]};!1!==i.call(r,r.value,r)&&(null==r.value?v.push(t[a+e]):l||0===Bt(c(n),c(r.value))?(p.push(r.value),l&&y.push(t[a+e])):(v.push(t[a+e]),f.push(r.value)))}const g=St(n)&&n.limit===1/0&&("function"!=typeof e||e===Kt)&&{index:n.index,range:n.range};return Promise.resolve(f.length>0&&o.mutate({trans:r,type:"add",values:f}).then((e=>{for(let t in e.failures)v.splice(parseInt(t),1);m(f.length,e)}))).then((()=>(p.length>0||g&&"object"==typeof e)&&o.mutate({trans:r,type:"put",keys:y,values:p,criteria:g,changeSpec:"function"!=typeof e&&e}).then((e=>m(p.length,e))))).then((()=>(v.length>0||g&&e===Kt)&&o.mutate({trans:r,type:"delete",keys:v,criteria:g}).then((e=>m(v.length,e))))).then((()=>t.length>a+h&&s(a+u)))}))};return s(0).then((()=>{if(h.length>0)throw new H("Error modifying one or more objects",h,d,f);return t.length}))}))}))}delete(){var e=this._ctx,t=e.range;return St(e)&&(e.isPrimKey&&!wt||3===t.type)?this._write((n=>{const{primaryKey:r}=e.table.core.schema,i=t;return e.table.core.count({trans:n,query:{index:r,range:i}}).then((t=>e.table.core.mutate({trans:n,type:"deleteRange",range:i}).then((({failures:e,lastResult:n,results:r,numFailures:i})=>{if(i)throw new H("Could not delete some values",Object.keys(e).map((t=>e[t])),t-i);return t-i}))))})):this.modify(Kt)}}const Kt=(e,t)=>t.value=null;function Lt(e,t){return e<t?-1:e===t?0:1}function $t(e,t){return e>t?-1:e===t?0:1}function Ut(e,t,n){var r=e instanceof Vt?new e.Collection(e):e;return r._ctx.error=n?new n(t):new TypeError(t),r}function qt(e){return new e.Collection(e,(()=>Gt(""))).limit(0)}function zt(e,t,n,r,i,s){for(var a=Math.min(e.length,r.length),o=-1,l=0;l<a;++l){var c=t[l];if(c!==r[l])return i(e[l],n[l])<0?e.substr(0,l)+n[l]+n.substr(l+1):i(e[l],r[l])<0?e.substr(0,l)+r[l]+n.substr(l+1):o>=0?e.substr(0,o)+t[o]+n.substr(o+1):null;i(e[l],c)<0&&(o=l)}return a<r.length&&"next"===s?e+n.substr(e.length):a<e.length&&"prev"===s?e.substr(0,n.length):o<0?null:e.substr(0,o)+r[o]+n.substr(o+1)}function Zt(e,t,n,r){var i,s,a,o,l,c,u,h=n.length;if(!n.every((e=>"string"==typeof e)))return Ut(e,"String expected.");function d(e){i=function(e){return"next"===e?e=>e.toUpperCase():e=>e.toLowerCase()}(e),s=function(e){return"next"===e?e=>e.toLowerCase():e=>e.toUpperCase()}(e),a="next"===e?Lt:$t;var t=n.map((function(e){return{lower:s(e),upper:i(e)}})).sort((function(e,t){return a(e.lower,t.lower)}));o=t.map((function(e){return e.upper})),l=t.map((function(e){return e.lower})),c=e,u="next"===e?"":r}d("next");var f=new e.Collection(e,(()=>Wt(o[0],l[h-1]+r)));f._ondirectionchange=function(e){d(e)};var m=0;return f._addAlgorithm((function(e,n,r){var i=e.key;if("string"!=typeof i)return!1;var d=s(i);if(t(d,l,m))return!0;for(var f=null,p=m;p<h;++p){var y=zt(i,d,o[p],l[p],a,c);null===y&&null===f?m=p+1:(null===f||a(f,y)>0)&&(f=y)}return n(null!==f?function(){e.continue(f+u)}:r),!1})),f}function Wt(e,t,n,r){return{type:2,lower:e,upper:t,lowerOpen:n,upperOpen:r}}function Gt(e){return{type:1,lower:e,upper:e}}class Vt{get Collection(){return this._ctx.table.db.Collection}between(e,t,n,r){n=!1!==n,r=!0===r;try{return this._cmp(e,t)>0||0===this._cmp(e,t)&&(n||r)&&(!n||!r)?qt(this):new this.Collection(this,(()=>Wt(e,t,!n,!r)))}catch(e){return Ut(this,yt)}}equals(e){return null==e?Ut(this,yt):new this.Collection(this,(()=>Gt(e)))}above(e){return null==e?Ut(this,yt):new this.Collection(this,(()=>Wt(e,void 0,!0)))}aboveOrEqual(e){return null==e?Ut(this,yt):new this.Collection(this,(()=>Wt(e,void 0,!1)))}below(e){return null==e?Ut(this,yt):new this.Collection(this,(()=>Wt(void 0,e,!1,!0)))}belowOrEqual(e){return null==e?Ut(this,yt):new this.Collection(this,(()=>Wt(void 0,e)))}startsWith(e){return"string"!=typeof e?Ut(this,"String expected."):this.between(e,e+pt,!0,!0)}startsWithIgnoreCase(e){return""===e?this.startsWith(e):Zt(this,((e,t)=>0===e.indexOf(t[0])),[e],pt)}equalsIgnoreCase(e){return Zt(this,((e,t)=>e===t[0]),[e],"")}anyOfIgnoreCase(){var e=M.apply(B,arguments);return 0===e.length?qt(this):Zt(this,((e,t)=>-1!==t.indexOf(e)),e,"")}startsWithAnyOfIgnoreCase(){var e=M.apply(B,arguments);return 0===e.length?qt(this):Zt(this,((e,t)=>t.some((t=>0===e.indexOf(t)))),e,pt)}anyOf(){const e=M.apply(B,arguments);let t=this._cmp;try{e.sort(t)}catch(e){return Ut(this,yt)}if(0===e.length)return qt(this);const n=new this.Collection(this,(()=>Wt(e[0],e[e.length-1])));n._ondirectionchange=n=>{t="next"===n?this._ascending:this._descending,e.sort(t)};let r=0;return n._addAlgorithm(((n,i,s)=>{const a=n.key;for(;t(a,e[r])>0;)if(++r,r===e.length)return i(s),!1;return 0===t(a,e[r])||(i((()=>{n.continue(e[r])})),!1)})),n}notEqual(e){return this.inAnyRange([[-1/0,e],[e,this.db._maxKey]],{includeLowers:!1,includeUppers:!1})}noneOf(){const e=M.apply(B,arguments);if(0===e.length)return new this.Collection(this);try{e.sort(this._ascending)}catch(e){return Ut(this,yt)}const t=e.reduce(((e,t)=>e?e.concat([[e[e.length-1][1],t]]):[[-1/0,t]]),null);return t.push([e[e.length-1],this.db._maxKey]),this.inAnyRange(t,{includeLowers:!1,includeUppers:!1})}inAnyRange(e,t){const n=this._cmp,r=this._ascending,i=this._descending,s=this._min,a=this._max;if(0===e.length)return qt(this);if(!e.every((e=>void 0!==e[0]&&void 0!==e[1]&&r(e[0],e[1])<=0)))return Ut(this,"First argument to inAnyRange() must be an Array of two-value Arrays [lower,upper] where upper must not be lower than lower",Q.InvalidArgument);const o=!t||!1!==t.includeLowers,l=t&&!0===t.includeUppers;let c,u=r;function h(e,t){return u(e[0],t[0])}try{c=e.reduce((function(e,t){let r=0,i=e.length;for(;r<i;++r){const i=e[r];if(n(t[0],i[1])<0&&n(t[1],i[0])>0){i[0]=s(i[0],t[0]),i[1]=a(i[1],t[1]);break}}return r===i&&e.push(t),e}),[]),c.sort(h)}catch(e){return Ut(this,yt)}let d=0;const f=l?e=>r(e,c[d][1])>0:e=>r(e,c[d][1])>=0,m=o?e=>i(e,c[d][0])>0:e=>i(e,c[d][0])>=0;let p=f;const y=new this.Collection(this,(()=>Wt(c[0][0],c[c.length-1][1],!o,!l)));return y._ondirectionchange=e=>{"next"===e?(p=f,u=r):(p=m,u=i),c.sort(h)},y._addAlgorithm(((e,t,n)=>{for(var i=e.key;p(i);)if(++d,d===c.length)return t(n),!1;return!!function(e){return!f(e)&&!m(e)}(i)||(0===this._cmp(i,c[d][1])||0===this._cmp(i,c[d][0])||t((()=>{u===r?e.continue(c[d][0]):e.continue(c[d][1])})),!1)})),y}startsWithAnyOf(){const e=M.apply(B,arguments);return e.every((e=>"string"==typeof e))?0===e.length?qt(this):this.inAnyRange(e.map((e=>[e,e+pt]))):Ut(this,"startsWithAnyOf() only works with strings")}}function Ht(e){return Ge((function(t){return Xt(t),e(t.target.error),!1}))}function Xt(e){e.stopPropagation&&e.stopPropagation(),e.preventDefault&&e.preventDefault()}const Yt=Pt(null,"storagemutated");class Jt{_lock(){return g(!Se.global),++this._reculock,1!==this._reculock||Se.global||(Se.lockOwnerFor=this),this}_unlock(){if(g(!Se.global),0==--this._reculock)for(Se.global||(Se.lockOwnerFor=null);this._blockedFuncs.length>0&&!this._locked();){var e=this._blockedFuncs.shift();try{lt(e[1],e[0])}catch(e){}}return this}_locked(){return this._reculock&&Se.lockOwnerFor!==this}create(e){if(!this.mode)return this;const t=this.db.idbdb,n=this.db._state.dbOpenError;if(g(!this.idbtrans),!e&&!t)switch(n&&n.name){case"DatabaseClosedError":throw new Q.DatabaseClosed(n);case"MissingAPIError":throw new Q.MissingAPI(n.message,n);default:throw new Q.OpenFailed(n)}if(!this.active)throw new Q.TransactionInactive;return g(null===this._completion._state),(e=this.idbtrans=e||(this.db.core?this.db.core.transaction(this.storeNames,this.mode,{durability:this.chromeTransactionDurability}):t.transaction(this.storeNames,this.mode,{durability:this.chromeTransactionDurability}))).onerror=Ge((t=>{Xt(t),this._reject(e.error)})),e.onabort=Ge((t=>{Xt(t),this.active&&this._reject(new Q.Abort(e.error)),this.active=!1,this.on("abort").fire(t)})),e.oncomplete=Ge((()=>{this.active=!1,this._resolve(),"mutatedParts"in e&&Yt.storagemutated.fire(e.mutatedParts)})),this}_promise(e,t,n){if("readwrite"===e&&"readwrite"!==this.mode)return ft(new Q.ReadOnly("Transaction is readonly"));if(!this.active)return ft(new Q.TransactionInactive);if(this._locked())return new De(((r,i)=>{this._blockedFuncs.push([()=>{this._promise(e,t,n).then(r,i)},Se])}));if(n)return et((()=>{var e=new De(((e,n)=>{this._lock();const r=t(e,n,this);r&&r.then&&r.then(e,n)}));return e.finally((()=>this._unlock())),e._lib=!0,e}));var r=new De(((e,n)=>{var r=t(e,n,this);r&&r.then&&r.then(e,n)}));return r._lib=!0,r}_root(){return this.parent?this.parent._root():this}waitFor(e){var t=this._root();const n=De.resolve(e);if(t._waitingFor)t._waitingFor=t._waitingFor.then((()=>n));else{t._waitingFor=n,t._waitingQueue=[];var r=t.idbtrans.objectStore(t.storeNames[0]);!function e(){for(++t._spinCount;t._waitingQueue.length;)t._waitingQueue.shift()();t._waitingFor&&(r.get(-1/0).onsuccess=e)}()}var i=t._waitingFor;return new De(((e,r)=>{n.then((n=>t._waitingQueue.push(Ge(e.bind(null,n)))),(e=>t._waitingQueue.push(Ge(r.bind(null,e))))).finally((()=>{t._waitingFor===i&&(t._waitingFor=null)}))}))}abort(){this.active&&(this.active=!1,this.idbtrans&&this.idbtrans.abort(),this._reject(new Q.Abort))}table(e){const t=this._memoizedTables||(this._memoizedTables={});if(l(t,e))return t[e];const n=this.schema[e];if(!n)throw new Q.NotFound("Table "+e+" not part of transaction");const r=new this.db.Table(e,n,this);return r.core=this.db.core.table(e),t[e]=r,r}}function Qt(e,t,n,r,i,s,a){return{name:e,keyPath:t,unique:n,multi:r,auto:i,compound:s,src:(n&&!a?"&":"")+(r?"*":"")+(i?"++":"")+en(t)}}function en(e){return"string"==typeof e?e:e?"["+[].join.call(e,"+")+"]":""}function tn(e,t,n){return{name:e,primKey:t,indexes:n,mappedClass:null,idxByName:w(n,(e=>[e.name,e]))}}let nn=e=>{try{return e.only([[]]),nn=()=>[[]],[[]]}catch(e){return nn=()=>pt,pt}};function rn(e){return null==e?()=>{}:"string"==typeof e?function(e){return 1===e.split(".").length?t=>t[e]:t=>_(t,e)}(e):t=>_(t,e)}function sn(e){return[].slice.call(e)}let an=0;function on(e){return null==e?":id":"string"==typeof e?e:`[${e.join("+")}]`}function ln(e,t,n){function r(e){if(3===e.type)return null;if(4===e.type)throw new Error("Cannot convert never type to IDBKeyRange");const{lower:n,upper:r,lowerOpen:i,upperOpen:s}=e;return void 0===n?void 0===r?null:t.upperBound(r,!!s):void 0===r?t.lowerBound(n,!!i):t.bound(n,r,!!i,!!s)}const{schema:s,hasGetAll:a}=function(e,t){const n=sn(e.objectStoreNames);return{schema:{name:e.name,tables:n.map((e=>t.objectStore(e))).map((e=>{const{keyPath:t,autoIncrement:n}=e,r=i(t),s=null==t,a={},o={name:e.name,primaryKey:{name:null,isPrimaryKey:!0,outbound:s,compound:r,keyPath:t,autoIncrement:n,unique:!0,extractKey:rn(t)},indexes:sn(e.indexNames).map((t=>e.index(t))).map((e=>{const{name:t,unique:n,multiEntry:r,keyPath:s}=e,o={name:t,compound:i(s),keyPath:s,unique:n,multiEntry:r,extractKey:rn(s)};return a[on(s)]=o,o})),getIndexByKeyPath:e=>a[on(e)]};return a[":id"]=o.primaryKey,null!=t&&(a[on(t)]=o.primaryKey),o}))},hasGetAll:n.length>0&&"getAll"in t.objectStore(n[0])&&!("undefined"!=typeof navigator&&/Safari/.test(navigator.userAgent)&&!/(Chrome\/|Edge\/)/.test(navigator.userAgent)&&[].concat(navigator.userAgent.match(/Safari\/(\d*)/))[1]<604)}}(e,n),o=s.tables.map((e=>function(e){const t=e.name;return{name:t,schema:e,mutate:function({trans:e,type:n,keys:i,values:s,range:a}){return new Promise(((o,l)=>{o=Ge(o);const c=e.objectStore(t),u=null==c.keyPath,h="put"===n||"add"===n;if(!h&&"delete"!==n&&"deleteRange"!==n)throw new Error("Invalid operation type: "+n);const{length:d}=i||s||{length:1};if(i&&s&&i.length!==s.length)throw new Error("Given keys array must have same length as given values array.");if(0===d)return o({numFailures:0,failures:{},results:[],lastResult:void 0});let f;const m=[],p=[];let y=0;const v=e=>{++y,Xt(e)};if("deleteRange"===n){if(4===a.type)return o({numFailures:y,failures:p,results:[],lastResult:void 0});3===a.type?m.push(f=c.clear()):m.push(f=c.delete(r(a)))}else{const[e,t]=h?u?[s,i]:[s,null]:[i,null];if(h)for(let r=0;r<d;++r)m.push(f=t&&void 0!==t[r]?c[n](e[r],t[r]):c[n](e[r])),f.onerror=v;else for(let t=0;t<d;++t)m.push(f=c[n](e[t])),f.onerror=v}const g=e=>{const t=e.target.result;m.forEach(((e,t)=>null!=e.error&&(p[t]=e.error))),o({numFailures:y,failures:p,results:"delete"===n?i:m.map((e=>e.result)),lastResult:t})};f.onerror=e=>{v(e),g(e)},f.onsuccess=g}))},getMany:({trans:e,keys:n})=>new Promise(((r,i)=>{r=Ge(r);const s=e.objectStore(t),a=n.length,o=new Array(a);let l,c=0,u=0;const h=e=>{const t=e.target;o[t._pos]=t.result,++u===c&&r(o)},d=Ht(i);for(let e=0;e<a;++e)null!=n[e]&&(l=s.get(n[e]),l._pos=e,l.onsuccess=h,l.onerror=d,++c);0===c&&r(o)})),get:({trans:e,key:n})=>new Promise(((r,i)=>{r=Ge(r);const s=e.objectStore(t).get(n);s.onsuccess=e=>r(e.target.result),s.onerror=Ht(i)})),query:function(e){return n=>new Promise(((i,s)=>{i=Ge(i);const{trans:a,values:o,limit:l,query:c}=n,u=l===1/0?void 0:l,{index:h,range:d}=c,f=a.objectStore(t),m=h.isPrimaryKey?f:f.index(h.name),p=r(d);if(0===l)return i({result:[]});if(e){const e=o?m.getAll(p,u):m.getAllKeys(p,u);e.onsuccess=e=>i({result:e.target.result}),e.onerror=Ht(s)}else{let e=0;const t=o||!("openKeyCursor"in m)?m.openCursor(p):m.openKeyCursor(p),n=[];t.onsuccess=r=>{const s=t.result;return s?(n.push(o?s.value:s.primaryKey),++e===l?i({result:n}):void s.continue()):i({result:n})},t.onerror=Ht(s)}}))}(a),openCursor:function({trans:e,values:n,query:i,reverse:s,unique:a}){return new Promise(((o,l)=>{o=Ge(o);const{index:c,range:u}=i,h=e.objectStore(t),d=c.isPrimaryKey?h:h.index(c.name),f=s?a?"prevunique":"prev":a?"nextunique":"next",m=n||!("openKeyCursor"in d)?d.openCursor(r(u),f):d.openKeyCursor(r(u),f);m.onerror=Ht(l),m.onsuccess=Ge((t=>{const n=m.result;if(!n)return void o(null);n.___id=++an,n.done=!1;const r=n.continue.bind(n);let i=n.continuePrimaryKey;i&&(i=i.bind(n));const s=n.advance.bind(n),a=()=>{throw new Error("Cursor not stopped")};n.trans=e,n.stop=n.continue=n.continuePrimaryKey=n.advance=()=>{throw new Error("Cursor not started")},n.fail=Ge(l),n.next=function(){let e=1;return this.start((()=>e--?this.continue():this.stop())).then((()=>this))},n.start=e=>{const t=new Promise(((e,t)=>{e=Ge(e),m.onerror=Ht(t),n.fail=t,n.stop=t=>{n.stop=n.continue=n.continuePrimaryKey=n.advance=a,e(t)}})),o=()=>{if(m.result)try{e()}catch(e){n.fail(e)}else n.done=!0,n.start=()=>{throw new Error("Cursor behind last entry")},n.stop()};return m.onsuccess=Ge((e=>{m.onsuccess=o,o()})),n.continue=r,n.continuePrimaryKey=i,n.advance=s,o(),t},o(n)}),l)}))},count({query:e,trans:n}){const{index:i,range:s}=e;return new Promise(((e,a)=>{const o=n.objectStore(t),l=i.isPrimaryKey?o:o.index(i.name),c=r(s),u=c?l.count(c):l.count();u.onsuccess=Ge((t=>e(t.target.result))),u.onerror=Ht(a)}))}}}(e))),l={};return o.forEach((e=>l[e.name]=e)),{stack:"dbcore",transaction:e.transaction.bind(e),table(e){if(!l[e])throw new Error(`Table '${e}' not found`);return l[e]},MIN_KEY:-1/0,MAX_KEY:nn(t),schema:s}}function cn({_novip:e},t){const n=t.db,r=function(e,t,{IDBKeyRange:n,indexedDB:r},i){const s=function(e,t){return t.reduce(((e,{create:t})=>({...e,...t(e)})),e)}(ln(t,n,i),e.dbcore);return{dbcore:s}}(e._middlewares,n,e._deps,t);e.core=r.dbcore,e.tables.forEach((t=>{const n=t.name;e.core.schema.tables.some((e=>e.name===n))&&(t.core=e.core.table(n),e[n]instanceof e.Table&&(e[n].core=t.core))}))}function un({_novip:e},t,n,r){n.forEach((n=>{const i=r[n];t.forEach((t=>{const r=m(t,n);(!r||"value"in r&&void 0===r.value)&&(t===e.Transaction.prototype||t instanceof e.Transaction?h(t,n,{get(){return this.table(n)},set(e){u(this,n,{value:e,writable:!0,configurable:!0,enumerable:!0})}}):t[n]=new e.Table(n,i))}))}))}function hn({_novip:e},t){t.forEach((t=>{for(let n in t)t[n]instanceof e.Table&&delete t[n]}))}function dn(e,t){return e._cfg.version-t._cfg.version}function fn(e,n,r,i){const s=e._dbSchema,a=e._createTransaction("readwrite",e._storeNames,s);a.create(r),a._completion.catch(i);const o=a._reject.bind(a),l=Se.transless||Se;et((()=>{Se.trans=a,Se.transless=l,0===n?(t(s).forEach((e=>{pn(r,e,s[e].primKey,s[e].indexes)})),cn(e,r),De.follow((()=>e.on.populate.fire(a))).catch(o)):function({_novip:e},n,r,i){const s=[],a=e._versions;let o=e._dbSchema=vn(0,e.idbdb,i),l=!1;return a.filter((e=>e._cfg.version>=n)).forEach((a=>{s.push((()=>{const s=o,c=a._cfg.dbschema;gn(e,s,i),gn(e,c,i),o=e._dbSchema=c;const u=mn(s,c);u.add.forEach((e=>{pn(i,e[0],e[1].primKey,e[1].indexes)})),u.change.forEach((e=>{if(e.recreate)throw new Q.Upgrade("Not yet support for changing primary key");{const t=i.objectStore(e.name);e.add.forEach((e=>yn(t,e))),e.change.forEach((e=>{t.deleteIndex(e.name),yn(t,e)})),e.del.forEach((e=>t.deleteIndex(e)))}}));const h=a._cfg.contentUpgrade;if(h&&a._cfg.version>n){cn(e,i),r._memoizedTables={},l=!0;let n=x(c);u.del.forEach((e=>{n[e]=s[e]})),hn(e,[e.Transaction.prototype]),un(e,[e.Transaction.prototype],t(n),n),r.schema=n;const a=F(h);let o;a&&tt();const d=De.follow((()=>{if(o=h(r),o&&a){var e=nt.bind(null,null);o.then(e,e)}}));return o&&"function"==typeof o.then?De.resolve(o):d.then((()=>o))}})),s.push((t=>{l&&bt||function(e,t){[].slice.call(t.db.objectStoreNames).forEach((n=>null==e[n]&&t.db.deleteObjectStore(n)))}(a._cfg.dbschema,t),hn(e,[e.Transaction.prototype]),un(e,[e.Transaction.prototype],e._storeNames,e._dbSchema),r.schema=e._dbSchema}))})),function e(){return s.length?De.resolve(s.shift()(r.idbtrans)).then(e):De.resolve()}().then((()=>{var e,n;n=i,t(e=o).forEach((t=>{n.db.objectStoreNames.contains(t)||pn(n,t,e[t].primKey,e[t].indexes)}))}))}(e,n,a,r).catch(o)}))}function mn(e,t){const n={del:[],add:[],change:[]};let r;for(r in e)t[r]||n.del.push(r);for(r in t){const i=e[r],s=t[r];if(i){const e={name:r,def:s,recreate:!1,del:[],add:[],change:[]};if(""+(i.primKey.keyPath||"")!=""+(s.primKey.keyPath||"")||i.primKey.auto!==s.primKey.auto&&!gt)e.recreate=!0,n.change.push(e);else{const t=i.idxByName,r=s.idxByName;let a;for(a in t)r[a]||e.del.push(a);for(a in r){const n=t[a],i=r[a];n?n.src!==i.src&&e.change.push(i):e.add.push(i)}(e.del.length>0||e.add.length>0||e.change.length>0)&&n.change.push(e)}}else n.add.push([r,s])}return n}function pn(e,t,n,r){const i=e.db.createObjectStore(t,n.keyPath?{keyPath:n.keyPath,autoIncrement:n.auto}:{autoIncrement:n.auto});return r.forEach((e=>yn(i,e))),i}function yn(e,t){e.createIndex(t.name,t.keyPath,{unique:t.unique,multiEntry:t.multi})}function vn(e,t,n){const r={};return y(t.objectStoreNames,0).forEach((e=>{const t=n.objectStore(e);let i=t.keyPath;const s=Qt(en(i),i||"",!1,!1,!!t.autoIncrement,i&&"string"!=typeof i,!0),a=[];for(let e=0;e<t.indexNames.length;++e){const n=t.index(t.indexNames[e]);i=n.keyPath;var o=Qt(n.name,i,!!n.unique,!!n.multiEntry,!1,i&&"string"!=typeof i,!1);a.push(o)}r[e]=tn(e,s,a)})),r}function gn({_novip:t},n,r){const i=r.db.objectStoreNames;for(let e=0;e<i.length;++e){const s=i[e],a=r.objectStore(s);t._hasGetAll="getAll"in a;for(let e=0;e<a.indexNames.length;++e){const t=a.indexNames[e],r=a.index(t).keyPath,i="string"==typeof r?r:"["+y(r).join("+")+"]";if(n[s]){const e=n[s].idxByName[i];e&&(e.name=t,delete n[s].idxByName[i],n[s].idxByName[t]=e)}}}"undefined"!=typeof navigator&&/Safari/.test(navigator.userAgent)&&!/(Chrome\/|Edge\/)/.test(navigator.userAgent)&&e.WorkerGlobalScope&&e instanceof e.WorkerGlobalScope&&[].concat(navigator.userAgent.match(/Safari\/(\d*)/))[1]<604&&(t._hasGetAll=!1)}class bn{_parseStoresSpec(e,n){t(e).forEach((t=>{if(null!==e[t]){var r=e[t].split(",").map(((e,t)=>{const n=(e=e.trim()).replace(/([&*]|\+\+)/g,""),r=/^\[/.test(n)?n.match(/^\[(.*)\]$/)[1].split("+"):n;return Qt(n,r||null,/\&/.test(e),/\*/.test(e),/\+\+/.test(e),i(r),0===t)})),s=r.shift();if(s.multi)throw new Q.Schema("Primary key cannot be multi-valued");r.forEach((e=>{if(e.auto)throw new Q.Schema("Only primary key can be marked as autoIncrement (++)");if(!e.keyPath)throw new Q.Schema("Index must have a name and cannot be an empty string")})),n[t]=tn(t,s,r)}}))}stores(e){const n=this.db;this._cfg.storesSource=this._cfg.storesSource?s(this._cfg.storesSource,e):e;const r=n._versions,i={};let a={};return r.forEach((e=>{s(i,e._cfg.storesSource),a=e._cfg.dbschema={},e._parseStoresSpec(i,a)})),n._dbSchema=a,hn(n,[n._allTables,n,n.Transaction.prototype]),un(n,[n._allTables,n,n.Transaction.prototype,this._cfg.tables],t(a),a),n._storeNames=t(a),this}upgrade(e){return this._cfg.contentUpgrade=ue(this._cfg.contentUpgrade||ne,e),this}}function wn(e,t){let n=e._dbNamesDB;return n||(n=e._dbNamesDB=new $n("__dbnames",{addons:[],indexedDB:e,IDBKeyRange:t}),n.version(1).stores({dbnames:"name"})),n.table("dbnames")}function _n(e){return e&&"function"==typeof e.databases}function kn(e){return et((function(){return Se.letThrough=!0,e()}))}function xn(){var e;return!navigator.userAgentData&&/Safari\//.test(navigator.userAgent)&&!/Chrom(e|ium)\//.test(navigator.userAgent)&&indexedDB.databases?new Promise((function(t){var n=function(){return indexedDB.databases().finally(t)};e=setInterval(n,100),n()})).finally((function(){return clearInterval(e)})):Promise.resolve()}function Rn(e){var t=t=>e.next(t),n=s(t),r=s((t=>e.throw(t)));function s(e){return t=>{var s=e(t),a=s.value;return s.done?a:a&&"function"==typeof a.then?a.then(n,r):i(a)?Promise.all(a).then(n,r):n(a)}}return s(t)()}function En(e,t,n){var r=arguments.length;if(r<2)throw new Q.InvalidArgument("Too few arguments");for(var i=new Array(r-1);--r;)i[r-1]=arguments[r];n=i.pop();var s=E(i);return[e,s,n]}function Pn(e,t,n,r,i){return De.resolve().then((()=>{const s=Se.transless||Se,a=e._createTransaction(t,n,e._dbSchema,r),o={trans:a,transless:s};if(r)a.idbtrans=r.idbtrans;else try{a.create(),e._state.PR1398_maxLoop=3}catch(r){return r.name===Y.InvalidState&&e.isOpen()&&--e._state.PR1398_maxLoop>0?(console.warn("Dexie: Need to reopen db"),e._close(),e.open().then((()=>Pn(e,t,n,null,i)))):ft(r)}const l=F(i);let c;l&&tt();const u=De.follow((()=>{if(c=i.call(a,a),c)if(l){var e=nt.bind(null,null);c.then(e,e)}else"function"==typeof c.next&&"function"==typeof c.throw&&(c=Rn(c))}),o);return(c&&"function"==typeof c.then?De.resolve(c).then((e=>a.active?e:ft(new Q.PrematureCommit("Transaction committed too early. See http://bit.ly/2kdckMn")))):u.then((()=>c))).then((e=>(r&&a._resolve(),a._completion.then((()=>e))))).catch((e=>(a._reject(e),ft(e))))}))}function In(e,t,n){const r=i(e)?e.slice():[e];for(let e=0;e<n;++e)r.push(t);return r}const Sn={stack:"dbcore",name:"VirtualIndexMiddleware",level:1,create:function(e){return{...e,table(t){const n=e.table(t),{schema:r}=n,i={},s=[];function a(e,t,n){const r=on(e),o=i[r]=i[r]||[],l=null==e?0:"string"==typeof e?1:e.length,c=t>0,u={...n,isVirtual:c,keyTail:t,keyLength:l,extractKey:rn(e),unique:!c&&n.unique};return o.push(u),u.isPrimaryKey||s.push(u),l>1&&a(2===l?e[0]:e.slice(0,l-1),t+1,n),o.sort(((e,t)=>e.keyTail-t.keyTail)),u}const o=a(r.primaryKey.keyPath,0,r.primaryKey);i[":id"]=[o];for(const e of r.indexes)a(e.keyPath,0,e);function l(t){const n=t.query.index;return n.isVirtual?{...t,query:{index:n,range:(r=t.query.range,i=n.keyTail,{type:1===r.type?2:r.type,lower:In(r.lower,r.lowerOpen?e.MAX_KEY:e.MIN_KEY,i),lowerOpen:!0,upper:In(r.upper,r.upperOpen?e.MIN_KEY:e.MAX_KEY,i),upperOpen:!0})}}:t;var r,i}const c={...n,schema:{...r,primaryKey:o,indexes:s,getIndexByKeyPath:function(e){const t=i[on(e)];return t&&t[0]}},count:e=>n.count(l(e)),query:e=>n.query(l(e)),openCursor(t){const{keyTail:r,isVirtual:i,keyLength:s}=t.query.index;return i?n.openCursor(l(t)).then((n=>n&&function(n){const i=Object.create(n,{continue:{value:function(i){null!=i?n.continue(In(i,t.reverse?e.MAX_KEY:e.MIN_KEY,r)):t.unique?n.continue(n.key.slice(0,s).concat(t.reverse?e.MIN_KEY:e.MAX_KEY,r)):n.continue()}},continuePrimaryKey:{value(t,i){n.continuePrimaryKey(In(t,e.MAX_KEY,r),i)}},primaryKey:{get:()=>n.primaryKey},key:{get(){const e=n.key;return 1===s?e[0]:e.slice(0,s)}},value:{get:()=>n.value}});return i}(n))):n.openCursor(t)}};return c}}}};function Cn(e,n,r,i){return r=r||{},i=i||"",t(e).forEach((t=>{if(l(n,t)){var s=e[t],a=n[t];if("object"==typeof s&&"object"==typeof a&&s&&a){const e=D(s);e!==D(a)?r[i+t]=n[t]:"Object"===e?Cn(s,a,r,i+t+"."):s!==a&&(r[i+t]=n[t])}else s!==a&&(r[i+t]=n[t])}else r[i+t]=void 0})),t(n).forEach((t=>{l(e,t)||(r[i+t]=n[t])})),r}const On={stack:"dbcore",name:"HooksMiddleware",level:2,create:e=>({...e,table(t){const n=e.table(t),{primaryKey:r}=n.schema,i={...n,mutate(e){const i=Se.trans,{deleting:s,creating:a,updating:o}=i.table(t).hook;switch(e.type){case"add":if(a.fire===ne)break;return i._promise("readwrite",(()=>c(e)),!0);case"put":if(a.fire===ne&&o.fire===ne)break;return i._promise("readwrite",(()=>c(e)),!0);case"delete":if(s.fire===ne)break;return i._promise("readwrite",(()=>c(e)),!0);case"deleteRange":if(s.fire===ne)break;return i._promise("readwrite",(()=>function(e){return u(e.trans,e.range,1e4)}(e)),!0)}return n.mutate(e);function c(e){const t=Se.trans,i=e.keys||function(e,t){return"delete"===t.type?t.keys:t.keys||t.values.map(e.extractKey)}(r,e);if(!i)throw new Error("Keys missing");return"delete"!==(e="add"===e.type||"put"===e.type?{...e,keys:i}:{...e}).type&&(e.values=[...e.values]),e.keys&&(e.keys=[...e.keys]),function(e,t,n){return"add"===t.type?Promise.resolve([]):e.getMany({trans:t.trans,keys:n,cache:"immutable"})}(n,e,i).then((c=>{const u=i.map(((n,i)=>{const u=c[i],h={onerror:null,onsuccess:null};if("delete"===e.type)s.fire.call(h,n,u,t);else if("add"===e.type||void 0===u){const s=a.fire.call(h,n,e.values[i],t);null==n&&null!=s&&(n=s,e.keys[i]=n,r.outbound||k(e.values[i],r.keyPath,n))}else{const r=Cn(u,e.values[i]),s=o.fire.call(h,r,n,u,t);if(s){const t=e.values[i];Object.keys(s).forEach((e=>{l(t,e)?t[e]=s[e]:k(t,e,s[e])}))}}return h}));return n.mutate(e).then((({failures:t,results:n,numFailures:r,lastResult:s})=>{for(let r=0;r<i.length;++r){const s=n?n[r]:i[r],a=u[r];null==s?a.onerror&&a.onerror(t[r]):a.onsuccess&&a.onsuccess("put"===e.type&&c[r]?e.values[r]:s)}return{failures:t,results:n,numFailures:r,lastResult:s}})).catch((e=>(u.forEach((t=>t.onerror&&t.onerror(e))),Promise.reject(e))))}))}function u(e,t,i){return n.query({trans:e,values:!1,query:{index:r,range:t},limit:i}).then((({result:n})=>c({type:"delete",keys:n,trans:e}).then((r=>r.numFailures>0?Promise.reject(r.failures[0]):n.length<i?{failures:[],numFailures:0,lastResult:void 0}:u(e,{...t,lower:n[n.length-1],lowerOpen:!0},i)))))}}};return i}})};function An(e,t,n){try{if(!t)return null;if(t.keys.length<e.length)return null;const r=[];for(let i=0,s=0;i<t.keys.length&&s<e.length;++i)0===Bt(t.keys[i],e[s])&&(r.push(n?C(t.values[i]):t.values[i]),++s);return r.length===e.length?r:null}catch(e){return null}}const Dn={stack:"dbcore",level:-1,create:e=>({table:t=>{const n=e.table(t);return{...n,getMany:e=>{if(!e.cache)return n.getMany(e);const t=An(e.keys,e.trans._cache,"clone"===e.cache);return t?De.resolve(t):n.getMany(e).then((t=>(e.trans._cache={keys:e.keys,values:"clone"===e.cache?C(t):t},t)))},mutate:e=>("add"!==e.type&&(e.trans._cache=null),n.mutate(e))}}})};function Tn(e){return!("from"in e)}const jn=function(e,t){if(!this){const t=new jn;return e&&"d"in e&&s(t,e),t}s(this,arguments.length?{d:1,from:e,to:arguments.length>1?t:e}:{d:0})};function Bn(e,t,n){const r=Bt(t,n);if(isNaN(r))return;if(r>0)throw RangeError();if(Tn(e))return s(e,{from:t,to:n,d:1});const i=e.l,a=e.r;if(Bt(n,e.from)<0)return i?Bn(i,t,n):e.l={from:t,to:n,d:1,l:null,r:null},Nn(e);if(Bt(t,e.to)>0)return a?Bn(a,t,n):e.r={from:t,to:n,d:1,l:null,r:null},Nn(e);Bt(t,e.from)<0&&(e.from=t,e.l=null,e.d=a?a.d+1:1),Bt(n,e.to)>0&&(e.to=n,e.r=null,e.d=e.l?e.l.d+1:1);const o=!e.r;i&&!e.l&&Mn(e,i),a&&o&&Mn(e,a)}function Mn(e,t){Tn(t)||function e(t,{from:n,to:r,l:i,r:s}){Bn(t,n,r),i&&e(t,i),s&&e(t,s)}(e,t)}function Fn(e){let t=Tn(e)?null:{s:0,n:e};return{next(e){const n=arguments.length>0;for(;t;)switch(t.s){case 0:if(t.s=1,n)for(;t.n.l&&Bt(e,t.n.from)<0;)t={up:t,n:t.n.l,s:1};else for(;t.n.l;)t={up:t,n:t.n.l,s:1};case 1:if(t.s=2,!n||Bt(e,t.n.to)<=0)return{value:t.n,done:!1};case 2:if(t.n.r){t.s=3,t={up:t,n:t.n.r,s:0};continue}case 3:t=t.up}return{done:!0}}}}function Nn(e){var t,n;const r=((null===(t=e.r)||void 0===t?void 0:t.d)||0)-((null===(n=e.l)||void 0===n?void 0:n.d)||0),i=r>1?"r":r<-1?"l":"";if(i){const t="r"===i?"l":"r",n={...e},r=e[i];e.from=r.from,e.to=r.to,e[i]=r[i],n[i]=r[t],e[t]=n,n.d=Kn(n)}e.d=Kn(e)}function Kn({r:e,l:t}){return(e?t?Math.max(e.d,t.d):e.d:t?t.d:0)+1}c(jn.prototype,{add(e){return Mn(this,e),this},addKey(e){return Bn(this,e,e),this},addKeys(e){return e.forEach((e=>Bn(this,e,e))),this},[T](){return Fn(this)}});const Ln={stack:"dbcore",level:0,create:e=>{const n=e.schema.name,r=new jn(e.MIN_KEY,e.MAX_KEY);return{...e,table:s=>{const a=e.table(s),{schema:o}=a,{primaryKey:l}=o,{extractKey:c,outbound:u}=l,h={...a,mutate:e=>{const t=e.trans,l=t.mutatedParts||(t.mutatedParts={}),c=e=>{const t=`idb://${n}/${s}/${e}`;return l[t]||(l[t]=new jn)},u=c(""),h=c(":dels"),{type:d}=e;let[f,m]="deleteRange"===e.type?[e.range]:"delete"===e.type?[e.keys]:e.values.length<50?[[],e.values]:[];const p=e.trans._cache;return a.mutate(e).then((e=>{if(i(f)){"delete"!==d&&(f=e.results),u.addKeys(f);const t=An(f,p);t||"add"===d||h.addKeys(f),(t||m)&&function(e,t,n,r){t.indexes.forEach((function(t){const s=e(t.name||"");function a(e){return null!=e?t.extractKey(e):null}const o=e=>t.multiEntry&&i(e)?e.forEach((e=>s.addKey(e))):s.addKey(e);(n||r).forEach(((e,t)=>{const i=n&&a(n[t]),s=r&&a(r[t]);0!==Bt(i,s)&&(null!=i&&o(i),null!=s&&o(s))}))}))}(c,o,t,m)}else if(f){const e={from:f.lower,to:f.upper};h.add(e),u.add(e)}else u.add(r),h.add(r),o.indexes.forEach((e=>c(e.name).add(r)));return e}))}},d=({query:{index:t,range:n}})=>{var r,i;return[t,new jn(null!==(r=n.lower)&&void 0!==r?r:e.MIN_KEY,null!==(i=n.upper)&&void 0!==i?i:e.MAX_KEY)]},f={get:e=>[l,new jn(e.key)],getMany:e=>[l,(new jn).addKeys(e.keys)],count:d,query:d,openCursor:d};return t(f).forEach((e=>{h[e]=function(t){const{subscr:i}=Se;if(i){const o=e=>{const t=`idb://${n}/${s}/${e}`;return i[t]||(i[t]=new jn)},l=o(""),h=o(":dels"),[d,m]=f[e](t);if(o(d.name||"").add(m),!d.isPrimaryKey){if("count"!==e){const n="query"===e&&u&&t.values&&a.query({...t,values:!1});return a[e].apply(this,arguments).then((r=>{if("query"===e){if(u&&t.values)return n.then((({result:e})=>(l.addKeys(e),r)));const e=t.values?r.result.map(c):r.result;t.values?l.addKeys(e):h.addKeys(e)}else if("openCursor"===e){const e=r,n=t.values;return e&&Object.create(e,{key:{get:()=>(h.addKey(e.primaryKey),e.key)},primaryKey:{get(){const t=e.primaryKey;return h.addKey(t),t}},value:{get:()=>(n&&l.addKey(e.primaryKey),e.value)}})}return r}))}h.add(r)}}return a[e].apply(this,arguments)}})),h}}}};class $n{constructor(e,t){this._middlewares={},this.verno=0;const n=$n.dependencies;this._options=t={addons:$n.addons,autoOpen:!0,indexedDB:n.indexedDB,IDBKeyRange:n.IDBKeyRange,...t},this._deps={indexedDB:t.indexedDB,IDBKeyRange:t.IDBKeyRange};const{addons:r}=t;this._dbSchema={},this._versions=[],this._storeNames=[],this._allTables={},this.idbdb=null,this._novip=this;const i={dbOpenError:null,isBeingOpened:!1,onReadyBeingFired:null,openComplete:!1,dbReadyResolve:ne,dbReadyPromise:null,cancelOpen:ne,openCanceller:null,autoSchema:!0,PR1398_maxLoop:3};var s;i.dbReadyPromise=new De((e=>{i.dbReadyResolve=e})),i.openCanceller=new De(((e,t)=>{i.cancelOpen=t})),this._state=i,this.name=e,this.on=Pt(this,"populate","blocked","versionchange","close",{ready:[ue,ne]}),this.on.ready.subscribe=v(this.on.ready.subscribe,(e=>(t,n)=>{$n.vip((()=>{const r=this._state;if(r.openComplete)r.dbOpenError||De.resolve().then(t),n&&e(t);else if(r.onReadyBeingFired)r.onReadyBeingFired.push(t),n&&e(t);else{e(t);const r=this;n||e((function e(){r.on.ready.unsubscribe(t),r.on.ready.unsubscribe(e)}))}}))})),this.Collection=(s=this,It(Nt.prototype,(function(e,t){this.db=s;let n=xt,r=null;if(t)try{n=t()}catch(e){r=e}const i=e._ctx,a=i.table,o=a.hook.reading.fire;this._ctx={table:a,index:i.index,isPrimKey:!i.index||a.schema.primKey.keyPath&&i.index===a.schema.primKey.name,range:n,keysOnly:!1,dir:"next",unique:"",algorithm:null,filter:null,replayFilter:null,justLimit:!0,isMatch:null,offset:0,limit:1/0,error:r,or:i.or,valueMapper:o!==re?o:null}}))),this.Table=function(e){return It(Et.prototype,(function(t,n,r){this.db=e,this._tx=r,this.name=t,this.schema=n,this.hook=e._allTables[t]?e._allTables[t].hook:Pt(null,{creating:[ae,ne],reading:[ie,re],updating:[le,ne],deleting:[oe,ne]})}))}(this),this.Transaction=function(e){return It(Jt.prototype,(function(t,n,r,i,s){this.db=e,this.mode=t,this.storeNames=n,this.schema=r,this.chromeTransactionDurability=i,this.idbtrans=null,this.on=Pt(this,"complete","error","abort"),this.parent=s||null,this.active=!0,this._reculock=0,this._blockedFuncs=[],this._resolve=null,this._reject=null,this._waitingFor=null,this._waitingQueue=null,this._spinCount=0,this._completion=new De(((e,t)=>{this._resolve=e,this._reject=t})),this._completion.then((()=>{this.active=!1,this.on.complete.fire()}),(e=>{var t=this.active;return this.active=!1,this.on.error.fire(e),this.parent?this.parent._reject(e):t&&this.idbtrans&&this.idbtrans.abort(),ft(e)}))}))}(this),this.Version=function(e){return It(bn.prototype,(function(t){this.db=e,this._cfg={version:t,storesSource:null,dbschema:{},tables:{},contentUpgrade:null}}))}(this),this.WhereClause=function(e){return It(Vt.prototype,(function(t,n,r){this.db=e,this._ctx={table:t,index:":id"===n?null:n,or:r};const i=e._deps.indexedDB;if(!i)throw new Q.MissingAPI;this._cmp=this._ascending=i.cmp.bind(i),this._descending=(e,t)=>i.cmp(t,e),this._max=(e,t)=>i.cmp(e,t)>0?e:t,this._min=(e,t)=>i.cmp(e,t)<0?e:t,this._IDBKeyRange=e._deps.IDBKeyRange}))}(this),this.on("versionchange",(e=>{e.newVersion>0?console.warn(`Another connection wants to upgrade database '${this.name}'. Closing db now to resume the upgrade.`):console.warn(`Another connection wants to delete database '${this.name}'. Closing db now to resume the delete request.`),this.close()})),this.on("blocked",(e=>{!e.newVersion||e.newVersion<e.oldVersion?console.warn(`Dexie.delete('${this.name}') was blocked`):console.warn(`Upgrade '${this.name}' blocked by other connection holding version ${e.oldVersion/10}`)})),this._maxKey=nn(t.IDBKeyRange),this._createTransaction=(e,t,n,r)=>new this.Transaction(e,t,n,this._options.chromeTransactionDurability,r),this._fireOnBlocked=e=>{this.on("blocked").fire(e),vt.filter((e=>e.name===this.name&&e!==this&&!e._state.vcFired)).map((t=>t.on("versionchange").fire(e)))},this.use(Sn),this.use(On),this.use(Ln),this.use(Dn),this.vip=Object.create(this,{_vip:{value:!0}}),r.forEach((e=>e(this)))}version(e){if(isNaN(e)||e<.1)throw new Q.Type("Given version is not a positive number");if(e=Math.round(10*e)/10,this.idbdb||this._state.isBeingOpened)throw new Q.Schema("Cannot add version when database is open");this.verno=Math.max(this.verno,e);const t=this._versions;var n=t.filter((t=>t._cfg.version===e))[0];return n||(n=new this.Version(e),t.push(n),t.sort(dn),n.stores({}),this._state.autoSchema=!1,n)}_whenReady(e){return this.idbdb&&(this._state.openComplete||Se.letThrough||this._vip)?e():new De(((e,t)=>{if(this._state.openComplete)return t(new Q.DatabaseClosed(this._state.dbOpenError));if(!this._state.isBeingOpened){if(!this._options.autoOpen)return void t(new Q.DatabaseClosed);this.open().catch(ne)}this._state.dbReadyPromise.then(e,t)})).then(e)}use({stack:e,create:t,level:n,name:r}){r&&this.unuse({stack:e,name:r});const i=this._middlewares[e]||(this._middlewares[e]=[]);return i.push({stack:e,create:t,level:null==n?10:n,name:r}),i.sort(((e,t)=>e.level-t.level)),this}unuse({stack:e,name:t,create:n}){return e&&this._middlewares[e]&&(this._middlewares[e]=this._middlewares[e].filter((e=>n?e.create!==n:!!t&&e.name!==t))),this}open(){return function(e){const n=e._state,{indexedDB:r}=e._deps;if(n.isBeingOpened||e.idbdb)return n.dbReadyPromise.then((()=>n.dbOpenError?ft(n.dbOpenError):e));N&&(n.openCanceller._stackHolder=U()),n.isBeingOpened=!0,n.dbOpenError=null,n.openComplete=!1;const i=n.openCanceller;function s(){if(n.openCanceller!==i)throw new Q.DatabaseClosed("db.open() was cancelled")}let a=n.dbReadyResolve,o=null,l=!1;return De.race([i,("undefined"==typeof navigator?De.resolve():xn()).then((()=>new De(((i,a)=>{if(s(),!r)throw new Q.MissingAPI;const c=e.name,u=n.autoSchema?r.open(c):r.open(c,Math.round(10*e.verno));if(!u)throw new Q.MissingAPI;u.onerror=Ht(a),u.onblocked=Ge(e._fireOnBlocked),u.onupgradeneeded=Ge((t=>{if(o=u.transaction,n.autoSchema&&!e._options.allowEmptyDB){u.onerror=Xt,o.abort(),u.result.close();const e=r.deleteDatabase(c);e.onsuccess=e.onerror=Ge((()=>{a(new Q.NoSuchDatabase(`Database ${c} doesnt exist`))}))}else{o.onerror=Ht(a);var i=t.oldVersion>Math.pow(2,62)?0:t.oldVersion;l=i<1,e._novip.idbdb=u.result,fn(e,i/10,o,a)}}),a),u.onsuccess=Ge((()=>{o=null;const r=e._novip.idbdb=u.result,s=y(r.objectStoreNames);if(s.length>0)try{const i=r.transaction(1===(a=s).length?a[0]:a,"readonly");n.autoSchema?function({_novip:e},n,r){e.verno=n.version/10;const i=e._dbSchema=vn(0,n,r);e._storeNames=y(n.objectStoreNames,0),un(e,[e._allTables],t(i),i)}(e,r,i):(gn(e,e._dbSchema,i),function(e,t){const n=mn(vn(0,e.idbdb,t),e._dbSchema);return!(n.add.length||n.change.some((e=>e.add.length||e.change.length)))}(e,i)||console.warn("Dexie SchemaDiff: Schema was extended without increasing the number passed to db.version(). Some queries may fail.")),cn(e,i)}catch(e){}var a;vt.push(e),r.onversionchange=Ge((t=>{n.vcFired=!0,e.on("versionchange").fire(t)})),r.onclose=Ge((t=>{e.on("close").fire(t)})),l&&function({indexedDB:e,IDBKeyRange:t},n){!_n(e)&&"__dbnames"!==n&&wn(e,t).put({name:n}).catch(ne)}(e._deps,c),i()}),a)}))))]).then((()=>(s(),n.onReadyBeingFired=[],De.resolve(kn((()=>e.on.ready.fire(e.vip)))).then((function t(){if(n.onReadyBeingFired.length>0){let r=n.onReadyBeingFired.reduce(ue,ne);return n.onReadyBeingFired=[],De.resolve(kn((()=>r(e.vip)))).then(t)}}))))).finally((()=>{n.onReadyBeingFired=null,n.isBeingOpened=!1})).then((()=>e)).catch((t=>{n.dbOpenError=t;try{o&&o.abort()}catch(e){}return i===n.openCanceller&&e._close(),ft(t)})).finally((()=>{n.openComplete=!0,a()}))}(this)}_close(){const e=this._state,t=vt.indexOf(this);if(t>=0&&vt.splice(t,1),this.idbdb){try{this.idbdb.close()}catch(e){}this._novip.idbdb=null}e.dbReadyPromise=new De((t=>{e.dbReadyResolve=t})),e.openCanceller=new De(((t,n)=>{e.cancelOpen=n}))}close(){this._close();const e=this._state;this._options.autoOpen=!1,e.dbOpenError=new Q.DatabaseClosed,e.isBeingOpened&&e.cancelOpen(e.dbOpenError)}delete(){const e=arguments.length>0,t=this._state;return new De(((n,r)=>{const i=()=>{this.close();var e=this._deps.indexedDB.deleteDatabase(this.name);e.onsuccess=Ge((()=>{!function({indexedDB:e,IDBKeyRange:t},n){!_n(e)&&"__dbnames"!==n&&wn(e,t).delete(n).catch(ne)}(this._deps,this.name),n()})),e.onerror=Ht(r),e.onblocked=this._fireOnBlocked};if(e)throw new Q.InvalidArgument("Arguments not allowed in db.delete()");t.isBeingOpened?t.dbReadyPromise.then(i):i()}))}backendDB(){return this.idbdb}isOpen(){return null!==this.idbdb}hasBeenClosed(){const e=this._state.dbOpenError;return e&&"DatabaseClosed"===e.name}hasFailed(){return null!==this._state.dbOpenError}dynamicallyOpened(){return this._state.autoSchema}get tables(){return t(this._allTables).map((e=>this._allTables[e]))}transaction(){const e=En.apply(this,arguments);return this._transaction.apply(this,e)}_transaction(e,t,n){let r=Se.trans;r&&r.db===this&&-1===e.indexOf("!")||(r=null);const i=-1!==e.indexOf("?");let s,a;e=e.replace("!","").replace("?","");try{if(a=t.map((e=>{var t=e instanceof this.Table?e.name:e;if("string"!=typeof t)throw new TypeError("Invalid table argument to Dexie.transaction(). Only Table or String are allowed");return t})),"r"==e||"readonly"===e)s="readonly";else{if("rw"!=e&&"readwrite"!=e)throw new Q.InvalidArgument("Invalid transaction mode: "+e);s="readwrite"}if(r){if("readonly"===r.mode&&"readwrite"===s){if(!i)throw new Q.SubTransaction("Cannot enter a sub-transaction with READWRITE mode when parent transaction is READONLY");r=null}r&&a.forEach((e=>{if(r&&-1===r.storeNames.indexOf(e)){if(!i)throw new Q.SubTransaction("Table "+e+" not included in parent transaction.");r=null}})),i&&r&&!r.active&&(r=null)}}catch(e){return r?r._promise(null,((t,n)=>{n(e)})):ft(e)}const o=Pn.bind(null,this,s,a,r,n);return r?r._promise(s,o,"lock"):Se.trans?lt(Se.transless,(()=>this._whenReady(o))):this._whenReady(o)}table(e){if(!l(this._allTables,e))throw new Q.InvalidTable(`Table ${e} does not exist`);return this._allTables[e]}}const Un="undefined"!=typeof Symbol&&"observable"in Symbol?Symbol.observable:"@@observable";class qn{constructor(e){this._subscribe=e}subscribe(e,t,n){return this._subscribe(e&&"function"!=typeof e?e:{next:e,error:t,complete:n})}[Un](){return this}}function zn(e,n){return t(n).forEach((t=>{Mn(e[t]||(e[t]=new jn),n[t])})),e}let Zn;try{Zn={indexedDB:e.indexedDB||e.mozIndexedDB||e.webkitIndexedDB||e.msIndexedDB,IDBKeyRange:e.IDBKeyRange||e.webkitIDBKeyRange}}catch(e){Zn={indexedDB:null,IDBKeyRange:null}}const Wn=$n;function Gn(e){let t=Vn;try{Vn=!0,Yt.storagemutated.fire(e)}finally{Vn=t}}c(Wn,{...te,delete:e=>new Wn(e,{addons:[]}).delete(),exists:e=>new Wn(e,{addons:[]}).open().then((e=>(e.close(),!0))).catch("NoSuchDatabaseError",(()=>!1)),getDatabaseNames(e){try{return function({indexedDB:e,IDBKeyRange:t}){return _n(e)?Promise.resolve(e.databases()).then((e=>e.map((e=>e.name)).filter((e=>"__dbnames"!==e)))):wn(e,t).toCollection().primaryKeys()}(Wn.dependencies).then(e)}catch(e){return ft(new Q.MissingAPI)}},defineClass:()=>function(e){s(this,e)},ignoreTransaction:e=>Se.trans?lt(Se.transless,e):e(),vip:kn,async:function(e){return function(){try{var t=Rn(e.apply(this,arguments));return t&&"function"==typeof t.then?t:De.resolve(t)}catch(e){return ft(e)}}},spawn:function(e,t,n){try{var r=Rn(e.apply(n,t||[]));return r&&"function"==typeof r.then?r:De.resolve(r)}catch(e){return ft(e)}},currentTransaction:{get:()=>Se.trans||null},waitFor:function(e,t){const n=De.resolve("function"==typeof e?Wn.ignoreTransaction(e):e).timeout(t||6e4);return Se.trans?Se.trans.waitFor(n):n},Promise:De,debug:{get:()=>N,set:e=>{K(e,"dexie"===e?()=>!0:_t)}},derive:d,extend:s,props:c,override:v,Events:Pt,on:Yt,liveQuery:function(e){return new qn((n=>{const r=F(e);let i=!1,s={},a={};const o={get closed(){return i},unsubscribe:()=>{i=!0,Yt.storagemutated.unsubscribe(h)}};n.start&&n.start(o);let l=!1,c=!1;function u(){return t(a).some((e=>s[e]&&function(e,t){const n=Fn(t);let r=n.next();if(r.done)return!1;let i=r.value;const s=Fn(e);let a=s.next(i.from),o=a.value;for(;!r.done&&!a.done;){if(Bt(o.from,i.to)<=0&&Bt(o.to,i.from)>=0)return!0;Bt(i.from,o.from)<0?i=(r=n.next(o.from)).value:o=(a=s.next(i.from)).value}return!1}(s[e],a[e])))}const h=e=>{zn(s,e),u()&&d()},d=()=>{if(l||i)return;s={};const t={},f=function(t){r&&tt();const n=()=>et(e,{subscr:t,trans:null}),i=Se.trans?lt(Se.transless,n):n();return r&&i.then(nt,nt),i}(t);c||(Yt("storagemutated",h),c=!0),l=!0,Promise.resolve(f).then((e=>{l=!1,i||(u()?d():(s={},a=t,n.next&&n.next(e)))}),(e=>{l=!1,n.error&&n.error(e),o.unsubscribe()}))};return d(),o}))},extendObservabilitySet:zn,getByKeyPath:_,setByKeyPath:k,delByKeyPath:function(e,t){"string"==typeof t?k(e,t,void 0):"length"in t&&[].map.call(t,(function(t){k(e,t,void 0)}))},shallowClone:x,deepClone:C,getObjectDiff:Cn,cmp:Bt,asap:b,minKey:-1/0,addons:[],connections:vt,errnames:Y,dependencies:Zn,semVer:"3.2.1",version:"3.2.1".split(".").map((e=>parseInt(e))).reduce(((e,t,n)=>e+t/Math.pow(10,2*n)))}),Wn.maxKey=nn(Wn.dependencies.IDBKeyRange),"undefined"!=typeof dispatchEvent&&"undefined"!=typeof addEventListener&&(Yt("storagemutated",(e=>{if(!Vn){let t;gt?(t=document.createEvent("CustomEvent"),t.initCustomEvent("x-storagemutated-1",!0,!0,e)):t=new CustomEvent("x-storagemutated-1",{detail:e}),Vn=!0,dispatchEvent(t),Vn=!1}})),addEventListener("x-storagemutated-1",(({detail:e})=>{Vn||Gn(e)})));let Vn=!1;if("undefined"!=typeof BroadcastChannel){const e=new BroadcastChannel("x-storagemutated-1");Yt("storagemutated",(t=>{Vn||e.postMessage(t)})),e.onmessage=e=>{e.data&&Gn(e.data)}}else if("undefined"!=typeof self&&"undefined"!=typeof navigator){Yt("storagemutated",(e=>{try{Vn||("undefined"!=typeof localStorage&&localStorage.setItem("x-storagemutated-1",JSON.stringify({trig:Math.random(),changedParts:e})),"object"==typeof self.clients&&[...self.clients.matchAll({includeUncontrolled:!0})].forEach((t=>t.postMessage({type:"x-storagemutated-1",changedParts:e}))))}catch(e){}})),addEventListener("storage",(e=>{if("x-storagemutated-1"===e.key){const t=JSON.parse(e.newValue);t&&Gn(t.changedParts)}}));const e=self.document&&navigator.serviceWorker;e&&e.addEventListener("message",(function({data:e}){e&&"x-storagemutated-1"===e.type&&Gn(e.changedParts)}))}De.rejectionMapper=function(e,t){if(!e||e instanceof G||e instanceof TypeError||e instanceof SyntaxError||!e.name||!ee[e.name])return e;var n=new ee[e.name](t||e.message,e);return"stack"in e&&h(n,"stack",{get:function(){return this.inner.stack}}),n},K(N,_t);class Hn extends $n{constructor(){super("ms.js"),this.version(1).stores({requests:"&path"})}}var Xn;!function(e){e[e.None=0]="None",e[e.HairDye=1]="HairDye"}(Xn||(Xn={}));class Yn{constructor(e,t,n,r,i){var s,a,o,l;this.item=e,this.node=t,this.info=n.children.reduce(((e,t)=>(e[t.name]=t,e)),{}),this.islot=null===(a=null===(s=this.info)||void 0===s?void 0:s.islot)||void 0===a?void 0:a.value.match(/.{1,2}/g),this.vslot=null===(l=null===(o=this.info)||void 0===o?void 0:o.vslot)||void 0===l?void 0:l.value.match(/.{1,2}/g),this.zmap=r,this.smap=i}}class Jn{constructor(e){var t,n,r;this.slot=e.parent.name;const i=e.children.reduce(((e,t)=>(e[t.name]=t,e)),{});this.z=null===(t=i.z)||void 0===t?void 0:t.value,this.origin=null===(n=i.origin)||void 0===n?void 0:n.value,this.group=null===(r=i.group)||void 0===r?void 0:r.value,i.map&&(this.map=i.map.children.reduce(((e,t)=>(e[t.name]=t.value,e)),{}))}get visible(){return!0}}var Qn=function(e,t,n,r){return new(n||(n=Promise))((function(i,s){function a(e){try{l(r.next(e))}catch(e){s(e)}}function o(e){try{l(r.throw(e))}catch(e){s(e)}}function l(e){var t;e.done?i(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(a,o)}l((r=r.apply(e,t||[])).next())}))};class er{constructor(e,t,n){if(this.visible=!0,this.item=e,"canvas"===n.type)this.canvas=n;else{if("canvas"!==t.type)throw new Error("No renderable canvas found!");this.canvas=t}if(this.slot=t.name,!t.children)return this.originalPiece=new Jn(n),void(this.resolvedPiece=this.originalPiece);this.originalPiece=new Jn(t),this.resolvedPiece=t!==n&&n?new Jn(n):this.originalPiece}get origin(){return this.originalPiece.origin||this.resolvedPiece.origin}get z(){return this.originalPiece.z||this.resolvedPiece.z}get map(){return this.originalPiece.map||this.resolvedPiece.map||{navel:{x:0,y:0}}}get group(){return this.originalPiece.group||this.resolvedPiece.group}GetWebGLTexture(e){return Qn(this,void 0,void 0,(function*(){if(void 0!==this._textureId)return this._textureId;const t=yield this.canvas.GetValue(),n=e.createTexture();return e.bindTexture(e.TEXTURE_2D,n),e.pixelStorei(e.UNPACK_PREMULTIPLY_ALPHA_WEBGL,!0),e.texImage2D(e.TEXTURE_2D,0,e.RGBA,this.canvas.width,this.canvas.height,0,e.RGBA,e.UNSIGNED_BYTE,new Uint8Array(t.data)),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_WRAP_S,e.CLAMP_TO_EDGE),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_WRAP_T,e.CLAMP_TO_EDGE),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_MIN_FILTER,e.LINEAR),this._textureId=n,n}))}GetCanvasTexture(){return Qn(this,void 0,void 0,(function*(){if(void 0!==this._canvas)return this._canvas;const e=yield this.canvas.GetValue(),t=document.createElement("canvas");return t.style.display="none",t.width=this.canvas.width,t.height=this.canvas.height,document.body.appendChild(t),t.getContext("2d").putImageData(e,0,0),this._canvas=t,t.remove(),t}))}}var tr=function(e,t,n,r){return new(n||(n=Promise))((function(i,s){function a(e){try{l(r.next(e))}catch(e){s(e)}}function o(e){try{l(r.throw(e))}catch(e){s(e)}}function l(e){var t;e.done?i(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(a,o)}l((r=r.apply(e,t||[])).next())}))},nr=function(e,t,n,r){return new(n||(n=Promise))((function(i,s){function a(e){try{l(r.next(e))}catch(e){s(e)}}function o(e){try{l(r.throw(e))}catch(e){s(e)}}function l(e){var t;e.done?i(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(a,o)}l((r=r.apply(e,t||[])).next())}))};function rr(e,t){const n=t.split(".img",2);n[0]=n[0]+".img";const[r,i]=n;if(e[r])return t}class ir{constructor(e){this.factory=e}IsFaceId(e){return e>=2e4&&e<3e4||e>=5e4&&e<6e4}IsFaceOrAccessoryId(e){return e>=101e4&&e<102e4||e>=2e4&&e<3e4||e>=5e4&&e<6e4}GetItemImg(e,t,n){return nr(this,void 0,void 0,(function*(){const r=yield this.GetItemImgPath(e,t,n);return this.factory.resolve(e,t,r)}))}GetFolderForItem(e){return this.GetFolderForItemId(e.region,e.version,e.id)}GetFolderForItemId(e,t,n){return nr(this,void 0,void 0,(function*(){const r=Math.floor(n/100);return(yield this.factory.getFolders(e,t))[r.toString()]}))}GetItemImgPath(e,t,n){return nr(this,void 0,void 0,(function*(){const r=Math.floor(n/100),i=Math.floor(n/1e4).toString().padStart(4,"0"),s=Math.floor(n/1e3).toString().padStart(5,"0"),a=n.toString().padStart(8,"0"),o=r.toString().padStart(6,"0");let l=null;const c=yield this.factory.getImages(e,t);if(r>=2e4&&r<3e4&&(l=rr(c,`Item/Consume/${i}.img/${a}`)),r>=30100&&r<4e4&&(r>=30150&&r<=30159&&(l=rr(c,`Item/Install/${o}.img/${a}`)),(r>=30160&&r<=30400||!l)&&(l=rr(c,`Item/Install/${s}.img/${a}`)),(r>=30400||!l)&&(l=rr(c,`Item/Install/${i}.img/${a}`))),r>=4e4&&r<5e4&&(l=rr(c,`Item/Etc/${i}.img/${a}`)),r>=5e4&&r<50100&&(l=rr(c,`Item/Pet/${n}.img`)),r>=50100&&r<6e4&&(l=rr(c,`Item/Cash/${i}.img/${a}`)),r>=9e4&&r<90200&&(l=rr(c,`Item/Special/${i}.img/${a}`)),r>=200&&r<2e4||!l){var u,h=yield this.factory.getFolders(e,t);(u=h[r.toString()])&&(l=rr(c,`Character/${u}/${a}.img`)),l||(u=h[(r+1).toString()])&&(l=rr(c,`Character/${u}/${a}.img`)),l||(u=h[(r-1).toString()])&&(l=rr(c,`Character/${u}/${a}.img`))}return(n>=2e3&&n<2e4||!l)&&(l=rr(c,`Character/${a}.img`)),l}))}}class sr{constructor(e,t,n,r,i){this.left=Math.min.apply(null,e),this.right=Math.max.apply(null,t),this.top=Math.min.apply(null,n),this.bottom=Math.max.apply(null,r),this.zoom=i||1,this.offset={x:-this.left,y:-this.top},this.size={x:(this.right-this.left)*this.zoom,y:(this.bottom-this.top)*this.zoom}}}function ar(e,t,n){const r=n.calculatedOffsets.body||n.calculatedOffsets.backBody;r||console.warn("Couldn't find the body???");const i={x:r.x-t.left,y:r.y-t.top};return i.x*=e.zoom,i.y*=e.zoom,e.flipX&&(i.x=t.size.x-i.x),i}function or(e,t,n){const r=[],i=[],s=[],a=[];return Object.keys(n.lockedPieces).forEach((e=>{n.lockedPieces[e].forEach((e=>{const n=t.calculatedOffsets[e.slot||e.z],o=n.x-(e.origin||{x:0}).x,l=o+e.canvas.width,c=n.y-(e.origin||{y:0}).y,u=c+e.canvas.height;r.push(o),i.push(l),s.push(c),a.push(u)}))})),new sr(r,i,s,a,e.zoom)}var lr=function(e,t,n,r){return new(n||(n=Promise))((function(i,s){function a(e){try{l(r.next(e))}catch(e){s(e)}}function o(e){try{l(r.throw(e))}catch(e){s(e)}}function l(e){var t;e.done?i(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(a,o)}l((r=r.apply(e,t||[])).next())}))};class cr{constructor(e,t,n){if(n)this.framePairs=n.framePairs,this.loadedPieces=n.loadedPieces,this.locks=n.locks,this.anchors=n.anchors,this.minimumDelay=n.minimumDelay,this.request=e,this.bounds=or(this.request,this.anchors,this.locks),this.feetCenter=ar(this.request,this.bounds,this.anchors);else{if(!t)throw new Error("Need either a render plan to copy from or a set of framePairs to build off of");this.framePairs=t,this.request=e}}Initialize(e){return lr(this,void 0,void 0,(function*(){const{zmap:t,smap:n}=this.GetMappings();this.loadedPieces=yield function(e,t){return tr(this,void 0,void 0,(function*(){const n=e.reduce(((e,t)=>(e.push.apply(e,t.node.children.map((e=>({child:e,item:t})))),e)),[]),r=yield Promise.all(n.map((e=>tr(this,void 0,void 0,(function*(){let t=null,n=yield e.child.resolve();do{t=n,n=yield t.resolve()}while(n!=t);return Object.assign(Object.assign({},e),{resolved:t})})))));let i={};return{pieces:r.filter((e=>("delay"===e.child.name&&(i[e.item.item.id]=e.child.value),"canvas"===e.child.type||"canvas"===e.resolved.type))).map((e=>new er(e.item,e.child,e.resolved))).reduce(((e,n)=>{let r=n;if(t&&t.slots){const e=t.slots[n.slot];e&&(r=Object.assign(n,e))}if(!n.visible)return e;const i=n.z||n.slot;return e[i]?e[i].push(r):e[i]=[r],e}),{}),delays:i,minDelay:Math.min(...Object.values(i))}}))}(this.framePairs,e),this.locks=yield function(e,t,n){return function(e,t,n,r){return new(n||(n=Promise))((function(i,s){function a(e){try{l(r.next(e))}catch(e){s(e)}}function o(e){try{l(r.throw(e))}catch(e){s(e)}}function l(e){var t;e.done?i(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(a,o)}l((r=r.apply(e,t||[])).next())}))}(this,void 0,void 0,(function*(){const r=e.body||e.backBody,i=yield r[0].item.node.resolve("face"),s=null!=i&&0!=i.value;let a=Object.assign({},e);s||(Object.keys(a).forEach((e=>a[e].filter((e=>{ir.prototype.IsFaceOrAccessoryId(e.item.item.id)})))),a=a);const o=function(e,t){const n=e.reduce(((e,n)=>{const r=t[n];return r&&r.length?(r.forEach((t=>t.item.islot.forEach((n=>e[n]=t.item)))),e):e}),{});return e.forEach((e=>{const r=t[e];r&&r.length&&r.forEach((e=>{const t=e.item.islot;t.every((t=>n[t]==e.item))||t.forEach((t=>{n[t]==e.item&&delete n[t]}))}))})),n}(t,a),l=t.reduce(((e,t)=>{const n=o[t];return n?(n.vslot.forEach((t=>e[t]=n)),e):e}),{}),c={};return Object.keys(a).forEach((e=>{const t=a[e];c[e]=t.filter((e=>{let t=n[e.slot]||e.item.vslot;"pants"===e.slot&&(t=["Pn"]),"mailArm"===e.slot&&(t=["Ma"]);const r=null==t?void 0:t.every((t=>{const n=l[t]===e.item||!l[t];return!(n||!e.item.allowConflictingLocksWith||l[t]!==e.item.allowConflictingLocksWith)||!n&&l[t].allowConflictingLocksWith===e.item||n}));return e.lockBlame=null==t?void 0:t.map((e=>l[e])),e.hasLock=!t||r,!t||r}))})),{locks:l,lockedPieces:c}}))}(this.loadedPieces.pieces,t,n),this.anchors=function(e,t){let n=Object.values(t).reduce(((e,t)=>(e.push(...t),e)),[]).filter((e=>Object.keys(e.map).length>0)).reverse();const r={navel:{x:0,y:0}};if(e.action.startsWith("alert")||e.action.startsWith("heal"))switch(Number(e.frame)){case 0:r.handMove={x:-8,y:-2};break;case 1:r.handMove={x:-10,y:0};break;case 2:r.handMove={x:-12,y:3}}let i=!0;const s={};for(;n.length>0&&i;){i=!1;for(let e=0;e<n.length;++e){const t=n[e],{map:a}=t,o=Object.keys(a).find((e=>r[e])),l=a[o];if(!l)continue;const c=r[o],u={x:c.x-l.x,y:c.y-l.y,basedOffAnchor:c,anchorDistance:l,anchorName:o};s[t.slot||t.z]=u,Object.keys(a).filter((e=>e!=o)).forEach((e=>{const t=a[e],n={x:u.x+t.x,y:u.y+t.y};r[e]?console.warn("Anchor offset chain doesn't seem valid"):r[e]=n})),n=n.filter((e=>e!=t)),i=!0}}return{calculatedOffsets:s,anchors:r}}(this.request,this.locks.lockedPieces),this.bounds=or(this.request,this.anchors,this.locks),this.feetCenter=ar(this.request,this.bounds,this.anchors),this.minimumDelay=Math.min(...Object.values(this.loadedPieces.delays))}))}GetMappings(){const e=this.framePairs.sort(((e,t)=>e.item.id-t.item.id))[0],{zmap:t,smap:n}=e;return{zmap:t,smap:n}}Render(e){return this.GenerateImageToCanvas(e)}GenerateImageToCanvas(e){return lr(this,void 0,void 0,(function*(){if(this.renderedCanvas)return this.renderedCanvas;let t=e;e||(t=document.createElement("canvas"),t.style.display="none"),t.width=this.bounds.size.x,t.height=this.bounds.size.y,document.body.appendChild(t);const n=t.getContext("2d");n.globalCompositeOperation="source-over";const{zmap:r}=this.GetMappings();return this.request.flipX&&(n.translate(this.bounds.size.x,0),n.scale(-1,1)),n.scale(this.request.zoom,this.request.zoom),n.translate(this.bounds.offset.x,this.bounds.offset.y),yield r.reduce(((e,t)=>lr(this,void 0,void 0,(function*(){yield e;const r=this.locks.lockedPieces[t];if(!r||!r.length)return e;r.length>1&&r.sort(((e,t)=>(e.item.item.internal||0)-(t.item.item.internal||0))),yield Promise.all(r.map((e=>lr(this,void 0,void 0,(function*(){const t=this.anchors.calculatedOffsets[e.slot||e.z];let r={};e.origin&&t?r={x:t.x-(e.origin.x||0),y:t.y-(e.origin.y||0)}:t?r=t:e.origin&&(r=e.origin);const i=yield e.GetCanvasTexture();n.save();const s=e.item.item;if(e.item.item.internal==Xn.HairDye){const e=null==this.request.selectedItems.Hair.alpha?1:this.request.selectedItems.Hair.alpha;n.globalAlpha=this.request.hairDye.percentile*e}else null!=s.alpha&&(n.globalAlpha=s.alpha);n.drawImage(i,r.x,r.y),n.restore()})))))}))),Promise.resolve()),e||(t.remove(),t.style.display="block"),this.renderedCanvas=t,t}))}}var ur=function(e,t,n,r){return new(n||(n=Promise))((function(i,s){function a(e){try{l(r.next(e))}catch(e){s(e)}}function o(e){try{l(r.throw(e))}catch(e){s(e)}}function l(e){var t;e.done?i(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(a,o)}l((r=r.apply(e,t||[])).next())}))};class hr{constructor(e,t,n,r){this.OriginalRenderRequest=n,this.Canvas=document.createElement("canvas"),this.Canvas.style.display="none",document.body.appendChild(this.Canvas),this.context=this.Canvas.getContext("2d"),this.renderer=e,this.equipOverrides=r,this.maxFramesCalculator=t}get frame(){return this.frames[this.frameIndex]}set frame(e){const t=this.frames.indexOf(e);if(-1===t)throw new Error("Invalid frame specified, must be based off of the existing frames.");this.frameIndex=t}Prepare(){return ur(this,void 0,void 0,(function*(){const e=Object.keys(this.OriginalRenderRequest.selectedItems).reduce(((e,t)=>(e[this.OriginalRenderRequest.selectedItems[t].id.toString()]=t,e)),{}),[t,n]=yield Promise.all([this.maxFramesCalculator.GetMaxFaceFrames(this.OriginalRenderRequest),this.maxFramesCalculator.GetMaxFrames(this.OriginalRenderRequest)]);this.maxFrame=(t+1)*(n+1);let r=this.OriginalRenderRequest.timeOffset||0;const i={};let s=null;const a={};this.frames=[];for(let t=0;t<this.maxFrame;++t){const n=Object.assign({},this.OriginalRenderRequest);if(n.frame=0,n.timeOffset=r,s){const t=s.minimumDelay;Object.keys(i).forEach((r=>{if((i[r]-=t)<=0&&(a[r]?a[r]++:a[r]=1),Number(r)<=1e4)n.frame=a[r];else{const t=e[r];n.selectedItems[t]=Object.assign(Object.assign({},n.selectedItems[t]),{frame:a[r]})}}))}const o=yield this.renderer.GenerateRenderPlan(n,this.equipOverrides);r+=o.minimumDelay,s=o,Object.keys(o.loadedPieces.delays).forEach((e=>{let t=o.loadedPieces.delays[e];const n=i[e];(n<=0||!n)&&(i[e]=t,a[e]||(a[e]=0))})),this.frames[t]=o}const o=this.OriginalRenderRequest.action;if(o.startsWith("stand")||o.startsWith("alert")){const e=[...this.frames].reverse();e.shift(),e.pop(),this.frames.push.apply(this.frames,e),this.maxFrame=this.frames.length}const l=this.frames.map((e=>e.feetCenter));this.MaxFeetPosition={x:Math.max.apply(null,l.map((e=>e.x))),y:Math.max.apply(null,l.map((e=>e.y)))};const c=this.MaxFeetPosition.x-Math.min.apply(null,l.map((e=>e.x))),u=this.MaxFeetPosition.y-Math.min.apply(null,l.map((e=>e.y))),h=[],d=[];this.frames.forEach((e=>{h.push(e.bounds.size.x),d.push(e.bounds.size.y)})),this.width=Math.max.apply(null,h)+c,this.height=Math.max.apply(null,d)+u,this.ReplaceCanvas(this.Canvas,this.context),this.frameIndex=0,this.Canvas.remove(),this.Canvas.style.display="block"}))}ReplaceCanvas(e,t){this.Canvas=e,e.width=this.width,e.height=this.height,this.context=t||this.Canvas.getContext("2d")}RenderSingleFrame(){return ur(this,void 0,void 0,(function*(){const e=yield this.frame.Render(),t=this.frame.feetCenter,n=Object.assign({},t);n.x-=this.MaxFeetPosition.x,n.y-=this.MaxFeetPosition.y,this.context.clearRect(0,0,this.Canvas.width,this.Canvas.height),this.context.drawImage(e,-n.x,-n.y),this.frameIndex++,this.frameIndex>=this.maxFrame&&(this.frameIndex=0)}))}RenderLoop(){return ur(this,void 0,void 0,(function*(){return yield this.RenderSingleFrame(),this.nextFrameTimeout=setTimeout((()=>{this.RenderLoop()}),this.frame.minimumDelay),this.Canvas}))}Stop(){return ur(this,void 0,void 0,(function*(){clearTimeout(this.nextFrameTimeout)}))}}var dr=function(e,t,n,r){return new(n||(n=Promise))((function(i,s){function a(e){try{l(r.next(e))}catch(e){s(e)}}function o(e){try{l(r.throw(e))}catch(e){s(e)}}function l(e){var t;e.done?i(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(a,o)}l((r=r.apply(e,t||[])).next())}))};class fr{constructor(e,t){this.itemUtility=e,this.dataFactory=t,this.cachedPlans={}}HashRenderPlanRequest(e){const t=[e.type,e.action,e.emotion,e.skin,e.frame,e.mercEars,e.illiumEars];return e.hairDye&&t.push(e.hairDye.colorId),t.push.apply(t,Object.keys(e.selectedItems).map((t=>{const n=e.selectedItems[t];return[n.id,n.frame,n.action,n.version,n.region].join(",")}))),t.join(",")}GenerateAnimatedRenderPlan(e,t){return dr(this,void 0,void 0,(function*(){const n=new hr(this,this,e,t);return yield n.Prepare(),n}))}GenerateRenderPlan(e,t){return dr(this,void 0,void 0,(function*(){const t=this.HashRenderPlanRequest(e);if(this.cachedPlans[t]){const n=this.cachedPlans[t];return new cr(e,null,n)}const n=yield this.GetMaxFrames(e),r=yield this.GetMaxFaceFrames(e),i=yield this.GetFrameNodes(e,n,r),s=new cr(e,i);return yield s.Initialize({slots:{lefEar:{visible:!1},highlefEar:{visible:!1},ear:{visible:!1}}}),this.cachedPlans[t]=s,s}))}GetMaxFaceFrames(e,t){return dr(this,void 0,void 0,(function*(){return this.GetMaxFrames(e,e.emotion,!0)}))}GetMaxFrames(e,t,n){return dr(this,void 0,void 0,(function*(){const r=yield Promise.all(Object.values(e.selectedItems).map((r=>dr(this,void 0,void 0,(function*(){const i=this.itemUtility.IsFaceOrAccessoryId(r.id);if(i&&!n||!i&&n)return 0;const s=yield this.GetAnimationNode(e,r,t);if(!s)return 0;if(s.children.find((e=>"canvas"===e.type)))return 0;const a=s.children.map((e=>Number(e.name))).filter((e=>!Number.isNaN(e)));return Math.max.apply(null,a)})))));return Math.max.apply(null,r)}))}GetAnimationNode(e,t,n){return dr(this,void 0,void 0,(function*(){const r=yield this.itemUtility.GetItemImgPath(t.region,t.version,t.id);if(!r)return null;const i=yield this.dataFactory.resolve(t.region,t.version,r),s=this.itemUtility.IsFaceOrAccessoryId(t.id)?n||e.emotion||"default":n||t.action||e.action;let a=yield i.resolve(s);if(!a){if(70!==Math.floor((t.id-1e6)/1e4))throw new Error("Couldn't resolve to animation node for item");{let t=30;const n=yield Promise.all(Object.values(e.selectedItems).filter((e=>e!=e)).map((e=>dr(this,void 0,void 0,(function*(){const t=yield this.itemUtility.GetFolderForItem(e);return{item:e,folder:t}}))))),r=n.find((e=>"Weapon"===e.folder));if(r){const e=r.item.id;t=Math.floor((e-1e6)/1e4),70===t&&(t=30)}a=yield i.resolve(`${t}/${s}`)}}if(!a)throw new Error("Invalid emotion/animation supplied");return a}))}GetFrameNodes(e,t,n){return dr(this,void 0,void 0,(function*(){const r=yield Promise.all(Object.values(e.selectedItems).map((r=>this.MapItemToFrameNode(e,t,n,r))));if(e.hairDye&&e.hairDye.percentile){const i=e.selectedItems.Hair,s=r.find((e=>e.item==i)),a=i.id,o=10*Math.floor(a/10)+e.hairDye.colorId,l=yield this.MapItemToFrameNode(e,t,n,Object.assign(Object.assign({},i),{id:o,internal:Xn.HairDye}));l.allowConflictingLocksWith=s,r.push(l)}return r.filter((e=>e))}))}MapItemToFrameNode(e,t,n,r){return dr(this,void 0,void 0,(function*(){const i=this.itemUtility.IsFaceOrAccessoryId(r.id),s=yield this.GetAnimationNode(e,r,null);if(!s)throw new Error("Invalid action/animation selected");const a=yield this.itemUtility.GetItemImgPath(r.region,r.version,r.id),o=yield this.dataFactory.resolve(r.region,r.version,`${a}/info`),l=yield this.dataFactory.getZmap(r.region,r.version),c=yield this.dataFactory.getSmap(r.region,r.version);if(s.children.find((e=>"canvas"===e.type)))return new Yn(r,s,o,l,c);let u=void 0!==r.frame?r.frame:e.frame;u%=i?n+1:t+1;const h=yield s.resolve(u.toString());return h?new Yn(r,h,o,l,c):null}))}}const mr=["Map","Data/Map","Map001","Map002","Map2","Map1"];class pr{}class yr{}class vr{}class gr{}class br{}class wr{}class _r{}class kr{}var xr=function(e,t,n,r){return new(n||(n=Promise))((function(i,s){function a(e){try{l(r.next(e))}catch(e){s(e)}}function o(e){try{l(r.throw(e))}catch(e){s(e)}}function l(e){var t;e.done?i(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(a,o)}l((r=r.apply(e,t||[])).next())}))};class Rr{constructor(e,t,n){this.node=n,this.region=e,this.version=t}Load(e){return xr(this,void 0,void 0,(function*(){yield this.LoadInfo(e),this.Info.tileSet&&(yield this.LoadTiles()),yield this.LoadObjects(e)}))}LoadObjects(e){return xr(this,void 0,void 0,(function*(){const t=yield this.node.resolve("obj");this.Objects=yield Promise.all(t.children.map((t=>xr(this,void 0,void 0,(function*(){const n=new _r;t.children.forEach((e=>{switch(e.name){case"oS":n.ObjectSetName=e.value;break;case"l0":n.ListZero=e.value;break;case"l1":n.ListOne=e.value;break;case"l2":n.ListTwo=e.value;break;case"quest":n.questIds=e.children.map((e=>Number(e.name)));break;case"tags":n.tags=e.value;break;case"front":n.front=e.value;break;case"x":n.x=e.value;break;case"y":n.y=e.value;break;case"z":n.z=e.value;break;case"r":n.rotation=e.value;break;case"f":n.flipX=e.value;break;case"zM":n.z2=e.value;break;case"groupName":n.groupName=e.value}})),n.imgPath=n.ObjectSetName+".img",n.path=`${n.ListZero}/${n.ListOne}/${n.ListTwo}`.replace(" ",""),n.visible=!(n.questIds&&n.questIds.length||n.tags||n.groupName);const r=`Obj/${n.ObjectSetName}.img`,i=yield e.getImageWithPossiblePrefixes(this.region,this.version,mr,r);return n.ObjectSet=yield i.resolve(n.path),n}))))),this.Objects.sort(((e,t)=>e.front&&!t.front?1e4-t.z:t.front&&!e.front?e.z-1e4:e.front&&t.front?0:e.z-t.z))}))}LoadInfo(e){return xr(this,void 0,void 0,(function*(){const t=yield this.node.resolve("info"),n=new wr;if(t.children.forEach((e=>{switch(e.name){case"tS":n.tileSet=e.value;break;case"tSMag":n.tileSetMagazine=e.value;break;default:console.warn("Unknown background property: ",e.name,e)}})),this.Info=n,n.tileSet){const t=`Tile/${n.tileSet}.img`;this.TileSetNode=yield e.getImageWithPossiblePrefixes(this.region,this.version,mr,t)}}))}LoadTiles(){return xr(this,void 0,void 0,(function*(){const e=yield this.node.resolve("tile");this.Tiles=yield Promise.all(e.children.map((e=>xr(this,void 0,void 0,(function*(){const t=new kr;return e.children.forEach((e=>{switch(e.name){case"u":t.group=e.value;break;case"no":t.tileId=e.value;break;case"f":t.flipX=e.value}})),t.path=`${t.group}/${t.tileId}`.replace(" ",""),t.visible=!0,t.TileNode=yield this.TileSetNode.resolve(t.path),t})))))}))}}class Er{}var Pr=function(e,t,n,r){return new(n||(n=Promise))((function(i,s){function a(e){try{l(r.next(e))}catch(e){s(e)}}function o(e){try{l(r.throw(e))}catch(e){s(e)}}function l(e){var t;e.done?i(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(a,o)}l((r=r.apply(e,t||[])).next())}))};class Ir{constructor(e,t,n,r){this.node=r,this.id=e,this.region=t,this.version=n}Load(e){return Pr(this,void 0,void 0,(function*(){yield this.LoadInfo(),yield this.LoadPortals(),yield this.LoadLife(),yield this.LoadFootholds(),yield this.LoadLadderRope(),yield this.LoadSeats(),yield this.LoadBackgrounds(e),this.Layers=yield Promise.all(this.node.children.map((e=>{const t=Number(e.name);return Number.isNaN(t)?null:e})).filter((e=>e)).map((t=>this.LoadLayer(e,t))))}))}LoadInfo(){return Pr(this,void 0,void 0,(function*(){const e=yield this.node.resolve("info"),t=new br;e.children.forEach((e=>{switch(e.name){case"link":t.LinksTo=e.value;break;case"bgm":t.BackgroundMusic=e.value;break;case"returnMap":t.ReturnMap=e.value,t.IsReturnMap=999999999==t.ReturnMap;break;case"town":t.IsTown=e.value;break;case"swim":t.IsSwim=e.value;break;case"mobRate":t.MobRate=e.value;break;case"mapMark":t.MapMark=e.value;break;case"barrier":t.MinimumStarForce=e.value;break;case"barrierArc":t.MinimumArcaneForce=e.value;break;case"lvLimit":t.MinimumLevel=e.value;break;case"VRTop":t.top=e.value;break;case"VRRight":t.right=e.value;break;case"VRBottom":t.bottom=e.value;break;case"VRLeft":t.left=e.value}})),this.Info=t}))}LoadPortals(){return Pr(this,void 0,void 0,(function*(){const e=yield this.node.resolve("portal");this.Portals=e.children.map((e=>{const t=new Er;return e.children.forEach((e=>{switch(e.name){case"pn":t.name=e.value;break;case"tm":t.targetMapId=e.value;break;case"tn":t.targetName=e.value;break;case"x":t.x=e.value;break;case"y":t.y=e.value;break;case"image":t.image=e.value;break;case"onlyOnce":t.onlyOnce=e.value}})),t}))}))}LoadLife(){return Pr(this,void 0,void 0,(function*(){const e=yield this.node.resolve("life");this.lifeTemplates=e.children.map((e=>{const t=new gr;return e.children.forEach((e=>{switch(e.name){case"x":t.x=e.value;break;case"y":t.y=e.value;break;case"rx0":t.walkLeft=e.value;break;case"rx1":t.walkRight=e.value;break;case"id":t.id=e.value;break;case"fh":t.fh=e.value;break;case"f":t.flipX=e.value;break;case"hide":t.hidden=e.value;break;case"type":t.type=e.value}})),t}))}))}LoadFootholds(){return Pr(this,void 0,void 0,(function*(){const e=yield this.node.resolve("foothold"),t=[];e.children.forEach((e=>{e.children.forEach((n=>{n.children.forEach((r=>{const i=t[Number(r.name)]=new yr;i.id=Number(r.name),i.group=Number(n.name),i.layer=Number(e.name),r.children.forEach((e=>{switch(e.name){case"next":i.next=Number(e.value);break;case"prev":i.prev=Number(e.value);break;case"piece":i.piece=Number(e.value);break;case"x1":i.x1=Number(e.value);break;case"x2":i.x2=Number(e.value);break;case"y1":i.y1=Number(e.value);break;case"y2":i.y2=Number(e.value)}}))}))}))}))}))}LoadLadderRope(){return Pr(this,void 0,void 0,(function*(){const e=yield this.node.resolve("ladderRope");this.LadderRopes=e.children.map((e=>{const t=new vr;return e.children.forEach((e=>{switch(e.name){case"x":t.x=e.value;break;case"y1":t.y1=e.value;break;case"y2":t.y2=e.value;break;case"l":t.IsLadder=e.value}})),t}))}))}LoadBackgrounds(e){return Pr(this,void 0,void 0,(function*(){const t=yield this.node.resolve("back");this.Backgrounds=yield Promise.all(t.children.map((t=>Pr(this,void 0,void 0,(function*(){const n=new pr;t.children.forEach((e=>{switch(e.name){case"no":n.backgroundSetId=e.value;break;case"bS":n.backgroundSetName=e.value;break;case"front":n.front=e.value;break;case"a":n.alpha=(e.value||255)/255;break;case"f":n.flipX=e.value;break;case"type":n.type=e.value;break;case"x":n.x=e.value;break;case"y":n.y=e.value;break;case"rx":n.rx=e.value;break;case"ry":n.ry=e.value;break;case"cx":n.cx=e.value;break;case"cy":n.cy=e.value;break;case"ani":n.animated=e.value;break;default:console.warn("Unknown background property: ",e.name,e)}}));let r="back";n.animated&&(r="ani"),n.Path=`${r}/${n.backgroundSetId}`.replace(" ",""),n.imgPath=`Back/${n.backgroundSetName}.img`.replace(" ","");const i=yield e.getImageWithPossiblePrefixes(this.region,this.version,mr,n.imgPath);return n.backgroundNode=yield i.resolve(n.Path),n})))))}))}LoadSeats(){return Pr(this,void 0,void 0,(function*(){const e=yield this.node.resolve("seat");this.Seats=e?e.children.map((e=>e.value)):[]}))}LoadLayer(e,t){return Pr(this,void 0,void 0,(function*(){const n=new Rr(this.region,this.version,t);return yield n.Load(e),n}))}}var Sr=function(e,t,n,r){return new(n||(n=Promise))((function(i,s){function a(e){try{l(r.next(e))}catch(e){s(e)}}function o(e){try{l(r.throw(e))}catch(e){s(e)}}function l(e){var t;e.done?i(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(a,o)}l((r=r.apply(e,t||[])).next())}))};class Cr{constructor(e){this.dataFactory=e}Render(e,t,n){return Sr(this,void 0,void 0,(function*(){return yield this.LoadMap(n,e,t)}))}LoadMap(e,t,n){return Sr(this,void 0,void 0,(function*(){let r=function(e,t){let n=e;for(;n.length<9;)n="0"+n;return n}(e.toString());const i=`Map/Map${r.substring(0,1)}/${r}.img`,s=yield this.dataFactory.getImageWithPossiblePrefixes(t,n,mr,i),a=new Ir(e,t,n,s);return yield a.Load(this.dataFactory),a}))}}class Or{constructor(e){this.NotifyOnComplete=[],this.Name=e,this.CompletedLength=0,this.StartedAt=new Date}SetLength(e){this.Length=e}ReportNewLength(e){this.CompletedLength=e}ReportDone(){this.Done=!0,this.DoneAt=new Date,this.NotifyOnComplete.forEach((e=>e(this)))}ReportError(e){this.Error=e}ReportRetryAttempt(e){this.RetryIndex=e,this.RetriedAt=new Date,this.RetrySuccess=!1}ReportRetrySuccess(){this.RetrySuccess=!0,this.Error=null}RegisterNotifyOnComplete(e){this.NotifyOnComplete.push(e)}ReportFromInternalCache(){this.FromInternalCache=!0}}class Ar{constructor(e,t){this.path=e,this.data=t}}var Dr=function(e,t,n,r){return new(n||(n=Promise))((function(i,s){function a(e){try{l(r.next(e))}catch(e){s(e)}}function o(e){try{l(r.throw(e))}catch(e){s(e)}}function l(e){var t;e.done?i(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(a,o)}l((r=r.apply(e,t||[])).next())}))};class Tr{constructor(e){this.ProgressMonitorCallback=[],this.RetriesAllowed=5,this.RetryDelay=1e3,this.database=e}RegisterEventMonitor(e){this.ProgressMonitorCallback.push(e)}SetRetryCount(e){this.RetriesAllowed=e}download(e){return Dr(this,void 0,void 0,(function*(){let t=null,n=null,r=0,i=0;const s=new Or(e);this.ProgressMonitorCallback.forEach((e=>e(s)));const a=yield this.database.requests.get(e);if(a){const e=a.data;return s.ReportFromInternalCache(),s.SetLength(e.length),s.ReportNewLength(e.length),s.ReportDone(),e}for(;r<this.RetriesAllowed;)try{if(t=yield fetch(e),t.status>=400)throw new Error("Invalid response status code");n=t.body.getReader(),i=+t.headers.get("Content-Length"),s.SetLength(i),r&&s.ReportRetrySuccess();break}catch(e){s.ReportError(e),yield new Promise((e=>setTimeout((()=>e(null)),this.RetryDelay))),r++,s.ReportRetryAttempt(r)}let o=0,l=[];for(;;)try{const{done:e,value:t}=yield n.read();if(e)break;l.push(t),o+=t.length,s.ReportNewLength(o)}catch(a){s.ReportError(a);let l=!1;for(;++r<this.RetriesAllowed;){yield new Promise((e=>setTimeout((()=>e(null)),this.RetryDelay)));try{if(s.ReportRetryAttempt(r),t=yield fetch(e,{headers:{Range:`bytes=${o}-${i}`}}),t.status>=400)throw new Error("Invalid response status code");n=t.body.getReader(),s.ReportRetrySuccess(),l=!0}catch(e){s.ReportError(e),yield new Promise((e=>setTimeout((()=>e(null)),this.RetryDelay)))}}if(!l)throw s.ReportError(a),a}let c=new Uint8Array(o),u=0;for(let e of l)c.set(e,u),u+=e.length;return yield this.database.requests.put(new Ar(e,c),e),s.ReportDone(),c}))}fetchJson(e){return Dr(this,void 0,void 0,(function*(){const t=yield this.download(e),n=new TextDecoder("utf-8").decode(t);return JSON.parse(n)}))}fetchAb(e){return Dr(this,void 0,void 0,(function*(){return(yield this.download(e)).buffer}))}}const jr=n(802);class Br{constructor(e,t,n){this.ab=e,this.view=new DataView(e,t||0,n||e.byteLength),this.position=0,this.startPosition=t||0,this.length=e.byteLength}Advance(e){const t=this.position;return this.position+=e,t}ReadByte(){return this.view.getInt8(this.Advance(1))}ReadUByte(){return this.view.getUint8(this.Advance(1))}ReadInt16(){return this.view.getInt16(this.Advance(2),!0)}ReadUInt16(){return this.view.getUint16(this.Advance(2),!0)}ReadInt32(){return this.view.getInt32(this.Advance(4),!0)}ReadUInt32(){return this.view.getUint32(this.Advance(4),!0)}ReadInt64(){return this.view.getBigInt64(this.Advance(8),!0)}ReadUInt64(){return this.view.getBigUint64(this.Advance(8),!0)}ReadSingle(){return this.view.getFloat32(this.Advance(4),!0)}ReadDouble(){return this.view.getFloat64(this.Advance(8),!0)}ReadWZSingle(){const e=this.ReadByte();return 128==e?this.ReadSingle():e}ReadWZInt(){const e=this.ReadByte();return-128==e?this.ReadInt32():e}ReadWZStringBlock(){if(0===this.ReadByte())return this.ReadWZString();throw"Not supported string"}ReadWZString(){let e=this.ReadByte();const t=e>0;t?127==e?e=this.ReadInt32():e*=2:-128==e?e=this.ReadInt32():e*=-1;let n=[];if(t){e/=2;for(let r=0;r<e;++r){let e=this.ReadUInt16();e^=t?43690:(170+r)%255,n[r]=e}}else for(let r=0;r<e;++r){let e=this.ReadUByte();e^=t?43690:(170+r)%255,n[r]=e}return String.fromCharCode.apply(null,n)}ReadCanvas(e,t,n,r){7==n&&r--;const i=new Uint8Array(this.ab,this.position+this.startPosition,r);try{let r=null;if(4==n||6==n||7==n)r=jr.inflate(i);else{if(5!=n)throw"Not accepted format";r=i}if(r.length%4){const n=e*t*4,i=n-r.length;if(console.warn("Length isn't valid"),i>0){const e=new Uint8Array(n);e.set(r,0),r=e}else r=r.subarray(0,n)}return null==r&&console.warn("Canvas has no image data"),new ImageData(new Uint8ClampedArray(r),e,t)}catch(e){console.warn("Error loading canvas",e)}return null}}class Mr{constructor(e,t,n,r){this.name=e,this.type=t,this.children=n,this.parent=r}resolve(e){if(!e){if("uol"==this.type)return this.parent.resolve(this.value);if("canvas"==this.type&&this.children){const e=this.children.find((e=>"_inlink"==e.name));if(e)return this.HandleInlink(this,e);const t=this.children.find((e=>"_outlink"==e.name));return t?this.HandleOutlink(this,t):Promise.resolve(this)}return Promise.resolve(this)}const t=Array.isArray(e)?e:e.split(/[/\\]/g),n=t.shift();if(".."==n)return this.parent.resolve(t.join("/"));const r=this.children;return r?new Promise((e=>e(this.FindAndResolve(r,t,n)))):null}GetValue(){return Promise.resolve(this.value)}FindAndResolve(e,t,n){var r=e.find((e=>e&&(e.name==n||e.name.endsWith(".img")&&e.name.substr(0,e.name.length-4)==n)));return r&&t.length?r.resolve(t):r}HandleInlink(e,t){if(!t)return Promise.resolve(e);const n=t.value;n||Promise.resolve(e);let r=e;for(;r&&"image"!=r.type;)r=r.parent;return r||Promise.resolve(e),r.resolve(n).then((e=>e?e.resolve():null))}HandleOutlink(e,t){if(!t)return Promise.resolve(e);const n=t.value;if(!n)return Promise.resolve(e);let r=e;for(;r&&null!=r.parent;)r=r.parent;return r.resolve(n).then((e=>e?e.resolve():r.resolve("Data/"+n).then((e=>e?e.resolve():null))))}}class Fr extends Mr{constructor(e,t,n,r,i){super(e,t,r,i),this.value=n}}class Nr extends Mr{constructor(e,t,n){super(e,"sound",null,n),t.ReadByte(),this.length=t.ReadWZInt(),this.duration=t.ReadWZInt(),this.value=t.ab.slice(0,this.length)}Play(e,t){const n=new AudioContext,r=n.createBufferSource(),i=n.createAnalyser();return this.playingPromise=n.decodeAudioData(this.value.slice(0,this.length),(s=>{this.analyser=i,r.connect(n.destination),r.connect(i),r.buffer=s,this.audio=r,t&&(this.audio.onended=t),e&&(this.audio.loop=e),this.audio.start(0),this.isPlaying="suspended"!=r.context.state})),this.playingPromise}Stop(){this.audio&&(this.audio.stop(0),this.isPlaying=!1)}}class Kr extends Mr{constructor(e,t,n){super(e,"property",void 0,t),n&&(this.children=this.LoadChildren(n))}LoadChildren(e){const t=e.ReadWZInt(),n=[];for(let r=0;r<t;++r){const t=e.ReadWZStringBlock(),r=e.ReadByte();let i=null;switch(r){case 0:i=new Fr(t,"property",null,null,this);break;case 16:i=new Fr(t,"sbyte",e.ReadByte(),null,this);break;case 17:i=new Fr(t,"byte",e.ReadUByte(),null,this);break;case 11:case 2:case 18:i=new Fr(t,"ui16",e.ReadUInt16(),null,this);break;case 3:case 19:i=new Fr(t,"i32",e.ReadWZInt(),null,this);break;case 4:i=new Fr(t,"float",e.ReadWZSingle(),null,this);break;case 5:i=new Fr(t,"double",e.ReadDouble(),null,this);break;case 8:i=new Fr(t,"string",e.ReadWZStringBlock(),null,this);break;case 9:const n=e.ReadUInt32(),s=e.position+n;i=this.ExtendedPropertyValue(this,t,e),e.position=s;break;case 20:i=new Fr(t,"i64",e.ReadInt64(),null,this);break;case 21:i=new Fr(t,"ui64",e.ReadUInt64(),null,this);default:throw`Unknown property type: ${r}`}n.push(i)}return n}ExtendedPropertyValue(e,t,n){const r=n.ReadWZStringBlock();switch(r){case"Property":return n.ReadUInt16(),new Kr(t,this,n);case"Canvas":return new Lr(t,n,this);case"Shape2D#Vector2D":return new Fr(t,"vector",{x:n.ReadWZInt(),y:n.ReadWZInt()},null,e);case"Shape2D#Convex2D":const i=n.ReadWZInt(),s=[],a=new Fr(t,"convex",void 0,s,e);for(let e=0;e<i;++e)s.push(this.ExtendedPropertyValue(a,e.toString(),n));return a;case"Sound_DX8":return new Nr(t,n,this);case"UOL":return n.ReadByte(),new Fr(t,"uol",n.ReadWZStringBlock(),null,e);default:throw`Unknown extended property type: ${r}`}}}class Lr extends Kr{constructor(e,t,n){super(e,n),this.type="canvas",t.ReadByte(),t.ReadByte()&&(t.ReadInt16(),this.children=this.LoadChildren(t)),this.width=t.ReadWZInt(),this.height=t.ReadWZInt(),this.format1=t.ReadWZInt(),this.format2=t.ReadByte(),t.ReadInt32(),this.blockLength=t.ReadInt32(),t.ReadByte(),this.header=t.ReadInt16(),t.position-=2,this.reader=t,this.canvasLocation=t.position}GetValue(){const e=this.reader.position;this.reader.position=this.canvasLocation;var t=this.reader.ReadCanvas(this.width,this.height,this.format1+this.format2,this.blockLength);return this.reader.position=e,Promise.resolve(t)}}class $r extends Kr{constructor(e,t,n,r,i){super(e,i),this.type="image";const s=new Br(r);if(115!=s.ReadByte())return null;if("Property"!=s.ReadWZString())throw"Invalid first property";if(0!=s.ReadInt16())throw"Invalid header";this.children=this.LoadChildren(s)}}var Ur=function(e,t,n,r){return new(n||(n=Promise))((function(i,s){function a(e){try{l(r.next(e))}catch(e){s(e)}}function o(e){try{l(r.throw(e))}catch(e){s(e)}}function l(e){var t;e.done?i(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(a,o)}l((r=r.apply(e,t||[])).next())}))};class qr{constructor(e,t){this.endPoint=t,this.network=e,this.imageCache={},this.imageABCache={},this.imagesCache={},this.folderCache={},this.versionPseudoResolvers={},this.zmapCache={},this.smapCache={}}fetchJson(e){const t=`${this.endPoint}/json/${e}`;return this.network.fetchJson(t)}fetchAb(e){const t=`${this.endPoint}/data/${e}`;return this.network.fetchAb(t)}getImages(e,t){const n=`${e}--${t}`,r=this.imagesCache[n];if(r)return r;const i=this.fetchJson(`${e}/${t}/images.json`).then((e=>e));return this.imagesCache[n]=i,i}getImageAB(e,t,n){return Ur(this,void 0,void 0,(function*(){const r=(yield this.getImages(e,t))[n];if(!r)throw new Error(`Couldn't find the image ${n} in ${e}/${t}`);const i=this.imageABCache[r];if(i)return i;const s=this.fetchAb(`${r}.img`);return this.imageABCache[r]=s,s}))}getVersionResolver(e,t){const n=`${e}--${t}`,r=this.versionPseudoResolvers[n];if(r)return r;const i={name:n,type:"PseudoResolver",children:null,value:null,GetValue:()=>{throw new Error("Not supported")},resolve:n=>this.resolve(e,t,n)};return this.versionPseudoResolvers[n]=i,i}getImageWithPossiblePrefixes(e,t,n,r){return Ur(this,void 0,void 0,(function*(){const i=yield n.reduce(((n,i)=>Ur(this,void 0,void 0,(function*(){const s=yield n;if(s)return s;const a=`${i}/${r}`;try{return yield this.getImage(e,t,a)}catch(e){}}))),Promise.resolve(null));if(!i)throw new Error(`Couldn't find the image ${r} in ${e}/${t}, using prefixes: "${n.join(",")}"`);return i}))}getImage(e,t,n){return Ur(this,void 0,void 0,(function*(){const r=`${e}/${t}/${n}`,i=this.imageCache[r];if(i)return i;const s=this.getVersionResolver(e,t),a=yield this.getImageAB(e,t,n),o=new $r(n,e,t,a,s);return this.imageCache[r]=o,o}))}resolve(e,t,n){return Ur(this,void 0,void 0,(function*(){if(n.endsWith(".img"))return this.getImage(e,t,n);const r=n.split(".img/",2);r[0]=r[0]+".img";const[i,s]=r;return(yield this.getImage(e,t,i)).resolve(s)}))}getFolders(e,t){const n=`${e}-${t}`,r=this.folderCache[n];if(r)return r;const i=this.fetchJson(`${e}/${t}/characterFolders.json`).then((e=>e));return this.folderCache[n]=i,i}getZmap(e,t){const n=`${e}-${t}`,r=this.zmapCache[n];if(r)return r;const i=this.fetchJson(`${e}/${t}/zmap.json`).then((e=>e.reverse())).then((e=>e));return this.zmapCache[n]=i,i}getSmap(e,t){const n=`${e}-${t}`,r=this.smapCache[n];return r||(this.smapCache[n]=this.resolve(e,t,"Base/smap.img").then((e=>e.children.reduce(((e,t)=>{var n;return e[t.name]=(null===(n=t.value)||void 0===n?void 0:n.match(/.{1,2}/g))||[],e}),{}))),this.smapCache[n])}}const zr=class{constructor(e){this.Database=new Hn,this.Network=new Tr(this.Database),this.DataFactory=new qr(this.Network,e.Endpoint),this.ItemUtilities=new ir(this.DataFactory),this.CharacterRenderer=new fr(this.ItemUtilities,this.DataFactory),this.MapRenderer=new Cr(this.DataFactory)}}})(),r})()}));
+!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t():"function"==typeof define&&define.amd?define("maplestory",[],t):"object"==typeof exports?exports.maplestory=t():e.maplestory=t()}(self,(function(){return(()=>{var e={802:function(e,t){!function(e){"use strict";var t=(e,t,n,r)=>{let i=65535&e|0,s=e>>>16&65535|0,a=0;for(;0!==n;){a=n>2e3?2e3:n,n-=a;do{i=i+t[r++]|0,s=s+i|0}while(--a);i%=65521,s%=65521}return i|s<<16|0};const n=new Uint32Array((()=>{let e,t=[];for(var n=0;n<256;n++){e=n;for(var r=0;r<8;r++)e=1&e?3988292384^e>>>1:e>>>1;t[n]=e}return t})());var r=(e,t,r,i)=>{const s=n,a=i+r;e^=-1;for(let n=i;n<a;n++)e=e>>>8^s[255&(e^t[n])];return-1^e};var i=function(e,t){let n,r,i,s,a,o,l,c,u,h,d,f,m,p,y,v,g,b,w,_,k,x,R,E;const P=e.state;n=e.next_in,R=e.input,r=n+(e.avail_in-5),i=e.next_out,E=e.output,s=i-(t-e.avail_out),a=i+(e.avail_out-257),o=P.dmax,l=P.wsize,c=P.whave,u=P.wnext,h=P.window,d=P.hold,f=P.bits,m=P.lencode,p=P.distcode,y=(1<<P.lenbits)-1,v=(1<<P.distbits)-1;e:do{f<15&&(d+=R[n++]<<f,f+=8,d+=R[n++]<<f,f+=8),g=m[d&y];t:for(;;){if(b=g>>>24,d>>>=b,f-=b,b=g>>>16&255,0===b)E[i++]=65535&g;else{if(!(16&b)){if(0==(64&b)){g=m[(65535&g)+(d&(1<<b)-1)];continue t}if(32&b){P.mode=12;break e}e.msg="invalid literal/length code",P.mode=30;break e}w=65535&g,b&=15,b&&(f<b&&(d+=R[n++]<<f,f+=8),w+=d&(1<<b)-1,d>>>=b,f-=b),f<15&&(d+=R[n++]<<f,f+=8,d+=R[n++]<<f,f+=8),g=p[d&v];n:for(;;){if(b=g>>>24,d>>>=b,f-=b,b=g>>>16&255,!(16&b)){if(0==(64&b)){g=p[(65535&g)+(d&(1<<b)-1)];continue n}e.msg="invalid distance code",P.mode=30;break e}if(_=65535&g,b&=15,f<b&&(d+=R[n++]<<f,f+=8,f<b&&(d+=R[n++]<<f,f+=8)),_+=d&(1<<b)-1,_>o){e.msg="invalid distance too far back",P.mode=30;break e}if(d>>>=b,f-=b,b=i-s,_>b){if(b=_-b,b>c&&P.sane){e.msg="invalid distance too far back",P.mode=30;break e}if(k=0,x=h,0===u){if(k+=l-b,b<w){w-=b;do{E[i++]=h[k++]}while(--b);k=i-_,x=E}}else if(u<b){if(k+=l+u-b,b-=u,b<w){w-=b;do{E[i++]=h[k++]}while(--b);if(k=0,u<w){b=u,w-=b;do{E[i++]=h[k++]}while(--b);k=i-_,x=E}}}else if(k+=u-b,b<w){w-=b;do{E[i++]=h[k++]}while(--b);k=i-_,x=E}for(;w>2;)E[i++]=x[k++],E[i++]=x[k++],E[i++]=x[k++],w-=3;w&&(E[i++]=x[k++],w>1&&(E[i++]=x[k++]))}else{k=i-_;do{E[i++]=E[k++],E[i++]=E[k++],E[i++]=E[k++],w-=3}while(w>2);w&&(E[i++]=E[k++],w>1&&(E[i++]=E[k++]))}break}}break}}while(n<r&&i<a);w=f>>3,n-=w,f-=w<<3,d&=(1<<f)-1,e.next_in=n,e.next_out=i,e.avail_in=n<r?r-n+5:5-(n-r),e.avail_out=i<a?a-i+257:257-(i-a),P.hold=d,P.bits=f};const s=15,a=new Uint16Array([3,4,5,6,7,8,9,10,11,13,15,17,19,23,27,31,35,43,51,59,67,83,99,115,131,163,195,227,258,0,0]),o=new Uint8Array([16,16,16,16,16,16,16,16,17,17,17,17,18,18,18,18,19,19,19,19,20,20,20,20,21,21,21,21,16,72,78]),l=new Uint16Array([1,2,3,4,5,7,9,13,17,25,33,49,65,97,129,193,257,385,513,769,1025,1537,2049,3073,4097,6145,8193,12289,16385,24577,0,0]),c=new Uint8Array([16,16,16,16,17,17,18,18,19,19,20,20,21,21,22,22,23,23,24,24,25,25,26,26,27,27,28,28,29,29,64,64]);var u=(e,t,n,r,i,u,h,d)=>{const f=d.bits;let m,p,y,v,g,b,w=0,_=0,k=0,x=0,R=0,E=0,P=0,I=0,S=0,C=0,O=null,A=0;const D=new Uint16Array(16),T=new Uint16Array(16);let j,B,M,F=null,N=0;for(w=0;w<=s;w++)D[w]=0;for(_=0;_<r;_++)D[t[n+_]]++;for(R=f,x=s;x>=1&&0===D[x];x--);if(R>x&&(R=x),0===x)return i[u++]=20971520,i[u++]=20971520,d.bits=1,0;for(k=1;k<x&&0===D[k];k++);for(R<k&&(R=k),I=1,w=1;w<=s;w++)if(I<<=1,I-=D[w],I<0)return-1;if(I>0&&(0===e||1!==x))return-1;for(T[1]=0,w=1;w<s;w++)T[w+1]=T[w]+D[w];for(_=0;_<r;_++)0!==t[n+_]&&(h[T[t[n+_]]++]=_);if(0===e?(O=F=h,b=19):1===e?(O=a,A-=257,F=o,N-=257,b=256):(O=l,F=c,b=-1),C=0,_=0,w=k,g=u,E=R,P=0,y=-1,S=1<<R,v=S-1,1===e&&S>852||2===e&&S>592)return 1;for(;;){j=w-P,h[_]<b?(B=0,M=h[_]):h[_]>b?(B=F[N+h[_]],M=O[A+h[_]]):(B=96,M=0),m=1<<w-P,p=1<<E,k=p;do{p-=m,i[g+(C>>P)+p]=j<<24|B<<16|M|0}while(0!==p);for(m=1<<w-1;C&m;)m>>=1;if(0!==m?(C&=m-1,C+=m):C=0,_++,0==--D[w]){if(w===x)break;w=t[n+h[_]]}if(w>R&&(C&v)!==y){for(0===P&&(P=R),g+=k,E=w-P,I=1<<E;E+P<x&&(I-=D[E+P],!(I<=0));)E++,I<<=1;if(S+=1<<E,1===e&&S>852||2===e&&S>592)return 1;y=C&v,i[y]=R<<24|E<<16|g-u|0}}return 0!==C&&(i[g+C]=w-P<<24|64<<16|0),d.bits=R,0},h={Z_NO_FLUSH:0,Z_PARTIAL_FLUSH:1,Z_SYNC_FLUSH:2,Z_FULL_FLUSH:3,Z_FINISH:4,Z_BLOCK:5,Z_TREES:6,Z_OK:0,Z_STREAM_END:1,Z_NEED_DICT:2,Z_ERRNO:-1,Z_STREAM_ERROR:-2,Z_DATA_ERROR:-3,Z_MEM_ERROR:-4,Z_BUF_ERROR:-5,Z_NO_COMPRESSION:0,Z_BEST_SPEED:1,Z_BEST_COMPRESSION:9,Z_DEFAULT_COMPRESSION:-1,Z_FILTERED:1,Z_HUFFMAN_ONLY:2,Z_RLE:3,Z_FIXED:4,Z_DEFAULT_STRATEGY:0,Z_BINARY:0,Z_TEXT:1,Z_UNKNOWN:2,Z_DEFLATED:8};const{Z_FINISH:d,Z_BLOCK:f,Z_TREES:m,Z_OK:p,Z_STREAM_END:y,Z_NEED_DICT:v,Z_STREAM_ERROR:g,Z_DATA_ERROR:b,Z_MEM_ERROR:w,Z_BUF_ERROR:_,Z_DEFLATED:k}=h,x=12,R=30,E=e=>(e>>>24&255)+(e>>>8&65280)+((65280&e)<<8)+((255&e)<<24);function P(){this.mode=0,this.last=!1,this.wrap=0,this.havedict=!1,this.flags=0,this.dmax=0,this.check=0,this.total=0,this.head=null,this.wbits=0,this.wsize=0,this.whave=0,this.wnext=0,this.window=null,this.hold=0,this.bits=0,this.length=0,this.offset=0,this.extra=0,this.lencode=null,this.distcode=null,this.lenbits=0,this.distbits=0,this.ncode=0,this.nlen=0,this.ndist=0,this.have=0,this.next=null,this.lens=new Uint16Array(320),this.work=new Uint16Array(288),this.lendyn=null,this.distdyn=null,this.sane=0,this.back=0,this.was=0}const I=e=>{if(!e||!e.state)return g;const t=e.state;return e.total_in=e.total_out=t.total=0,e.msg="",t.wrap&&(e.adler=1&t.wrap),t.mode=1,t.last=0,t.havedict=0,t.dmax=32768,t.head=null,t.hold=0,t.bits=0,t.lencode=t.lendyn=new Int32Array(852),t.distcode=t.distdyn=new Int32Array(592),t.sane=1,t.back=-1,p},S=e=>{if(!e||!e.state)return g;const t=e.state;return t.wsize=0,t.whave=0,t.wnext=0,I(e)},C=(e,t)=>{let n;if(!e||!e.state)return g;const r=e.state;return t<0?(n=0,t=-t):(n=1+(t>>4),t<48&&(t&=15)),t&&(t<8||t>15)?g:(null!==r.window&&r.wbits!==t&&(r.window=null),r.wrap=n,r.wbits=t,S(e))},O=(e,t)=>{if(!e)return g;const n=new P;e.state=n,n.window=null;const r=C(e,t);return r!==p&&(e.state=null),r};let A,D,T=!0;const j=e=>{if(T){A=new Int32Array(512),D=new Int32Array(32);let t=0;for(;t<144;)e.lens[t++]=8;for(;t<256;)e.lens[t++]=9;for(;t<280;)e.lens[t++]=7;for(;t<288;)e.lens[t++]=8;for(u(1,e.lens,0,288,A,0,e.work,{bits:9}),t=0;t<32;)e.lens[t++]=5;u(2,e.lens,0,32,D,0,e.work,{bits:5}),T=!1}e.lencode=A,e.lenbits=9,e.distcode=D,e.distbits=5},B=(e,t,n,r)=>{let i;const s=e.state;return null===s.window&&(s.wsize=1<<s.wbits,s.wnext=0,s.whave=0,s.window=new Uint8Array(s.wsize)),r>=s.wsize?(s.window.set(t.subarray(n-s.wsize,n),0),s.wnext=0,s.whave=s.wsize):(i=s.wsize-s.wnext,i>r&&(i=r),s.window.set(t.subarray(n-r,n-r+i),s.wnext),(r-=i)?(s.window.set(t.subarray(n-r,n),0),s.wnext=r,s.whave=s.wsize):(s.wnext+=i,s.wnext===s.wsize&&(s.wnext=0),s.whave<s.wsize&&(s.whave+=i))),0};var M=S,F=O,N=(e,n)=>{let s,a,o,l,c,h,P,I,S,C,O,A,D,T,M,F,N,K,L,$,U,q,z=0;const Z=new Uint8Array(4);let W,G;const V=new Uint8Array([16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15]);if(!e||!e.state||!e.output||!e.input&&0!==e.avail_in)return g;s=e.state,s.mode===x&&(s.mode=13),c=e.next_out,o=e.output,P=e.avail_out,l=e.next_in,a=e.input,h=e.avail_in,I=s.hold,S=s.bits,C=h,O=P,q=p;e:for(;;)switch(s.mode){case 1:if(0===s.wrap){s.mode=13;break}for(;S<16;){if(0===h)break e;h--,I+=a[l++]<<S,S+=8}if(2&s.wrap&&35615===I){s.check=0,Z[0]=255&I,Z[1]=I>>>8&255,s.check=r(s.check,Z,2,0),I=0,S=0,s.mode=2;break}if(s.flags=0,s.head&&(s.head.done=!1),!(1&s.wrap)||(((255&I)<<8)+(I>>8))%31){e.msg="incorrect header check",s.mode=R;break}if((15&I)!==k){e.msg="unknown compression method",s.mode=R;break}if(I>>>=4,S-=4,U=8+(15&I),0===s.wbits)s.wbits=U;else if(U>s.wbits){e.msg="invalid window size",s.mode=R;break}s.dmax=1<<s.wbits,e.adler=s.check=1,s.mode=512&I?10:x,I=0,S=0;break;case 2:for(;S<16;){if(0===h)break e;h--,I+=a[l++]<<S,S+=8}if(s.flags=I,(255&s.flags)!==k){e.msg="unknown compression method",s.mode=R;break}if(57344&s.flags){e.msg="unknown header flags set",s.mode=R;break}s.head&&(s.head.text=I>>8&1),512&s.flags&&(Z[0]=255&I,Z[1]=I>>>8&255,s.check=r(s.check,Z,2,0)),I=0,S=0,s.mode=3;case 3:for(;S<32;){if(0===h)break e;h--,I+=a[l++]<<S,S+=8}s.head&&(s.head.time=I),512&s.flags&&(Z[0]=255&I,Z[1]=I>>>8&255,Z[2]=I>>>16&255,Z[3]=I>>>24&255,s.check=r(s.check,Z,4,0)),I=0,S=0,s.mode=4;case 4:for(;S<16;){if(0===h)break e;h--,I+=a[l++]<<S,S+=8}s.head&&(s.head.xflags=255&I,s.head.os=I>>8),512&s.flags&&(Z[0]=255&I,Z[1]=I>>>8&255,s.check=r(s.check,Z,2,0)),I=0,S=0,s.mode=5;case 5:if(1024&s.flags){for(;S<16;){if(0===h)break e;h--,I+=a[l++]<<S,S+=8}s.length=I,s.head&&(s.head.extra_len=I),512&s.flags&&(Z[0]=255&I,Z[1]=I>>>8&255,s.check=r(s.check,Z,2,0)),I=0,S=0}else s.head&&(s.head.extra=null);s.mode=6;case 6:if(1024&s.flags&&(A=s.length,A>h&&(A=h),A&&(s.head&&(U=s.head.extra_len-s.length,s.head.extra||(s.head.extra=new Uint8Array(s.head.extra_len)),s.head.extra.set(a.subarray(l,l+A),U)),512&s.flags&&(s.check=r(s.check,a,A,l)),h-=A,l+=A,s.length-=A),s.length))break e;s.length=0,s.mode=7;case 7:if(2048&s.flags){if(0===h)break e;A=0;do{U=a[l+A++],s.head&&U&&s.length<65536&&(s.head.name+=String.fromCharCode(U))}while(U&&A<h);if(512&s.flags&&(s.check=r(s.check,a,A,l)),h-=A,l+=A,U)break e}else s.head&&(s.head.name=null);s.length=0,s.mode=8;case 8:if(4096&s.flags){if(0===h)break e;A=0;do{U=a[l+A++],s.head&&U&&s.length<65536&&(s.head.comment+=String.fromCharCode(U))}while(U&&A<h);if(512&s.flags&&(s.check=r(s.check,a,A,l)),h-=A,l+=A,U)break e}else s.head&&(s.head.comment=null);s.mode=9;case 9:if(512&s.flags){for(;S<16;){if(0===h)break e;h--,I+=a[l++]<<S,S+=8}if(I!==(65535&s.check)){e.msg="header crc mismatch",s.mode=R;break}I=0,S=0}s.head&&(s.head.hcrc=s.flags>>9&1,s.head.done=!0),e.adler=s.check=0,s.mode=x;break;case 10:for(;S<32;){if(0===h)break e;h--,I+=a[l++]<<S,S+=8}e.adler=s.check=E(I),I=0,S=0,s.mode=11;case 11:if(0===s.havedict)return e.next_out=c,e.avail_out=P,e.next_in=l,e.avail_in=h,s.hold=I,s.bits=S,v;e.adler=s.check=1,s.mode=x;case x:if(n===f||n===m)break e;case 13:if(s.last){I>>>=7&S,S-=7&S,s.mode=27;break}for(;S<3;){if(0===h)break e;h--,I+=a[l++]<<S,S+=8}switch(s.last=1&I,I>>>=1,S-=1,3&I){case 0:s.mode=14;break;case 1:if(j(s),s.mode=20,n===m){I>>>=2,S-=2;break e}break;case 2:s.mode=17;break;case 3:e.msg="invalid block type",s.mode=R}I>>>=2,S-=2;break;case 14:for(I>>>=7&S,S-=7&S;S<32;){if(0===h)break e;h--,I+=a[l++]<<S,S+=8}if((65535&I)!=(I>>>16^65535)){e.msg="invalid stored block lengths",s.mode=R;break}if(s.length=65535&I,I=0,S=0,s.mode=15,n===m)break e;case 15:s.mode=16;case 16:if(A=s.length,A){if(A>h&&(A=h),A>P&&(A=P),0===A)break e;o.set(a.subarray(l,l+A),c),h-=A,l+=A,P-=A,c+=A,s.length-=A;break}s.mode=x;break;case 17:for(;S<14;){if(0===h)break e;h--,I+=a[l++]<<S,S+=8}if(s.nlen=257+(31&I),I>>>=5,S-=5,s.ndist=1+(31&I),I>>>=5,S-=5,s.ncode=4+(15&I),I>>>=4,S-=4,s.nlen>286||s.ndist>30){e.msg="too many length or distance symbols",s.mode=R;break}s.have=0,s.mode=18;case 18:for(;s.have<s.ncode;){for(;S<3;){if(0===h)break e;h--,I+=a[l++]<<S,S+=8}s.lens[V[s.have++]]=7&I,I>>>=3,S-=3}for(;s.have<19;)s.lens[V[s.have++]]=0;if(s.lencode=s.lendyn,s.lenbits=7,W={bits:s.lenbits},q=u(0,s.lens,0,19,s.lencode,0,s.work,W),s.lenbits=W.bits,q){e.msg="invalid code lengths set",s.mode=R;break}s.have=0,s.mode=19;case 19:for(;s.have<s.nlen+s.ndist;){for(;z=s.lencode[I&(1<<s.lenbits)-1],M=z>>>24,F=z>>>16&255,N=65535&z,!(M<=S);){if(0===h)break e;h--,I+=a[l++]<<S,S+=8}if(N<16)I>>>=M,S-=M,s.lens[s.have++]=N;else{if(16===N){for(G=M+2;S<G;){if(0===h)break e;h--,I+=a[l++]<<S,S+=8}if(I>>>=M,S-=M,0===s.have){e.msg="invalid bit length repeat",s.mode=R;break}U=s.lens[s.have-1],A=3+(3&I),I>>>=2,S-=2}else if(17===N){for(G=M+3;S<G;){if(0===h)break e;h--,I+=a[l++]<<S,S+=8}I>>>=M,S-=M,U=0,A=3+(7&I),I>>>=3,S-=3}else{for(G=M+7;S<G;){if(0===h)break e;h--,I+=a[l++]<<S,S+=8}I>>>=M,S-=M,U=0,A=11+(127&I),I>>>=7,S-=7}if(s.have+A>s.nlen+s.ndist){e.msg="invalid bit length repeat",s.mode=R;break}for(;A--;)s.lens[s.have++]=U}}if(s.mode===R)break;if(0===s.lens[256]){e.msg="invalid code -- missing end-of-block",s.mode=R;break}if(s.lenbits=9,W={bits:s.lenbits},q=u(1,s.lens,0,s.nlen,s.lencode,0,s.work,W),s.lenbits=W.bits,q){e.msg="invalid literal/lengths set",s.mode=R;break}if(s.distbits=6,s.distcode=s.distdyn,W={bits:s.distbits},q=u(2,s.lens,s.nlen,s.ndist,s.distcode,0,s.work,W),s.distbits=W.bits,q){e.msg="invalid distances set",s.mode=R;break}if(s.mode=20,n===m)break e;case 20:s.mode=21;case 21:if(h>=6&&P>=258){e.next_out=c,e.avail_out=P,e.next_in=l,e.avail_in=h,s.hold=I,s.bits=S,i(e,O),c=e.next_out,o=e.output,P=e.avail_out,l=e.next_in,a=e.input,h=e.avail_in,I=s.hold,S=s.bits,s.mode===x&&(s.back=-1);break}for(s.back=0;z=s.lencode[I&(1<<s.lenbits)-1],M=z>>>24,F=z>>>16&255,N=65535&z,!(M<=S);){if(0===h)break e;h--,I+=a[l++]<<S,S+=8}if(F&&0==(240&F)){for(K=M,L=F,$=N;z=s.lencode[$+((I&(1<<K+L)-1)>>K)],M=z>>>24,F=z>>>16&255,N=65535&z,!(K+M<=S);){if(0===h)break e;h--,I+=a[l++]<<S,S+=8}I>>>=K,S-=K,s.back+=K}if(I>>>=M,S-=M,s.back+=M,s.length=N,0===F){s.mode=26;break}if(32&F){s.back=-1,s.mode=x;break}if(64&F){e.msg="invalid literal/length code",s.mode=R;break}s.extra=15&F,s.mode=22;case 22:if(s.extra){for(G=s.extra;S<G;){if(0===h)break e;h--,I+=a[l++]<<S,S+=8}s.length+=I&(1<<s.extra)-1,I>>>=s.extra,S-=s.extra,s.back+=s.extra}s.was=s.length,s.mode=23;case 23:for(;z=s.distcode[I&(1<<s.distbits)-1],M=z>>>24,F=z>>>16&255,N=65535&z,!(M<=S);){if(0===h)break e;h--,I+=a[l++]<<S,S+=8}if(0==(240&F)){for(K=M,L=F,$=N;z=s.distcode[$+((I&(1<<K+L)-1)>>K)],M=z>>>24,F=z>>>16&255,N=65535&z,!(K+M<=S);){if(0===h)break e;h--,I+=a[l++]<<S,S+=8}I>>>=K,S-=K,s.back+=K}if(I>>>=M,S-=M,s.back+=M,64&F){e.msg="invalid distance code",s.mode=R;break}s.offset=N,s.extra=15&F,s.mode=24;case 24:if(s.extra){for(G=s.extra;S<G;){if(0===h)break e;h--,I+=a[l++]<<S,S+=8}s.offset+=I&(1<<s.extra)-1,I>>>=s.extra,S-=s.extra,s.back+=s.extra}if(s.offset>s.dmax){e.msg="invalid distance too far back",s.mode=R;break}s.mode=25;case 25:if(0===P)break e;if(A=O-P,s.offset>A){if(A=s.offset-A,A>s.whave&&s.sane){e.msg="invalid distance too far back",s.mode=R;break}A>s.wnext?(A-=s.wnext,D=s.wsize-A):D=s.wnext-A,A>s.length&&(A=s.length),T=s.window}else T=o,D=c-s.offset,A=s.length;A>P&&(A=P),P-=A,s.length-=A;do{o[c++]=T[D++]}while(--A);0===s.length&&(s.mode=21);break;case 26:if(0===P)break e;o[c++]=s.length,P--,s.mode=21;break;case 27:if(s.wrap){for(;S<32;){if(0===h)break e;h--,I|=a[l++]<<S,S+=8}if(O-=P,e.total_out+=O,s.total+=O,O&&(e.adler=s.check=s.flags?r(s.check,o,O,c-O):t(s.check,o,O,c-O)),O=P,(s.flags?I:E(I))!==s.check){e.msg="incorrect data check",s.mode=R;break}I=0,S=0}s.mode=28;case 28:if(s.wrap&&s.flags){for(;S<32;){if(0===h)break e;h--,I+=a[l++]<<S,S+=8}if(I!==(4294967295&s.total)){e.msg="incorrect length check",s.mode=R;break}I=0,S=0}s.mode=29;case 29:q=y;break e;case R:q=b;break e;case 31:return w;default:return g}return e.next_out=c,e.avail_out=P,e.next_in=l,e.avail_in=h,s.hold=I,s.bits=S,(s.wsize||O!==e.avail_out&&s.mode<R&&(s.mode<27||n!==d))&&B(e,e.output,e.next_out,O-e.avail_out),C-=e.avail_in,O-=e.avail_out,e.total_in+=C,e.total_out+=O,s.total+=O,s.wrap&&O&&(e.adler=s.check=s.flags?r(s.check,o,O,e.next_out-O):t(s.check,o,O,e.next_out-O)),e.data_type=s.bits+(s.last?64:0)+(s.mode===x?128:0)+(20===s.mode||15===s.mode?256:0),(0===C&&0===O||n===d)&&q===p&&(q=_),q},K=e=>{if(!e||!e.state)return g;let t=e.state;return t.window&&(t.window=null),e.state=null,p},L=(e,t)=>{if(!e||!e.state)return g;const n=e.state;return 0==(2&n.wrap)?g:(n.head=t,t.done=!1,p)},$=(e,n)=>{const r=n.length;let i,s,a;return e&&e.state?(i=e.state,0!==i.wrap&&11!==i.mode?g:11===i.mode&&(s=1,s=t(s,n,r,0),s!==i.check)?b:(a=B(e,n,r,r),a?(i.mode=31,w):(i.havedict=1,p))):g};const U=(e,t)=>Object.prototype.hasOwnProperty.call(e,t);var q=function(e){const t=Array.prototype.slice.call(arguments,1);for(;t.length;){const n=t.shift();if(n){if("object"!=typeof n)throw new TypeError(n+"must be non-object");for(const t in n)U(n,t)&&(e[t]=n[t])}}return e},z=e=>{let t=0;for(let n=0,r=e.length;n<r;n++)t+=e[n].length;const n=new Uint8Array(t);for(let t=0,r=0,i=e.length;t<i;t++){let i=e[t];n.set(i,r),r+=i.length}return n};let Z=!0;try{String.fromCharCode.apply(null,new Uint8Array(1))}catch(e){Z=!1}const W=new Uint8Array(256);for(let e=0;e<256;e++)W[e]=e>=252?6:e>=248?5:e>=240?4:e>=224?3:e>=192?2:1;W[254]=W[254]=1;var G=e=>{if("function"==typeof TextEncoder&&TextEncoder.prototype.encode)return(new TextEncoder).encode(e);let t,n,r,i,s,a=e.length,o=0;for(i=0;i<a;i++)n=e.charCodeAt(i),55296==(64512&n)&&i+1<a&&(r=e.charCodeAt(i+1),56320==(64512&r)&&(n=65536+(n-55296<<10)+(r-56320),i++)),o+=n<128?1:n<2048?2:n<65536?3:4;for(t=new Uint8Array(o),s=0,i=0;s<o;i++)n=e.charCodeAt(i),55296==(64512&n)&&i+1<a&&(r=e.charCodeAt(i+1),56320==(64512&r)&&(n=65536+(n-55296<<10)+(r-56320),i++)),n<128?t[s++]=n:n<2048?(t[s++]=192|n>>>6,t[s++]=128|63&n):n<65536?(t[s++]=224|n>>>12,t[s++]=128|n>>>6&63,t[s++]=128|63&n):(t[s++]=240|n>>>18,t[s++]=128|n>>>12&63,t[s++]=128|n>>>6&63,t[s++]=128|63&n);return t},V=(e,t)=>{const n=t||e.length;if("function"==typeof TextDecoder&&TextDecoder.prototype.decode)return(new TextDecoder).decode(e.subarray(0,t));let r,i;const s=new Array(2*n);for(i=0,r=0;r<n;){let t=e[r++];if(t<128){s[i++]=t;continue}let a=W[t];if(a>4)s[i++]=65533,r+=a-1;else{for(t&=2===a?31:3===a?15:7;a>1&&r<n;)t=t<<6|63&e[r++],a--;a>1?s[i++]=65533:t<65536?s[i++]=t:(t-=65536,s[i++]=55296|t>>10&1023,s[i++]=56320|1023&t)}}return((e,t)=>{if(t<65534&&e.subarray&&Z)return String.fromCharCode.apply(null,e.length===t?e:e.subarray(0,t));let n="";for(let r=0;r<t;r++)n+=String.fromCharCode(e[r]);return n})(s,i)},H=(e,t)=>{(t=t||e.length)>e.length&&(t=e.length);let n=t-1;for(;n>=0&&128==(192&e[n]);)n--;return n<0||0===n?t:n+W[e[n]]>t?n:t},X={2:"need dictionary",1:"stream end",0:"","-1":"file error","-2":"stream error","-3":"data error","-4":"insufficient memory","-5":"buffer error","-6":"incompatible version"};var Y=function(){this.input=null,this.next_in=0,this.avail_in=0,this.total_in=0,this.output=null,this.next_out=0,this.avail_out=0,this.total_out=0,this.msg="",this.state=null,this.data_type=2,this.adler=0};var J=function(){this.text=0,this.time=0,this.xflags=0,this.os=0,this.extra=null,this.extra_len=0,this.name="",this.comment="",this.hcrc=0,this.done=!1};const Q=Object.prototype.toString,{Z_NO_FLUSH:ee,Z_FINISH:te,Z_OK:ne,Z_STREAM_END:re,Z_NEED_DICT:ie,Z_STREAM_ERROR:se,Z_DATA_ERROR:ae,Z_MEM_ERROR:oe}=h;function le(e){this.options=q({chunkSize:65536,windowBits:15,to:""},e||{});const t=this.options;t.raw&&t.windowBits>=0&&t.windowBits<16&&(t.windowBits=-t.windowBits,0===t.windowBits&&(t.windowBits=-15)),!(t.windowBits>=0&&t.windowBits<16)||e&&e.windowBits||(t.windowBits+=32),t.windowBits>15&&t.windowBits<48&&0==(15&t.windowBits)&&(t.windowBits|=15),this.err=0,this.msg="",this.ended=!1,this.chunks=[],this.strm=new Y,this.strm.avail_out=0;let n=F(this.strm,t.windowBits);if(n!==ne)throw new Error(X[n]);if(this.header=new J,L(this.strm,this.header),t.dictionary&&("string"==typeof t.dictionary?t.dictionary=G(t.dictionary):"[object ArrayBuffer]"===Q.call(t.dictionary)&&(t.dictionary=new Uint8Array(t.dictionary)),t.raw&&(n=$(this.strm,t.dictionary),n!==ne)))throw new Error(X[n])}function ce(e,t){const n=new le(t);if(n.push(e),n.err)throw n.msg||X[n.err];return n.result}le.prototype.push=function(e,t){const n=this.strm,r=this.options.chunkSize,i=this.options.dictionary;let s,a,o;if(this.ended)return!1;for(a=t===~~t?t:!0===t?te:ee,"[object ArrayBuffer]"===Q.call(e)?n.input=new Uint8Array(e):n.input=e,n.next_in=0,n.avail_in=n.input.length;;){for(0===n.avail_out&&(n.output=new Uint8Array(r),n.next_out=0,n.avail_out=r),s=N(n,a),s===ie&&i&&(s=$(n,i),s===ne?s=N(n,a):s===ae&&(s=ie));n.avail_in>0&&s===re&&n.state.wrap>0&&0!==e[n.next_in];)M(n),s=N(n,a);switch(s){case se:case ae:case ie:case oe:return this.onEnd(s),this.ended=!0,!1}if(o=n.avail_out,n.next_out&&(0===n.avail_out||s===re))if("string"===this.options.to){let e=H(n.output,n.next_out),t=n.next_out-e,i=V(n.output,e);n.next_out=t,n.avail_out=r-t,t&&n.output.set(n.output.subarray(e,e+t),0),this.onData(i)}else this.onData(n.output.length===n.next_out?n.output:n.output.subarray(0,n.next_out));if(s!==ne||0!==o){if(s===re)return s=K(this.strm),this.onEnd(s),this.ended=!0,!0;if(0===n.avail_in)break}}return!0},le.prototype.onData=function(e){this.chunks.push(e)},le.prototype.onEnd=function(e){e===ne&&("string"===this.options.to?this.result=this.chunks.join(""):this.result=z(this.chunks)),this.chunks=[],this.err=e,this.msg=this.strm.msg};var ue=le,he=ce,de=function(e,t){return(t=t||{}).raw=!0,ce(e,t)},fe=ce,me=h,pe={Inflate:ue,inflate:he,inflateRaw:de,ungzip:fe,constants:me};e.Inflate=ue,e.constants=me,e.default=pe,e.inflate=he,e.inflateRaw=de,e.ungzip=fe,Object.defineProperty(e,"__esModule",{value:!0})}(t)}},t={};function n(r){var i=t[r];if(void 0!==i)return i.exports;var s=t[r]={exports:{}};return e[r].call(s.exports,s,s.exports,n),s.exports}n.d=(e,t)=>{for(var r in t)n.o(t,r)&&!n.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),n.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})};var r={};return(()=>{"use strict";n.r(r),n.d(r,{default:()=>zr});const e="undefined"!=typeof globalThis?globalThis:"undefined"!=typeof self?self:"undefined"!=typeof window?window:global,t=Object.keys,i=Array.isArray;function s(e,n){return"object"!=typeof n||t(n).forEach((function(t){e[t]=n[t]})),e}"undefined"==typeof Promise||e.Promise||(e.Promise=Promise);const a=Object.getPrototypeOf,o={}.hasOwnProperty;function l(e,t){return o.call(e,t)}function c(e,n){"function"==typeof n&&(n=n(a(e))),("undefined"==typeof Reflect?t:Reflect.ownKeys)(n).forEach((t=>{h(e,t,n[t])}))}const u=Object.defineProperty;function h(e,t,n,r){u(e,t,s(n&&l(n,"get")&&"function"==typeof n.get?{get:n.get,set:n.set,configurable:!0}:{value:n,configurable:!0,writable:!0},r))}function d(e){return{from:function(t){return e.prototype=Object.create(t.prototype),h(e.prototype,"constructor",e),{extend:c.bind(null,e.prototype)}}}}const f=Object.getOwnPropertyDescriptor;function m(e,t){let n;return f(e,t)||(n=a(e))&&m(n,t)}const p=[].slice;function y(e,t,n){return p.call(e,t,n)}function v(e,t){return t(e)}function g(e){if(!e)throw new Error("Assertion Failed")}function b(t){e.setImmediate?setImmediate(t):setTimeout(t,0)}function w(e,t){return e.reduce(((e,n,r)=>{var i=t(n,r);return i&&(e[i[0]]=i[1]),e}),{})}function _(e,t){if(l(e,t))return e[t];if(!t)return e;if("string"!=typeof t){for(var n=[],r=0,i=t.length;r<i;++r){var s=_(e,t[r]);n.push(s)}return n}var a=t.indexOf(".");if(-1!==a){var o=e[t.substr(0,a)];return void 0===o?void 0:_(o,t.substr(a+1))}}function k(e,t,n){if(e&&void 0!==t&&(!("isFrozen"in Object)||!Object.isFrozen(e)))if("string"!=typeof t&&"length"in t){g("string"!=typeof n&&"length"in n);for(var r=0,s=t.length;r<s;++r)k(e,t[r],n[r])}else{var a=t.indexOf(".");if(-1!==a){var o=t.substr(0,a),l=t.substr(a+1);if(""===l)void 0===n?i(e)&&!isNaN(parseInt(o))?e.splice(o,1):delete e[o]:e[o]=n;else{var c=e[o];c||(c=e[o]={}),k(c,l,n)}}else void 0===n?i(e)&&!isNaN(parseInt(t))?e.splice(t,1):delete e[t]:e[t]=n}}function x(e){var t={};for(var n in e)l(e,n)&&(t[n]=e[n]);return t}const R=[].concat;function E(e){return R.apply([],e)}const P="Boolean,String,Date,RegExp,Blob,File,FileList,FileSystemFileHandle,ArrayBuffer,DataView,Uint8ClampedArray,ImageBitmap,ImageData,Map,Set,CryptoKey".split(",").concat(E([8,16,32,64].map((e=>["Int","Uint","Float"].map((t=>t+e+"Array")))))).filter((t=>e[t])),I=P.map((t=>e[t]));w(P,(e=>[e,!0]));let S=null;function C(e){S="undefined"!=typeof WeakMap&&new WeakMap;const t=O(e);return S=null,t}function O(e){if(!e||"object"!=typeof e)return e;let t=S&&S.get(e);if(t)return t;if(i(e)){t=[],S&&S.set(e,t);for(var n=0,r=e.length;n<r;++n)t.push(O(e[n]))}else if(I.indexOf(e.constructor)>=0)t=e;else{const n=a(e);for(var s in t=n===Object.prototype?{}:Object.create(n),S&&S.set(e,t),e)l(e,s)&&(t[s]=O(e[s]))}return t}const{toString:A}={};function D(e){return A.call(e).slice(8,-1)}const T="undefined"!=typeof Symbol?Symbol.iterator:"@@iterator",j="symbol"==typeof T?function(e){var t;return null!=e&&(t=e[T])&&t.apply(e)}:function(){return null},B={};function M(e){var t,n,r,s;if(1===arguments.length){if(i(e))return e.slice();if(this===B&&"string"==typeof e)return[e];if(s=j(e)){for(n=[];!(r=s.next()).done;)n.push(r.value);return n}if(null==e)return[e];if("number"==typeof(t=e.length)){for(n=new Array(t);t--;)n[t]=e[t];return n}return[e]}for(t=arguments.length,n=new Array(t);t--;)n[t]=arguments[t];return n}const F="undefined"!=typeof Symbol?e=>"AsyncFunction"===e[Symbol.toStringTag]:()=>!1;var N="undefined"!=typeof location&&/^(http|https):\/\/(localhost|127\.0\.0\.1)/.test(location.href);function K(e,t){N=e,L=t}var L=()=>!0;const $=!new Error("").stack;function U(){if($)try{throw U.arguments,new Error}catch(e){return e}return new Error}function q(e,t){var n=e.stack;return n?(t=t||0,0===n.indexOf(e.name)&&(t+=(e.name+e.message).split("\n").length),n.split("\n").slice(t).filter(L).map((e=>"\n"+e)).join("")):""}var z=["Unknown","Constraint","Data","TransactionInactive","ReadOnly","Version","NotFound","InvalidState","InvalidAccess","Abort","Timeout","QuotaExceeded","Syntax","DataClone"],Z=["Modify","Bulk","OpenFailed","VersionChange","Schema","Upgrade","InvalidTable","MissingAPI","NoSuchDatabase","InvalidArgument","SubTransaction","Unsupported","Internal","DatabaseClosed","PrematureCommit","ForeignAwait"].concat(z),W={VersionChanged:"Database version changed by other database connection",DatabaseClosed:"Database has been closed",Abort:"Transaction aborted",TransactionInactive:"Transaction has already completed or failed",MissingAPI:"IndexedDB API missing. Please visit https://tinyurl.com/y2uuvskb"};function G(e,t){this._e=U(),this.name=e,this.message=t}function V(e,t){return e+". Errors: "+Object.keys(t).map((e=>t[e].toString())).filter(((e,t,n)=>n.indexOf(e)===t)).join("\n")}function H(e,t,n,r){this._e=U(),this.failures=t,this.failedKeys=r,this.successCount=n,this.message=V(e,t)}function X(e,t){this._e=U(),this.name="BulkError",this.failures=Object.keys(t).map((e=>t[e])),this.failuresByPos=t,this.message=V(e,t)}d(G).from(Error).extend({stack:{get:function(){return this._stack||(this._stack=this.name+": "+this.message+q(this._e,2))}},toString:function(){return this.name+": "+this.message}}),d(H).from(G),d(X).from(G);var Y=Z.reduce(((e,t)=>(e[t]=t+"Error",e)),{});const J=G;var Q=Z.reduce(((e,t)=>{var n=t+"Error";function r(e,r){this._e=U(),this.name=n,e?"string"==typeof e?(this.message=`${e}${r?"\n "+r:""}`,this.inner=r||null):"object"==typeof e&&(this.message=`${e.name} ${e.message}`,this.inner=e):(this.message=W[t]||n,this.inner=null)}return d(r).from(J),e[t]=r,e}),{});Q.Syntax=SyntaxError,Q.Type=TypeError,Q.Range=RangeError;var ee=z.reduce(((e,t)=>(e[t+"Error"]=Q[t],e)),{}),te=Z.reduce(((e,t)=>(-1===["Syntax","Type","Range"].indexOf(t)&&(e[t+"Error"]=Q[t]),e)),{});function ne(){}function re(e){return e}function ie(e,t){return null==e||e===re?t:function(n){return t(e(n))}}function se(e,t){return function(){e.apply(this,arguments),t.apply(this,arguments)}}function ae(e,t){return e===ne?t:function(){var n=e.apply(this,arguments);void 0!==n&&(arguments[0]=n);var r=this.onsuccess,i=this.onerror;this.onsuccess=null,this.onerror=null;var s=t.apply(this,arguments);return r&&(this.onsuccess=this.onsuccess?se(r,this.onsuccess):r),i&&(this.onerror=this.onerror?se(i,this.onerror):i),void 0!==s?s:n}}function oe(e,t){return e===ne?t:function(){e.apply(this,arguments);var n=this.onsuccess,r=this.onerror;this.onsuccess=this.onerror=null,t.apply(this,arguments),n&&(this.onsuccess=this.onsuccess?se(n,this.onsuccess):n),r&&(this.onerror=this.onerror?se(r,this.onerror):r)}}function le(e,t){return e===ne?t:function(n){var r=e.apply(this,arguments);s(n,r);var i=this.onsuccess,a=this.onerror;this.onsuccess=null,this.onerror=null;var o=t.apply(this,arguments);return i&&(this.onsuccess=this.onsuccess?se(i,this.onsuccess):i),a&&(this.onerror=this.onerror?se(a,this.onerror):a),void 0===r?void 0===o?void 0:o:s(r,o)}}function ce(e,t){return e===ne?t:function(){return!1!==t.apply(this,arguments)&&e.apply(this,arguments)}}function ue(e,t){return e===ne?t:function(){var n=e.apply(this,arguments);if(n&&"function"==typeof n.then){for(var r=this,i=arguments.length,s=new Array(i);i--;)s[i]=arguments[i];return n.then((function(){return t.apply(r,s)}))}return t.apply(this,arguments)}}te.ModifyError=H,te.DexieError=G,te.BulkError=X;var he={};const[de,fe,me]="undefined"==typeof Promise?[]:(()=>{let e=Promise.resolve();if("undefined"==typeof crypto||!crypto.subtle)return[e,a(e),e];const t=crypto.subtle.digest("SHA-512",new Uint8Array([0]));return[t,a(t),e]})(),pe=fe&&fe.then,ye=de&&de.constructor,ve=!!me;var ge=!1,be=me?()=>{me.then(Ue)}:e.setImmediate?setImmediate.bind(null,Ue):e.MutationObserver?()=>{var e=document.createElement("div");new MutationObserver((()=>{Ue(),e=null})).observe(e,{attributes:!0}),e.setAttribute("i","1")}:()=>{setTimeout(Ue,0)},we=function(e,t){Ce.push([e,t]),ke&&(be(),ke=!1)},_e=!0,ke=!0,xe=[],Re=[],Ee=null,Pe=re,Ie={id:"global",global:!0,ref:0,unhandleds:[],onunhandled:dt,pgp:!1,env:{},finalize:function(){this.unhandleds.forEach((e=>{try{dt(e[0],e[1])}catch(e){}}))}},Se=Ie,Ce=[],Oe=0,Ae=[];function De(e){if("object"!=typeof this)throw new TypeError("Promises must be constructed via new");this._listeners=[],this.onuncatched=ne,this._lib=!1;var t=this._PSD=Se;if(N&&(this._stackHolder=U(),this._prev=null,this._numPrev=0),"function"!=typeof e){if(e!==he)throw new TypeError("Not a function");return this._state=arguments[1],this._value=arguments[2],void(!1===this._state&&Me(this,this._value))}this._state=null,this._value=null,++t.ref,Be(this,e)}const Te={get:function(){var e=Se,t=Je;function n(n,r){var i=!e.global&&(e!==Se||t!==Je);const s=i&&!nt();var a=new De(((t,a)=>{Ne(this,new je(ut(n,e,i,s),ut(r,e,i,s),t,a,e))}));return N&&$e(a,this),a}return n.prototype=he,n},set:function(e){h(this,"then",e&&e.prototype===he?Te:{get:function(){return e},set:Te.set})}};function je(e,t,n,r,i){this.onFulfilled="function"==typeof e?e:null,this.onRejected="function"==typeof t?t:null,this.resolve=n,this.reject=r,this.psd=i}function Be(e,t){try{t((t=>{if(null===e._state){if(t===e)throw new TypeError("A promise cannot be resolved with itself.");var n=e._lib&&qe();t&&"function"==typeof t.then?Be(e,((e,n)=>{t instanceof De?t._then(e,n):t.then(e,n)})):(e._state=!0,e._value=t,Fe(e)),n&&ze()}}),Me.bind(null,e))}catch(t){Me(e,t)}}function Me(e,t){if(Re.push(t),null===e._state){var n=e._lib&&qe();t=Pe(t),e._state=!1,e._value=t,N&&null!==t&&"object"==typeof t&&!t._promise&&function(e,t,n){try{e.apply(null,void 0)}catch(e){}}((()=>{var n=m(t,"stack");t._promise=e,h(t,"stack",{get:()=>ge?n&&(n.get?n.get.apply(t):n.value):e.stack})})),function(e){xe.some((t=>t._value===e._value))||xe.push(e)}(e),Fe(e),n&&ze()}}function Fe(e){var t=e._listeners;e._listeners=[];for(var n=0,r=t.length;n<r;++n)Ne(e,t[n]);var i=e._PSD;--i.ref||i.finalize(),0===Oe&&(++Oe,we((()=>{0==--Oe&&Ze()}),[]))}function Ne(e,t){if(null!==e._state){var n=e._state?t.onFulfilled:t.onRejected;if(null===n)return(e._state?t.resolve:t.reject)(e._value);++t.psd.ref,++Oe,we(Ke,[n,e,t])}else e._listeners.push(t)}function Ke(e,t,n){try{Ee=t;var r,i=t._value;t._state?r=e(i):(Re.length&&(Re=[]),r=e(i),-1===Re.indexOf(i)&&function(e){for(var t=xe.length;t;)if(xe[--t]._value===e._value)return void xe.splice(t,1)}(t)),n.resolve(r)}catch(e){n.reject(e)}finally{Ee=null,0==--Oe&&Ze(),--n.psd.ref||n.psd.finalize()}}function Le(e,t,n){if(t.length===n)return t;var r="";if(!1===e._state){var i,s,a=e._value;null!=a?(i=a.name||"Error",s=a.message||a,r=q(a,0)):(i=a,s=""),t.push(i+(s?": "+s:"")+r)}return N&&((r=q(e._stackHolder,2))&&-1===t.indexOf(r)&&t.push(r),e._prev&&Le(e._prev,t,n)),t}function $e(e,t){var n=t?t._numPrev+1:0;n<100&&(e._prev=t,e._numPrev=n)}function Ue(){qe()&&ze()}function qe(){var e=_e;return _e=!1,ke=!1,e}function ze(){var e,t,n;do{for(;Ce.length>0;)for(e=Ce,Ce=[],n=e.length,t=0;t<n;++t){var r=e[t];r[0].apply(null,r[1])}}while(Ce.length>0);_e=!0,ke=!0}function Ze(){var e=xe;xe=[],e.forEach((e=>{e._PSD.onunhandled.call(null,e._value,e)}));for(var t=Ae.slice(0),n=t.length;n;)t[--n]()}function We(e){return new De(he,!1,e)}function Ge(e,t){var n=Se;return function(){var r=qe(),i=Se;try{return at(n,!0),e.apply(this,arguments)}catch(e){t&&t(e)}finally{at(i,!1),r&&ze()}}}c(De.prototype,{then:Te,_then:function(e,t){Ne(this,new je(null,null,e,t,Se))},catch:function(e){if(1===arguments.length)return this.then(null,e);var t=arguments[0],n=arguments[1];return"function"==typeof t?this.then(null,(e=>e instanceof t?n(e):We(e))):this.then(null,(e=>e&&e.name===t?n(e):We(e)))},finally:function(e){return this.then((t=>(e(),t)),(t=>(e(),We(t))))},stack:{get:function(){if(this._stack)return this._stack;try{ge=!0;var e=Le(this,[],20).join("\nFrom previous: ");return null!==this._state&&(this._stack=e),e}finally{ge=!1}}},timeout:function(e,t){return e<1/0?new De(((n,r)=>{var i=setTimeout((()=>r(new Q.Timeout(t))),e);this.then(n,r).finally(clearTimeout.bind(null,i))})):this}}),"undefined"!=typeof Symbol&&Symbol.toStringTag&&h(De.prototype,Symbol.toStringTag,"Dexie.Promise"),Ie.env=ot(),c(De,{all:function(){var e=M.apply(null,arguments).map(rt);return new De((function(t,n){0===e.length&&t([]);var r=e.length;e.forEach(((i,s)=>De.resolve(i).then((n=>{e[s]=n,--r||t(e)}),n)))}))},resolve:e=>{if(e instanceof De)return e;if(e&&"function"==typeof e.then)return new De(((t,n)=>{e.then(t,n)}));var t=new De(he,!0,e);return $e(t,Ee),t},reject:We,race:function(){var e=M.apply(null,arguments).map(rt);return new De(((t,n)=>{e.map((e=>De.resolve(e).then(t,n)))}))},PSD:{get:()=>Se,set:e=>Se=e},totalEchoes:{get:()=>Je},newPSD:et,usePSD:lt,scheduler:{get:()=>we,set:e=>{we=e}},rejectionMapper:{get:()=>Pe,set:e=>{Pe=e}},follow:(e,t)=>new De(((n,r)=>et(((t,n)=>{var r=Se;r.unhandleds=[],r.onunhandled=n,r.finalize=se((function(){!function(e){Ae.push((function t(){e(),Ae.splice(Ae.indexOf(t),1)})),++Oe,we((()=>{0==--Oe&&Ze()}),[])}((()=>{0===this.unhandleds.length?t():n(this.unhandleds[0])}))}),r.finalize),e()}),t,n,r)))}),ye&&(ye.allSettled&&h(De,"allSettled",(function(){const e=M.apply(null,arguments).map(rt);return new De((t=>{0===e.length&&t([]);let n=e.length;const r=new Array(n);e.forEach(((e,i)=>De.resolve(e).then((e=>r[i]={status:"fulfilled",value:e}),(e=>r[i]={status:"rejected",reason:e})).then((()=>--n||t(r)))))}))})),ye.any&&"undefined"!=typeof AggregateError&&h(De,"any",(function(){const e=M.apply(null,arguments).map(rt);return new De(((t,n)=>{0===e.length&&n(new AggregateError([]));let r=e.length;const i=new Array(r);e.forEach(((e,s)=>De.resolve(e).then((e=>t(e)),(e=>{i[s]=e,--r||n(new AggregateError(i))}))))}))})));const Ve={awaits:0,echoes:0,id:0};var He=0,Xe=[],Ye=0,Je=0,Qe=0;function et(e,t,n,r){var i=Se,a=Object.create(i);a.parent=i,a.ref=0,a.global=!1,a.id=++Qe;var o=Ie.env;a.env=ve?{Promise:De,PromiseProp:{value:De,configurable:!0,writable:!0},all:De.all,race:De.race,allSettled:De.allSettled,any:De.any,resolve:De.resolve,reject:De.reject,nthen:ht(o.nthen,a),gthen:ht(o.gthen,a)}:{},t&&s(a,t),++i.ref,a.finalize=function(){--this.parent.ref||this.parent.finalize()};var l=lt(a,e,n,r);return 0===a.ref&&a.finalize(),l}function tt(){return Ve.id||(Ve.id=++He),++Ve.awaits,Ve.echoes+=100,Ve.id}function nt(){return!!Ve.awaits&&(0==--Ve.awaits&&(Ve.id=0),Ve.echoes=100*Ve.awaits,!0)}function rt(e){return Ve.echoes&&e&&e.constructor===ye?(tt(),e.then((e=>(nt(),e)),(e=>(nt(),ft(e))))):e}function it(e){++Je,Ve.echoes&&0!=--Ve.echoes||(Ve.echoes=Ve.id=0),Xe.push(Se),at(e,!0)}function st(){var e=Xe[Xe.length-1];Xe.pop(),at(e,!1)}function at(t,n){var r=Se;if((n?!Ve.echoes||Ye++&&t===Se:!Ye||--Ye&&t===Se)||ct(n?it.bind(null,t):st),t!==Se&&(Se=t,r===Ie&&(Ie.env=ot()),ve)){var i=Ie.env.Promise,s=t.env;fe.then=s.nthen,i.prototype.then=s.gthen,(r.global||t.global)&&(Object.defineProperty(e,"Promise",s.PromiseProp),i.all=s.all,i.race=s.race,i.resolve=s.resolve,i.reject=s.reject,s.allSettled&&(i.allSettled=s.allSettled),s.any&&(i.any=s.any))}}function ot(){var t=e.Promise;return ve?{Promise:t,PromiseProp:Object.getOwnPropertyDescriptor(e,"Promise"),all:t.all,race:t.race,allSettled:t.allSettled,any:t.any,resolve:t.resolve,reject:t.reject,nthen:fe.then,gthen:t.prototype.then}:{}}function lt(e,t,n,r,i){var s=Se;try{return at(e,!0),t(n,r,i)}finally{at(s,!1)}}function ct(e){pe.call(de,e)}function ut(e,t,n,r){return"function"!=typeof e?e:function(){var i=Se;n&&tt(),at(t,!0);try{return e.apply(this,arguments)}finally{at(i,!1),r&&ct(nt)}}}function ht(e,t){return function(n,r){return e.call(this,ut(n,t),ut(r,t))}}function dt(t,n){var r;try{r=n.onuncatched(t)}catch(e){}if(!1!==r)try{var i,a={promise:n,reason:t};if(e.document&&document.createEvent?((i=document.createEvent("Event")).initEvent("unhandledrejection",!0,!0),s(i,a)):e.CustomEvent&&s(i=new CustomEvent("unhandledrejection",{detail:a}),a),i&&e.dispatchEvent&&(dispatchEvent(i),!e.PromiseRejectionEvent&&e.onunhandledrejection))try{e.onunhandledrejection(i)}catch(e){}N&&i&&!i.defaultPrevented&&console.warn(`Unhandled rejection: ${t.stack||t}`)}catch(e){}}-1===(""+pe).indexOf("[native code]")&&(tt=nt=ne);var ft=De.reject;function mt(e,t,n,r){if(e.idbdb&&(e._state.openComplete||Se.letThrough||e._vip)){var i=e._createTransaction(t,n,e._dbSchema);try{i.create(),e._state.PR1398_maxLoop=3}catch(i){return i.name===Y.InvalidState&&e.isOpen()&&--e._state.PR1398_maxLoop>0?(console.warn("Dexie: Need to reopen db"),e._close(),e.open().then((()=>mt(e,t,n,r)))):ft(i)}return i._promise(t,((e,t)=>et((()=>(Se.trans=i,r(e,t,i)))))).then((e=>i._completion.then((()=>e))))}if(e._state.openComplete)return ft(new Q.DatabaseClosed(e._state.dbOpenError));if(!e._state.isBeingOpened){if(!e._options.autoOpen)return ft(new Q.DatabaseClosed);e.open().catch(ne)}return e._state.dbReadyPromise.then((()=>mt(e,t,n,r)))}const pt=String.fromCharCode(65535),yt="Invalid key provided. Keys must be of type string, number, Date or Array<string | number | Date>.",vt=[],gt="undefined"!=typeof navigator&&/(MSIE|Trident|Edge)/.test(navigator.userAgent),bt=gt,wt=gt,_t=e=>!/(dexie\.js|dexie\.min\.js)/.test(e);function kt(e,t){return e?t?function(){return e.apply(this,arguments)&&t.apply(this,arguments)}:e:t}const xt={type:3,lower:-1/0,lowerOpen:!1,upper:[[]],upperOpen:!1};function Rt(e){return"string"!=typeof e||/\./.test(e)?e=>e:t=>(void 0===t[e]&&e in t&&delete(t=C(t))[e],t)}class Et{_trans(e,t,n){const r=this._tx||Se.trans,i=this.name;function s(e,n,r){if(!r.schema[i])throw new Q.NotFound("Table "+i+" not part of transaction");return t(r.idbtrans,r)}const a=qe();try{return r&&r.db===this.db?r===Se.trans?r._promise(e,s,n):et((()=>r._promise(e,s,n)),{trans:r,transless:Se.transless||Se}):mt(this.db,e,[this.name],s)}finally{a&&ze()}}get(e,t){return e&&e.constructor===Object?this.where(e).first(t):this._trans("readonly",(t=>this.core.get({trans:t,key:e}).then((e=>this.hook.reading.fire(e))))).then(t)}where(e){if("string"==typeof e)return new this.db.WhereClause(this,e);if(i(e))return new this.db.WhereClause(this,`[${e.join("+")}]`);const n=t(e);if(1===n.length)return this.where(n[0]).equals(e[n[0]]);const r=this.schema.indexes.concat(this.schema.primKey).filter((e=>e.compound&&n.every((t=>e.keyPath.indexOf(t)>=0))&&e.keyPath.every((e=>n.indexOf(e)>=0))))[0];if(r&&this.db._maxKey!==pt)return this.where(r.name).equals(r.keyPath.map((t=>e[t])));!r&&N&&console.warn(`The query ${JSON.stringify(e)} on ${this.name} would benefit of a compound index [${n.join("+")}]`);const{idxByName:s}=this.schema,a=this.db._deps.indexedDB;function o(e,t){try{return 0===a.cmp(e,t)}catch(e){return!1}}const[l,c]=n.reduce((([t,n],r)=>{const a=s[r],l=e[r];return[t||a,t||!a?kt(n,a&&a.multi?e=>{const t=_(e,r);return i(t)&&t.some((e=>o(l,e)))}:e=>o(l,_(e,r))):n]}),[null,null]);return l?this.where(l.name).equals(e[l.keyPath]).filter(c):r?this.filter(c):this.where(n).equals("")}filter(e){return this.toCollection().and(e)}count(e){return this.toCollection().count(e)}offset(e){return this.toCollection().offset(e)}limit(e){return this.toCollection().limit(e)}each(e){return this.toCollection().each(e)}toArray(e){return this.toCollection().toArray(e)}toCollection(){return new this.db.Collection(new this.db.WhereClause(this))}orderBy(e){return new this.db.Collection(new this.db.WhereClause(this,i(e)?`[${e.join("+")}]`:e))}reverse(){return this.toCollection().reverse()}mapToClass(e){this.schema.mappedClass=e;const t=t=>{if(!t)return t;const n=Object.create(e.prototype);for(var r in t)if(l(t,r))try{n[r]=t[r]}catch(e){}return n};return this.schema.readHook&&this.hook.reading.unsubscribe(this.schema.readHook),this.schema.readHook=t,this.hook("reading",t),e}defineClass(){return this.mapToClass((function(e){s(this,e)}))}add(e,t){const{auto:n,keyPath:r}=this.schema.primKey;let i=e;return r&&n&&(i=Rt(r)(e)),this._trans("readwrite",(e=>this.core.mutate({trans:e,type:"add",keys:null!=t?[t]:null,values:[i]}))).then((e=>e.numFailures?De.reject(e.failures[0]):e.lastResult)).then((t=>{if(r)try{k(e,r,t)}catch(e){}return t}))}update(e,n){if("object"!=typeof e||i(e))return this.where(":id").equals(e).modify(n);{const r=_(e,this.schema.primKey.keyPath);if(void 0===r)return ft(new Q.InvalidArgument("Given object does not contain its primary key"));try{"function"!=typeof n?t(n).forEach((t=>{k(e,t,n[t])})):n(e,{value:e,primKey:r})}catch(e){}return this.where(":id").equals(r).modify(n)}}put(e,t){const{auto:n,keyPath:r}=this.schema.primKey;let i=e;return r&&n&&(i=Rt(r)(e)),this._trans("readwrite",(e=>this.core.mutate({trans:e,type:"put",values:[i],keys:null!=t?[t]:null}))).then((e=>e.numFailures?De.reject(e.failures[0]):e.lastResult)).then((t=>{if(r)try{k(e,r,t)}catch(e){}return t}))}delete(e){return this._trans("readwrite",(t=>this.core.mutate({trans:t,type:"delete",keys:[e]}))).then((e=>e.numFailures?De.reject(e.failures[0]):void 0))}clear(){return this._trans("readwrite",(e=>this.core.mutate({trans:e,type:"deleteRange",range:xt}))).then((e=>e.numFailures?De.reject(e.failures[0]):void 0))}bulkGet(e){return this._trans("readonly",(t=>this.core.getMany({keys:e,trans:t}).then((e=>e.map((e=>this.hook.reading.fire(e)))))))}bulkAdd(e,t,n){const r=Array.isArray(t)?t:void 0,i=(n=n||(r?void 0:t))?n.allKeys:void 0;return this._trans("readwrite",(t=>{const{auto:n,keyPath:s}=this.schema.primKey;if(s&&r)throw new Q.InvalidArgument("bulkAdd(): keys argument invalid on tables with inbound keys");if(r&&r.length!==e.length)throw new Q.InvalidArgument("Arguments objects and keys must have the same length");const a=e.length;let o=s&&n?e.map(Rt(s)):e;return this.core.mutate({trans:t,type:"add",keys:r,values:o,wantResults:i}).then((({numFailures:e,results:t,lastResult:n,failures:r})=>{if(0===e)return i?t:n;throw new X(`${this.name}.bulkAdd(): ${e} of ${a} operations failed`,r)}))}))}bulkPut(e,t,n){const r=Array.isArray(t)?t:void 0,i=(n=n||(r?void 0:t))?n.allKeys:void 0;return this._trans("readwrite",(t=>{const{auto:n,keyPath:s}=this.schema.primKey;if(s&&r)throw new Q.InvalidArgument("bulkPut(): keys argument invalid on tables with inbound keys");if(r&&r.length!==e.length)throw new Q.InvalidArgument("Arguments objects and keys must have the same length");const a=e.length;let o=s&&n?e.map(Rt(s)):e;return this.core.mutate({trans:t,type:"put",keys:r,values:o,wantResults:i}).then((({numFailures:e,results:t,lastResult:n,failures:r})=>{if(0===e)return i?t:n;throw new X(`${this.name}.bulkPut(): ${e} of ${a} operations failed`,r)}))}))}bulkDelete(e){const t=e.length;return this._trans("readwrite",(t=>this.core.mutate({trans:t,type:"delete",keys:e}))).then((({numFailures:e,lastResult:n,failures:r})=>{if(0===e)return n;throw new X(`${this.name}.bulkDelete(): ${e} of ${t} operations failed`,r)}))}}function Pt(e){var n={},r=function(t,r){if(r){for(var i=arguments.length,s=new Array(i-1);--i;)s[i-1]=arguments[i];return n[t].subscribe.apply(null,s),e}if("string"==typeof t)return n[t]};r.addEventType=o;for(var s=1,a=arguments.length;s<a;++s)o(arguments[s]);return r;function o(e,t,i){if("object"==typeof e)return l(e);t||(t=ce),i||(i=ne);var s={subscribers:[],fire:i,subscribe:function(e){-1===s.subscribers.indexOf(e)&&(s.subscribers.push(e),s.fire=t(s.fire,e))},unsubscribe:function(e){s.subscribers=s.subscribers.filter((function(t){return t!==e})),s.fire=s.subscribers.reduce(t,i)}};return n[e]=r[e]=s,s}function l(e){t(e).forEach((function(t){var n=e[t];if(i(n))o(t,e[t][0],e[t][1]);else{if("asap"!==n)throw new Q.InvalidArgument("Invalid event config");var r=o(t,re,(function(){for(var e=arguments.length,t=new Array(e);e--;)t[e]=arguments[e];r.subscribers.forEach((function(e){b((function(){e.apply(null,t)}))}))}))}}))}}function It(e,t){return d(t).from({prototype:e}),t}function St(e,t){return!(e.filter||e.algorithm||e.or)&&(t?e.justLimit:!e.replayFilter)}function Ct(e,t){e.filter=kt(e.filter,t)}function Ot(e,t,n){var r=e.replayFilter;e.replayFilter=r?()=>kt(r(),t()):t,e.justLimit=n&&!r}function At(e,t){if(e.isPrimKey)return t.primaryKey;const n=t.getIndexByKeyPath(e.index);if(!n)throw new Q.Schema("KeyPath "+e.index+" on object store "+t.name+" is not indexed");return n}function Dt(e,t,n){const r=At(e,t.schema);return t.openCursor({trans:n,values:!e.keysOnly,reverse:"prev"===e.dir,unique:!!e.unique,query:{index:r,range:e.range}})}function Tt(e,t,n,r){const i=e.replayFilter?kt(e.filter,e.replayFilter()):e.filter;if(e.or){const s={},a=(e,n,r)=>{if(!i||i(n,r,(e=>n.stop(e)),(e=>n.fail(e)))){var a=n.primaryKey,o=""+a;"[object ArrayBuffer]"===o&&(o=""+new Uint8Array(a)),l(s,o)||(s[o]=!0,t(e,n,r))}};return Promise.all([e.or._iterate(a,n),jt(Dt(e,r,n),e.algorithm,a,!e.keysOnly&&e.valueMapper)])}return jt(Dt(e,r,n),kt(e.algorithm,i),t,!e.keysOnly&&e.valueMapper)}function jt(e,t,n,r){var i=Ge(r?(e,t,i)=>n(r(e),t,i):n);return e.then((e=>{if(e)return e.start((()=>{var n=()=>e.continue();t&&!t(e,(e=>n=e),(t=>{e.stop(t),n=ne}),(t=>{e.fail(t),n=ne}))||i(e.value,e,(e=>n=e)),n()}))}))}function Bt(e,t){try{const n=Mt(e),r=Mt(t);if(n!==r)return"Array"===n?1:"Array"===r?-1:"binary"===n?1:"binary"===r?-1:"string"===n?1:"string"===r?-1:"Date"===n?1:"Date"!==r?NaN:-1;switch(n){case"number":case"Date":case"string":return e>t?1:e<t?-1:0;case"binary":return function(e,t){const n=e.length,r=t.length,i=n<r?n:r;for(let n=0;n<i;++n)if(e[n]!==t[n])return e[n]<t[n]?-1:1;return n===r?0:n<r?-1:1}(Ft(e),Ft(t));case"Array":return function(e,t){const n=e.length,r=t.length,i=n<r?n:r;for(let n=0;n<i;++n){const r=Bt(e[n],t[n]);if(0!==r)return r}return n===r?0:n<r?-1:1}(e,t)}}catch(e){}return NaN}function Mt(e){const t=typeof e;if("object"!==t)return t;if(ArrayBuffer.isView(e))return"binary";const n=D(e);return"ArrayBuffer"===n?"binary":n}function Ft(e){return e instanceof Uint8Array?e:ArrayBuffer.isView(e)?new Uint8Array(e.buffer,e.byteOffset,e.byteLength):new Uint8Array(e)}class Nt{_read(e,t){var n=this._ctx;return n.error?n.table._trans(null,ft.bind(null,n.error)):n.table._trans("readonly",e).then(t)}_write(e){var t=this._ctx;return t.error?t.table._trans(null,ft.bind(null,t.error)):t.table._trans("readwrite",e,"locked")}_addAlgorithm(e){var t=this._ctx;t.algorithm=kt(t.algorithm,e)}_iterate(e,t){return Tt(this._ctx,e,t,this._ctx.table.core)}clone(e){var t=Object.create(this.constructor.prototype),n=Object.create(this._ctx);return e&&s(n,e),t._ctx=n,t}raw(){return this._ctx.valueMapper=null,this}each(e){var t=this._ctx;return this._read((n=>Tt(t,e,n,t.table.core)))}count(e){return this._read((e=>{const t=this._ctx,n=t.table.core;if(St(t,!0))return n.count({trans:e,query:{index:At(t,n.schema),range:t.range}}).then((e=>Math.min(e,t.limit)));var r=0;return Tt(t,(()=>(++r,!1)),e,n).then((()=>r))})).then(e)}sortBy(e,t){const n=e.split(".").reverse(),r=n[0],i=n.length-1;function s(e,t){return t?s(e[n[t]],t-1):e[r]}var a="next"===this._ctx.dir?1:-1;function o(e,t){var n=s(e,i),r=s(t,i);return n<r?-a:n>r?a:0}return this.toArray((function(e){return e.sort(o)})).then(t)}toArray(e){return this._read((e=>{var t=this._ctx;if("next"===t.dir&&St(t,!0)&&t.limit>0){const{valueMapper:n}=t,r=At(t,t.table.core.schema);return t.table.core.query({trans:e,limit:t.limit,values:!0,query:{index:r,range:t.range}}).then((({result:e})=>n?e.map(n):e))}{const n=[];return Tt(t,(e=>n.push(e)),e,t.table.core).then((()=>n))}}),e)}offset(e){var t=this._ctx;return e<=0||(t.offset+=e,St(t)?Ot(t,(()=>{var t=e;return(e,n)=>0===t||(1===t?(--t,!1):(n((()=>{e.advance(t),t=0})),!1))})):Ot(t,(()=>{var t=e;return()=>--t<0}))),this}limit(e){return this._ctx.limit=Math.min(this._ctx.limit,e),Ot(this._ctx,(()=>{var t=e;return function(e,n,r){return--t<=0&&n(r),t>=0}}),!0),this}until(e,t){return Ct(this._ctx,(function(n,r,i){return!e(n.value)||(r(i),t)})),this}first(e){return this.limit(1).toArray((function(e){return e[0]})).then(e)}last(e){return this.reverse().first(e)}filter(e){var t,n;return Ct(this._ctx,(function(t){return e(t.value)})),t=this._ctx,n=e,t.isMatch=kt(t.isMatch,n),this}and(e){return this.filter(e)}or(e){return new this.db.WhereClause(this._ctx.table,e,this)}reverse(){return this._ctx.dir="prev"===this._ctx.dir?"next":"prev",this._ondirectionchange&&this._ondirectionchange(this._ctx.dir),this}desc(){return this.reverse()}eachKey(e){var t=this._ctx;return t.keysOnly=!t.isMatch,this.each((function(t,n){e(n.key,n)}))}eachUniqueKey(e){return this._ctx.unique="unique",this.eachKey(e)}eachPrimaryKey(e){var t=this._ctx;return t.keysOnly=!t.isMatch,this.each((function(t,n){e(n.primaryKey,n)}))}keys(e){var t=this._ctx;t.keysOnly=!t.isMatch;var n=[];return this.each((function(e,t){n.push(t.key)})).then((function(){return n})).then(e)}primaryKeys(e){var t=this._ctx;if("next"===t.dir&&St(t,!0)&&t.limit>0)return this._read((e=>{var n=At(t,t.table.core.schema);return t.table.core.query({trans:e,values:!1,limit:t.limit,query:{index:n,range:t.range}})})).then((({result:e})=>e)).then(e);t.keysOnly=!t.isMatch;var n=[];return this.each((function(e,t){n.push(t.primaryKey)})).then((function(){return n})).then(e)}uniqueKeys(e){return this._ctx.unique="unique",this.keys(e)}firstKey(e){return this.limit(1).keys((function(e){return e[0]})).then(e)}lastKey(e){return this.reverse().firstKey(e)}distinct(){var e=this._ctx,t=e.index&&e.table.schema.idxByName[e.index];if(!t||!t.multi)return this;var n={};return Ct(this._ctx,(function(e){var t=e.primaryKey.toString(),r=l(n,t);return n[t]=!0,!r})),this}modify(e){var n=this._ctx;return this._write((r=>{var i;if("function"==typeof e)i=e;else{var s=t(e),a=s.length;i=function(t){for(var n=!1,r=0;r<a;++r){var i=s[r],o=e[i];_(t,i)!==o&&(k(t,i,o),n=!0)}return n}}const o=n.table.core,{outbound:l,extractKey:c}=o.schema.primaryKey,u=this.db._options.modifyChunkSize||200,h=[];let d=0;const f=[],m=(e,n)=>{const{failures:r,numFailures:i}=n;d+=e-i;for(let e of t(r))h.push(r[e])};return this.clone().primaryKeys().then((t=>{const s=a=>{const h=Math.min(u,t.length-a);return o.getMany({trans:r,keys:t.slice(a,a+h),cache:"immutable"}).then((d=>{const f=[],p=[],y=l?[]:null,v=[];for(let e=0;e<h;++e){const n=d[e],r={value:C(n),primKey:t[a+e]};!1!==i.call(r,r.value,r)&&(null==r.value?v.push(t[a+e]):l||0===Bt(c(n),c(r.value))?(p.push(r.value),l&&y.push(t[a+e])):(v.push(t[a+e]),f.push(r.value)))}const g=St(n)&&n.limit===1/0&&("function"!=typeof e||e===Kt)&&{index:n.index,range:n.range};return Promise.resolve(f.length>0&&o.mutate({trans:r,type:"add",values:f}).then((e=>{for(let t in e.failures)v.splice(parseInt(t),1);m(f.length,e)}))).then((()=>(p.length>0||g&&"object"==typeof e)&&o.mutate({trans:r,type:"put",keys:y,values:p,criteria:g,changeSpec:"function"!=typeof e&&e}).then((e=>m(p.length,e))))).then((()=>(v.length>0||g&&e===Kt)&&o.mutate({trans:r,type:"delete",keys:v,criteria:g}).then((e=>m(v.length,e))))).then((()=>t.length>a+h&&s(a+u)))}))};return s(0).then((()=>{if(h.length>0)throw new H("Error modifying one or more objects",h,d,f);return t.length}))}))}))}delete(){var e=this._ctx,t=e.range;return St(e)&&(e.isPrimKey&&!wt||3===t.type)?this._write((n=>{const{primaryKey:r}=e.table.core.schema,i=t;return e.table.core.count({trans:n,query:{index:r,range:i}}).then((t=>e.table.core.mutate({trans:n,type:"deleteRange",range:i}).then((({failures:e,lastResult:n,results:r,numFailures:i})=>{if(i)throw new H("Could not delete some values",Object.keys(e).map((t=>e[t])),t-i);return t-i}))))})):this.modify(Kt)}}const Kt=(e,t)=>t.value=null;function Lt(e,t){return e<t?-1:e===t?0:1}function $t(e,t){return e>t?-1:e===t?0:1}function Ut(e,t,n){var r=e instanceof Vt?new e.Collection(e):e;return r._ctx.error=n?new n(t):new TypeError(t),r}function qt(e){return new e.Collection(e,(()=>Gt(""))).limit(0)}function zt(e,t,n,r,i,s){for(var a=Math.min(e.length,r.length),o=-1,l=0;l<a;++l){var c=t[l];if(c!==r[l])return i(e[l],n[l])<0?e.substr(0,l)+n[l]+n.substr(l+1):i(e[l],r[l])<0?e.substr(0,l)+r[l]+n.substr(l+1):o>=0?e.substr(0,o)+t[o]+n.substr(o+1):null;i(e[l],c)<0&&(o=l)}return a<r.length&&"next"===s?e+n.substr(e.length):a<e.length&&"prev"===s?e.substr(0,n.length):o<0?null:e.substr(0,o)+r[o]+n.substr(o+1)}function Zt(e,t,n,r){var i,s,a,o,l,c,u,h=n.length;if(!n.every((e=>"string"==typeof e)))return Ut(e,"String expected.");function d(e){i=function(e){return"next"===e?e=>e.toUpperCase():e=>e.toLowerCase()}(e),s=function(e){return"next"===e?e=>e.toLowerCase():e=>e.toUpperCase()}(e),a="next"===e?Lt:$t;var t=n.map((function(e){return{lower:s(e),upper:i(e)}})).sort((function(e,t){return a(e.lower,t.lower)}));o=t.map((function(e){return e.upper})),l=t.map((function(e){return e.lower})),c=e,u="next"===e?"":r}d("next");var f=new e.Collection(e,(()=>Wt(o[0],l[h-1]+r)));f._ondirectionchange=function(e){d(e)};var m=0;return f._addAlgorithm((function(e,n,r){var i=e.key;if("string"!=typeof i)return!1;var d=s(i);if(t(d,l,m))return!0;for(var f=null,p=m;p<h;++p){var y=zt(i,d,o[p],l[p],a,c);null===y&&null===f?m=p+1:(null===f||a(f,y)>0)&&(f=y)}return n(null!==f?function(){e.continue(f+u)}:r),!1})),f}function Wt(e,t,n,r){return{type:2,lower:e,upper:t,lowerOpen:n,upperOpen:r}}function Gt(e){return{type:1,lower:e,upper:e}}class Vt{get Collection(){return this._ctx.table.db.Collection}between(e,t,n,r){n=!1!==n,r=!0===r;try{return this._cmp(e,t)>0||0===this._cmp(e,t)&&(n||r)&&(!n||!r)?qt(this):new this.Collection(this,(()=>Wt(e,t,!n,!r)))}catch(e){return Ut(this,yt)}}equals(e){return null==e?Ut(this,yt):new this.Collection(this,(()=>Gt(e)))}above(e){return null==e?Ut(this,yt):new this.Collection(this,(()=>Wt(e,void 0,!0)))}aboveOrEqual(e){return null==e?Ut(this,yt):new this.Collection(this,(()=>Wt(e,void 0,!1)))}below(e){return null==e?Ut(this,yt):new this.Collection(this,(()=>Wt(void 0,e,!1,!0)))}belowOrEqual(e){return null==e?Ut(this,yt):new this.Collection(this,(()=>Wt(void 0,e)))}startsWith(e){return"string"!=typeof e?Ut(this,"String expected."):this.between(e,e+pt,!0,!0)}startsWithIgnoreCase(e){return""===e?this.startsWith(e):Zt(this,((e,t)=>0===e.indexOf(t[0])),[e],pt)}equalsIgnoreCase(e){return Zt(this,((e,t)=>e===t[0]),[e],"")}anyOfIgnoreCase(){var e=M.apply(B,arguments);return 0===e.length?qt(this):Zt(this,((e,t)=>-1!==t.indexOf(e)),e,"")}startsWithAnyOfIgnoreCase(){var e=M.apply(B,arguments);return 0===e.length?qt(this):Zt(this,((e,t)=>t.some((t=>0===e.indexOf(t)))),e,pt)}anyOf(){const e=M.apply(B,arguments);let t=this._cmp;try{e.sort(t)}catch(e){return Ut(this,yt)}if(0===e.length)return qt(this);const n=new this.Collection(this,(()=>Wt(e[0],e[e.length-1])));n._ondirectionchange=n=>{t="next"===n?this._ascending:this._descending,e.sort(t)};let r=0;return n._addAlgorithm(((n,i,s)=>{const a=n.key;for(;t(a,e[r])>0;)if(++r,r===e.length)return i(s),!1;return 0===t(a,e[r])||(i((()=>{n.continue(e[r])})),!1)})),n}notEqual(e){return this.inAnyRange([[-1/0,e],[e,this.db._maxKey]],{includeLowers:!1,includeUppers:!1})}noneOf(){const e=M.apply(B,arguments);if(0===e.length)return new this.Collection(this);try{e.sort(this._ascending)}catch(e){return Ut(this,yt)}const t=e.reduce(((e,t)=>e?e.concat([[e[e.length-1][1],t]]):[[-1/0,t]]),null);return t.push([e[e.length-1],this.db._maxKey]),this.inAnyRange(t,{includeLowers:!1,includeUppers:!1})}inAnyRange(e,t){const n=this._cmp,r=this._ascending,i=this._descending,s=this._min,a=this._max;if(0===e.length)return qt(this);if(!e.every((e=>void 0!==e[0]&&void 0!==e[1]&&r(e[0],e[1])<=0)))return Ut(this,"First argument to inAnyRange() must be an Array of two-value Arrays [lower,upper] where upper must not be lower than lower",Q.InvalidArgument);const o=!t||!1!==t.includeLowers,l=t&&!0===t.includeUppers;let c,u=r;function h(e,t){return u(e[0],t[0])}try{c=e.reduce((function(e,t){let r=0,i=e.length;for(;r<i;++r){const i=e[r];if(n(t[0],i[1])<0&&n(t[1],i[0])>0){i[0]=s(i[0],t[0]),i[1]=a(i[1],t[1]);break}}return r===i&&e.push(t),e}),[]),c.sort(h)}catch(e){return Ut(this,yt)}let d=0;const f=l?e=>r(e,c[d][1])>0:e=>r(e,c[d][1])>=0,m=o?e=>i(e,c[d][0])>0:e=>i(e,c[d][0])>=0;let p=f;const y=new this.Collection(this,(()=>Wt(c[0][0],c[c.length-1][1],!o,!l)));return y._ondirectionchange=e=>{"next"===e?(p=f,u=r):(p=m,u=i),c.sort(h)},y._addAlgorithm(((e,t,n)=>{for(var i=e.key;p(i);)if(++d,d===c.length)return t(n),!1;return!!function(e){return!f(e)&&!m(e)}(i)||(0===this._cmp(i,c[d][1])||0===this._cmp(i,c[d][0])||t((()=>{u===r?e.continue(c[d][0]):e.continue(c[d][1])})),!1)})),y}startsWithAnyOf(){const e=M.apply(B,arguments);return e.every((e=>"string"==typeof e))?0===e.length?qt(this):this.inAnyRange(e.map((e=>[e,e+pt]))):Ut(this,"startsWithAnyOf() only works with strings")}}function Ht(e){return Ge((function(t){return Xt(t),e(t.target.error),!1}))}function Xt(e){e.stopPropagation&&e.stopPropagation(),e.preventDefault&&e.preventDefault()}const Yt=Pt(null,"storagemutated");class Jt{_lock(){return g(!Se.global),++this._reculock,1!==this._reculock||Se.global||(Se.lockOwnerFor=this),this}_unlock(){if(g(!Se.global),0==--this._reculock)for(Se.global||(Se.lockOwnerFor=null);this._blockedFuncs.length>0&&!this._locked();){var e=this._blockedFuncs.shift();try{lt(e[1],e[0])}catch(e){}}return this}_locked(){return this._reculock&&Se.lockOwnerFor!==this}create(e){if(!this.mode)return this;const t=this.db.idbdb,n=this.db._state.dbOpenError;if(g(!this.idbtrans),!e&&!t)switch(n&&n.name){case"DatabaseClosedError":throw new Q.DatabaseClosed(n);case"MissingAPIError":throw new Q.MissingAPI(n.message,n);default:throw new Q.OpenFailed(n)}if(!this.active)throw new Q.TransactionInactive;return g(null===this._completion._state),(e=this.idbtrans=e||(this.db.core?this.db.core.transaction(this.storeNames,this.mode,{durability:this.chromeTransactionDurability}):t.transaction(this.storeNames,this.mode,{durability:this.chromeTransactionDurability}))).onerror=Ge((t=>{Xt(t),this._reject(e.error)})),e.onabort=Ge((t=>{Xt(t),this.active&&this._reject(new Q.Abort(e.error)),this.active=!1,this.on("abort").fire(t)})),e.oncomplete=Ge((()=>{this.active=!1,this._resolve(),"mutatedParts"in e&&Yt.storagemutated.fire(e.mutatedParts)})),this}_promise(e,t,n){if("readwrite"===e&&"readwrite"!==this.mode)return ft(new Q.ReadOnly("Transaction is readonly"));if(!this.active)return ft(new Q.TransactionInactive);if(this._locked())return new De(((r,i)=>{this._blockedFuncs.push([()=>{this._promise(e,t,n).then(r,i)},Se])}));if(n)return et((()=>{var e=new De(((e,n)=>{this._lock();const r=t(e,n,this);r&&r.then&&r.then(e,n)}));return e.finally((()=>this._unlock())),e._lib=!0,e}));var r=new De(((e,n)=>{var r=t(e,n,this);r&&r.then&&r.then(e,n)}));return r._lib=!0,r}_root(){return this.parent?this.parent._root():this}waitFor(e){var t=this._root();const n=De.resolve(e);if(t._waitingFor)t._waitingFor=t._waitingFor.then((()=>n));else{t._waitingFor=n,t._waitingQueue=[];var r=t.idbtrans.objectStore(t.storeNames[0]);!function e(){for(++t._spinCount;t._waitingQueue.length;)t._waitingQueue.shift()();t._waitingFor&&(r.get(-1/0).onsuccess=e)}()}var i=t._waitingFor;return new De(((e,r)=>{n.then((n=>t._waitingQueue.push(Ge(e.bind(null,n)))),(e=>t._waitingQueue.push(Ge(r.bind(null,e))))).finally((()=>{t._waitingFor===i&&(t._waitingFor=null)}))}))}abort(){this.active&&(this.active=!1,this.idbtrans&&this.idbtrans.abort(),this._reject(new Q.Abort))}table(e){const t=this._memoizedTables||(this._memoizedTables={});if(l(t,e))return t[e];const n=this.schema[e];if(!n)throw new Q.NotFound("Table "+e+" not part of transaction");const r=new this.db.Table(e,n,this);return r.core=this.db.core.table(e),t[e]=r,r}}function Qt(e,t,n,r,i,s,a){return{name:e,keyPath:t,unique:n,multi:r,auto:i,compound:s,src:(n&&!a?"&":"")+(r?"*":"")+(i?"++":"")+en(t)}}function en(e){return"string"==typeof e?e:e?"["+[].join.call(e,"+")+"]":""}function tn(e,t,n){return{name:e,primKey:t,indexes:n,mappedClass:null,idxByName:w(n,(e=>[e.name,e]))}}let nn=e=>{try{return e.only([[]]),nn=()=>[[]],[[]]}catch(e){return nn=()=>pt,pt}};function rn(e){return null==e?()=>{}:"string"==typeof e?function(e){return 1===e.split(".").length?t=>t[e]:t=>_(t,e)}(e):t=>_(t,e)}function sn(e){return[].slice.call(e)}let an=0;function on(e){return null==e?":id":"string"==typeof e?e:`[${e.join("+")}]`}function ln(e,t,n){function r(e){if(3===e.type)return null;if(4===e.type)throw new Error("Cannot convert never type to IDBKeyRange");const{lower:n,upper:r,lowerOpen:i,upperOpen:s}=e;return void 0===n?void 0===r?null:t.upperBound(r,!!s):void 0===r?t.lowerBound(n,!!i):t.bound(n,r,!!i,!!s)}const{schema:s,hasGetAll:a}=function(e,t){const n=sn(e.objectStoreNames);return{schema:{name:e.name,tables:n.map((e=>t.objectStore(e))).map((e=>{const{keyPath:t,autoIncrement:n}=e,r=i(t),s=null==t,a={},o={name:e.name,primaryKey:{name:null,isPrimaryKey:!0,outbound:s,compound:r,keyPath:t,autoIncrement:n,unique:!0,extractKey:rn(t)},indexes:sn(e.indexNames).map((t=>e.index(t))).map((e=>{const{name:t,unique:n,multiEntry:r,keyPath:s}=e,o={name:t,compound:i(s),keyPath:s,unique:n,multiEntry:r,extractKey:rn(s)};return a[on(s)]=o,o})),getIndexByKeyPath:e=>a[on(e)]};return a[":id"]=o.primaryKey,null!=t&&(a[on(t)]=o.primaryKey),o}))},hasGetAll:n.length>0&&"getAll"in t.objectStore(n[0])&&!("undefined"!=typeof navigator&&/Safari/.test(navigator.userAgent)&&!/(Chrome\/|Edge\/)/.test(navigator.userAgent)&&[].concat(navigator.userAgent.match(/Safari\/(\d*)/))[1]<604)}}(e,n),o=s.tables.map((e=>function(e){const t=e.name;return{name:t,schema:e,mutate:function({trans:e,type:n,keys:i,values:s,range:a}){return new Promise(((o,l)=>{o=Ge(o);const c=e.objectStore(t),u=null==c.keyPath,h="put"===n||"add"===n;if(!h&&"delete"!==n&&"deleteRange"!==n)throw new Error("Invalid operation type: "+n);const{length:d}=i||s||{length:1};if(i&&s&&i.length!==s.length)throw new Error("Given keys array must have same length as given values array.");if(0===d)return o({numFailures:0,failures:{},results:[],lastResult:void 0});let f;const m=[],p=[];let y=0;const v=e=>{++y,Xt(e)};if("deleteRange"===n){if(4===a.type)return o({numFailures:y,failures:p,results:[],lastResult:void 0});3===a.type?m.push(f=c.clear()):m.push(f=c.delete(r(a)))}else{const[e,t]=h?u?[s,i]:[s,null]:[i,null];if(h)for(let r=0;r<d;++r)m.push(f=t&&void 0!==t[r]?c[n](e[r],t[r]):c[n](e[r])),f.onerror=v;else for(let t=0;t<d;++t)m.push(f=c[n](e[t])),f.onerror=v}const g=e=>{const t=e.target.result;m.forEach(((e,t)=>null!=e.error&&(p[t]=e.error))),o({numFailures:y,failures:p,results:"delete"===n?i:m.map((e=>e.result)),lastResult:t})};f.onerror=e=>{v(e),g(e)},f.onsuccess=g}))},getMany:({trans:e,keys:n})=>new Promise(((r,i)=>{r=Ge(r);const s=e.objectStore(t),a=n.length,o=new Array(a);let l,c=0,u=0;const h=e=>{const t=e.target;o[t._pos]=t.result,++u===c&&r(o)},d=Ht(i);for(let e=0;e<a;++e)null!=n[e]&&(l=s.get(n[e]),l._pos=e,l.onsuccess=h,l.onerror=d,++c);0===c&&r(o)})),get:({trans:e,key:n})=>new Promise(((r,i)=>{r=Ge(r);const s=e.objectStore(t).get(n);s.onsuccess=e=>r(e.target.result),s.onerror=Ht(i)})),query:function(e){return n=>new Promise(((i,s)=>{i=Ge(i);const{trans:a,values:o,limit:l,query:c}=n,u=l===1/0?void 0:l,{index:h,range:d}=c,f=a.objectStore(t),m=h.isPrimaryKey?f:f.index(h.name),p=r(d);if(0===l)return i({result:[]});if(e){const e=o?m.getAll(p,u):m.getAllKeys(p,u);e.onsuccess=e=>i({result:e.target.result}),e.onerror=Ht(s)}else{let e=0;const t=o||!("openKeyCursor"in m)?m.openCursor(p):m.openKeyCursor(p),n=[];t.onsuccess=r=>{const s=t.result;return s?(n.push(o?s.value:s.primaryKey),++e===l?i({result:n}):void s.continue()):i({result:n})},t.onerror=Ht(s)}}))}(a),openCursor:function({trans:e,values:n,query:i,reverse:s,unique:a}){return new Promise(((o,l)=>{o=Ge(o);const{index:c,range:u}=i,h=e.objectStore(t),d=c.isPrimaryKey?h:h.index(c.name),f=s?a?"prevunique":"prev":a?"nextunique":"next",m=n||!("openKeyCursor"in d)?d.openCursor(r(u),f):d.openKeyCursor(r(u),f);m.onerror=Ht(l),m.onsuccess=Ge((t=>{const n=m.result;if(!n)return void o(null);n.___id=++an,n.done=!1;const r=n.continue.bind(n);let i=n.continuePrimaryKey;i&&(i=i.bind(n));const s=n.advance.bind(n),a=()=>{throw new Error("Cursor not stopped")};n.trans=e,n.stop=n.continue=n.continuePrimaryKey=n.advance=()=>{throw new Error("Cursor not started")},n.fail=Ge(l),n.next=function(){let e=1;return this.start((()=>e--?this.continue():this.stop())).then((()=>this))},n.start=e=>{const t=new Promise(((e,t)=>{e=Ge(e),m.onerror=Ht(t),n.fail=t,n.stop=t=>{n.stop=n.continue=n.continuePrimaryKey=n.advance=a,e(t)}})),o=()=>{if(m.result)try{e()}catch(e){n.fail(e)}else n.done=!0,n.start=()=>{throw new Error("Cursor behind last entry")},n.stop()};return m.onsuccess=Ge((e=>{m.onsuccess=o,o()})),n.continue=r,n.continuePrimaryKey=i,n.advance=s,o(),t},o(n)}),l)}))},count({query:e,trans:n}){const{index:i,range:s}=e;return new Promise(((e,a)=>{const o=n.objectStore(t),l=i.isPrimaryKey?o:o.index(i.name),c=r(s),u=c?l.count(c):l.count();u.onsuccess=Ge((t=>e(t.target.result))),u.onerror=Ht(a)}))}}}(e))),l={};return o.forEach((e=>l[e.name]=e)),{stack:"dbcore",transaction:e.transaction.bind(e),table(e){if(!l[e])throw new Error(`Table '${e}' not found`);return l[e]},MIN_KEY:-1/0,MAX_KEY:nn(t),schema:s}}function cn({_novip:e},t){const n=t.db,r=function(e,t,{IDBKeyRange:n,indexedDB:r},i){const s=function(e,t){return t.reduce(((e,{create:t})=>({...e,...t(e)})),e)}(ln(t,n,i),e.dbcore);return{dbcore:s}}(e._middlewares,n,e._deps,t);e.core=r.dbcore,e.tables.forEach((t=>{const n=t.name;e.core.schema.tables.some((e=>e.name===n))&&(t.core=e.core.table(n),e[n]instanceof e.Table&&(e[n].core=t.core))}))}function un({_novip:e},t,n,r){n.forEach((n=>{const i=r[n];t.forEach((t=>{const r=m(t,n);(!r||"value"in r&&void 0===r.value)&&(t===e.Transaction.prototype||t instanceof e.Transaction?h(t,n,{get(){return this.table(n)},set(e){u(this,n,{value:e,writable:!0,configurable:!0,enumerable:!0})}}):t[n]=new e.Table(n,i))}))}))}function hn({_novip:e},t){t.forEach((t=>{for(let n in t)t[n]instanceof e.Table&&delete t[n]}))}function dn(e,t){return e._cfg.version-t._cfg.version}function fn(e,n,r,i){const s=e._dbSchema,a=e._createTransaction("readwrite",e._storeNames,s);a.create(r),a._completion.catch(i);const o=a._reject.bind(a),l=Se.transless||Se;et((()=>{Se.trans=a,Se.transless=l,0===n?(t(s).forEach((e=>{pn(r,e,s[e].primKey,s[e].indexes)})),cn(e,r),De.follow((()=>e.on.populate.fire(a))).catch(o)):function({_novip:e},n,r,i){const s=[],a=e._versions;let o=e._dbSchema=vn(0,e.idbdb,i),l=!1;return a.filter((e=>e._cfg.version>=n)).forEach((a=>{s.push((()=>{const s=o,c=a._cfg.dbschema;gn(e,s,i),gn(e,c,i),o=e._dbSchema=c;const u=mn(s,c);u.add.forEach((e=>{pn(i,e[0],e[1].primKey,e[1].indexes)})),u.change.forEach((e=>{if(e.recreate)throw new Q.Upgrade("Not yet support for changing primary key");{const t=i.objectStore(e.name);e.add.forEach((e=>yn(t,e))),e.change.forEach((e=>{t.deleteIndex(e.name),yn(t,e)})),e.del.forEach((e=>t.deleteIndex(e)))}}));const h=a._cfg.contentUpgrade;if(h&&a._cfg.version>n){cn(e,i),r._memoizedTables={},l=!0;let n=x(c);u.del.forEach((e=>{n[e]=s[e]})),hn(e,[e.Transaction.prototype]),un(e,[e.Transaction.prototype],t(n),n),r.schema=n;const a=F(h);let o;a&&tt();const d=De.follow((()=>{if(o=h(r),o&&a){var e=nt.bind(null,null);o.then(e,e)}}));return o&&"function"==typeof o.then?De.resolve(o):d.then((()=>o))}})),s.push((t=>{l&&bt||function(e,t){[].slice.call(t.db.objectStoreNames).forEach((n=>null==e[n]&&t.db.deleteObjectStore(n)))}(a._cfg.dbschema,t),hn(e,[e.Transaction.prototype]),un(e,[e.Transaction.prototype],e._storeNames,e._dbSchema),r.schema=e._dbSchema}))})),function e(){return s.length?De.resolve(s.shift()(r.idbtrans)).then(e):De.resolve()}().then((()=>{var e,n;n=i,t(e=o).forEach((t=>{n.db.objectStoreNames.contains(t)||pn(n,t,e[t].primKey,e[t].indexes)}))}))}(e,n,a,r).catch(o)}))}function mn(e,t){const n={del:[],add:[],change:[]};let r;for(r in e)t[r]||n.del.push(r);for(r in t){const i=e[r],s=t[r];if(i){const e={name:r,def:s,recreate:!1,del:[],add:[],change:[]};if(""+(i.primKey.keyPath||"")!=""+(s.primKey.keyPath||"")||i.primKey.auto!==s.primKey.auto&&!gt)e.recreate=!0,n.change.push(e);else{const t=i.idxByName,r=s.idxByName;let a;for(a in t)r[a]||e.del.push(a);for(a in r){const n=t[a],i=r[a];n?n.src!==i.src&&e.change.push(i):e.add.push(i)}(e.del.length>0||e.add.length>0||e.change.length>0)&&n.change.push(e)}}else n.add.push([r,s])}return n}function pn(e,t,n,r){const i=e.db.createObjectStore(t,n.keyPath?{keyPath:n.keyPath,autoIncrement:n.auto}:{autoIncrement:n.auto});return r.forEach((e=>yn(i,e))),i}function yn(e,t){e.createIndex(t.name,t.keyPath,{unique:t.unique,multiEntry:t.multi})}function vn(e,t,n){const r={};return y(t.objectStoreNames,0).forEach((e=>{const t=n.objectStore(e);let i=t.keyPath;const s=Qt(en(i),i||"",!1,!1,!!t.autoIncrement,i&&"string"!=typeof i,!0),a=[];for(let e=0;e<t.indexNames.length;++e){const n=t.index(t.indexNames[e]);i=n.keyPath;var o=Qt(n.name,i,!!n.unique,!!n.multiEntry,!1,i&&"string"!=typeof i,!1);a.push(o)}r[e]=tn(e,s,a)})),r}function gn({_novip:t},n,r){const i=r.db.objectStoreNames;for(let e=0;e<i.length;++e){const s=i[e],a=r.objectStore(s);t._hasGetAll="getAll"in a;for(let e=0;e<a.indexNames.length;++e){const t=a.indexNames[e],r=a.index(t).keyPath,i="string"==typeof r?r:"["+y(r).join("+")+"]";if(n[s]){const e=n[s].idxByName[i];e&&(e.name=t,delete n[s].idxByName[i],n[s].idxByName[t]=e)}}}"undefined"!=typeof navigator&&/Safari/.test(navigator.userAgent)&&!/(Chrome\/|Edge\/)/.test(navigator.userAgent)&&e.WorkerGlobalScope&&e instanceof e.WorkerGlobalScope&&[].concat(navigator.userAgent.match(/Safari\/(\d*)/))[1]<604&&(t._hasGetAll=!1)}class bn{_parseStoresSpec(e,n){t(e).forEach((t=>{if(null!==e[t]){var r=e[t].split(",").map(((e,t)=>{const n=(e=e.trim()).replace(/([&*]|\+\+)/g,""),r=/^\[/.test(n)?n.match(/^\[(.*)\]$/)[1].split("+"):n;return Qt(n,r||null,/\&/.test(e),/\*/.test(e),/\+\+/.test(e),i(r),0===t)})),s=r.shift();if(s.multi)throw new Q.Schema("Primary key cannot be multi-valued");r.forEach((e=>{if(e.auto)throw new Q.Schema("Only primary key can be marked as autoIncrement (++)");if(!e.keyPath)throw new Q.Schema("Index must have a name and cannot be an empty string")})),n[t]=tn(t,s,r)}}))}stores(e){const n=this.db;this._cfg.storesSource=this._cfg.storesSource?s(this._cfg.storesSource,e):e;const r=n._versions,i={};let a={};return r.forEach((e=>{s(i,e._cfg.storesSource),a=e._cfg.dbschema={},e._parseStoresSpec(i,a)})),n._dbSchema=a,hn(n,[n._allTables,n,n.Transaction.prototype]),un(n,[n._allTables,n,n.Transaction.prototype,this._cfg.tables],t(a),a),n._storeNames=t(a),this}upgrade(e){return this._cfg.contentUpgrade=ue(this._cfg.contentUpgrade||ne,e),this}}function wn(e,t){let n=e._dbNamesDB;return n||(n=e._dbNamesDB=new $n("__dbnames",{addons:[],indexedDB:e,IDBKeyRange:t}),n.version(1).stores({dbnames:"name"})),n.table("dbnames")}function _n(e){return e&&"function"==typeof e.databases}function kn(e){return et((function(){return Se.letThrough=!0,e()}))}function xn(){var e;return!navigator.userAgentData&&/Safari\//.test(navigator.userAgent)&&!/Chrom(e|ium)\//.test(navigator.userAgent)&&indexedDB.databases?new Promise((function(t){var n=function(){return indexedDB.databases().finally(t)};e=setInterval(n,100),n()})).finally((function(){return clearInterval(e)})):Promise.resolve()}function Rn(e){var t=t=>e.next(t),n=s(t),r=s((t=>e.throw(t)));function s(e){return t=>{var s=e(t),a=s.value;return s.done?a:a&&"function"==typeof a.then?a.then(n,r):i(a)?Promise.all(a).then(n,r):n(a)}}return s(t)()}function En(e,t,n){var r=arguments.length;if(r<2)throw new Q.InvalidArgument("Too few arguments");for(var i=new Array(r-1);--r;)i[r-1]=arguments[r];n=i.pop();var s=E(i);return[e,s,n]}function Pn(e,t,n,r,i){return De.resolve().then((()=>{const s=Se.transless||Se,a=e._createTransaction(t,n,e._dbSchema,r),o={trans:a,transless:s};if(r)a.idbtrans=r.idbtrans;else try{a.create(),e._state.PR1398_maxLoop=3}catch(r){return r.name===Y.InvalidState&&e.isOpen()&&--e._state.PR1398_maxLoop>0?(console.warn("Dexie: Need to reopen db"),e._close(),e.open().then((()=>Pn(e,t,n,null,i)))):ft(r)}const l=F(i);let c;l&&tt();const u=De.follow((()=>{if(c=i.call(a,a),c)if(l){var e=nt.bind(null,null);c.then(e,e)}else"function"==typeof c.next&&"function"==typeof c.throw&&(c=Rn(c))}),o);return(c&&"function"==typeof c.then?De.resolve(c).then((e=>a.active?e:ft(new Q.PrematureCommit("Transaction committed too early. See http://bit.ly/2kdckMn")))):u.then((()=>c))).then((e=>(r&&a._resolve(),a._completion.then((()=>e))))).catch((e=>(a._reject(e),ft(e))))}))}function In(e,t,n){const r=i(e)?e.slice():[e];for(let e=0;e<n;++e)r.push(t);return r}const Sn={stack:"dbcore",name:"VirtualIndexMiddleware",level:1,create:function(e){return{...e,table(t){const n=e.table(t),{schema:r}=n,i={},s=[];function a(e,t,n){const r=on(e),o=i[r]=i[r]||[],l=null==e?0:"string"==typeof e?1:e.length,c=t>0,u={...n,isVirtual:c,keyTail:t,keyLength:l,extractKey:rn(e),unique:!c&&n.unique};return o.push(u),u.isPrimaryKey||s.push(u),l>1&&a(2===l?e[0]:e.slice(0,l-1),t+1,n),o.sort(((e,t)=>e.keyTail-t.keyTail)),u}const o=a(r.primaryKey.keyPath,0,r.primaryKey);i[":id"]=[o];for(const e of r.indexes)a(e.keyPath,0,e);function l(t){const n=t.query.index;return n.isVirtual?{...t,query:{index:n,range:(r=t.query.range,i=n.keyTail,{type:1===r.type?2:r.type,lower:In(r.lower,r.lowerOpen?e.MAX_KEY:e.MIN_KEY,i),lowerOpen:!0,upper:In(r.upper,r.upperOpen?e.MIN_KEY:e.MAX_KEY,i),upperOpen:!0})}}:t;var r,i}const c={...n,schema:{...r,primaryKey:o,indexes:s,getIndexByKeyPath:function(e){const t=i[on(e)];return t&&t[0]}},count:e=>n.count(l(e)),query:e=>n.query(l(e)),openCursor(t){const{keyTail:r,isVirtual:i,keyLength:s}=t.query.index;return i?n.openCursor(l(t)).then((n=>n&&function(n){const i=Object.create(n,{continue:{value:function(i){null!=i?n.continue(In(i,t.reverse?e.MAX_KEY:e.MIN_KEY,r)):t.unique?n.continue(n.key.slice(0,s).concat(t.reverse?e.MIN_KEY:e.MAX_KEY,r)):n.continue()}},continuePrimaryKey:{value(t,i){n.continuePrimaryKey(In(t,e.MAX_KEY,r),i)}},primaryKey:{get:()=>n.primaryKey},key:{get(){const e=n.key;return 1===s?e[0]:e.slice(0,s)}},value:{get:()=>n.value}});return i}(n))):n.openCursor(t)}};return c}}}};function Cn(e,n,r,i){return r=r||{},i=i||"",t(e).forEach((t=>{if(l(n,t)){var s=e[t],a=n[t];if("object"==typeof s&&"object"==typeof a&&s&&a){const e=D(s);e!==D(a)?r[i+t]=n[t]:"Object"===e?Cn(s,a,r,i+t+"."):s!==a&&(r[i+t]=n[t])}else s!==a&&(r[i+t]=n[t])}else r[i+t]=void 0})),t(n).forEach((t=>{l(e,t)||(r[i+t]=n[t])})),r}const On={stack:"dbcore",name:"HooksMiddleware",level:2,create:e=>({...e,table(t){const n=e.table(t),{primaryKey:r}=n.schema,i={...n,mutate(e){const i=Se.trans,{deleting:s,creating:a,updating:o}=i.table(t).hook;switch(e.type){case"add":if(a.fire===ne)break;return i._promise("readwrite",(()=>c(e)),!0);case"put":if(a.fire===ne&&o.fire===ne)break;return i._promise("readwrite",(()=>c(e)),!0);case"delete":if(s.fire===ne)break;return i._promise("readwrite",(()=>c(e)),!0);case"deleteRange":if(s.fire===ne)break;return i._promise("readwrite",(()=>function(e){return u(e.trans,e.range,1e4)}(e)),!0)}return n.mutate(e);function c(e){const t=Se.trans,i=e.keys||function(e,t){return"delete"===t.type?t.keys:t.keys||t.values.map(e.extractKey)}(r,e);if(!i)throw new Error("Keys missing");return"delete"!==(e="add"===e.type||"put"===e.type?{...e,keys:i}:{...e}).type&&(e.values=[...e.values]),e.keys&&(e.keys=[...e.keys]),function(e,t,n){return"add"===t.type?Promise.resolve([]):e.getMany({trans:t.trans,keys:n,cache:"immutable"})}(n,e,i).then((c=>{const u=i.map(((n,i)=>{const u=c[i],h={onerror:null,onsuccess:null};if("delete"===e.type)s.fire.call(h,n,u,t);else if("add"===e.type||void 0===u){const s=a.fire.call(h,n,e.values[i],t);null==n&&null!=s&&(n=s,e.keys[i]=n,r.outbound||k(e.values[i],r.keyPath,n))}else{const r=Cn(u,e.values[i]),s=o.fire.call(h,r,n,u,t);if(s){const t=e.values[i];Object.keys(s).forEach((e=>{l(t,e)?t[e]=s[e]:k(t,e,s[e])}))}}return h}));return n.mutate(e).then((({failures:t,results:n,numFailures:r,lastResult:s})=>{for(let r=0;r<i.length;++r){const s=n?n[r]:i[r],a=u[r];null==s?a.onerror&&a.onerror(t[r]):a.onsuccess&&a.onsuccess("put"===e.type&&c[r]?e.values[r]:s)}return{failures:t,results:n,numFailures:r,lastResult:s}})).catch((e=>(u.forEach((t=>t.onerror&&t.onerror(e))),Promise.reject(e))))}))}function u(e,t,i){return n.query({trans:e,values:!1,query:{index:r,range:t},limit:i}).then((({result:n})=>c({type:"delete",keys:n,trans:e}).then((r=>r.numFailures>0?Promise.reject(r.failures[0]):n.length<i?{failures:[],numFailures:0,lastResult:void 0}:u(e,{...t,lower:n[n.length-1],lowerOpen:!0},i)))))}}};return i}})};function An(e,t,n){try{if(!t)return null;if(t.keys.length<e.length)return null;const r=[];for(let i=0,s=0;i<t.keys.length&&s<e.length;++i)0===Bt(t.keys[i],e[s])&&(r.push(n?C(t.values[i]):t.values[i]),++s);return r.length===e.length?r:null}catch(e){return null}}const Dn={stack:"dbcore",level:-1,create:e=>({table:t=>{const n=e.table(t);return{...n,getMany:e=>{if(!e.cache)return n.getMany(e);const t=An(e.keys,e.trans._cache,"clone"===e.cache);return t?De.resolve(t):n.getMany(e).then((t=>(e.trans._cache={keys:e.keys,values:"clone"===e.cache?C(t):t},t)))},mutate:e=>("add"!==e.type&&(e.trans._cache=null),n.mutate(e))}}})};function Tn(e){return!("from"in e)}const jn=function(e,t){if(!this){const t=new jn;return e&&"d"in e&&s(t,e),t}s(this,arguments.length?{d:1,from:e,to:arguments.length>1?t:e}:{d:0})};function Bn(e,t,n){const r=Bt(t,n);if(isNaN(r))return;if(r>0)throw RangeError();if(Tn(e))return s(e,{from:t,to:n,d:1});const i=e.l,a=e.r;if(Bt(n,e.from)<0)return i?Bn(i,t,n):e.l={from:t,to:n,d:1,l:null,r:null},Nn(e);if(Bt(t,e.to)>0)return a?Bn(a,t,n):e.r={from:t,to:n,d:1,l:null,r:null},Nn(e);Bt(t,e.from)<0&&(e.from=t,e.l=null,e.d=a?a.d+1:1),Bt(n,e.to)>0&&(e.to=n,e.r=null,e.d=e.l?e.l.d+1:1);const o=!e.r;i&&!e.l&&Mn(e,i),a&&o&&Mn(e,a)}function Mn(e,t){Tn(t)||function e(t,{from:n,to:r,l:i,r:s}){Bn(t,n,r),i&&e(t,i),s&&e(t,s)}(e,t)}function Fn(e){let t=Tn(e)?null:{s:0,n:e};return{next(e){const n=arguments.length>0;for(;t;)switch(t.s){case 0:if(t.s=1,n)for(;t.n.l&&Bt(e,t.n.from)<0;)t={up:t,n:t.n.l,s:1};else for(;t.n.l;)t={up:t,n:t.n.l,s:1};case 1:if(t.s=2,!n||Bt(e,t.n.to)<=0)return{value:t.n,done:!1};case 2:if(t.n.r){t.s=3,t={up:t,n:t.n.r,s:0};continue}case 3:t=t.up}return{done:!0}}}}function Nn(e){var t,n;const r=((null===(t=e.r)||void 0===t?void 0:t.d)||0)-((null===(n=e.l)||void 0===n?void 0:n.d)||0),i=r>1?"r":r<-1?"l":"";if(i){const t="r"===i?"l":"r",n={...e},r=e[i];e.from=r.from,e.to=r.to,e[i]=r[i],n[i]=r[t],e[t]=n,n.d=Kn(n)}e.d=Kn(e)}function Kn({r:e,l:t}){return(e?t?Math.max(e.d,t.d):e.d:t?t.d:0)+1}c(jn.prototype,{add(e){return Mn(this,e),this},addKey(e){return Bn(this,e,e),this},addKeys(e){return e.forEach((e=>Bn(this,e,e))),this},[T](){return Fn(this)}});const Ln={stack:"dbcore",level:0,create:e=>{const n=e.schema.name,r=new jn(e.MIN_KEY,e.MAX_KEY);return{...e,table:s=>{const a=e.table(s),{schema:o}=a,{primaryKey:l}=o,{extractKey:c,outbound:u}=l,h={...a,mutate:e=>{const t=e.trans,l=t.mutatedParts||(t.mutatedParts={}),c=e=>{const t=`idb://${n}/${s}/${e}`;return l[t]||(l[t]=new jn)},u=c(""),h=c(":dels"),{type:d}=e;let[f,m]="deleteRange"===e.type?[e.range]:"delete"===e.type?[e.keys]:e.values.length<50?[[],e.values]:[];const p=e.trans._cache;return a.mutate(e).then((e=>{if(i(f)){"delete"!==d&&(f=e.results),u.addKeys(f);const t=An(f,p);t||"add"===d||h.addKeys(f),(t||m)&&function(e,t,n,r){t.indexes.forEach((function(t){const s=e(t.name||"");function a(e){return null!=e?t.extractKey(e):null}const o=e=>t.multiEntry&&i(e)?e.forEach((e=>s.addKey(e))):s.addKey(e);(n||r).forEach(((e,t)=>{const i=n&&a(n[t]),s=r&&a(r[t]);0!==Bt(i,s)&&(null!=i&&o(i),null!=s&&o(s))}))}))}(c,o,t,m)}else if(f){const e={from:f.lower,to:f.upper};h.add(e),u.add(e)}else u.add(r),h.add(r),o.indexes.forEach((e=>c(e.name).add(r)));return e}))}},d=({query:{index:t,range:n}})=>{var r,i;return[t,new jn(null!==(r=n.lower)&&void 0!==r?r:e.MIN_KEY,null!==(i=n.upper)&&void 0!==i?i:e.MAX_KEY)]},f={get:e=>[l,new jn(e.key)],getMany:e=>[l,(new jn).addKeys(e.keys)],count:d,query:d,openCursor:d};return t(f).forEach((e=>{h[e]=function(t){const{subscr:i}=Se;if(i){const o=e=>{const t=`idb://${n}/${s}/${e}`;return i[t]||(i[t]=new jn)},l=o(""),h=o(":dels"),[d,m]=f[e](t);if(o(d.name||"").add(m),!d.isPrimaryKey){if("count"!==e){const n="query"===e&&u&&t.values&&a.query({...t,values:!1});return a[e].apply(this,arguments).then((r=>{if("query"===e){if(u&&t.values)return n.then((({result:e})=>(l.addKeys(e),r)));const e=t.values?r.result.map(c):r.result;t.values?l.addKeys(e):h.addKeys(e)}else if("openCursor"===e){const e=r,n=t.values;return e&&Object.create(e,{key:{get:()=>(h.addKey(e.primaryKey),e.key)},primaryKey:{get(){const t=e.primaryKey;return h.addKey(t),t}},value:{get:()=>(n&&l.addKey(e.primaryKey),e.value)}})}return r}))}h.add(r)}}return a[e].apply(this,arguments)}})),h}}}};class $n{constructor(e,t){this._middlewares={},this.verno=0;const n=$n.dependencies;this._options=t={addons:$n.addons,autoOpen:!0,indexedDB:n.indexedDB,IDBKeyRange:n.IDBKeyRange,...t},this._deps={indexedDB:t.indexedDB,IDBKeyRange:t.IDBKeyRange};const{addons:r}=t;this._dbSchema={},this._versions=[],this._storeNames=[],this._allTables={},this.idbdb=null,this._novip=this;const i={dbOpenError:null,isBeingOpened:!1,onReadyBeingFired:null,openComplete:!1,dbReadyResolve:ne,dbReadyPromise:null,cancelOpen:ne,openCanceller:null,autoSchema:!0,PR1398_maxLoop:3};var s;i.dbReadyPromise=new De((e=>{i.dbReadyResolve=e})),i.openCanceller=new De(((e,t)=>{i.cancelOpen=t})),this._state=i,this.name=e,this.on=Pt(this,"populate","blocked","versionchange","close",{ready:[ue,ne]}),this.on.ready.subscribe=v(this.on.ready.subscribe,(e=>(t,n)=>{$n.vip((()=>{const r=this._state;if(r.openComplete)r.dbOpenError||De.resolve().then(t),n&&e(t);else if(r.onReadyBeingFired)r.onReadyBeingFired.push(t),n&&e(t);else{e(t);const r=this;n||e((function e(){r.on.ready.unsubscribe(t),r.on.ready.unsubscribe(e)}))}}))})),this.Collection=(s=this,It(Nt.prototype,(function(e,t){this.db=s;let n=xt,r=null;if(t)try{n=t()}catch(e){r=e}const i=e._ctx,a=i.table,o=a.hook.reading.fire;this._ctx={table:a,index:i.index,isPrimKey:!i.index||a.schema.primKey.keyPath&&i.index===a.schema.primKey.name,range:n,keysOnly:!1,dir:"next",unique:"",algorithm:null,filter:null,replayFilter:null,justLimit:!0,isMatch:null,offset:0,limit:1/0,error:r,or:i.or,valueMapper:o!==re?o:null}}))),this.Table=function(e){return It(Et.prototype,(function(t,n,r){this.db=e,this._tx=r,this.name=t,this.schema=n,this.hook=e._allTables[t]?e._allTables[t].hook:Pt(null,{creating:[ae,ne],reading:[ie,re],updating:[le,ne],deleting:[oe,ne]})}))}(this),this.Transaction=function(e){return It(Jt.prototype,(function(t,n,r,i,s){this.db=e,this.mode=t,this.storeNames=n,this.schema=r,this.chromeTransactionDurability=i,this.idbtrans=null,this.on=Pt(this,"complete","error","abort"),this.parent=s||null,this.active=!0,this._reculock=0,this._blockedFuncs=[],this._resolve=null,this._reject=null,this._waitingFor=null,this._waitingQueue=null,this._spinCount=0,this._completion=new De(((e,t)=>{this._resolve=e,this._reject=t})),this._completion.then((()=>{this.active=!1,this.on.complete.fire()}),(e=>{var t=this.active;return this.active=!1,this.on.error.fire(e),this.parent?this.parent._reject(e):t&&this.idbtrans&&this.idbtrans.abort(),ft(e)}))}))}(this),this.Version=function(e){return It(bn.prototype,(function(t){this.db=e,this._cfg={version:t,storesSource:null,dbschema:{},tables:{},contentUpgrade:null}}))}(this),this.WhereClause=function(e){return It(Vt.prototype,(function(t,n,r){this.db=e,this._ctx={table:t,index:":id"===n?null:n,or:r};const i=e._deps.indexedDB;if(!i)throw new Q.MissingAPI;this._cmp=this._ascending=i.cmp.bind(i),this._descending=(e,t)=>i.cmp(t,e),this._max=(e,t)=>i.cmp(e,t)>0?e:t,this._min=(e,t)=>i.cmp(e,t)<0?e:t,this._IDBKeyRange=e._deps.IDBKeyRange}))}(this),this.on("versionchange",(e=>{e.newVersion>0?console.warn(`Another connection wants to upgrade database '${this.name}'. Closing db now to resume the upgrade.`):console.warn(`Another connection wants to delete database '${this.name}'. Closing db now to resume the delete request.`),this.close()})),this.on("blocked",(e=>{!e.newVersion||e.newVersion<e.oldVersion?console.warn(`Dexie.delete('${this.name}') was blocked`):console.warn(`Upgrade '${this.name}' blocked by other connection holding version ${e.oldVersion/10}`)})),this._maxKey=nn(t.IDBKeyRange),this._createTransaction=(e,t,n,r)=>new this.Transaction(e,t,n,this._options.chromeTransactionDurability,r),this._fireOnBlocked=e=>{this.on("blocked").fire(e),vt.filter((e=>e.name===this.name&&e!==this&&!e._state.vcFired)).map((t=>t.on("versionchange").fire(e)))},this.use(Sn),this.use(On),this.use(Ln),this.use(Dn),this.vip=Object.create(this,{_vip:{value:!0}}),r.forEach((e=>e(this)))}version(e){if(isNaN(e)||e<.1)throw new Q.Type("Given version is not a positive number");if(e=Math.round(10*e)/10,this.idbdb||this._state.isBeingOpened)throw new Q.Schema("Cannot add version when database is open");this.verno=Math.max(this.verno,e);const t=this._versions;var n=t.filter((t=>t._cfg.version===e))[0];return n||(n=new this.Version(e),t.push(n),t.sort(dn),n.stores({}),this._state.autoSchema=!1,n)}_whenReady(e){return this.idbdb&&(this._state.openComplete||Se.letThrough||this._vip)?e():new De(((e,t)=>{if(this._state.openComplete)return t(new Q.DatabaseClosed(this._state.dbOpenError));if(!this._state.isBeingOpened){if(!this._options.autoOpen)return void t(new Q.DatabaseClosed);this.open().catch(ne)}this._state.dbReadyPromise.then(e,t)})).then(e)}use({stack:e,create:t,level:n,name:r}){r&&this.unuse({stack:e,name:r});const i=this._middlewares[e]||(this._middlewares[e]=[]);return i.push({stack:e,create:t,level:null==n?10:n,name:r}),i.sort(((e,t)=>e.level-t.level)),this}unuse({stack:e,name:t,create:n}){return e&&this._middlewares[e]&&(this._middlewares[e]=this._middlewares[e].filter((e=>n?e.create!==n:!!t&&e.name!==t))),this}open(){return function(e){const n=e._state,{indexedDB:r}=e._deps;if(n.isBeingOpened||e.idbdb)return n.dbReadyPromise.then((()=>n.dbOpenError?ft(n.dbOpenError):e));N&&(n.openCanceller._stackHolder=U()),n.isBeingOpened=!0,n.dbOpenError=null,n.openComplete=!1;const i=n.openCanceller;function s(){if(n.openCanceller!==i)throw new Q.DatabaseClosed("db.open() was cancelled")}let a=n.dbReadyResolve,o=null,l=!1;return De.race([i,("undefined"==typeof navigator?De.resolve():xn()).then((()=>new De(((i,a)=>{if(s(),!r)throw new Q.MissingAPI;const c=e.name,u=n.autoSchema?r.open(c):r.open(c,Math.round(10*e.verno));if(!u)throw new Q.MissingAPI;u.onerror=Ht(a),u.onblocked=Ge(e._fireOnBlocked),u.onupgradeneeded=Ge((t=>{if(o=u.transaction,n.autoSchema&&!e._options.allowEmptyDB){u.onerror=Xt,o.abort(),u.result.close();const e=r.deleteDatabase(c);e.onsuccess=e.onerror=Ge((()=>{a(new Q.NoSuchDatabase(`Database ${c} doesnt exist`))}))}else{o.onerror=Ht(a);var i=t.oldVersion>Math.pow(2,62)?0:t.oldVersion;l=i<1,e._novip.idbdb=u.result,fn(e,i/10,o,a)}}),a),u.onsuccess=Ge((()=>{o=null;const r=e._novip.idbdb=u.result,s=y(r.objectStoreNames);if(s.length>0)try{const i=r.transaction(1===(a=s).length?a[0]:a,"readonly");n.autoSchema?function({_novip:e},n,r){e.verno=n.version/10;const i=e._dbSchema=vn(0,n,r);e._storeNames=y(n.objectStoreNames,0),un(e,[e._allTables],t(i),i)}(e,r,i):(gn(e,e._dbSchema,i),function(e,t){const n=mn(vn(0,e.idbdb,t),e._dbSchema);return!(n.add.length||n.change.some((e=>e.add.length||e.change.length)))}(e,i)||console.warn("Dexie SchemaDiff: Schema was extended without increasing the number passed to db.version(). Some queries may fail.")),cn(e,i)}catch(e){}var a;vt.push(e),r.onversionchange=Ge((t=>{n.vcFired=!0,e.on("versionchange").fire(t)})),r.onclose=Ge((t=>{e.on("close").fire(t)})),l&&function({indexedDB:e,IDBKeyRange:t},n){!_n(e)&&"__dbnames"!==n&&wn(e,t).put({name:n}).catch(ne)}(e._deps,c),i()}),a)}))))]).then((()=>(s(),n.onReadyBeingFired=[],De.resolve(kn((()=>e.on.ready.fire(e.vip)))).then((function t(){if(n.onReadyBeingFired.length>0){let r=n.onReadyBeingFired.reduce(ue,ne);return n.onReadyBeingFired=[],De.resolve(kn((()=>r(e.vip)))).then(t)}}))))).finally((()=>{n.onReadyBeingFired=null,n.isBeingOpened=!1})).then((()=>e)).catch((t=>{n.dbOpenError=t;try{o&&o.abort()}catch(e){}return i===n.openCanceller&&e._close(),ft(t)})).finally((()=>{n.openComplete=!0,a()}))}(this)}_close(){const e=this._state,t=vt.indexOf(this);if(t>=0&&vt.splice(t,1),this.idbdb){try{this.idbdb.close()}catch(e){}this._novip.idbdb=null}e.dbReadyPromise=new De((t=>{e.dbReadyResolve=t})),e.openCanceller=new De(((t,n)=>{e.cancelOpen=n}))}close(){this._close();const e=this._state;this._options.autoOpen=!1,e.dbOpenError=new Q.DatabaseClosed,e.isBeingOpened&&e.cancelOpen(e.dbOpenError)}delete(){const e=arguments.length>0,t=this._state;return new De(((n,r)=>{const i=()=>{this.close();var e=this._deps.indexedDB.deleteDatabase(this.name);e.onsuccess=Ge((()=>{!function({indexedDB:e,IDBKeyRange:t},n){!_n(e)&&"__dbnames"!==n&&wn(e,t).delete(n).catch(ne)}(this._deps,this.name),n()})),e.onerror=Ht(r),e.onblocked=this._fireOnBlocked};if(e)throw new Q.InvalidArgument("Arguments not allowed in db.delete()");t.isBeingOpened?t.dbReadyPromise.then(i):i()}))}backendDB(){return this.idbdb}isOpen(){return null!==this.idbdb}hasBeenClosed(){const e=this._state.dbOpenError;return e&&"DatabaseClosed"===e.name}hasFailed(){return null!==this._state.dbOpenError}dynamicallyOpened(){return this._state.autoSchema}get tables(){return t(this._allTables).map((e=>this._allTables[e]))}transaction(){const e=En.apply(this,arguments);return this._transaction.apply(this,e)}_transaction(e,t,n){let r=Se.trans;r&&r.db===this&&-1===e.indexOf("!")||(r=null);const i=-1!==e.indexOf("?");let s,a;e=e.replace("!","").replace("?","");try{if(a=t.map((e=>{var t=e instanceof this.Table?e.name:e;if("string"!=typeof t)throw new TypeError("Invalid table argument to Dexie.transaction(). Only Table or String are allowed");return t})),"r"==e||"readonly"===e)s="readonly";else{if("rw"!=e&&"readwrite"!=e)throw new Q.InvalidArgument("Invalid transaction mode: "+e);s="readwrite"}if(r){if("readonly"===r.mode&&"readwrite"===s){if(!i)throw new Q.SubTransaction("Cannot enter a sub-transaction with READWRITE mode when parent transaction is READONLY");r=null}r&&a.forEach((e=>{if(r&&-1===r.storeNames.indexOf(e)){if(!i)throw new Q.SubTransaction("Table "+e+" not included in parent transaction.");r=null}})),i&&r&&!r.active&&(r=null)}}catch(e){return r?r._promise(null,((t,n)=>{n(e)})):ft(e)}const o=Pn.bind(null,this,s,a,r,n);return r?r._promise(s,o,"lock"):Se.trans?lt(Se.transless,(()=>this._whenReady(o))):this._whenReady(o)}table(e){if(!l(this._allTables,e))throw new Q.InvalidTable(`Table ${e} does not exist`);return this._allTables[e]}}const Un="undefined"!=typeof Symbol&&"observable"in Symbol?Symbol.observable:"@@observable";class qn{constructor(e){this._subscribe=e}subscribe(e,t,n){return this._subscribe(e&&"function"!=typeof e?e:{next:e,error:t,complete:n})}[Un](){return this}}function zn(e,n){return t(n).forEach((t=>{Mn(e[t]||(e[t]=new jn),n[t])})),e}let Zn;try{Zn={indexedDB:e.indexedDB||e.mozIndexedDB||e.webkitIndexedDB||e.msIndexedDB,IDBKeyRange:e.IDBKeyRange||e.webkitIDBKeyRange}}catch(e){Zn={indexedDB:null,IDBKeyRange:null}}const Wn=$n;function Gn(e){let t=Vn;try{Vn=!0,Yt.storagemutated.fire(e)}finally{Vn=t}}c(Wn,{...te,delete:e=>new Wn(e,{addons:[]}).delete(),exists:e=>new Wn(e,{addons:[]}).open().then((e=>(e.close(),!0))).catch("NoSuchDatabaseError",(()=>!1)),getDatabaseNames(e){try{return function({indexedDB:e,IDBKeyRange:t}){return _n(e)?Promise.resolve(e.databases()).then((e=>e.map((e=>e.name)).filter((e=>"__dbnames"!==e)))):wn(e,t).toCollection().primaryKeys()}(Wn.dependencies).then(e)}catch(e){return ft(new Q.MissingAPI)}},defineClass:()=>function(e){s(this,e)},ignoreTransaction:e=>Se.trans?lt(Se.transless,e):e(),vip:kn,async:function(e){return function(){try{var t=Rn(e.apply(this,arguments));return t&&"function"==typeof t.then?t:De.resolve(t)}catch(e){return ft(e)}}},spawn:function(e,t,n){try{var r=Rn(e.apply(n,t||[]));return r&&"function"==typeof r.then?r:De.resolve(r)}catch(e){return ft(e)}},currentTransaction:{get:()=>Se.trans||null},waitFor:function(e,t){const n=De.resolve("function"==typeof e?Wn.ignoreTransaction(e):e).timeout(t||6e4);return Se.trans?Se.trans.waitFor(n):n},Promise:De,debug:{get:()=>N,set:e=>{K(e,"dexie"===e?()=>!0:_t)}},derive:d,extend:s,props:c,override:v,Events:Pt,on:Yt,liveQuery:function(e){return new qn((n=>{const r=F(e);let i=!1,s={},a={};const o={get closed(){return i},unsubscribe:()=>{i=!0,Yt.storagemutated.unsubscribe(h)}};n.start&&n.start(o);let l=!1,c=!1;function u(){return t(a).some((e=>s[e]&&function(e,t){const n=Fn(t);let r=n.next();if(r.done)return!1;let i=r.value;const s=Fn(e);let a=s.next(i.from),o=a.value;for(;!r.done&&!a.done;){if(Bt(o.from,i.to)<=0&&Bt(o.to,i.from)>=0)return!0;Bt(i.from,o.from)<0?i=(r=n.next(o.from)).value:o=(a=s.next(i.from)).value}return!1}(s[e],a[e])))}const h=e=>{zn(s,e),u()&&d()},d=()=>{if(l||i)return;s={};const t={},f=function(t){r&&tt();const n=()=>et(e,{subscr:t,trans:null}),i=Se.trans?lt(Se.transless,n):n();return r&&i.then(nt,nt),i}(t);c||(Yt("storagemutated",h),c=!0),l=!0,Promise.resolve(f).then((e=>{l=!1,i||(u()?d():(s={},a=t,n.next&&n.next(e)))}),(e=>{l=!1,n.error&&n.error(e),o.unsubscribe()}))};return d(),o}))},extendObservabilitySet:zn,getByKeyPath:_,setByKeyPath:k,delByKeyPath:function(e,t){"string"==typeof t?k(e,t,void 0):"length"in t&&[].map.call(t,(function(t){k(e,t,void 0)}))},shallowClone:x,deepClone:C,getObjectDiff:Cn,cmp:Bt,asap:b,minKey:-1/0,addons:[],connections:vt,errnames:Y,dependencies:Zn,semVer:"3.2.1",version:"3.2.1".split(".").map((e=>parseInt(e))).reduce(((e,t,n)=>e+t/Math.pow(10,2*n)))}),Wn.maxKey=nn(Wn.dependencies.IDBKeyRange),"undefined"!=typeof dispatchEvent&&"undefined"!=typeof addEventListener&&(Yt("storagemutated",(e=>{if(!Vn){let t;gt?(t=document.createEvent("CustomEvent"),t.initCustomEvent("x-storagemutated-1",!0,!0,e)):t=new CustomEvent("x-storagemutated-1",{detail:e}),Vn=!0,dispatchEvent(t),Vn=!1}})),addEventListener("x-storagemutated-1",(({detail:e})=>{Vn||Gn(e)})));let Vn=!1;if("undefined"!=typeof BroadcastChannel){const e=new BroadcastChannel("x-storagemutated-1");Yt("storagemutated",(t=>{Vn||e.postMessage(t)})),e.onmessage=e=>{e.data&&Gn(e.data)}}else if("undefined"!=typeof self&&"undefined"!=typeof navigator){Yt("storagemutated",(e=>{try{Vn||("undefined"!=typeof localStorage&&localStorage.setItem("x-storagemutated-1",JSON.stringify({trig:Math.random(),changedParts:e})),"object"==typeof self.clients&&[...self.clients.matchAll({includeUncontrolled:!0})].forEach((t=>t.postMessage({type:"x-storagemutated-1",changedParts:e}))))}catch(e){}})),addEventListener("storage",(e=>{if("x-storagemutated-1"===e.key){const t=JSON.parse(e.newValue);t&&Gn(t.changedParts)}}));const e=self.document&&navigator.serviceWorker;e&&e.addEventListener("message",(function({data:e}){e&&"x-storagemutated-1"===e.type&&Gn(e.changedParts)}))}De.rejectionMapper=function(e,t){if(!e||e instanceof G||e instanceof TypeError||e instanceof SyntaxError||!e.name||!ee[e.name])return e;var n=new ee[e.name](t||e.message,e);return"stack"in e&&h(n,"stack",{get:function(){return this.inner.stack}}),n},K(N,_t);class Hn extends $n{constructor(){super("ms.js"),this.version(1).stores({requests:"&path"})}}var Xn;!function(e){e[e.None=0]="None",e[e.HairDye=1]="HairDye"}(Xn||(Xn={}));class Yn{constructor(e,t,n,r,i){var s,a,o,l;this.item=e,this.node=t,this.info=n.children.reduce(((e,t)=>(e[t.name]=t,e)),{}),this.islot=null===(a=null===(s=this.info)||void 0===s?void 0:s.islot)||void 0===a?void 0:a.value.match(/.{1,2}/g),this.vslot=null===(l=null===(o=this.info)||void 0===o?void 0:o.vslot)||void 0===l?void 0:l.value.match(/.{1,2}/g),this.zmap=r,this.smap=i}}class Jn{constructor(e){var t,n,r;this.slot=e.parent.name;const i=e.children.reduce(((e,t)=>(e[t.name]=t,e)),{});this.z=null===(t=i.z)||void 0===t?void 0:t.value,this.origin=null===(n=i.origin)||void 0===n?void 0:n.value,this.group=null===(r=i.group)||void 0===r?void 0:r.value,i.map&&(this.map=i.map.children.reduce(((e,t)=>(e[t.name]=t.value,e)),{}))}get visible(){return!0}}var Qn=function(e,t,n,r){return new(n||(n=Promise))((function(i,s){function a(e){try{l(r.next(e))}catch(e){s(e)}}function o(e){try{l(r.throw(e))}catch(e){s(e)}}function l(e){var t;e.done?i(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(a,o)}l((r=r.apply(e,t||[])).next())}))};class er{constructor(e,t,n){if(this.visible=!0,this.item=e,"canvas"===n.type)this.canvas=n;else{if("canvas"!==t.type)throw new Error("No renderable canvas found!");this.canvas=t}if(this.slot=t.name,!t.children)return this.originalPiece=new Jn(n),void(this.resolvedPiece=this.originalPiece);this.originalPiece=new Jn(t),this.resolvedPiece=t!==n&&n?new Jn(n):this.originalPiece}get origin(){return this.originalPiece.origin||this.resolvedPiece.origin}get z(){return this.originalPiece.z||this.resolvedPiece.z}get map(){return this.originalPiece.map||this.resolvedPiece.map||{navel:{x:0,y:0}}}get group(){return this.originalPiece.group||this.resolvedPiece.group}GetWebGLTexture(e){return Qn(this,void 0,void 0,(function*(){if(void 0!==this._textureId)return this._textureId;const t=yield this.canvas.GetValue(),n=e.createTexture();return e.bindTexture(e.TEXTURE_2D,n),e.pixelStorei(e.UNPACK_PREMULTIPLY_ALPHA_WEBGL,!0),e.texImage2D(e.TEXTURE_2D,0,e.RGBA,this.canvas.width,this.canvas.height,0,e.RGBA,e.UNSIGNED_BYTE,new Uint8Array(t.data)),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_WRAP_S,e.CLAMP_TO_EDGE),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_WRAP_T,e.CLAMP_TO_EDGE),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_MIN_FILTER,e.LINEAR),this._textureId=n,n}))}GetCanvasTexture(){return Qn(this,void 0,void 0,(function*(){if(void 0!==this._canvas)return this._canvas;const e=yield this.canvas.GetValue(),t=document.createElement("canvas");return t.style.display="none",t.width=this.canvas.width,t.height=this.canvas.height,document.body.appendChild(t),t.getContext("2d").putImageData(e,0,0),this._canvas=t,t.remove(),t}))}}var tr=function(e,t,n,r){return new(n||(n=Promise))((function(i,s){function a(e){try{l(r.next(e))}catch(e){s(e)}}function o(e){try{l(r.throw(e))}catch(e){s(e)}}function l(e){var t;e.done?i(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(a,o)}l((r=r.apply(e,t||[])).next())}))},nr=function(e,t,n,r){return new(n||(n=Promise))((function(i,s){function a(e){try{l(r.next(e))}catch(e){s(e)}}function o(e){try{l(r.throw(e))}catch(e){s(e)}}function l(e){var t;e.done?i(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(a,o)}l((r=r.apply(e,t||[])).next())}))};function rr(e,t){const n=t.split(".img",2);n[0]=n[0]+".img";const[r,i]=n;if(e[r])return t}class ir{constructor(e){this.factory=e}IsFaceId(e){return e>=2e4&&e<3e4||e>=5e4&&e<6e4}IsFaceOrAccessoryId(e){return e>=101e4&&e<102e4||e>=2e4&&e<3e4||e>=5e4&&e<6e4}GetItemImg(e,t,n){return nr(this,void 0,void 0,(function*(){const r=yield this.GetItemImgPath(e,t,n);return this.factory.resolve(e,t,r)}))}GetFolderForItem(e){return this.GetFolderForItemId(e.region,e.version,e.id)}GetFolderForItemId(e,t,n){return nr(this,void 0,void 0,(function*(){const r=Math.floor(n/100);return(yield this.factory.getFolders(e,t))[r.toString()]}))}GetItemImgPath(e,t,n){return nr(this,void 0,void 0,(function*(){const r=Math.floor(n/100),i=Math.floor(n/1e4).toString().padStart(4,"0"),s=Math.floor(n/1e3).toString().padStart(5,"0"),a=n.toString().padStart(8,"0"),o=r.toString().padStart(6,"0");let l=null;const c=yield this.factory.getImages(e,t);if(r>=2e4&&r<3e4&&(l=rr(c,`Item/Consume/${i}.img/${a}`)),r>=30100&&r<4e4&&(r>=30150&&r<=30159&&(l=rr(c,`Item/Install/${o}.img/${a}`)),(r>=30160&&r<=30400||!l)&&(l=rr(c,`Item/Install/${s}.img/${a}`)),(r>=30400||!l)&&(l=rr(c,`Item/Install/${i}.img/${a}`))),r>=4e4&&r<5e4&&(l=rr(c,`Item/Etc/${i}.img/${a}`)),r>=5e4&&r<50100&&(l=rr(c,`Item/Pet/${n}.img`)),r>=50100&&r<6e4&&(l=rr(c,`Item/Cash/${i}.img/${a}`)),r>=9e4&&r<90200&&(l=rr(c,`Item/Special/${i}.img/${a}`)),r>=200&&r<2e4||!l){var u,h=yield this.factory.getFolders(e,t);(u=h[r.toString()])&&(l=rr(c,`Character/${u}/${a}.img`)),l||(u=h[(r+1).toString()])&&(l=rr(c,`Character/${u}/${a}.img`)),l||(u=h[(r-1).toString()])&&(l=rr(c,`Character/${u}/${a}.img`))}return(n>=2e3&&n<2e4||!l)&&(l=rr(c,`Character/${a}.img`)),l}))}}class sr{constructor(e,t,n,r,i){this.left=Math.min.apply(null,e),this.right=Math.max.apply(null,t),this.top=Math.min.apply(null,n),this.bottom=Math.max.apply(null,r),this.zoom=i||1,this.offset={x:-this.left,y:-this.top},this.size={x:(this.right-this.left)*this.zoom,y:(this.bottom-this.top)*this.zoom}}}function ar(e,t,n){const r=n.calculatedOffsets.body||n.calculatedOffsets.backBody;r||console.warn("Couldn't find the body???");const i={x:r.x-t.left,y:r.y-t.top};return i.x*=e.zoom,i.y*=e.zoom,e.flipX&&(i.x=t.size.x-i.x),i}function or(e,t,n){const r=[],i=[],s=[],a=[];return Object.keys(n.lockedPieces).forEach((e=>{n.lockedPieces[e].forEach((e=>{const n=t.calculatedOffsets[e.slot||e.z],o=n.x-(e.origin||{x:0}).x,l=o+e.canvas.width,c=n.y-(e.origin||{y:0}).y,u=c+e.canvas.height;r.push(o),i.push(l),s.push(c),a.push(u)}))})),new sr(r,i,s,a,e.zoom)}var lr=function(e,t,n,r){return new(n||(n=Promise))((function(i,s){function a(e){try{l(r.next(e))}catch(e){s(e)}}function o(e){try{l(r.throw(e))}catch(e){s(e)}}function l(e){var t;e.done?i(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(a,o)}l((r=r.apply(e,t||[])).next())}))};class cr{constructor(e,t,n){if(n)this.framePairs=n.framePairs,this.loadedPieces=n.loadedPieces,this.locks=n.locks,this.anchors=n.anchors,this.minimumDelay=n.minimumDelay,this.request=e,this.bounds=or(this.request,this.anchors,this.locks),this.feetCenter=ar(this.request,this.bounds,this.anchors);else{if(!t)throw new Error("Need either a render plan to copy from or a set of framePairs to build off of");this.framePairs=t,this.request=e}}Initialize(e){return lr(this,void 0,void 0,(function*(){const{zmap:t,smap:n}=this.GetMappings();this.loadedPieces=yield function(e,t){return tr(this,void 0,void 0,(function*(){const n=e.reduce(((e,t)=>(e.push.apply(e,t.node.children.map((e=>({child:e,item:t})))),e)),[]),r=yield Promise.all(n.map((e=>tr(this,void 0,void 0,(function*(){let t=null,n=yield e.child.resolve();do{t=n,n=yield t.resolve()}while(n!=t);return Object.assign(Object.assign({},e),{resolved:t})})))));let i={};return{pieces:r.filter((e=>("delay"===e.child.name&&(i[e.item.item.id]=e.child.value),"canvas"===e.child.type||"canvas"===e.resolved.type))).map((e=>new er(e.item,e.child,e.resolved))).reduce(((e,n)=>{let r=n;if(t&&t.slots){const e=t.slots[n.slot];e&&(r=Object.assign(n,e))}if(!n.visible)return e;const i=n.z||n.slot;return e[i]?e[i].push(r):e[i]=[r],e}),{}),delays:i,minDelay:Math.min(...Object.values(i))}}))}(this.framePairs,e),this.locks=yield function(e,t,n){return function(e,t,n,r){return new(n||(n=Promise))((function(i,s){function a(e){try{l(r.next(e))}catch(e){s(e)}}function o(e){try{l(r.throw(e))}catch(e){s(e)}}function l(e){var t;e.done?i(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(a,o)}l((r=r.apply(e,t||[])).next())}))}(this,void 0,void 0,(function*(){const r=e.body||e.backBody,i=yield r[0].item.node.resolve("face"),s=null!=i&&0!=i.value;let a=Object.assign({},e);s||(Object.keys(a).forEach((e=>a[e].filter((e=>{ir.prototype.IsFaceOrAccessoryId(e.item.item.id)})))),a=a);const o=function(e,t){const n=e.reduce(((e,n)=>{const r=t[n];return r&&r.length?(r.forEach((t=>t.item.islot.forEach((n=>e[n]=t.item)))),e):e}),{});return e.forEach((e=>{const r=t[e];r&&r.length&&r.forEach((e=>{const t=e.item.islot;t.every((t=>n[t]==e.item))||t.forEach((t=>{n[t]==e.item&&delete n[t]}))}))})),n}(t,a),l=t.reduce(((e,t)=>{const n=o[t];return n?(n.vslot.forEach((t=>e[t]=n)),e):e}),{}),c={};return Object.keys(a).forEach((e=>{const t=a[e];c[e]=t.filter((e=>{let t=n[e.slot]||e.item.vslot;"pants"===e.slot&&(t=["Pn"]),"mailArm"===e.slot&&(t=["Ma"]);const r=null==t?void 0:t.every((t=>{const n=l[t]===e.item||!l[t];return!(n||!e.item.allowConflictingLocksWith||l[t]!==e.item.allowConflictingLocksWith)||!n&&l[t].allowConflictingLocksWith===e.item||n}));return e.lockBlame=null==t?void 0:t.map((e=>l[e])),e.hasLock=!t||r,!t||r}))})),{locks:l,lockedPieces:c}}))}(this.loadedPieces.pieces,t,n),this.anchors=function(e,t){let n=Object.values(t).reduce(((e,t)=>(e.push(...t),e)),[]).filter((e=>Object.keys(e.map).length>0)).reverse();const r={navel:{x:0,y:0}};if(e.action.startsWith("alert")||e.action.startsWith("heal"))switch(Number(e.frame)){case 0:r.handMove={x:-8,y:-2};break;case 1:r.handMove={x:-10,y:0};break;case 2:r.handMove={x:-12,y:3}}let i=!0;const s={};for(;n.length>0&&i;){i=!1;for(let e=0;e<n.length;++e){const t=n[e],{map:a}=t,o=Object.keys(a).find((e=>r[e])),l=a[o];if(!l)continue;const c=r[o],u={x:c.x-l.x,y:c.y-l.y,basedOffAnchor:c,anchorDistance:l,anchorName:o};s[t.slot||t.z]=u,Object.keys(a).filter((e=>e!=o)).forEach((e=>{const t=a[e],n={x:u.x+t.x,y:u.y+t.y};r[e]?console.warn("Anchor offset chain doesn't seem valid"):r[e]=n})),n=n.filter((e=>e!=t)),i=!0}}return{calculatedOffsets:s,anchors:r}}(this.request,this.locks.lockedPieces),this.bounds=or(this.request,this.anchors,this.locks),this.feetCenter=ar(this.request,this.bounds,this.anchors),this.minimumDelay=Math.min(...Object.values(this.loadedPieces.delays))}))}GetMappings(){const e=this.framePairs.sort(((e,t)=>e.item.id-t.item.id))[0],{zmap:t,smap:n}=e;return{zmap:t,smap:n}}Render(e){return this.GenerateImageToCanvas(e)}GenerateImageToCanvas(e){return lr(this,void 0,void 0,(function*(){if(this.renderedCanvas)return this.renderedCanvas;let t=e;e||(t=document.createElement("canvas"),t.style.display="none"),t.width=this.bounds.size.x,t.height=this.bounds.size.y,document.body.appendChild(t);const n=t.getContext("2d");n.globalCompositeOperation="source-over";const{zmap:r}=this.GetMappings();return this.request.flipX&&(n.translate(this.bounds.size.x,0),n.scale(-1,1)),n.scale(this.request.zoom,this.request.zoom),n.translate(this.bounds.offset.x,this.bounds.offset.y),yield r.reduce(((e,t)=>lr(this,void 0,void 0,(function*(){yield e;const r=this.locks.lockedPieces[t];if(!r||!r.length)return e;r.length>1&&r.sort(((e,t)=>(e.item.item.internal||0)-(t.item.item.internal||0))),yield Promise.all(r.map((e=>lr(this,void 0,void 0,(function*(){const t=this.anchors.calculatedOffsets[e.slot||e.z];let r={};e.origin&&t?r={x:t.x-(e.origin.x||0),y:t.y-(e.origin.y||0)}:t?r=t:e.origin&&(r=e.origin);const i=yield e.GetCanvasTexture();n.save();const s=e.item.item;if(e.item.item.internal==Xn.HairDye){const e=null==this.request.selectedItems.Hair.alpha?1:this.request.selectedItems.Hair.alpha;n.globalAlpha=this.request.hairDye.percentile*e}else null!=s.alpha&&(n.globalAlpha=s.alpha);n.drawImage(i,r.x,r.y),n.restore()})))))}))),Promise.resolve()),e||(t.remove(),t.style.display="block"),this.renderedCanvas=t,t}))}}var ur=function(e,t,n,r){return new(n||(n=Promise))((function(i,s){function a(e){try{l(r.next(e))}catch(e){s(e)}}function o(e){try{l(r.throw(e))}catch(e){s(e)}}function l(e){var t;e.done?i(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(a,o)}l((r=r.apply(e,t||[])).next())}))};class hr{constructor(e,t,n,r){this.OriginalRenderRequest=n,this.Canvas=document.createElement("canvas"),this.Canvas.style.display="none",document.body.appendChild(this.Canvas),this.context=this.Canvas.getContext("2d"),this.renderer=e,this.equipOverrides=r,this.maxFramesCalculator=t}get frame(){return this.frames[this.frameIndex]}set frame(e){const t=this.frames.indexOf(e);if(-1===t)throw new Error("Invalid frame specified, must be based off of the existing frames.");this.frameIndex=t}Prepare(){return ur(this,void 0,void 0,(function*(){const e=Object.keys(this.OriginalRenderRequest.selectedItems).reduce(((e,t)=>(e[this.OriginalRenderRequest.selectedItems[t].id.toString()]=t,e)),{}),[t,n]=yield Promise.all([this.maxFramesCalculator.GetMaxFaceFrames(this.OriginalRenderRequest),this.maxFramesCalculator.GetMaxFrames(this.OriginalRenderRequest)]);this.maxFrame=(t+1)*(n+1);let r=this.OriginalRenderRequest.timeOffset||0;const i={};let s=null;const a={};this.frames=[];for(let t=0;t<this.maxFrame;++t){const n=Object.assign({},this.OriginalRenderRequest);if(n.frame=0,n.timeOffset=r,s){const t=s.minimumDelay;Object.keys(i).forEach((r=>{if((i[r]-=t)<=0&&(a[r]?a[r]++:a[r]=1),Number(r)<=1e4)n.frame=a[r];else{const t=e[r];n.selectedItems[t]=Object.assign(Object.assign({},n.selectedItems[t]),{frame:a[r]})}}))}const o=yield this.renderer.GenerateRenderPlan(n,this.equipOverrides);r+=o.minimumDelay,s=o,Object.keys(o.loadedPieces.delays).forEach((e=>{let t=o.loadedPieces.delays[e];const n=i[e];(n<=0||!n)&&(i[e]=t,a[e]||(a[e]=0))})),this.frames[t]=o}const o=this.OriginalRenderRequest.action;if(o.startsWith("stand")||o.startsWith("alert")){const e=[...this.frames].reverse();e.shift(),e.pop(),this.frames.push.apply(this.frames,e),this.maxFrame=this.frames.length}const l=this.frames.map((e=>e.feetCenter));this.MaxFeetPosition={x:Math.max.apply(null,l.map((e=>e.x))),y:Math.max.apply(null,l.map((e=>e.y)))};const c=this.MaxFeetPosition.x-Math.min.apply(null,l.map((e=>e.x))),u=this.MaxFeetPosition.y-Math.min.apply(null,l.map((e=>e.y))),h=[],d=[];this.frames.forEach((e=>{h.push(e.bounds.size.x),d.push(e.bounds.size.y)})),this.width=Math.max.apply(null,h)+c,this.height=Math.max.apply(null,d)+u,this.ReplaceCanvas(this.Canvas,this.context),this.frameIndex=0,this.Canvas.remove(),this.Canvas.style.display="block"}))}ReplaceCanvas(e,t){this.Canvas=e,e.width=this.width,e.height=this.height,this.context=t||this.Canvas.getContext("2d")}RenderSingleFrame(){return ur(this,void 0,void 0,(function*(){const e=yield this.frame.Render(),t=this.frame.feetCenter,n=Object.assign({},t);n.x-=this.MaxFeetPosition.x,n.y-=this.MaxFeetPosition.y,this.context.clearRect(0,0,this.Canvas.width,this.Canvas.height),this.context.drawImage(e,-n.x,-n.y),this.frameIndex++,this.frameIndex>=this.maxFrame&&(this.frameIndex=0)}))}RenderLoop(){return ur(this,void 0,void 0,(function*(){return yield this.RenderSingleFrame(),this.nextFrameTimeout=setTimeout((()=>{this.RenderLoop()}),this.frame.minimumDelay),this.Canvas}))}Stop(){return ur(this,void 0,void 0,(function*(){clearTimeout(this.nextFrameTimeout)}))}}var dr=function(e,t,n,r){return new(n||(n=Promise))((function(i,s){function a(e){try{l(r.next(e))}catch(e){s(e)}}function o(e){try{l(r.throw(e))}catch(e){s(e)}}function l(e){var t;e.done?i(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(a,o)}l((r=r.apply(e,t||[])).next())}))};class fr{constructor(e,t){this.itemUtility=e,this.dataFactory=t,this.cachedPlans={}}HashRenderPlanRequest(e){const t=[e.type,e.action,e.emotion,e.skin,e.frame,e.mercEars,e.illiumEars];return e.hairDye&&t.push(e.hairDye.colorId),t.push.apply(t,Object.keys(e.selectedItems).map((t=>{const n=e.selectedItems[t];return[n.id,n.frame,n.action,n.version,n.region].join(",")}))),t.join(",")}GenerateAnimatedRenderPlan(e,t){return dr(this,void 0,void 0,(function*(){const n=new hr(this,this,e,t);return yield n.Prepare(),n}))}GenerateRenderPlan(e,t){return dr(this,void 0,void 0,(function*(){const t=this.HashRenderPlanRequest(e);if(this.cachedPlans[t]){const n=this.cachedPlans[t];return new cr(e,null,n)}const n=yield this.GetMaxFrames(e),r=yield this.GetMaxFaceFrames(e),i=yield this.GetFrameNodes(e,n,r),s=new cr(e,i);return yield s.Initialize({slots:{lefEar:{visible:!1},highlefEar:{visible:!1},ear:{visible:!1}}}),this.cachedPlans[t]=s,s}))}GetMaxFaceFrames(e,t){return dr(this,void 0,void 0,(function*(){return this.GetMaxFrames(e,e.emotion,!0)}))}GetMaxFrames(e,t,n){return dr(this,void 0,void 0,(function*(){const r=yield Promise.all(Object.values(e.selectedItems).map((r=>dr(this,void 0,void 0,(function*(){const i=this.itemUtility.IsFaceOrAccessoryId(r.id);if(i&&!n||!i&&n)return 0;const s=yield this.GetAnimationNode(e,r,t);if(!s)return 0;if(s.children.find((e=>"canvas"===e.type)))return 0;const a=s.children.map((e=>Number(e.name))).filter((e=>!Number.isNaN(e)));return Math.max.apply(null,a)})))));return Math.max.apply(null,r)}))}GetAnimationNode(e,t,n){return dr(this,void 0,void 0,(function*(){const r=yield this.itemUtility.GetItemImgPath(t.region,t.version,t.id);if(!r)return null;const i=yield this.dataFactory.resolve(t.region,t.version,r),s=this.itemUtility.IsFaceOrAccessoryId(t.id)?n||e.emotion||"default":n||t.action||e.action;let a=yield i.resolve(s);if(!a){if(70!==Math.floor((t.id-1e6)/1e4))throw new Error("Couldn't resolve to animation node for item");{let t=30;const n=yield Promise.all(Object.values(e.selectedItems).filter((e=>e!=e)).map((e=>dr(this,void 0,void 0,(function*(){const t=yield this.itemUtility.GetFolderForItem(e);return{item:e,folder:t}}))))),r=n.find((e=>"Weapon"===e.folder));if(r){const e=r.item.id;t=Math.floor((e-1e6)/1e4),70===t&&(t=30)}a=yield i.resolve(`${t}/${s}`)}}if(!a)throw new Error("Invalid emotion/animation supplied");return a}))}GetFrameNodes(e,t,n){return dr(this,void 0,void 0,(function*(){const r=yield Promise.all(Object.values(e.selectedItems).map((r=>this.MapItemToFrameNode(e,t,n,r))));if(e.hairDye&&e.hairDye.percentile){const i=e.selectedItems.Hair,s=r.find((e=>e.item==i)),a=i.id,o=10*Math.floor(a/10)+e.hairDye.colorId,l=yield this.MapItemToFrameNode(e,t,n,Object.assign(Object.assign({},i),{id:o,internal:Xn.HairDye}));l.allowConflictingLocksWith=s,r.push(l)}return r.filter((e=>e))}))}MapItemToFrameNode(e,t,n,r){return dr(this,void 0,void 0,(function*(){const i=this.itemUtility.IsFaceOrAccessoryId(r.id),s=yield this.GetAnimationNode(e,r,null);if(!s)throw new Error("Invalid action/animation selected");const a=yield this.itemUtility.GetItemImgPath(r.region,r.version,r.id),o=yield this.dataFactory.resolve(r.region,r.version,`${a}/info`),l=yield this.dataFactory.getZmap(r.region,r.version),c=yield this.dataFactory.getSmap(r.region,r.version);if(s.children.find((e=>"canvas"===e.type)))return new Yn(r,s,o,l,c);let u=void 0!==r.frame?r.frame:e.frame;u%=i?n+1:t+1;const h=yield s.resolve(u.toString());return h?new Yn(r,h,o,l,c):null}))}}const mr=["Map","Data/Map","Map001","Map002","Map2","Map1"];class pr{}class yr{}class vr{}class gr{}class br{}class wr{}class _r{}class kr{}var xr=function(e,t,n,r){return new(n||(n=Promise))((function(i,s){function a(e){try{l(r.next(e))}catch(e){s(e)}}function o(e){try{l(r.throw(e))}catch(e){s(e)}}function l(e){var t;e.done?i(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(a,o)}l((r=r.apply(e,t||[])).next())}))};class Rr{constructor(e,t,n){this.node=n,this.region=e,this.version=t}Load(e){return xr(this,void 0,void 0,(function*(){yield this.LoadInfo(e),this.Info.tileSet&&(yield this.LoadTiles()),yield this.LoadObjects(e)}))}LoadObjects(e){return xr(this,void 0,void 0,(function*(){const t=yield this.node.resolve("obj");this.Objects=yield Promise.all(t.children.map((t=>xr(this,void 0,void 0,(function*(){const n=new _r;t.children.forEach((e=>{switch(e.name){case"oS":n.ObjectSetName=e.value;break;case"l0":n.ListZero=e.value;break;case"l1":n.ListOne=e.value;break;case"l2":n.ListTwo=e.value;break;case"quest":n.questIds=e.children.map((e=>Number(e.name)));break;case"tags":n.tags=e.value;break;case"front":n.front=e.value;break;case"x":n.x=e.value;break;case"y":n.y=e.value;break;case"z":n.z=e.value;break;case"r":n.rotation=e.value;break;case"f":n.flipX=e.value;break;case"zM":n.z2=e.value;break;case"groupName":n.groupName=e.value}})),n.imgPath=n.ObjectSetName+".img",n.path=`${n.ListZero}/${n.ListOne}/${n.ListTwo}`.replace(" ",""),n.visible=!(n.questIds&&n.questIds.length||n.tags||n.groupName);const r=`Obj/${n.ObjectSetName}.img`,i=yield e.getImageWithPossiblePrefixes(this.region,this.version,mr,r);return n.ObjectSet=yield i.resolve(n.path),n}))))),this.Objects.sort(((e,t)=>e.front&&!t.front?1e4-t.z:t.front&&!e.front?e.z-1e4:e.front&&t.front?0:e.z-t.z))}))}LoadInfo(e){return xr(this,void 0,void 0,(function*(){const t=yield this.node.resolve("info"),n=new wr;if(t.children.forEach((e=>{switch(e.name){case"tS":n.tileSet=e.value;break;case"tSMag":n.tileSetMagazine=e.value;break;default:console.warn("Unknown background property: ",e.name,e)}})),this.Info=n,n.tileSet){const t=`Tile/${n.tileSet}.img`;this.TileSetNode=yield e.getImageWithPossiblePrefixes(this.region,this.version,mr,t)}}))}LoadTiles(){return xr(this,void 0,void 0,(function*(){const e=yield this.node.resolve("tile");this.Tiles=yield Promise.all(e.children.map((e=>xr(this,void 0,void 0,(function*(){const t=new kr;return e.children.forEach((e=>{switch(e.name){case"u":t.group=e.value;break;case"no":t.tileId=e.value;break;case"f":t.flipX=e.value}})),t.path=`${t.group}/${t.tileId}`.replace(" ",""),t.visible=!0,t.TileNode=yield this.TileSetNode.resolve(t.path),t})))))}))}}class Er{}var Pr=function(e,t,n,r){return new(n||(n=Promise))((function(i,s){function a(e){try{l(r.next(e))}catch(e){s(e)}}function o(e){try{l(r.throw(e))}catch(e){s(e)}}function l(e){var t;e.done?i(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(a,o)}l((r=r.apply(e,t||[])).next())}))};class Ir{constructor(e,t,n,r){this.node=r,this.id=e,this.region=t,this.version=n}Load(e){return Pr(this,void 0,void 0,(function*(){yield this.LoadInfo(),yield this.LoadPortals(),yield this.LoadLife(),yield this.LoadFootholds(),yield this.LoadLadderRope(),yield this.LoadSeats(),yield this.LoadBackgrounds(e),this.Layers=yield Promise.all(this.node.children.map((e=>{const t=Number(e.name);return Number.isNaN(t)?null:e})).filter((e=>e)).map((t=>this.LoadLayer(e,t))))}))}LoadInfo(){return Pr(this,void 0,void 0,(function*(){const e=yield this.node.resolve("info"),t=new br;e.children.forEach((e=>{switch(e.name){case"link":t.LinksTo=e.value;break;case"bgm":t.BackgroundMusic=e.value;break;case"returnMap":t.ReturnMap=e.value,t.IsReturnMap=999999999==t.ReturnMap;break;case"town":t.IsTown=e.value;break;case"swim":t.IsSwim=e.value;break;case"mobRate":t.MobRate=e.value;break;case"mapMark":t.MapMark=e.value;break;case"barrier":t.MinimumStarForce=e.value;break;case"barrierArc":t.MinimumArcaneForce=e.value;break;case"lvLimit":t.MinimumLevel=e.value;break;case"VRTop":t.top=e.value;break;case"VRRight":t.right=e.value;break;case"VRBottom":t.bottom=e.value;break;case"VRLeft":t.left=e.value}})),this.Info=t}))}LoadPortals(){return Pr(this,void 0,void 0,(function*(){const e=yield this.node.resolve("portal");this.Portals=e.children.map((e=>{const t=new Er;return e.children.forEach((e=>{switch(e.name){case"pn":t.name=e.value;break;case"tm":t.targetMapId=e.value;break;case"tn":t.targetName=e.value;break;case"x":t.x=e.value;break;case"y":t.y=e.value;break;case"image":t.image=e.value;break;case"onlyOnce":t.onlyOnce=e.value}})),t}))}))}LoadLife(){return Pr(this,void 0,void 0,(function*(){const e=yield this.node.resolve("life");this.lifeTemplates=e.children.map((e=>{const t=new gr;return e.children.forEach((e=>{switch(e.name){case"x":t.x=e.value;break;case"y":t.y=e.value;break;case"rx0":t.walkLeft=e.value;break;case"rx1":t.walkRight=e.value;break;case"id":t.id=e.value;break;case"fh":t.fh=e.value;break;case"f":t.flipX=e.value;break;case"hide":t.hidden=e.value;break;case"type":t.type=e.value}})),t}))}))}LoadFootholds(){return Pr(this,void 0,void 0,(function*(){const e=yield this.node.resolve("foothold"),t=[];e.children.forEach((e=>{e.children.forEach((n=>{n.children.forEach((r=>{const i=t[Number(r.name)]=new yr;i.id=Number(r.name),i.group=Number(n.name),i.layer=Number(e.name),r.children.forEach((e=>{switch(e.name){case"next":i.next=Number(e.value);break;case"prev":i.prev=Number(e.value);break;case"piece":i.piece=Number(e.value);break;case"x1":i.x1=Number(e.value);break;case"x2":i.x2=Number(e.value);break;case"y1":i.y1=Number(e.value);break;case"y2":i.y2=Number(e.value)}}))}))}))}))}))}LoadLadderRope(){return Pr(this,void 0,void 0,(function*(){const e=yield this.node.resolve("ladderRope");this.LadderRopes=e.children.map((e=>{const t=new vr;return e.children.forEach((e=>{switch(e.name){case"x":t.x=e.value;break;case"y1":t.y1=e.value;break;case"y2":t.y2=e.value;break;case"l":t.IsLadder=e.value}})),t}))}))}LoadBackgrounds(e){return Pr(this,void 0,void 0,(function*(){const t=yield this.node.resolve("back");this.Backgrounds=yield Promise.all(t.children.map((t=>Pr(this,void 0,void 0,(function*(){const n=new pr;t.children.forEach((e=>{switch(e.name){case"no":n.backgroundSetId=e.value;break;case"bS":n.backgroundSetName=e.value;break;case"front":n.front=e.value;break;case"a":n.alpha=(e.value||255)/255;break;case"f":n.flipX=e.value;break;case"type":n.type=e.value;break;case"x":n.x=e.value;break;case"y":n.y=e.value;break;case"rx":n.rx=e.value;break;case"ry":n.ry=e.value;break;case"cx":n.cx=e.value;break;case"cy":n.cy=e.value;break;case"ani":n.animated=e.value;break;default:console.warn("Unknown background property: ",e.name,e)}}));let r="back";n.animated&&(r="ani"),n.Path=`${r}/${n.backgroundSetId}`.replace(" ",""),n.imgPath=`Back/${n.backgroundSetName}.img`.replace(" ","");const i=yield e.getImageWithPossiblePrefixes(this.region,this.version,mr,n.imgPath);return n.backgroundNode=yield i.resolve(n.Path),n})))))}))}LoadSeats(){return Pr(this,void 0,void 0,(function*(){const e=yield this.node.resolve("seat");this.Seats=e?e.children.map((e=>e.value)):[]}))}LoadLayer(e,t){return Pr(this,void 0,void 0,(function*(){const n=new Rr(this.region,this.version,t);return yield n.Load(e),n}))}}var Sr=function(e,t,n,r){return new(n||(n=Promise))((function(i,s){function a(e){try{l(r.next(e))}catch(e){s(e)}}function o(e){try{l(r.throw(e))}catch(e){s(e)}}function l(e){var t;e.done?i(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(a,o)}l((r=r.apply(e,t||[])).next())}))};class Cr{constructor(e){this.dataFactory=e}Render(e,t,n){return Sr(this,void 0,void 0,(function*(){return yield this.LoadMap(n,e,t)}))}LoadMap(e,t,n){return Sr(this,void 0,void 0,(function*(){let r=function(e,t){let n=e;for(;n.length<9;)n="0"+n;return n}(e.toString());const i=`Map/Map${r.substring(0,1)}/${r}.img`,s=yield this.dataFactory.getImageWithPossiblePrefixes(t,n,mr,i),a=new Ir(e,t,n,s);return yield a.Load(this.dataFactory),a}))}}class Or{constructor(e){this.NotifyOnComplete=[],this.Name=e,this.CompletedLength=0,this.StartedAt=new Date}SetLength(e){this.Length=e}ReportNewLength(e){this.CompletedLength=e}ReportDone(){this.Done=!0,this.DoneAt=new Date,this.NotifyOnComplete.forEach((e=>e(this)))}ReportError(e){this.Error=e}ReportRetryAttempt(e){this.RetryIndex=e,this.RetriedAt=new Date,this.RetrySuccess=!1}ReportRetrySuccess(){this.RetrySuccess=!0,this.Error=null}RegisterNotifyOnComplete(e){this.NotifyOnComplete.push(e)}ReportFromInternalCache(){this.FromInternalCache=!0}}class Ar{constructor(e,t){this.path=e,this.data=t}}var Dr=function(e,t,n,r){return new(n||(n=Promise))((function(i,s){function a(e){try{l(r.next(e))}catch(e){s(e)}}function o(e){try{l(r.throw(e))}catch(e){s(e)}}function l(e){var t;e.done?i(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(a,o)}l((r=r.apply(e,t||[])).next())}))};class Tr{constructor(e){this.ProgressMonitorCallback=[],this.RetriesAllowed=5,this.RetryDelay=1e3,this.database=e}RegisterEventMonitor(e){this.ProgressMonitorCallback.push(e)}SetRetryCount(e){this.RetriesAllowed=e}download(e){return Dr(this,void 0,void 0,(function*(){let t=null,n=null,r=0,i=0;const s=new Or(e);this.ProgressMonitorCallback.forEach((e=>e(s)));const a=yield this.database.requests.get(e);if(a){const e=a.data;return s.ReportFromInternalCache(),s.SetLength(e.length),s.ReportNewLength(e.length),s.ReportDone(),e}for(;r<this.RetriesAllowed;)try{if(t=yield fetch(e),t.status>=400)throw new Error("Invalid response status code");n=t.body.getReader(),i=+t.headers.get("Content-Length"),s.SetLength(i),r&&s.ReportRetrySuccess();break}catch(e){s.ReportError(e),yield new Promise((e=>setTimeout((()=>e(null)),this.RetryDelay))),r++,s.ReportRetryAttempt(r)}let o=0,l=[];for(;;)try{const{done:e,value:t}=yield n.read();if(e)break;l.push(t),o+=t.length,s.ReportNewLength(o)}catch(a){s.ReportError(a);let l=!1;for(;++r<this.RetriesAllowed;){yield new Promise((e=>setTimeout((()=>e(null)),this.RetryDelay)));try{if(s.ReportRetryAttempt(r),t=yield fetch(e,{headers:{Range:`bytes=${o}-${i}`}}),t.status>=400)throw new Error("Invalid response status code");n=t.body.getReader(),s.ReportRetrySuccess(),l=!0}catch(e){s.ReportError(e),yield new Promise((e=>setTimeout((()=>e(null)),this.RetryDelay)))}}if(!l)throw s.ReportError(a),a}let c=new Uint8Array(o),u=0;for(let e of l)c.set(e,u),u+=e.length;return yield this.database.requests.put(new Ar(e,c),e),s.ReportDone(),c}))}fetchJson(e){return Dr(this,void 0,void 0,(function*(){const t=yield this.download(e),n=new TextDecoder("utf-8").decode(t);return JSON.parse(n)}))}fetchAb(e){return Dr(this,void 0,void 0,(function*(){return(yield this.download(e)).buffer}))}}const jr=n(802);class Br{constructor(e,t,n){this.ab=e,this.view=new DataView(e,t||0,n||e.byteLength),this.position=0,this.startPosition=t||0,this.length=e.byteLength}Advance(e){const t=this.position;return this.position+=e,t}ReadByte(){return this.view.getInt8(this.Advance(1))}ReadUByte(){return this.view.getUint8(this.Advance(1))}ReadInt16(){return this.view.getInt16(this.Advance(2),!0)}ReadUInt16(){return this.view.getUint16(this.Advance(2),!0)}ReadInt32(){return this.view.getInt32(this.Advance(4),!0)}ReadUInt32(){return this.view.getUint32(this.Advance(4),!0)}ReadInt64(){return this.view.getBigInt64(this.Advance(8),!0)}ReadUInt64(){return this.view.getBigUint64(this.Advance(8),!0)}ReadSingle(){return this.view.getFloat32(this.Advance(4),!0)}ReadDouble(){return this.view.getFloat64(this.Advance(8),!0)}ReadWZSingle(){const e=this.ReadByte();return 128==e?this.ReadSingle():e}ReadWZInt(){const e=this.ReadByte();return-128==e?this.ReadInt32():e}ReadWZStringBlock(){if(0===this.ReadByte())return this.ReadWZString();throw"Not supported string"}ReadWZString(){let e=this.ReadByte();const t=e>0;t?127==e?e=this.ReadInt32():e*=1:-128==e?e=this.ReadInt32():e*=-1;let n=[];if(t){for(let r=0;r<e;++r){let e=this.ReadUInt16();e^=t?43690+r:(170+r)%255,n[r]=e}}else for(let r=0;r<e;++r){let e=this.ReadUByte();e^=t?43690:(170+r)%255,n[r]=e}return String.fromCharCode.apply(null,n)}ReadCanvas(e,t,n,r){7==n&&r--;const i=new Uint8Array(this.ab,this.position+this.startPosition,r);try{let r=null;if(4==n||6==n||7==n)r=jr.inflate(i);else{if(5!=n)throw"Not accepted format";r=i}if(r.length%4){const n=e*t*4,i=n-r.length;if(console.warn("Length isn't valid"),i>0){const e=new Uint8Array(n);e.set(r,0),r=e}else r=r.subarray(0,n)}return null==r&&console.warn("Canvas has no image data"),new ImageData(new Uint8ClampedArray(r),e,t)}catch(e){console.warn("Error loading canvas",e)}return null}}class Mr{constructor(e,t,n,r){this.name=e,this.type=t,this.children=n,this.parent=r}resolve(e){if(!e){if("uol"==this.type)return this.parent.resolve(this.value);if("canvas"==this.type&&this.children){const e=this.children.find((e=>"_inlink"==e.name));if(e)return this.HandleInlink(this,e);const t=this.children.find((e=>"_outlink"==e.name));return t?this.HandleOutlink(this,t):Promise.resolve(this)}return Promise.resolve(this)}const t=Array.isArray(e)?e:e.split(/[/\\]/g),n=t.shift();if(".."==n)return this.parent.resolve(t.join("/"));const r=this.children;return r?new Promise((e=>e(this.FindAndResolve(r,t,n)))):null}GetValue(){return Promise.resolve(this.value)}FindAndResolve(e,t,n){var r=e.find((e=>e&&(e.name==n||e.name.endsWith(".img")&&e.name.substr(0,e.name.length-4)==n)));return r&&t.length?r.resolve(t):r}HandleInlink(e,t){if(!t)return Promise.resolve(e);const n=t.value;n||Promise.resolve(e);let r=e;for(;r&&"image"!=r.type;)r=r.parent;return r||Promise.resolve(e),r.resolve(n).then((e=>e?e.resolve():null))}HandleOutlink(e,t){if(!t)return Promise.resolve(e);const n=t.value;if(!n)return Promise.resolve(e);let r=e;for(;r&&null!=r.parent;)r=r.parent;return r.resolve(n).then((e=>e?e.resolve():r.resolve("Data/"+n).then((e=>e?e.resolve():null))))}}class Fr extends Mr{constructor(e,t,n,r,i){super(e,t,r,i),this.value=n}}class Nr extends Mr{constructor(e,t,n){super(e,"sound",null,n),t.ReadByte(),this.length=t.ReadWZInt(),this.duration=t.ReadWZInt(),this.value=t.ab.slice(0,this.length)}Play(e,t){const n=new AudioContext,r=n.createBufferSource(),i=n.createAnalyser();return this.playingPromise=n.decodeAudioData(this.value.slice(0,this.length),(s=>{this.analyser=i,r.connect(n.destination),r.connect(i),r.buffer=s,this.audio=r,t&&(this.audio.onended=t),e&&(this.audio.loop=e),this.audio.start(0),this.isPlaying="suspended"!=r.context.state})),this.playingPromise}Stop(){this.audio&&(this.audio.stop(0),this.isPlaying=!1)}}class Kr extends Mr{constructor(e,t,n){super(e,"property",void 0,t),n&&(this.children=this.LoadChildren(n))}LoadChildren(e){const t=e.ReadWZInt(),n=[];for(let r=0;r<t;++r){const t=e.ReadWZStringBlock(),r=e.ReadByte();let i=null;switch(r){case 0:i=new Fr(t,"property",null,null,this);break;case 16:i=new Fr(t,"sbyte",e.ReadByte(),null,this);break;case 17:i=new Fr(t,"byte",e.ReadUByte(),null,this);break;case 11:case 2:case 18:i=new Fr(t,"ui16",e.ReadUInt16(),null,this);break;case 3:case 19:i=new Fr(t,"i32",e.ReadWZInt(),null,this);break;case 4:i=new Fr(t,"float",e.ReadWZSingle(),null,this);break;case 5:i=new Fr(t,"double",e.ReadDouble(),null,this);break;case 8:i=new Fr(t,"string",e.ReadWZStringBlock(),null,this);break;case 9:const n=e.ReadUInt32(),s=e.position+n;i=this.ExtendedPropertyValue(this,t,e),e.position=s;break;case 20:i=new Fr(t,"i64",e.ReadInt64(),null,this);break;case 21:i=new Fr(t,"ui64",e.ReadUInt64(),null,this);default:throw`Unknown property type: ${r}`}n.push(i)}return n}ExtendedPropertyValue(e,t,n){const r=n.ReadWZStringBlock();switch(r){case"Property":return n.ReadUInt16(),new Kr(t,this,n);case"Canvas":return new Lr(t,n,this);case"Shape2D#Vector2D":return new Fr(t,"vector",{x:n.ReadWZInt(),y:n.ReadWZInt()},null,e);case"Shape2D#Convex2D":const i=n.ReadWZInt(),s=[],a=new Fr(t,"convex",void 0,s,e);for(let e=0;e<i;++e)s.push(this.ExtendedPropertyValue(a,e.toString(),n));return a;case"Sound_DX8":return new Nr(t,n,this);case"UOL":return n.ReadByte(),new Fr(t,"uol",n.ReadWZStringBlock(),null,e);default:throw`Unknown extended property type: ${r}`}}}class Lr extends Kr{constructor(e,t,n){super(e,n),this.type="canvas",t.ReadByte(),t.ReadByte()&&(t.ReadInt16(),this.children=this.LoadChildren(t)),this.width=t.ReadWZInt(),this.height=t.ReadWZInt(),this.format1=t.ReadWZInt(),this.format2=t.ReadByte(),t.ReadInt32(),this.blockLength=t.ReadInt32(),t.ReadByte(),this.header=t.ReadInt16(),t.position-=2,this.reader=t,this.canvasLocation=t.position}GetValue(){const e=this.reader.position;this.reader.position=this.canvasLocation;var t=this.reader.ReadCanvas(this.width,this.height,this.format1+this.format2,this.blockLength);return this.reader.position=e,Promise.resolve(t)}}class $r extends Kr{constructor(e,t,n,r,i){super(e,i),this.type="image";const s=new Br(r);if(115!=s.ReadByte())return null;if("Property"!=s.ReadWZString())throw"Invalid first property";if(0!=s.ReadInt16())throw"Invalid header";this.children=this.LoadChildren(s)}}var Ur=function(e,t,n,r){return new(n||(n=Promise))((function(i,s){function a(e){try{l(r.next(e))}catch(e){s(e)}}function o(e){try{l(r.throw(e))}catch(e){s(e)}}function l(e){var t;e.done?i(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(a,o)}l((r=r.apply(e,t||[])).next())}))};class qr{constructor(e,t){this.endPoint=t,this.network=e,this.imageCache={},this.imageABCache={},this.imagesCache={},this.folderCache={},this.versionPseudoResolvers={},this.zmapCache={},this.smapCache={}}fetchJson(e){const t=`${this.endPoint}/json/${e}`;return this.network.fetchJson(t)}fetchAb(e){const t=`${this.endPoint}/data/${e}`;return this.network.fetchAb(t)}getImages(e,t){const n=`${e}--${t}`,r=this.imagesCache[n];if(r)return r;const i=this.fetchJson(`${e}/${t}/images.json`).then((e=>e));return this.imagesCache[n]=i,i}getImageAB(e,t,n){return Ur(this,void 0,void 0,(function*(){const r=(yield this.getImages(e,t))[n];if(!r)throw new Error(`Couldn't find the image ${n} in ${e}/${t}`);const i=this.imageABCache[r];if(i)return i;const s=this.fetchAb(`${r}.img`);return this.imageABCache[r]=s,s}))}getVersionResolver(e,t){const n=`${e}--${t}`,r=this.versionPseudoResolvers[n];if(r)return r;const i={name:n,type:"PseudoResolver",children:null,value:null,GetValue:()=>{throw new Error("Not supported")},resolve:n=>this.resolve(e,t,n)};return this.versionPseudoResolvers[n]=i,i}getImageWithPossiblePrefixes(e,t,n,r){return Ur(this,void 0,void 0,(function*(){const i=yield n.reduce(((n,i)=>Ur(this,void 0,void 0,(function*(){const s=yield n;if(s)return s;const a=`${i}/${r}`;try{return yield this.getImage(e,t,a)}catch(e){}}))),Promise.resolve(null));if(!i)throw new Error(`Couldn't find the image ${r} in ${e}/${t}, using prefixes: "${n.join(",")}"`);return i}))}getImage(e,t,n){return Ur(this,void 0,void 0,(function*(){const r=`${e}/${t}/${n}`,i=this.imageCache[r];if(i)return i;const s=this.getVersionResolver(e,t),a=yield this.getImageAB(e,t,n),o=new $r(n,e,t,a,s);return this.imageCache[r]=o,o}))}resolve(e,t,n){return Ur(this,void 0,void 0,(function*(){if(n.endsWith(".img"))return this.getImage(e,t,n);const r=n.split(".img/",2);r[0]=r[0]+".img";const[i,s]=r;return(yield this.getImage(e,t,i)).resolve(s)}))}getFolders(e,t){const n=`${e}-${t}`,r=this.folderCache[n];if(r)return r;const i=this.fetchJson(`${e}/${t}/characterFolders.json`).then((e=>e));return this.folderCache[n]=i,i}getZmap(e,t){const n=`${e}-${t}`,r=this.zmapCache[n];if(r)return r;const i=this.fetchJson(`${e}/${t}/zmap.json`).then((e=>e.reverse())).then((e=>e));return this.zmapCache[n]=i,i}getSmap(e,t){const n=`${e}-${t}`,r=this.smapCache[n];return r||(this.smapCache[n]=this.resolve(e,t,"Base/smap.img").then((e=>e.children.reduce(((e,t)=>{var n;return e[t.name]=(null===(n=t.value)||void 0===n?void 0:n.match(/.{1,2}/g))||[],e}),{}))),this.smapCache[n])}}const zr=class{constructor(e){this.Database=new Hn,this.Network=new Tr(this.Database),this.DataFactory=new qr(this.Network,e.Endpoint),this.ItemUtilities=new ir(this.DataFactory),this.CharacterRenderer=new fr(this.ItemUtilities,this.DataFactory),this.MapRenderer=new Cr(this.DataFactory)}}})(),r})()}));
 //# sourceMappingURL=data:application/json;charset=utf-8;base64,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QUtFLFNBQVNycEIsUUFBTyxDQUFDN0ssRUFBT20wQixXQUVsQyxPQURBbjBCLEVBQU1tMEIsRUFBUXJ4QixPQUFxQixRQUFiLEVBQUFxeEIsRUFBUWpzQixhQUFLLGVBQUUyZixNQUFNLGFBQWMsR0FDbEQ3bkIsSUFDTixNQUdNTCxLQUFLNDFDLFVBQVU5eEMsS0M1S2hDLFNDTWUsTUFRYnlJLFlBQVlpcUMsR0FDVngyQyxLQUFLNnpCLFNBQVcsSUFBSUEsR0FDcEI3ekIsS0FBS3d0QyxRQUFVLElBQUlBLEdBQVF4dEMsS0FBSzZ6QixVQUNoQzd6QixLQUFLeTJDLFlBQWMsSUFBSXZCLEdBQVlsMUMsS0FBS3d0QyxRQUFTZ0osRUFBT0UsVUFDeEQxMkMsS0FBSzYzQixjQUFnQixJQUFJQSxHQUFjNzNCLEtBQUt5MkMsYUFDNUN6MkMsS0FBS2lpQyxrQkFBb0IsSUFBSUEsR0FBa0JqaUMsS0FBSzYzQixjQUFlNzNCLEtBQUt5MkMsYUFDeEV6MkMsS0FBSzByQyxZQUFjLElBQUlBLEdBQVkxckMsS0FBS3kyQyIsInNvdXJjZXMiOlsid2VicGFjazovL21hcGxlc3Rvcnkvd2VicGFjay91bml2ZXJzYWxNb2R1bGVEZWZpbml0aW9uIiwid2VicGFjazovL21hcGxlc3RvcnkvLi9ub2RlX21vZHVsZXMvcGFrby9kaXN0L3Bha29faW5mbGF0ZS5qcyIsIndlYnBhY2s6Ly9tYXBsZXN0b3J5L3dlYnBhY2svYm9vdHN0cmFwIiwid2VicGFjazovL21hcGxlc3Rvcnkvd2VicGFjay9ydW50aW1lL2RlZmluZSBwcm9wZXJ0eSBnZXR0ZXJzIiwid2VicGFjazovL21hcGxlc3Rvcnkvd2VicGFjay9ydW50aW1lL2hhc093blByb3BlcnR5IHNob3J0aGFuZCIsIndlYnBhY2s6Ly9tYXBsZXN0b3J5L3dlYnBhY2svcnVudGltZS9tYWtlIG5hbWVzcGFjZSBvYmplY3QiLCJ3ZWJwYWNrOi8vbWFwbGVzdG9yeS8uL25vZGVfbW9kdWxlcy9kZXhpZS9kaXN0L21vZGVybi9kZXhpZS5taW4ubWpzIiwid2VicGFjazovL21hcGxlc3RvcnkvLi9zcmMvRGF0YWJhc2UudHMiLCJ3ZWJwYWNrOi8vbWFwbGVzdG9yeS8uL3NyYy9DaGFyYWN0ZXIvSUl0ZW1FbnRyeS50cyIsIndlYnBhY2s6Ly9tYXBsZXN0b3J5Ly4vc3JjL0NoYXJhY3Rlci9Ob2RlSXRlbVBhaXIudHMiLCJ3ZWJwYWNrOi8vbWFwbGVzdG9yeS8uL3NyYy9DaGFyYWN0ZXIvUmVuZGVyUGllY2VJbmZvLnRzIiwid2VicGFjazovL21hcGxlc3RvcnkvLi9zcmMvQ2hhcmFjdGVyL1JlbmRlclBpZWNlLnRzIiwid2VicGFjazovL21hcGxlc3RvcnkvLi9zcmMvSXRlbS9VdGlsaXRpZXMudHMiLCJ3ZWJwYWNrOi8vbWFwbGVzdG9yeS8uL3NyYy9VdGlsaXRpZXMvUmVuZGVyYWJsZUJvdW5kcy50cyIsIndlYnBhY2s6Ly9tYXBsZXN0b3J5Ly4vc3JjL0NoYXJhY3Rlci9Qb3NpdGlvbkNhbGN1bGF0b3IudHMiLCJ3ZWJwYWNrOi8vbWFwbGVzdG9yeS8uL3NyYy9DaGFyYWN0ZXIvUmVuZGVyUGxhbi50cyIsIndlYnBhY2s6Ly9tYXBsZXN0b3J5Ly4vc3JjL0NoYXJhY3Rlci9QaWVjZXNMb2FkZXIudHMiLCJ3ZWJwYWNrOi8vbWFwbGVzdG9yeS8uL3NyYy9DaGFyYWN0ZXIvTG9ja1Jlc29sdmVyLnRzIiwid2VicGFjazovL21hcGxlc3RvcnkvLi9zcmMvQ2hhcmFjdGVyL0FuY2hvck1hcEJ1aWxkZXIudHMiLCJ3ZWJwYWNrOi8vbWFwbGVzdG9yeS8uL3NyYy9DaGFyYWN0ZXIvQW5pbWF0ZWRSZW5kZXJQbGFuLnRzIiwid2VicGFjazovL21hcGxlc3RvcnkvLi9zcmMvQ2hhcmFjdGVyL1JlbmRlcmVyLnRzIiwid2VicGFjazovL21hcGxlc3RvcnkvLi9zcmMvTWFwL0NvbnN0YW50cy50cyIsIndlYnBhY2s6Ly9tYXBsZXN0b3J5Ly4vc3JjL01hcC9CYWNrZ3JvdW5kLnRzIiwid2VicGFjazovL21hcGxlc3RvcnkvLi9zcmMvTWFwL0Zvb3Rob2xkLnRzIiwid2VicGFjazovL21hcGxlc3RvcnkvLi9zcmMvTWFwL0xhZGRlclJvcGUudHMiLCJ3ZWJwYWNrOi8vbWFwbGVzdG9yeS8uL3NyYy9NYXAvTGlmZS50cyIsIndlYnBhY2s6Ly9tYXBsZXN0b3J5Ly4vc3JjL01hcC9NYXBJbmZvLnRzIiwid2VicGFjazovL21hcGxlc3RvcnkvLi9zcmMvTWFwL01hcExheWVySW5mby50cyIsIndlYnBhY2s6Ly9tYXBsZXN0b3J5Ly4vc3JjL01hcC9NYXBPYmplY3QudHMiLCJ3ZWJwYWNrOi8vbWFwbGVzdG9yeS8uL3NyYy9NYXAvTWFwVGlsZS50cyIsIndlYnBhY2s6Ly9tYXBsZXN0b3J5Ly4vc3JjL01hcC9NYXBMYXllci50cyIsIndlYnBhY2s6Ly9tYXBsZXN0b3J5Ly4vc3JjL01hcC9Qb3J0YWwudHMiLCJ3ZWJwYWNrOi8vbWFwbGVzdG9yeS8uL3NyYy9NYXAvTWFwLnRzIiwid2VicGFjazovL21hcGxlc3RvcnkvLi9zcmMvTWFwL1JlbmRlcmVyLnRzIiwid2VicGFjazovL21hcGxlc3RvcnkvLi9zcmMvUEtHMS9Qcm9ncmVzc01vbml0b3IudHMiLCJ3ZWJwYWNrOi8vbWFwbGVzdG9yeS8uL3NyYy9VdGlsaXRpZXMvUmVxdWVzdEhvbGRlci50cyIsIndlYnBhY2s6Ly9tYXBsZXN0b3J5Ly4vc3JjL05ldHdvcmsudHMiLCJ3ZWJwYWNrOi8vbWFwbGVzdG9yeS8uL3NyYy9QS0cxL0JpbmFyeVJlYWRlci50cyIsIndlYnBhY2s6Ly9tYXBsZXN0b3J5Ly4vc3JjL1BLRzEvUHJvcGVydHkudHMiLCJ3ZWJwYWNrOi8vbWFwbGVzdG9yeS8uL3NyYy9QS0cxL1Byb3BlcnRpZXMvVmFsdWVQcm9wZXJ0eS50cyIsIndlYnBhY2s6Ly9tYXBsZXN0b3J5Ly4vc3JjL1BLRzEvUHJvcGVydGllcy9BdWRpby50cyIsIndlYnBhY2s6Ly9tYXBsZXN0b3J5Ly4vc3JjL1BLRzEvUHJvcGVydGllcy9Qcm9wZXJ0eUxpc3QudHMiLCJ3ZWJwYWNrOi8vbWFwbGVzdG9yeS8uL3NyYy9QS0cxL1Byb3BlcnRpZXMvSW1hZ2UudHMiLCJ3ZWJwYWNrOi8vbWFwbGVzdG9yeS8uL3NyYy9QS0cxL0ZhY3RvcnkudHMiLCJ3ZWJwYWNrOi8vbWFwbGVzdG9yeS8uL3NyYy9pbmRleC50cyIsIndlYnBhY2s6Ly9tYXBsZXN0b3J5Ly4vc3JjL01hcGxlU3RvcnkudHMiXSwic291cmNlc0NvbnRlbnQiOlsiKGZ1bmN0aW9uIHdlYnBhY2tVbml2ZXJzYWxNb2R1bGVEZWZpbml0aW9uKHJvb3QsIGZhY3RvcnkpIHtcblx0aWYodHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgPT09ICdvYmplY3QnKVxuXHRcdG1vZHVsZS5leHBvcnRzID0gZmFjdG9yeSgpO1xuXHRlbHNlIGlmKHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZClcblx0XHRkZWZpbmUoXCJtYXBsZXN0b3J5XCIsIFtdLCBmYWN0b3J5KTtcblx0ZWxzZSBpZih0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcpXG5cdFx0ZXhwb3J0c1tcIm1hcGxlc3RvcnlcIl0gPSBmYWN0b3J5KCk7XG5cdGVsc2Vcblx0XHRyb290W1wibWFwbGVzdG9yeVwiXSA9IGZhY3RvcnkoKTtcbn0pKHNlbGYsIGZ1bmN0aW9uKCkge1xucmV0dXJuICIsIlxuLyohIHBha28gMi4wLjQgaHR0cHM6Ly9naXRodWIuY29tL25vZGVjYS9wYWtvIEBsaWNlbnNlIChNSVQgQU5EIFpsaWIpICovXG4oZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCcgPyBmYWN0b3J5KGV4cG9ydHMpIDpcbiAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnZXhwb3J0cyddLCBmYWN0b3J5KSA6XG4gIChnbG9iYWwgPSB0eXBlb2YgZ2xvYmFsVGhpcyAhPT0gJ3VuZGVmaW5lZCcgPyBnbG9iYWxUaGlzIDogZ2xvYmFsIHx8IHNlbGYsIGZhY3RvcnkoZ2xvYmFsLnBha28gPSB7fSkpO1xufSh0aGlzLCAoZnVuY3Rpb24gKGV4cG9ydHMpIHsgJ3VzZSBzdHJpY3QnO1xuXG4gIC8vIE5vdGU6IGFkbGVyMzIgdGFrZXMgMTIlIGZvciBsZXZlbCAwIGFuZCAyJSBmb3IgbGV2ZWwgNi5cbiAgLy8gSXQgaXNuJ3Qgd29ydGggaXQgdG8gbWFrZSBhZGRpdGlvbmFsIG9wdGltaXphdGlvbnMgYXMgaW4gb3JpZ2luYWwuXG4gIC8vIFNtYWxsIHNpemUgaXMgcHJlZmVyYWJsZS5cblxuICAvLyAoQykgMTk5NS0yMDEzIEplYW4tbG91cCBHYWlsbHkgYW5kIE1hcmsgQWRsZXJcbiAgLy8gKEMpIDIwMTQtMjAxNyBWaXRhbHkgUHV6cmluIGFuZCBBbmRyZXkgVHVwaXRzaW5cbiAgLy9cbiAgLy8gVGhpcyBzb2Z0d2FyZSBpcyBwcm92aWRlZCAnYXMtaXMnLCB3aXRob3V0IGFueSBleHByZXNzIG9yIGltcGxpZWRcbiAgLy8gd2FycmFudHkuIEluIG5vIGV2ZW50IHdpbGwgdGhlIGF1dGhvcnMgYmUgaGVsZCBsaWFibGUgZm9yIGFueSBkYW1hZ2VzXG4gIC8vIGFyaXNpbmcgZnJvbSB0aGUgdXNlIG9mIHRoaXMgc29mdHdhcmUuXG4gIC8vXG4gIC8vIFBlcm1pc3Npb24gaXMgZ3JhbnRlZCB0byBhbnlvbmUgdG8gdXNlIHRoaXMgc29mdHdhcmUgZm9yIGFueSBwdXJwb3NlLFxuICAvLyBpbmNsdWRpbmcgY29tbWVyY2lhbCBhcHBsaWNhdGlvbnMsIGFuZCB0byBhbHRlciBpdCBhbmQgcmVkaXN0cmlidXRlIGl0XG4gIC8vIGZyZWVseSwgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIHJlc3RyaWN0aW9uczpcbiAgLy9cbiAgLy8gMS4gVGhlIG9yaWdpbiBvZiB0aGlzIHNvZnR3YXJlIG11c3Qgbm90IGJlIG1pc3JlcHJlc2VudGVkOyB5b3UgbXVzdCBub3RcbiAgLy8gICBjbGFpbSB0aGF0IHlvdSB3cm90ZSB0aGUgb3JpZ2luYWwgc29mdHdhcmUuIElmIHlvdSB1c2UgdGhpcyBzb2Z0d2FyZVxuICAvLyAgIGluIGEgcHJvZHVjdCwgYW4gYWNrbm93bGVkZ21lbnQgaW4gdGhlIHByb2R1Y3QgZG9jdW1lbnRhdGlvbiB3b3VsZCBiZVxuICAvLyAgIGFwcHJlY2lhdGVkIGJ1dCBpcyBub3QgcmVxdWlyZWQuXG4gIC8vIDIuIEFsdGVyZWQgc291cmNlIHZlcnNpb25zIG11c3QgYmUgcGxhaW5seSBtYXJrZWQgYXMgc3VjaCwgYW5kIG11c3Qgbm90IGJlXG4gIC8vICAgbWlzcmVwcmVzZW50ZWQgYXMgYmVpbmcgdGhlIG9yaWdpbmFsIHNvZnR3YXJlLlxuICAvLyAzLiBUaGlzIG5vdGljZSBtYXkgbm90IGJlIHJlbW92ZWQgb3IgYWx0ZXJlZCBmcm9tIGFueSBzb3VyY2UgZGlzdHJpYnV0aW9uLlxuXG4gIGNvbnN0IGFkbGVyMzIgPSAoYWRsZXIsIGJ1ZiwgbGVuLCBwb3MpID0+IHtcbiAgICBsZXQgczEgPSAoYWRsZXIgJiAweGZmZmYpIHwwLFxuICAgICAgICBzMiA9ICgoYWRsZXIgPj4+IDE2KSAmIDB4ZmZmZikgfDAsXG4gICAgICAgIG4gPSAwO1xuXG4gICAgd2hpbGUgKGxlbiAhPT0gMCkge1xuICAgICAgLy8gU2V0IGxpbWl0IH4gdHdpY2UgbGVzcyB0aGFuIDU1NTIsIHRvIGtlZXBcbiAgICAgIC8vIHMyIGluIDMxLWJpdHMsIGJlY2F1c2Ugd2UgZm9yY2Ugc2lnbmVkIGludHMuXG4gICAgICAvLyBpbiBvdGhlciBjYXNlICU9IHdpbGwgZmFpbC5cbiAgICAgIG4gPSBsZW4gPiAyMDAwID8gMjAwMCA6IGxlbjtcbiAgICAgIGxlbiAtPSBuO1xuXG4gICAgICBkbyB7XG4gICAgICAgIHMxID0gKHMxICsgYnVmW3BvcysrXSkgfDA7XG4gICAgICAgIHMyID0gKHMyICsgczEpIHwwO1xuICAgICAgfSB3aGlsZSAoLS1uKTtcblxuICAgICAgczEgJT0gNjU1MjE7XG4gICAgICBzMiAlPSA2NTUyMTtcbiAgICB9XG5cbiAgICByZXR1cm4gKHMxIHwgKHMyIDw8IDE2KSkgfDA7XG4gIH07XG5cblxuICB2YXIgYWRsZXIzMl8xID0gYWRsZXIzMjtcblxuICAvLyBOb3RlOiB3ZSBjYW4ndCBnZXQgc2lnbmlmaWNhbnQgc3BlZWQgYm9vc3QgaGVyZS5cbiAgLy8gU28gd3JpdGUgY29kZSB0byBtaW5pbWl6ZSBzaXplIC0gbm8gcHJlZ2VuZXJhdGVkIHRhYmxlc1xuICAvLyBhbmQgYXJyYXkgdG9vbHMgZGVwZW5kZW5jaWVzLlxuXG4gIC8vIChDKSAxOTk1LTIwMTMgSmVhbi1sb3VwIEdhaWxseSBhbmQgTWFyayBBZGxlclxuICAvLyAoQykgMjAxNC0yMDE3IFZpdGFseSBQdXpyaW4gYW5kIEFuZHJleSBUdXBpdHNpblxuICAvL1xuICAvLyBUaGlzIHNvZnR3YXJlIGlzIHByb3ZpZGVkICdhcy1pcycsIHdpdGhvdXQgYW55IGV4cHJlc3Mgb3IgaW1wbGllZFxuICAvLyB3YXJyYW50eS4gSW4gbm8gZXZlbnQgd2lsbCB0aGUgYXV0aG9ycyBiZSBoZWxkIGxpYWJsZSBmb3IgYW55IGRhbWFnZXNcbiAgLy8gYXJpc2luZyBmcm9tIHRoZSB1c2Ugb2YgdGhpcyBzb2Z0d2FyZS5cbiAgLy9cbiAgLy8gUGVybWlzc2lvbiBpcyBncmFudGVkIHRvIGFueW9uZSB0byB1c2UgdGhpcyBzb2Z0d2FyZSBmb3IgYW55IHB1cnBvc2UsXG4gIC8vIGluY2x1ZGluZyBjb21tZXJjaWFsIGFwcGxpY2F0aW9ucywgYW5kIHRvIGFsdGVyIGl0IGFuZCByZWRpc3RyaWJ1dGUgaXRcbiAgLy8gZnJlZWx5LCBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmcgcmVzdHJpY3Rpb25zOlxuICAvL1xuICAvLyAxLiBUaGUgb3JpZ2luIG9mIHRoaXMgc29mdHdhcmUgbXVzdCBub3QgYmUgbWlzcmVwcmVzZW50ZWQ7IHlvdSBtdXN0IG5vdFxuICAvLyAgIGNsYWltIHRoYXQgeW91IHdyb3RlIHRoZSBvcmlnaW5hbCBzb2Z0d2FyZS4gSWYgeW91IHVzZSB0aGlzIHNvZnR3YXJlXG4gIC8vICAgaW4gYSBwcm9kdWN0LCBhbiBhY2tub3dsZWRnbWVudCBpbiB0aGUgcHJvZHVjdCBkb2N1bWVudGF0aW9uIHdvdWxkIGJlXG4gIC8vICAgYXBwcmVjaWF0ZWQgYnV0IGlzIG5vdCByZXF1aXJlZC5cbiAgLy8gMi4gQWx0ZXJlZCBzb3VyY2UgdmVyc2lvbnMgbXVzdCBiZSBwbGFpbmx5IG1hcmtlZCBhcyBzdWNoLCBhbmQgbXVzdCBub3QgYmVcbiAgLy8gICBtaXNyZXByZXNlbnRlZCBhcyBiZWluZyB0aGUgb3JpZ2luYWwgc29mdHdhcmUuXG4gIC8vIDMuIFRoaXMgbm90aWNlIG1heSBub3QgYmUgcmVtb3ZlZCBvciBhbHRlcmVkIGZyb20gYW55IHNvdXJjZSBkaXN0cmlidXRpb24uXG5cbiAgLy8gVXNlIG9yZGluYXJ5IGFycmF5LCBzaW5jZSB1bnR5cGVkIG1ha2VzIG5vIGJvb3N0IGhlcmVcbiAgY29uc3QgbWFrZVRhYmxlID0gKCkgPT4ge1xuICAgIGxldCBjLCB0YWJsZSA9IFtdO1xuXG4gICAgZm9yICh2YXIgbiA9IDA7IG4gPCAyNTY7IG4rKykge1xuICAgICAgYyA9IG47XG4gICAgICBmb3IgKHZhciBrID0gMDsgayA8IDg7IGsrKykge1xuICAgICAgICBjID0gKChjICYgMSkgPyAoMHhFREI4ODMyMCBeIChjID4+PiAxKSkgOiAoYyA+Pj4gMSkpO1xuICAgICAgfVxuICAgICAgdGFibGVbbl0gPSBjO1xuICAgIH1cblxuICAgIHJldHVybiB0YWJsZTtcbiAgfTtcblxuICAvLyBDcmVhdGUgdGFibGUgb24gbG9hZC4gSnVzdCAyNTUgc2lnbmVkIGxvbmdzLiBOb3QgYSBwcm9ibGVtLlxuICBjb25zdCBjcmNUYWJsZSA9IG5ldyBVaW50MzJBcnJheShtYWtlVGFibGUoKSk7XG5cblxuICBjb25zdCBjcmMzMiA9IChjcmMsIGJ1ZiwgbGVuLCBwb3MpID0+IHtcbiAgICBjb25zdCB0ID0gY3JjVGFibGU7XG4gICAgY29uc3QgZW5kID0gcG9zICsgbGVuO1xuXG4gICAgY3JjIF49IC0xO1xuXG4gICAgZm9yIChsZXQgaSA9IHBvczsgaSA8IGVuZDsgaSsrKSB7XG4gICAgICBjcmMgPSAoY3JjID4+PiA4KSBeIHRbKGNyYyBeIGJ1ZltpXSkgJiAweEZGXTtcbiAgICB9XG5cbiAgICByZXR1cm4gKGNyYyBeICgtMSkpOyAvLyA+Pj4gMDtcbiAgfTtcblxuXG4gIHZhciBjcmMzMl8xID0gY3JjMzI7XG5cbiAgLy8gKEMpIDE5OTUtMjAxMyBKZWFuLWxvdXAgR2FpbGx5IGFuZCBNYXJrIEFkbGVyXG4gIC8vIChDKSAyMDE0LTIwMTcgVml0YWx5IFB1enJpbiBhbmQgQW5kcmV5IFR1cGl0c2luXG4gIC8vXG4gIC8vIFRoaXMgc29mdHdhcmUgaXMgcHJvdmlkZWQgJ2FzLWlzJywgd2l0aG91dCBhbnkgZXhwcmVzcyBvciBpbXBsaWVkXG4gIC8vIHdhcnJhbnR5LiBJbiBubyBldmVudCB3aWxsIHRoZSBhdXRob3JzIGJlIGhlbGQgbGlhYmxlIGZvciBhbnkgZGFtYWdlc1xuICAvLyBhcmlzaW5nIGZyb20gdGhlIHVzZSBvZiB0aGlzIHNvZnR3YXJlLlxuICAvL1xuICAvLyBQZXJtaXNzaW9uIGlzIGdyYW50ZWQgdG8gYW55b25lIHRvIHVzZSB0aGlzIHNvZnR3YXJlIGZvciBhbnkgcHVycG9zZSxcbiAgLy8gaW5jbHVkaW5nIGNvbW1lcmNpYWwgYXBwbGljYXRpb25zLCBhbmQgdG8gYWx0ZXIgaXQgYW5kIHJlZGlzdHJpYnV0ZSBpdFxuICAvLyBmcmVlbHksIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyByZXN0cmljdGlvbnM6XG4gIC8vXG4gIC8vIDEuIFRoZSBvcmlnaW4gb2YgdGhpcyBzb2Z0d2FyZSBtdXN0IG5vdCBiZSBtaXNyZXByZXNlbnRlZDsgeW91IG11c3Qgbm90XG4gIC8vICAgY2xhaW0gdGhhdCB5b3Ugd3JvdGUgdGhlIG9yaWdpbmFsIHNvZnR3YXJlLiBJZiB5b3UgdXNlIHRoaXMgc29mdHdhcmVcbiAgLy8gICBpbiBhIHByb2R1Y3QsIGFuIGFja25vd2xlZGdtZW50IGluIHRoZSBwcm9kdWN0IGRvY3VtZW50YXRpb24gd291bGQgYmVcbiAgLy8gICBhcHByZWNpYXRlZCBidXQgaXMgbm90IHJlcXVpcmVkLlxuICAvLyAyLiBBbHRlcmVkIHNvdXJjZSB2ZXJzaW9ucyBtdXN0IGJlIHBsYWlubHkgbWFya2VkIGFzIHN1Y2gsIGFuZCBtdXN0IG5vdCBiZVxuICAvLyAgIG1pc3JlcHJlc2VudGVkIGFzIGJlaW5nIHRoZSBvcmlnaW5hbCBzb2Z0d2FyZS5cbiAgLy8gMy4gVGhpcyBub3RpY2UgbWF5IG5vdCBiZSByZW1vdmVkIG9yIGFsdGVyZWQgZnJvbSBhbnkgc291cmNlIGRpc3RyaWJ1dGlvbi5cblxuICAvLyBTZWUgc3RhdGUgZGVmcyBmcm9tIGluZmxhdGUuanNcbiAgY29uc3QgQkFEJDEgPSAzMDsgICAgICAgLyogZ290IGEgZGF0YSBlcnJvciAtLSByZW1haW4gaGVyZSB1bnRpbCByZXNldCAqL1xuICBjb25zdCBUWVBFJDEgPSAxMjsgICAgICAvKiBpOiB3YWl0aW5nIGZvciB0eXBlIGJpdHMsIGluY2x1ZGluZyBsYXN0LWZsYWcgYml0ICovXG5cbiAgLypcbiAgICAgRGVjb2RlIGxpdGVyYWwsIGxlbmd0aCwgYW5kIGRpc3RhbmNlIGNvZGVzIGFuZCB3cml0ZSBvdXQgdGhlIHJlc3VsdGluZ1xuICAgICBsaXRlcmFsIGFuZCBtYXRjaCBieXRlcyB1bnRpbCBlaXRoZXIgbm90IGVub3VnaCBpbnB1dCBvciBvdXRwdXQgaXNcbiAgICAgYXZhaWxhYmxlLCBhbiBlbmQtb2YtYmxvY2sgaXMgZW5jb3VudGVyZWQsIG9yIGEgZGF0YSBlcnJvciBpcyBlbmNvdW50ZXJlZC5cbiAgICAgV2hlbiBsYXJnZSBlbm91Z2ggaW5wdXQgYW5kIG91dHB1dCBidWZmZXJzIGFyZSBzdXBwbGllZCB0byBpbmZsYXRlKCksIGZvclxuICAgICBleGFtcGxlLCBhIDE2SyBpbnB1dCBidWZmZXIgYW5kIGEgNjRLIG91dHB1dCBidWZmZXIsIG1vcmUgdGhhbiA5NSUgb2YgdGhlXG4gICAgIGluZmxhdGUgZXhlY3V0aW9uIHRpbWUgaXMgc3BlbnQgaW4gdGhpcyByb3V0aW5lLlxuXG4gICAgIEVudHJ5IGFzc3VtcHRpb25zOlxuXG4gICAgICAgICAgc3RhdGUubW9kZSA9PT0gTEVOXG4gICAgICAgICAgc3RybS5hdmFpbF9pbiA+PSA2XG4gICAgICAgICAgc3RybS5hdmFpbF9vdXQgPj0gMjU4XG4gICAgICAgICAgc3RhcnQgPj0gc3RybS5hdmFpbF9vdXRcbiAgICAgICAgICBzdGF0ZS5iaXRzIDwgOFxuXG4gICAgIE9uIHJldHVybiwgc3RhdGUubW9kZSBpcyBvbmUgb2Y6XG5cbiAgICAgICAgICBMRU4gLS0gcmFuIG91dCBvZiBlbm91Z2ggb3V0cHV0IHNwYWNlIG9yIGVub3VnaCBhdmFpbGFibGUgaW5wdXRcbiAgICAgICAgICBUWVBFIC0tIHJlYWNoZWQgZW5kIG9mIGJsb2NrIGNvZGUsIGluZmxhdGUoKSB0byBpbnRlcnByZXQgbmV4dCBibG9ja1xuICAgICAgICAgIEJBRCAtLSBlcnJvciBpbiBibG9jayBkYXRhXG5cbiAgICAgTm90ZXM6XG5cbiAgICAgIC0gVGhlIG1heGltdW0gaW5wdXQgYml0cyB1c2VkIGJ5IGEgbGVuZ3RoL2Rpc3RhbmNlIHBhaXIgaXMgMTUgYml0cyBmb3IgdGhlXG4gICAgICAgIGxlbmd0aCBjb2RlLCA1IGJpdHMgZm9yIHRoZSBsZW5ndGggZXh0cmEsIDE1IGJpdHMgZm9yIHRoZSBkaXN0YW5jZSBjb2RlLFxuICAgICAgICBhbmQgMTMgYml0cyBmb3IgdGhlIGRpc3RhbmNlIGV4dHJhLiAgVGhpcyB0b3RhbHMgNDggYml0cywgb3Igc2l4IGJ5dGVzLlxuICAgICAgICBUaGVyZWZvcmUgaWYgc3RybS5hdmFpbF9pbiA+PSA2LCB0aGVuIHRoZXJlIGlzIGVub3VnaCBpbnB1dCB0byBhdm9pZFxuICAgICAgICBjaGVja2luZyBmb3IgYXZhaWxhYmxlIGlucHV0IHdoaWxlIGRlY29kaW5nLlxuXG4gICAgICAtIFRoZSBtYXhpbXVtIGJ5dGVzIHRoYXQgYSBzaW5nbGUgbGVuZ3RoL2Rpc3RhbmNlIHBhaXIgY2FuIG91dHB1dCBpcyAyNThcbiAgICAgICAgYnl0ZXMsIHdoaWNoIGlzIHRoZSBtYXhpbXVtIGxlbmd0aCB0aGF0IGNhbiBiZSBjb2RlZC4gIGluZmxhdGVfZmFzdCgpXG4gICAgICAgIHJlcXVpcmVzIHN0cm0uYXZhaWxfb3V0ID49IDI1OCBmb3IgZWFjaCBsb29wIHRvIGF2b2lkIGNoZWNraW5nIGZvclxuICAgICAgICBvdXRwdXQgc3BhY2UuXG4gICAqL1xuICB2YXIgaW5mZmFzdCA9IGZ1bmN0aW9uIGluZmxhdGVfZmFzdChzdHJtLCBzdGFydCkge1xuICAgIGxldCBfaW47ICAgICAgICAgICAgICAgICAgICAvKiBsb2NhbCBzdHJtLmlucHV0ICovXG4gICAgbGV0IGxhc3Q7ICAgICAgICAgICAgICAgICAgIC8qIGhhdmUgZW5vdWdoIGlucHV0IHdoaWxlIGluIDwgbGFzdCAqL1xuICAgIGxldCBfb3V0OyAgICAgICAgICAgICAgICAgICAvKiBsb2NhbCBzdHJtLm91dHB1dCAqL1xuICAgIGxldCBiZWc7ICAgICAgICAgICAgICAgICAgICAvKiBpbmZsYXRlKCkncyBpbml0aWFsIHN0cm0ub3V0cHV0ICovXG4gICAgbGV0IGVuZDsgICAgICAgICAgICAgICAgICAgIC8qIHdoaWxlIG91dCA8IGVuZCwgZW5vdWdoIHNwYWNlIGF2YWlsYWJsZSAqL1xuICAvLyNpZmRlZiBJTkZMQVRFX1NUUklDVFxuICAgIGxldCBkbWF4OyAgICAgICAgICAgICAgICAgICAvKiBtYXhpbXVtIGRpc3RhbmNlIGZyb20gemxpYiBoZWFkZXIgKi9cbiAgLy8jZW5kaWZcbiAgICBsZXQgd3NpemU7ICAgICAgICAgICAgICAgICAgLyogd2luZG93IHNpemUgb3IgemVybyBpZiBub3QgdXNpbmcgd2luZG93ICovXG4gICAgbGV0IHdoYXZlOyAgICAgICAgICAgICAgICAgIC8qIHZhbGlkIGJ5dGVzIGluIHRoZSB3aW5kb3cgKi9cbiAgICBsZXQgd25leHQ7ICAgICAgICAgICAgICAgICAgLyogd2luZG93IHdyaXRlIGluZGV4ICovXG4gICAgLy8gVXNlIGBzX3dpbmRvd2AgaW5zdGVhZCBgd2luZG93YCwgYXZvaWQgY29uZmxpY3Qgd2l0aCBpbnN0cnVtZW50YXRpb24gdG9vbHNcbiAgICBsZXQgc193aW5kb3c7ICAgICAgICAgICAgICAgLyogYWxsb2NhdGVkIHNsaWRpbmcgd2luZG93LCBpZiB3c2l6ZSAhPSAwICovXG4gICAgbGV0IGhvbGQ7ICAgICAgICAgICAgICAgICAgIC8qIGxvY2FsIHN0cm0uaG9sZCAqL1xuICAgIGxldCBiaXRzOyAgICAgICAgICAgICAgICAgICAvKiBsb2NhbCBzdHJtLmJpdHMgKi9cbiAgICBsZXQgbGNvZGU7ICAgICAgICAgICAgICAgICAgLyogbG9jYWwgc3RybS5sZW5jb2RlICovXG4gICAgbGV0IGRjb2RlOyAgICAgICAgICAgICAgICAgIC8qIGxvY2FsIHN0cm0uZGlzdGNvZGUgKi9cbiAgICBsZXQgbG1hc2s7ICAgICAgICAgICAgICAgICAgLyogbWFzayBmb3IgZmlyc3QgbGV2ZWwgb2YgbGVuZ3RoIGNvZGVzICovXG4gICAgbGV0IGRtYXNrOyAgICAgICAgICAgICAgICAgIC8qIG1hc2sgZm9yIGZpcnN0IGxldmVsIG9mIGRpc3RhbmNlIGNvZGVzICovXG4gICAgbGV0IGhlcmU7ICAgICAgICAgICAgICAgICAgIC8qIHJldHJpZXZlZCB0YWJsZSBlbnRyeSAqL1xuICAgIGxldCBvcDsgICAgICAgICAgICAgICAgICAgICAvKiBjb2RlIGJpdHMsIG9wZXJhdGlvbiwgZXh0cmEgYml0cywgb3IgKi9cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLyogIHdpbmRvdyBwb3NpdGlvbiwgd2luZG93IGJ5dGVzIHRvIGNvcHkgKi9cbiAgICBsZXQgbGVuOyAgICAgICAgICAgICAgICAgICAgLyogbWF0Y2ggbGVuZ3RoLCB1bnVzZWQgYnl0ZXMgKi9cbiAgICBsZXQgZGlzdDsgICAgICAgICAgICAgICAgICAgLyogbWF0Y2ggZGlzdGFuY2UgKi9cbiAgICBsZXQgZnJvbTsgICAgICAgICAgICAgICAgICAgLyogd2hlcmUgdG8gY29weSBtYXRjaCBmcm9tICovXG4gICAgbGV0IGZyb21fc291cmNlO1xuXG5cbiAgICBsZXQgaW5wdXQsIG91dHB1dDsgLy8gSlMgc3BlY2lmaWMsIGJlY2F1c2Ugd2UgaGF2ZSBubyBwb2ludGVyc1xuXG4gICAgLyogY29weSBzdGF0ZSB0byBsb2NhbCB2YXJpYWJsZXMgKi9cbiAgICBjb25zdCBzdGF0ZSA9IHN0cm0uc3RhdGU7XG4gICAgLy9oZXJlID0gc3RhdGUuaGVyZTtcbiAgICBfaW4gPSBzdHJtLm5leHRfaW47XG4gICAgaW5wdXQgPSBzdHJtLmlucHV0O1xuICAgIGxhc3QgPSBfaW4gKyAoc3RybS5hdmFpbF9pbiAtIDUpO1xuICAgIF9vdXQgPSBzdHJtLm5leHRfb3V0O1xuICAgIG91dHB1dCA9IHN0cm0ub3V0cHV0O1xuICAgIGJlZyA9IF9vdXQgLSAoc3RhcnQgLSBzdHJtLmF2YWlsX291dCk7XG4gICAgZW5kID0gX291dCArIChzdHJtLmF2YWlsX291dCAtIDI1Nyk7XG4gIC8vI2lmZGVmIElORkxBVEVfU1RSSUNUXG4gICAgZG1heCA9IHN0YXRlLmRtYXg7XG4gIC8vI2VuZGlmXG4gICAgd3NpemUgPSBzdGF0ZS53c2l6ZTtcbiAgICB3aGF2ZSA9IHN0YXRlLndoYXZlO1xuICAgIHduZXh0ID0gc3RhdGUud25leHQ7XG4gICAgc193aW5kb3cgPSBzdGF0ZS53aW5kb3c7XG4gICAgaG9sZCA9IHN0YXRlLmhvbGQ7XG4gICAgYml0cyA9IHN0YXRlLmJpdHM7XG4gICAgbGNvZGUgPSBzdGF0ZS5sZW5jb2RlO1xuICAgIGRjb2RlID0gc3RhdGUuZGlzdGNvZGU7XG4gICAgbG1hc2sgPSAoMSA8PCBzdGF0ZS5sZW5iaXRzKSAtIDE7XG4gICAgZG1hc2sgPSAoMSA8PCBzdGF0ZS5kaXN0Yml0cykgLSAxO1xuXG5cbiAgICAvKiBkZWNvZGUgbGl0ZXJhbHMgYW5kIGxlbmd0aC9kaXN0YW5jZXMgdW50aWwgZW5kLW9mLWJsb2NrIG9yIG5vdCBlbm91Z2hcbiAgICAgICBpbnB1dCBkYXRhIG9yIG91dHB1dCBzcGFjZSAqL1xuXG4gICAgdG9wOlxuICAgIGRvIHtcbiAgICAgIGlmIChiaXRzIDwgMTUpIHtcbiAgICAgICAgaG9sZCArPSBpbnB1dFtfaW4rK10gPDwgYml0cztcbiAgICAgICAgYml0cyArPSA4O1xuICAgICAgICBob2xkICs9IGlucHV0W19pbisrXSA8PCBiaXRzO1xuICAgICAgICBiaXRzICs9IDg7XG4gICAgICB9XG5cbiAgICAgIGhlcmUgPSBsY29kZVtob2xkICYgbG1hc2tdO1xuXG4gICAgICBkb2xlbjpcbiAgICAgIGZvciAoOzspIHsgLy8gR290byBlbXVsYXRpb25cbiAgICAgICAgb3AgPSBoZXJlID4+PiAyNC8qaGVyZS5iaXRzKi87XG4gICAgICAgIGhvbGQgPj4+PSBvcDtcbiAgICAgICAgYml0cyAtPSBvcDtcbiAgICAgICAgb3AgPSAoaGVyZSA+Pj4gMTYpICYgMHhmZi8qaGVyZS5vcCovO1xuICAgICAgICBpZiAob3AgPT09IDApIHsgICAgICAgICAgICAgICAgICAgICAgICAgIC8qIGxpdGVyYWwgKi9cbiAgICAgICAgICAvL1RyYWNldnYoKHN0ZGVyciwgaGVyZS52YWwgPj0gMHgyMCAmJiBoZXJlLnZhbCA8IDB4N2YgP1xuICAgICAgICAgIC8vICAgICAgICBcImluZmxhdGU6ICAgICAgICAgbGl0ZXJhbCAnJWMnXFxuXCIgOlxuICAgICAgICAgIC8vICAgICAgICBcImluZmxhdGU6ICAgICAgICAgbGl0ZXJhbCAweCUwMnhcXG5cIiwgaGVyZS52YWwpKTtcbiAgICAgICAgICBvdXRwdXRbX291dCsrXSA9IGhlcmUgJiAweGZmZmYvKmhlcmUudmFsKi87XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAob3AgJiAxNikgeyAgICAgICAgICAgICAgICAgICAgIC8qIGxlbmd0aCBiYXNlICovXG4gICAgICAgICAgbGVuID0gaGVyZSAmIDB4ZmZmZi8qaGVyZS52YWwqLztcbiAgICAgICAgICBvcCAmPSAxNTsgICAgICAgICAgICAgICAgICAgICAgICAgICAvKiBudW1iZXIgb2YgZXh0cmEgYml0cyAqL1xuICAgICAgICAgIGlmIChvcCkge1xuICAgICAgICAgICAgaWYgKGJpdHMgPCBvcCkge1xuICAgICAgICAgICAgICBob2xkICs9IGlucHV0W19pbisrXSA8PCBiaXRzO1xuICAgICAgICAgICAgICBiaXRzICs9IDg7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBsZW4gKz0gaG9sZCAmICgoMSA8PCBvcCkgLSAxKTtcbiAgICAgICAgICAgIGhvbGQgPj4+PSBvcDtcbiAgICAgICAgICAgIGJpdHMgLT0gb3A7XG4gICAgICAgICAgfVxuICAgICAgICAgIC8vVHJhY2V2digoc3RkZXJyLCBcImluZmxhdGU6ICAgICAgICAgbGVuZ3RoICV1XFxuXCIsIGxlbikpO1xuICAgICAgICAgIGlmIChiaXRzIDwgMTUpIHtcbiAgICAgICAgICAgIGhvbGQgKz0gaW5wdXRbX2luKytdIDw8IGJpdHM7XG4gICAgICAgICAgICBiaXRzICs9IDg7XG4gICAgICAgICAgICBob2xkICs9IGlucHV0W19pbisrXSA8PCBiaXRzO1xuICAgICAgICAgICAgYml0cyArPSA4O1xuICAgICAgICAgIH1cbiAgICAgICAgICBoZXJlID0gZGNvZGVbaG9sZCAmIGRtYXNrXTtcblxuICAgICAgICAgIGRvZGlzdDpcbiAgICAgICAgICBmb3IgKDs7KSB7IC8vIGdvdG8gZW11bGF0aW9uXG4gICAgICAgICAgICBvcCA9IGhlcmUgPj4+IDI0LypoZXJlLmJpdHMqLztcbiAgICAgICAgICAgIGhvbGQgPj4+PSBvcDtcbiAgICAgICAgICAgIGJpdHMgLT0gb3A7XG4gICAgICAgICAgICBvcCA9IChoZXJlID4+PiAxNikgJiAweGZmLypoZXJlLm9wKi87XG5cbiAgICAgICAgICAgIGlmIChvcCAmIDE2KSB7ICAgICAgICAgICAgICAgICAgICAgIC8qIGRpc3RhbmNlIGJhc2UgKi9cbiAgICAgICAgICAgICAgZGlzdCA9IGhlcmUgJiAweGZmZmYvKmhlcmUudmFsKi87XG4gICAgICAgICAgICAgIG9wICY9IDE1OyAgICAgICAgICAgICAgICAgICAgICAgLyogbnVtYmVyIG9mIGV4dHJhIGJpdHMgKi9cbiAgICAgICAgICAgICAgaWYgKGJpdHMgPCBvcCkge1xuICAgICAgICAgICAgICAgIGhvbGQgKz0gaW5wdXRbX2luKytdIDw8IGJpdHM7XG4gICAgICAgICAgICAgICAgYml0cyArPSA4O1xuICAgICAgICAgICAgICAgIGlmIChiaXRzIDwgb3ApIHtcbiAgICAgICAgICAgICAgICAgIGhvbGQgKz0gaW5wdXRbX2luKytdIDw8IGJpdHM7XG4gICAgICAgICAgICAgICAgICBiaXRzICs9IDg7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGRpc3QgKz0gaG9sZCAmICgoMSA8PCBvcCkgLSAxKTtcbiAgLy8jaWZkZWYgSU5GTEFURV9TVFJJQ1RcbiAgICAgICAgICAgICAgaWYgKGRpc3QgPiBkbWF4KSB7XG4gICAgICAgICAgICAgICAgc3RybS5tc2cgPSAnaW52YWxpZCBkaXN0YW5jZSB0b28gZmFyIGJhY2snO1xuICAgICAgICAgICAgICAgIHN0YXRlLm1vZGUgPSBCQUQkMTtcbiAgICAgICAgICAgICAgICBicmVhayB0b3A7XG4gICAgICAgICAgICAgIH1cbiAgLy8jZW5kaWZcbiAgICAgICAgICAgICAgaG9sZCA+Pj49IG9wO1xuICAgICAgICAgICAgICBiaXRzIC09IG9wO1xuICAgICAgICAgICAgICAvL1RyYWNldnYoKHN0ZGVyciwgXCJpbmZsYXRlOiAgICAgICAgIGRpc3RhbmNlICV1XFxuXCIsIGRpc3QpKTtcbiAgICAgICAgICAgICAgb3AgPSBfb3V0IC0gYmVnOyAgICAgICAgICAgICAgICAvKiBtYXggZGlzdGFuY2UgaW4gb3V0cHV0ICovXG4gICAgICAgICAgICAgIGlmIChkaXN0ID4gb3ApIHsgICAgICAgICAgICAgICAgLyogc2VlIGlmIGNvcHkgZnJvbSB3aW5kb3cgKi9cbiAgICAgICAgICAgICAgICBvcCA9IGRpc3QgLSBvcDsgICAgICAgICAgICAgICAvKiBkaXN0YW5jZSBiYWNrIGluIHdpbmRvdyAqL1xuICAgICAgICAgICAgICAgIGlmIChvcCA+IHdoYXZlKSB7XG4gICAgICAgICAgICAgICAgICBpZiAoc3RhdGUuc2FuZSkge1xuICAgICAgICAgICAgICAgICAgICBzdHJtLm1zZyA9ICdpbnZhbGlkIGRpc3RhbmNlIHRvbyBmYXIgYmFjayc7XG4gICAgICAgICAgICAgICAgICAgIHN0YXRlLm1vZGUgPSBCQUQkMTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWsgdG9wO1xuICAgICAgICAgICAgICAgICAgfVxuXG4gIC8vICghKSBUaGlzIGJsb2NrIGlzIGRpc2FibGVkIGluIHpsaWIgZGVmYXVsdHMsXG4gIC8vIGRvbid0IGVuYWJsZSBpdCBmb3IgYmluYXJ5IGNvbXBhdGliaWxpdHlcbiAgLy8jaWZkZWYgSU5GTEFURV9BTExPV19JTlZBTElEX0RJU1RBTkNFX1RPT0ZBUl9BUlJSXG4gIC8vICAgICAgICAgICAgICAgIGlmIChsZW4gPD0gb3AgLSB3aGF2ZSkge1xuICAvLyAgICAgICAgICAgICAgICAgIGRvIHtcbiAgLy8gICAgICAgICAgICAgICAgICAgIG91dHB1dFtfb3V0KytdID0gMDtcbiAgLy8gICAgICAgICAgICAgICAgICB9IHdoaWxlICgtLWxlbik7XG4gIC8vICAgICAgICAgICAgICAgICAgY29udGludWUgdG9wO1xuICAvLyAgICAgICAgICAgICAgICB9XG4gIC8vICAgICAgICAgICAgICAgIGxlbiAtPSBvcCAtIHdoYXZlO1xuICAvLyAgICAgICAgICAgICAgICBkbyB7XG4gIC8vICAgICAgICAgICAgICAgICAgb3V0cHV0W19vdXQrK10gPSAwO1xuICAvLyAgICAgICAgICAgICAgICB9IHdoaWxlICgtLW9wID4gd2hhdmUpO1xuICAvLyAgICAgICAgICAgICAgICBpZiAob3AgPT09IDApIHtcbiAgLy8gICAgICAgICAgICAgICAgICBmcm9tID0gX291dCAtIGRpc3Q7XG4gIC8vICAgICAgICAgICAgICAgICAgZG8ge1xuICAvLyAgICAgICAgICAgICAgICAgICAgb3V0cHV0W19vdXQrK10gPSBvdXRwdXRbZnJvbSsrXTtcbiAgLy8gICAgICAgICAgICAgICAgICB9IHdoaWxlICgtLWxlbik7XG4gIC8vICAgICAgICAgICAgICAgICAgY29udGludWUgdG9wO1xuICAvLyAgICAgICAgICAgICAgICB9XG4gIC8vI2VuZGlmXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGZyb20gPSAwOyAvLyB3aW5kb3cgaW5kZXhcbiAgICAgICAgICAgICAgICBmcm9tX3NvdXJjZSA9IHNfd2luZG93O1xuICAgICAgICAgICAgICAgIGlmICh3bmV4dCA9PT0gMCkgeyAgICAgICAgICAgLyogdmVyeSBjb21tb24gY2FzZSAqL1xuICAgICAgICAgICAgICAgICAgZnJvbSArPSB3c2l6ZSAtIG9wO1xuICAgICAgICAgICAgICAgICAgaWYgKG9wIDwgbGVuKSB7ICAgICAgICAgLyogc29tZSBmcm9tIHdpbmRvdyAqL1xuICAgICAgICAgICAgICAgICAgICBsZW4gLT0gb3A7XG4gICAgICAgICAgICAgICAgICAgIGRvIHtcbiAgICAgICAgICAgICAgICAgICAgICBvdXRwdXRbX291dCsrXSA9IHNfd2luZG93W2Zyb20rK107XG4gICAgICAgICAgICAgICAgICAgIH0gd2hpbGUgKC0tb3ApO1xuICAgICAgICAgICAgICAgICAgICBmcm9tID0gX291dCAtIGRpc3Q7ICAvKiByZXN0IGZyb20gb3V0cHV0ICovXG4gICAgICAgICAgICAgICAgICAgIGZyb21fc291cmNlID0gb3V0cHV0O1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIGlmICh3bmV4dCA8IG9wKSB7ICAgICAgLyogd3JhcCBhcm91bmQgd2luZG93ICovXG4gICAgICAgICAgICAgICAgICBmcm9tICs9IHdzaXplICsgd25leHQgLSBvcDtcbiAgICAgICAgICAgICAgICAgIG9wIC09IHduZXh0O1xuICAgICAgICAgICAgICAgICAgaWYgKG9wIDwgbGVuKSB7ICAgICAgICAgLyogc29tZSBmcm9tIGVuZCBvZiB3aW5kb3cgKi9cbiAgICAgICAgICAgICAgICAgICAgbGVuIC09IG9wO1xuICAgICAgICAgICAgICAgICAgICBkbyB7XG4gICAgICAgICAgICAgICAgICAgICAgb3V0cHV0W19vdXQrK10gPSBzX3dpbmRvd1tmcm9tKytdO1xuICAgICAgICAgICAgICAgICAgICB9IHdoaWxlICgtLW9wKTtcbiAgICAgICAgICAgICAgICAgICAgZnJvbSA9IDA7XG4gICAgICAgICAgICAgICAgICAgIGlmICh3bmV4dCA8IGxlbikgeyAgLyogc29tZSBmcm9tIHN0YXJ0IG9mIHdpbmRvdyAqL1xuICAgICAgICAgICAgICAgICAgICAgIG9wID0gd25leHQ7XG4gICAgICAgICAgICAgICAgICAgICAgbGVuIC09IG9wO1xuICAgICAgICAgICAgICAgICAgICAgIGRvIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG91dHB1dFtfb3V0KytdID0gc193aW5kb3dbZnJvbSsrXTtcbiAgICAgICAgICAgICAgICAgICAgICB9IHdoaWxlICgtLW9wKTtcbiAgICAgICAgICAgICAgICAgICAgICBmcm9tID0gX291dCAtIGRpc3Q7ICAgICAgLyogcmVzdCBmcm9tIG91dHB1dCAqL1xuICAgICAgICAgICAgICAgICAgICAgIGZyb21fc291cmNlID0gb3V0cHV0O1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2UgeyAgICAgICAgICAgICAgICAgICAgICAvKiBjb250aWd1b3VzIGluIHdpbmRvdyAqL1xuICAgICAgICAgICAgICAgICAgZnJvbSArPSB3bmV4dCAtIG9wO1xuICAgICAgICAgICAgICAgICAgaWYgKG9wIDwgbGVuKSB7ICAgICAgICAgLyogc29tZSBmcm9tIHdpbmRvdyAqL1xuICAgICAgICAgICAgICAgICAgICBsZW4gLT0gb3A7XG4gICAgICAgICAgICAgICAgICAgIGRvIHtcbiAgICAgICAgICAgICAgICAgICAgICBvdXRwdXRbX291dCsrXSA9IHNfd2luZG93W2Zyb20rK107XG4gICAgICAgICAgICAgICAgICAgIH0gd2hpbGUgKC0tb3ApO1xuICAgICAgICAgICAgICAgICAgICBmcm9tID0gX291dCAtIGRpc3Q7ICAvKiByZXN0IGZyb20gb3V0cHV0ICovXG4gICAgICAgICAgICAgICAgICAgIGZyb21fc291cmNlID0gb3V0cHV0O1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB3aGlsZSAobGVuID4gMikge1xuICAgICAgICAgICAgICAgICAgb3V0cHV0W19vdXQrK10gPSBmcm9tX3NvdXJjZVtmcm9tKytdO1xuICAgICAgICAgICAgICAgICAgb3V0cHV0W19vdXQrK10gPSBmcm9tX3NvdXJjZVtmcm9tKytdO1xuICAgICAgICAgICAgICAgICAgb3V0cHV0W19vdXQrK10gPSBmcm9tX3NvdXJjZVtmcm9tKytdO1xuICAgICAgICAgICAgICAgICAgbGVuIC09IDM7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChsZW4pIHtcbiAgICAgICAgICAgICAgICAgIG91dHB1dFtfb3V0KytdID0gZnJvbV9zb3VyY2VbZnJvbSsrXTtcbiAgICAgICAgICAgICAgICAgIGlmIChsZW4gPiAxKSB7XG4gICAgICAgICAgICAgICAgICAgIG91dHB1dFtfb3V0KytdID0gZnJvbV9zb3VyY2VbZnJvbSsrXTtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgZnJvbSA9IF9vdXQgLSBkaXN0OyAgICAgICAgICAvKiBjb3B5IGRpcmVjdCBmcm9tIG91dHB1dCAqL1xuICAgICAgICAgICAgICAgIGRvIHsgICAgICAgICAgICAgICAgICAgICAgICAvKiBtaW5pbXVtIGxlbmd0aCBpcyB0aHJlZSAqL1xuICAgICAgICAgICAgICAgICAgb3V0cHV0W19vdXQrK10gPSBvdXRwdXRbZnJvbSsrXTtcbiAgICAgICAgICAgICAgICAgIG91dHB1dFtfb3V0KytdID0gb3V0cHV0W2Zyb20rK107XG4gICAgICAgICAgICAgICAgICBvdXRwdXRbX291dCsrXSA9IG91dHB1dFtmcm9tKytdO1xuICAgICAgICAgICAgICAgICAgbGVuIC09IDM7XG4gICAgICAgICAgICAgICAgfSB3aGlsZSAobGVuID4gMik7XG4gICAgICAgICAgICAgICAgaWYgKGxlbikge1xuICAgICAgICAgICAgICAgICAgb3V0cHV0W19vdXQrK10gPSBvdXRwdXRbZnJvbSsrXTtcbiAgICAgICAgICAgICAgICAgIGlmIChsZW4gPiAxKSB7XG4gICAgICAgICAgICAgICAgICAgIG91dHB1dFtfb3V0KytdID0gb3V0cHV0W2Zyb20rK107XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmICgob3AgJiA2NCkgPT09IDApIHsgICAgICAgICAgLyogMm5kIGxldmVsIGRpc3RhbmNlIGNvZGUgKi9cbiAgICAgICAgICAgICAgaGVyZSA9IGRjb2RlWyhoZXJlICYgMHhmZmZmKS8qaGVyZS52YWwqLyArIChob2xkICYgKCgxIDw8IG9wKSAtIDEpKV07XG4gICAgICAgICAgICAgIGNvbnRpbnVlIGRvZGlzdDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICBzdHJtLm1zZyA9ICdpbnZhbGlkIGRpc3RhbmNlIGNvZGUnO1xuICAgICAgICAgICAgICBzdGF0ZS5tb2RlID0gQkFEJDE7XG4gICAgICAgICAgICAgIGJyZWFrIHRvcDtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgYnJlYWs7IC8vIG5lZWQgdG8gZW11bGF0ZSBnb3RvIHZpYSBcImNvbnRpbnVlXCJcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoKG9wICYgNjQpID09PSAwKSB7ICAgICAgICAgICAgICAvKiAybmQgbGV2ZWwgbGVuZ3RoIGNvZGUgKi9cbiAgICAgICAgICBoZXJlID0gbGNvZGVbKGhlcmUgJiAweGZmZmYpLypoZXJlLnZhbCovICsgKGhvbGQgJiAoKDEgPDwgb3ApIC0gMSkpXTtcbiAgICAgICAgICBjb250aW51ZSBkb2xlbjtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChvcCAmIDMyKSB7ICAgICAgICAgICAgICAgICAgICAgLyogZW5kLW9mLWJsb2NrICovXG4gICAgICAgICAgLy9UcmFjZXZ2KChzdGRlcnIsIFwiaW5mbGF0ZTogICAgICAgICBlbmQgb2YgYmxvY2tcXG5cIikpO1xuICAgICAgICAgIHN0YXRlLm1vZGUgPSBUWVBFJDE7XG4gICAgICAgICAgYnJlYWsgdG9wO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgIHN0cm0ubXNnID0gJ2ludmFsaWQgbGl0ZXJhbC9sZW5ndGggY29kZSc7XG4gICAgICAgICAgc3RhdGUubW9kZSA9IEJBRCQxO1xuICAgICAgICAgIGJyZWFrIHRvcDtcbiAgICAgICAgfVxuXG4gICAgICAgIGJyZWFrOyAvLyBuZWVkIHRvIGVtdWxhdGUgZ290byB2aWEgXCJjb250aW51ZVwiXG4gICAgICB9XG4gICAgfSB3aGlsZSAoX2luIDwgbGFzdCAmJiBfb3V0IDwgZW5kKTtcblxuICAgIC8qIHJldHVybiB1bnVzZWQgYnl0ZXMgKG9uIGVudHJ5LCBiaXRzIDwgOCwgc28gaW4gd29uJ3QgZ28gdG9vIGZhciBiYWNrKSAqL1xuICAgIGxlbiA9IGJpdHMgPj4gMztcbiAgICBfaW4gLT0gbGVuO1xuICAgIGJpdHMgLT0gbGVuIDw8IDM7XG4gICAgaG9sZCAmPSAoMSA8PCBiaXRzKSAtIDE7XG5cbiAgICAvKiB1cGRhdGUgc3RhdGUgYW5kIHJldHVybiAqL1xuICAgIHN0cm0ubmV4dF9pbiA9IF9pbjtcbiAgICBzdHJtLm5leHRfb3V0ID0gX291dDtcbiAgICBzdHJtLmF2YWlsX2luID0gKF9pbiA8IGxhc3QgPyA1ICsgKGxhc3QgLSBfaW4pIDogNSAtIChfaW4gLSBsYXN0KSk7XG4gICAgc3RybS5hdmFpbF9vdXQgPSAoX291dCA8IGVuZCA/IDI1NyArIChlbmQgLSBfb3V0KSA6IDI1NyAtIChfb3V0IC0gZW5kKSk7XG4gICAgc3RhdGUuaG9sZCA9IGhvbGQ7XG4gICAgc3RhdGUuYml0cyA9IGJpdHM7XG4gICAgcmV0dXJuO1xuICB9O1xuXG4gIC8vIChDKSAxOTk1LTIwMTMgSmVhbi1sb3VwIEdhaWxseSBhbmQgTWFyayBBZGxlclxuICAvLyAoQykgMjAxNC0yMDE3IFZpdGFseSBQdXpyaW4gYW5kIEFuZHJleSBUdXBpdHNpblxuICAvL1xuICAvLyBUaGlzIHNvZnR3YXJlIGlzIHByb3ZpZGVkICdhcy1pcycsIHdpdGhvdXQgYW55IGV4cHJlc3Mgb3IgaW1wbGllZFxuICAvLyB3YXJyYW50eS4gSW4gbm8gZXZlbnQgd2lsbCB0aGUgYXV0aG9ycyBiZSBoZWxkIGxpYWJsZSBmb3IgYW55IGRhbWFnZXNcbiAgLy8gYXJpc2luZyBmcm9tIHRoZSB1c2Ugb2YgdGhpcyBzb2Z0d2FyZS5cbiAgLy9cbiAgLy8gUGVybWlzc2lvbiBpcyBncmFudGVkIHRvIGFueW9uZSB0byB1c2UgdGhpcyBzb2Z0d2FyZSBmb3IgYW55IHB1cnBvc2UsXG4gIC8vIGluY2x1ZGluZyBjb21tZXJjaWFsIGFwcGxpY2F0aW9ucywgYW5kIHRvIGFsdGVyIGl0IGFuZCByZWRpc3RyaWJ1dGUgaXRcbiAgLy8gZnJlZWx5LCBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmcgcmVzdHJpY3Rpb25zOlxuICAvL1xuICAvLyAxLiBUaGUgb3JpZ2luIG9mIHRoaXMgc29mdHdhcmUgbXVzdCBub3QgYmUgbWlzcmVwcmVzZW50ZWQ7IHlvdSBtdXN0IG5vdFxuICAvLyAgIGNsYWltIHRoYXQgeW91IHdyb3RlIHRoZSBvcmlnaW5hbCBzb2Z0d2FyZS4gSWYgeW91IHVzZSB0aGlzIHNvZnR3YXJlXG4gIC8vICAgaW4gYSBwcm9kdWN0LCBhbiBhY2tub3dsZWRnbWVudCBpbiB0aGUgcHJvZHVjdCBkb2N1bWVudGF0aW9uIHdvdWxkIGJlXG4gIC8vICAgYXBwcmVjaWF0ZWQgYnV0IGlzIG5vdCByZXF1aXJlZC5cbiAgLy8gMi4gQWx0ZXJlZCBzb3VyY2UgdmVyc2lvbnMgbXVzdCBiZSBwbGFpbmx5IG1hcmtlZCBhcyBzdWNoLCBhbmQgbXVzdCBub3QgYmVcbiAgLy8gICBtaXNyZXByZXNlbnRlZCBhcyBiZWluZyB0aGUgb3JpZ2luYWwgc29mdHdhcmUuXG4gIC8vIDMuIFRoaXMgbm90aWNlIG1heSBub3QgYmUgcmVtb3ZlZCBvciBhbHRlcmVkIGZyb20gYW55IHNvdXJjZSBkaXN0cmlidXRpb24uXG5cbiAgY29uc3QgTUFYQklUUyA9IDE1O1xuICBjb25zdCBFTk9VR0hfTEVOUyQxID0gODUyO1xuICBjb25zdCBFTk9VR0hfRElTVFMkMSA9IDU5MjtcbiAgLy9jb25zdCBFTk9VR0ggPSAoRU5PVUdIX0xFTlMrRU5PVUdIX0RJU1RTKTtcblxuICBjb25zdCBDT0RFUyQxID0gMDtcbiAgY29uc3QgTEVOUyQxID0gMTtcbiAgY29uc3QgRElTVFMkMSA9IDI7XG5cbiAgY29uc3QgbGJhc2UgPSBuZXcgVWludDE2QXJyYXkoWyAvKiBMZW5ndGggY29kZXMgMjU3Li4yODUgYmFzZSAqL1xuICAgIDMsIDQsIDUsIDYsIDcsIDgsIDksIDEwLCAxMSwgMTMsIDE1LCAxNywgMTksIDIzLCAyNywgMzEsXG4gICAgMzUsIDQzLCA1MSwgNTksIDY3LCA4MywgOTksIDExNSwgMTMxLCAxNjMsIDE5NSwgMjI3LCAyNTgsIDAsIDBcbiAgXSk7XG5cbiAgY29uc3QgbGV4dCA9IG5ldyBVaW50OEFycmF5KFsgLyogTGVuZ3RoIGNvZGVzIDI1Ny4uMjg1IGV4dHJhICovXG4gICAgMTYsIDE2LCAxNiwgMTYsIDE2LCAxNiwgMTYsIDE2LCAxNywgMTcsIDE3LCAxNywgMTgsIDE4LCAxOCwgMTgsXG4gICAgMTksIDE5LCAxOSwgMTksIDIwLCAyMCwgMjAsIDIwLCAyMSwgMjEsIDIxLCAyMSwgMTYsIDcyLCA3OFxuICBdKTtcblxuICBjb25zdCBkYmFzZSA9IG5ldyBVaW50MTZBcnJheShbIC8qIERpc3RhbmNlIGNvZGVzIDAuLjI5IGJhc2UgKi9cbiAgICAxLCAyLCAzLCA0LCA1LCA3LCA5LCAxMywgMTcsIDI1LCAzMywgNDksIDY1LCA5NywgMTI5LCAxOTMsXG4gICAgMjU3LCAzODUsIDUxMywgNzY5LCAxMDI1LCAxNTM3LCAyMDQ5LCAzMDczLCA0MDk3LCA2MTQ1LFxuICAgIDgxOTMsIDEyMjg5LCAxNjM4NSwgMjQ1NzcsIDAsIDBcbiAgXSk7XG5cbiAgY29uc3QgZGV4dCA9IG5ldyBVaW50OEFycmF5KFsgLyogRGlzdGFuY2UgY29kZXMgMC4uMjkgZXh0cmEgKi9cbiAgICAxNiwgMTYsIDE2LCAxNiwgMTcsIDE3LCAxOCwgMTgsIDE5LCAxOSwgMjAsIDIwLCAyMSwgMjEsIDIyLCAyMixcbiAgICAyMywgMjMsIDI0LCAyNCwgMjUsIDI1LCAyNiwgMjYsIDI3LCAyNyxcbiAgICAyOCwgMjgsIDI5LCAyOSwgNjQsIDY0XG4gIF0pO1xuXG4gIGNvbnN0IGluZmxhdGVfdGFibGUgPSAodHlwZSwgbGVucywgbGVuc19pbmRleCwgY29kZXMsIHRhYmxlLCB0YWJsZV9pbmRleCwgd29yaywgb3B0cykgPT5cbiAge1xuICAgIGNvbnN0IGJpdHMgPSBvcHRzLmJpdHM7XG4gICAgICAgIC8vaGVyZSA9IG9wdHMuaGVyZTsgLyogdGFibGUgZW50cnkgZm9yIGR1cGxpY2F0aW9uICovXG5cbiAgICBsZXQgbGVuID0gMDsgICAgICAgICAgICAgICAvKiBhIGNvZGUncyBsZW5ndGggaW4gYml0cyAqL1xuICAgIGxldCBzeW0gPSAwOyAgICAgICAgICAgICAgIC8qIGluZGV4IG9mIGNvZGUgc3ltYm9scyAqL1xuICAgIGxldCBtaW4gPSAwLCBtYXggPSAwOyAgICAgICAgICAvKiBtaW5pbXVtIGFuZCBtYXhpbXVtIGNvZGUgbGVuZ3RocyAqL1xuICAgIGxldCByb290ID0gMDsgICAgICAgICAgICAgIC8qIG51bWJlciBvZiBpbmRleCBiaXRzIGZvciByb290IHRhYmxlICovXG4gICAgbGV0IGN1cnIgPSAwOyAgICAgICAgICAgICAgLyogbnVtYmVyIG9mIGluZGV4IGJpdHMgZm9yIGN1cnJlbnQgdGFibGUgKi9cbiAgICBsZXQgZHJvcCA9IDA7ICAgICAgICAgICAgICAvKiBjb2RlIGJpdHMgdG8gZHJvcCBmb3Igc3ViLXRhYmxlICovXG4gICAgbGV0IGxlZnQgPSAwOyAgICAgICAgICAgICAgICAgICAvKiBudW1iZXIgb2YgcHJlZml4IGNvZGVzIGF2YWlsYWJsZSAqL1xuICAgIGxldCB1c2VkID0gMDsgICAgICAgICAgICAgIC8qIGNvZGUgZW50cmllcyBpbiB0YWJsZSB1c2VkICovXG4gICAgbGV0IGh1ZmYgPSAwOyAgICAgICAgICAgICAgLyogSHVmZm1hbiBjb2RlICovXG4gICAgbGV0IGluY3I7ICAgICAgICAgICAgICAvKiBmb3IgaW5jcmVtZW50aW5nIGNvZGUsIGluZGV4ICovXG4gICAgbGV0IGZpbGw7ICAgICAgICAgICAgICAvKiBpbmRleCBmb3IgcmVwbGljYXRpbmcgZW50cmllcyAqL1xuICAgIGxldCBsb3c7ICAgICAgICAgICAgICAgLyogbG93IGJpdHMgZm9yIGN1cnJlbnQgcm9vdCBlbnRyeSAqL1xuICAgIGxldCBtYXNrOyAgICAgICAgICAgICAgLyogbWFzayBmb3IgbG93IHJvb3QgYml0cyAqL1xuICAgIGxldCBuZXh0OyAgICAgICAgICAgICAvKiBuZXh0IGF2YWlsYWJsZSBzcGFjZSBpbiB0YWJsZSAqL1xuICAgIGxldCBiYXNlID0gbnVsbDsgICAgIC8qIGJhc2UgdmFsdWUgdGFibGUgdG8gdXNlICovXG4gICAgbGV0IGJhc2VfaW5kZXggPSAwO1xuICAvLyAgbGV0IHNob2V4dHJhOyAgICAvKiBleHRyYSBiaXRzIHRhYmxlIHRvIHVzZSAqL1xuICAgIGxldCBlbmQ7ICAgICAgICAgICAgICAgICAgICAvKiB1c2UgYmFzZSBhbmQgZXh0cmEgZm9yIHN5bWJvbCA+IGVuZCAqL1xuICAgIGNvbnN0IGNvdW50ID0gbmV3IFVpbnQxNkFycmF5KE1BWEJJVFMgKyAxKTsgLy9bTUFYQklUUysxXTsgICAgLyogbnVtYmVyIG9mIGNvZGVzIG9mIGVhY2ggbGVuZ3RoICovXG4gICAgY29uc3Qgb2ZmcyA9IG5ldyBVaW50MTZBcnJheShNQVhCSVRTICsgMSk7IC8vW01BWEJJVFMrMV07ICAgICAvKiBvZmZzZXRzIGluIHRhYmxlIGZvciBlYWNoIGxlbmd0aCAqL1xuICAgIGxldCBleHRyYSA9IG51bGw7XG4gICAgbGV0IGV4dHJhX2luZGV4ID0gMDtcblxuICAgIGxldCBoZXJlX2JpdHMsIGhlcmVfb3AsIGhlcmVfdmFsO1xuXG4gICAgLypcbiAgICAgUHJvY2VzcyBhIHNldCBvZiBjb2RlIGxlbmd0aHMgdG8gY3JlYXRlIGEgY2Fub25pY2FsIEh1ZmZtYW4gY29kZS4gIFRoZVxuICAgICBjb2RlIGxlbmd0aHMgYXJlIGxlbnNbMC4uY29kZXMtMV0uICBFYWNoIGxlbmd0aCBjb3JyZXNwb25kcyB0byB0aGVcbiAgICAgc3ltYm9scyAwLi5jb2Rlcy0xLiAgVGhlIEh1ZmZtYW4gY29kZSBpcyBnZW5lcmF0ZWQgYnkgZmlyc3Qgc29ydGluZyB0aGVcbiAgICAgc3ltYm9scyBieSBsZW5ndGggZnJvbSBzaG9ydCB0byBsb25nLCBhbmQgcmV0YWluaW5nIHRoZSBzeW1ib2wgb3JkZXJcbiAgICAgZm9yIGNvZGVzIHdpdGggZXF1YWwgbGVuZ3Rocy4gIFRoZW4gdGhlIGNvZGUgc3RhcnRzIHdpdGggYWxsIHplcm8gYml0c1xuICAgICBmb3IgdGhlIGZpcnN0IGNvZGUgb2YgdGhlIHNob3J0ZXN0IGxlbmd0aCwgYW5kIHRoZSBjb2RlcyBhcmUgaW50ZWdlclxuICAgICBpbmNyZW1lbnRzIGZvciB0aGUgc2FtZSBsZW5ndGgsIGFuZCB6ZXJvcyBhcmUgYXBwZW5kZWQgYXMgdGhlIGxlbmd0aFxuICAgICBpbmNyZWFzZXMuICBGb3IgdGhlIGRlZmxhdGUgZm9ybWF0LCB0aGVzZSBiaXRzIGFyZSBzdG9yZWQgYmFja3dhcmRzXG4gICAgIGZyb20gdGhlaXIgbW9yZSBuYXR1cmFsIGludGVnZXIgaW5jcmVtZW50IG9yZGVyaW5nLCBhbmQgc28gd2hlbiB0aGVcbiAgICAgZGVjb2RpbmcgdGFibGVzIGFyZSBidWlsdCBpbiB0aGUgbGFyZ2UgbG9vcCBiZWxvdywgdGhlIGludGVnZXIgY29kZXNcbiAgICAgYXJlIGluY3JlbWVudGVkIGJhY2t3YXJkcy5cblxuICAgICBUaGlzIHJvdXRpbmUgYXNzdW1lcywgYnV0IGRvZXMgbm90IGNoZWNrLCB0aGF0IGFsbCBvZiB0aGUgZW50cmllcyBpblxuICAgICBsZW5zW10gYXJlIGluIHRoZSByYW5nZSAwLi5NQVhCSVRTLiAgVGhlIGNhbGxlciBtdXN0IGFzc3VyZSB0aGlzLlxuICAgICAxLi5NQVhCSVRTIGlzIGludGVycHJldGVkIGFzIHRoYXQgY29kZSBsZW5ndGguICB6ZXJvIG1lYW5zIHRoYXQgdGhhdFxuICAgICBzeW1ib2wgZG9lcyBub3Qgb2NjdXIgaW4gdGhpcyBjb2RlLlxuXG4gICAgIFRoZSBjb2RlcyBhcmUgc29ydGVkIGJ5IGNvbXB1dGluZyBhIGNvdW50IG9mIGNvZGVzIGZvciBlYWNoIGxlbmd0aCxcbiAgICAgY3JlYXRpbmcgZnJvbSB0aGF0IGEgdGFibGUgb2Ygc3RhcnRpbmcgaW5kaWNlcyBmb3IgZWFjaCBsZW5ndGggaW4gdGhlXG4gICAgIHNvcnRlZCB0YWJsZSwgYW5kIHRoZW4gZW50ZXJpbmcgdGhlIHN5bWJvbHMgaW4gb3JkZXIgaW4gdGhlIHNvcnRlZFxuICAgICB0YWJsZS4gIFRoZSBzb3J0ZWQgdGFibGUgaXMgd29ya1tdLCB3aXRoIHRoYXQgc3BhY2UgYmVpbmcgcHJvdmlkZWQgYnlcbiAgICAgdGhlIGNhbGxlci5cblxuICAgICBUaGUgbGVuZ3RoIGNvdW50cyBhcmUgdXNlZCBmb3Igb3RoZXIgcHVycG9zZXMgYXMgd2VsbCwgaS5lLiBmaW5kaW5nXG4gICAgIHRoZSBtaW5pbXVtIGFuZCBtYXhpbXVtIGxlbmd0aCBjb2RlcywgZGV0ZXJtaW5pbmcgaWYgdGhlcmUgYXJlIGFueVxuICAgICBjb2RlcyBhdCBhbGwsIGNoZWNraW5nIGZvciBhIHZhbGlkIHNldCBvZiBsZW5ndGhzLCBhbmQgbG9va2luZyBhaGVhZFxuICAgICBhdCBsZW5ndGggY291bnRzIHRvIGRldGVybWluZSBzdWItdGFibGUgc2l6ZXMgd2hlbiBidWlsZGluZyB0aGVcbiAgICAgZGVjb2RpbmcgdGFibGVzLlxuICAgICAqL1xuXG4gICAgLyogYWNjdW11bGF0ZSBsZW5ndGhzIGZvciBjb2RlcyAoYXNzdW1lcyBsZW5zW10gYWxsIGluIDAuLk1BWEJJVFMpICovXG4gICAgZm9yIChsZW4gPSAwOyBsZW4gPD0gTUFYQklUUzsgbGVuKyspIHtcbiAgICAgIGNvdW50W2xlbl0gPSAwO1xuICAgIH1cbiAgICBmb3IgKHN5bSA9IDA7IHN5bSA8IGNvZGVzOyBzeW0rKykge1xuICAgICAgY291bnRbbGVuc1tsZW5zX2luZGV4ICsgc3ltXV0rKztcbiAgICB9XG5cbiAgICAvKiBib3VuZCBjb2RlIGxlbmd0aHMsIGZvcmNlIHJvb3QgdG8gYmUgd2l0aGluIGNvZGUgbGVuZ3RocyAqL1xuICAgIHJvb3QgPSBiaXRzO1xuICAgIGZvciAobWF4ID0gTUFYQklUUzsgbWF4ID49IDE7IG1heC0tKSB7XG4gICAgICBpZiAoY291bnRbbWF4XSAhPT0gMCkgeyBicmVhazsgfVxuICAgIH1cbiAgICBpZiAocm9vdCA+IG1heCkge1xuICAgICAgcm9vdCA9IG1heDtcbiAgICB9XG4gICAgaWYgKG1heCA9PT0gMCkgeyAgICAgICAgICAgICAgICAgICAgIC8qIG5vIHN5bWJvbHMgdG8gY29kZSBhdCBhbGwgKi9cbiAgICAgIC8vdGFibGUub3Bbb3B0cy50YWJsZV9pbmRleF0gPSA2NDsgIC8vaGVyZS5vcCA9ICh2YXIgY2hhcik2NDsgICAgLyogaW52YWxpZCBjb2RlIG1hcmtlciAqL1xuICAgICAgLy90YWJsZS5iaXRzW29wdHMudGFibGVfaW5kZXhdID0gMTsgICAvL2hlcmUuYml0cyA9ICh2YXIgY2hhcikxO1xuICAgICAgLy90YWJsZS52YWxbb3B0cy50YWJsZV9pbmRleCsrXSA9IDA7ICAgLy9oZXJlLnZhbCA9ICh2YXIgc2hvcnQpMDtcbiAgICAgIHRhYmxlW3RhYmxlX2luZGV4KytdID0gKDEgPDwgMjQpIHwgKDY0IDw8IDE2KSB8IDA7XG5cblxuICAgICAgLy90YWJsZS5vcFtvcHRzLnRhYmxlX2luZGV4XSA9IDY0O1xuICAgICAgLy90YWJsZS5iaXRzW29wdHMudGFibGVfaW5kZXhdID0gMTtcbiAgICAgIC8vdGFibGUudmFsW29wdHMudGFibGVfaW5kZXgrK10gPSAwO1xuICAgICAgdGFibGVbdGFibGVfaW5kZXgrK10gPSAoMSA8PCAyNCkgfCAoNjQgPDwgMTYpIHwgMDtcblxuICAgICAgb3B0cy5iaXRzID0gMTtcbiAgICAgIHJldHVybiAwOyAgICAgLyogbm8gc3ltYm9scywgYnV0IHdhaXQgZm9yIGRlY29kaW5nIHRvIHJlcG9ydCBlcnJvciAqL1xuICAgIH1cbiAgICBmb3IgKG1pbiA9IDE7IG1pbiA8IG1heDsgbWluKyspIHtcbiAgICAgIGlmIChjb3VudFttaW5dICE9PSAwKSB7IGJyZWFrOyB9XG4gICAgfVxuICAgIGlmIChyb290IDwgbWluKSB7XG4gICAgICByb290ID0gbWluO1xuICAgIH1cblxuICAgIC8qIGNoZWNrIGZvciBhbiBvdmVyLXN1YnNjcmliZWQgb3IgaW5jb21wbGV0ZSBzZXQgb2YgbGVuZ3RocyAqL1xuICAgIGxlZnQgPSAxO1xuICAgIGZvciAobGVuID0gMTsgbGVuIDw9IE1BWEJJVFM7IGxlbisrKSB7XG4gICAgICBsZWZ0IDw8PSAxO1xuICAgICAgbGVmdCAtPSBjb3VudFtsZW5dO1xuICAgICAgaWYgKGxlZnQgPCAwKSB7XG4gICAgICAgIHJldHVybiAtMTtcbiAgICAgIH0gICAgICAgIC8qIG92ZXItc3Vic2NyaWJlZCAqL1xuICAgIH1cbiAgICBpZiAobGVmdCA+IDAgJiYgKHR5cGUgPT09IENPREVTJDEgfHwgbWF4ICE9PSAxKSkge1xuICAgICAgcmV0dXJuIC0xOyAgICAgICAgICAgICAgICAgICAgICAvKiBpbmNvbXBsZXRlIHNldCAqL1xuICAgIH1cblxuICAgIC8qIGdlbmVyYXRlIG9mZnNldHMgaW50byBzeW1ib2wgdGFibGUgZm9yIGVhY2ggbGVuZ3RoIGZvciBzb3J0aW5nICovXG4gICAgb2Zmc1sxXSA9IDA7XG4gICAgZm9yIChsZW4gPSAxOyBsZW4gPCBNQVhCSVRTOyBsZW4rKykge1xuICAgICAgb2Zmc1tsZW4gKyAxXSA9IG9mZnNbbGVuXSArIGNvdW50W2xlbl07XG4gICAgfVxuXG4gICAgLyogc29ydCBzeW1ib2xzIGJ5IGxlbmd0aCwgYnkgc3ltYm9sIG9yZGVyIHdpdGhpbiBlYWNoIGxlbmd0aCAqL1xuICAgIGZvciAoc3ltID0gMDsgc3ltIDwgY29kZXM7IHN5bSsrKSB7XG4gICAgICBpZiAobGVuc1tsZW5zX2luZGV4ICsgc3ltXSAhPT0gMCkge1xuICAgICAgICB3b3JrW29mZnNbbGVuc1tsZW5zX2luZGV4ICsgc3ltXV0rK10gPSBzeW07XG4gICAgICB9XG4gICAgfVxuXG4gICAgLypcbiAgICAgQ3JlYXRlIGFuZCBmaWxsIGluIGRlY29kaW5nIHRhYmxlcy4gIEluIHRoaXMgbG9vcCwgdGhlIHRhYmxlIGJlaW5nXG4gICAgIGZpbGxlZCBpcyBhdCBuZXh0IGFuZCBoYXMgY3VyciBpbmRleCBiaXRzLiAgVGhlIGNvZGUgYmVpbmcgdXNlZCBpcyBodWZmXG4gICAgIHdpdGggbGVuZ3RoIGxlbi4gIFRoYXQgY29kZSBpcyBjb252ZXJ0ZWQgdG8gYW4gaW5kZXggYnkgZHJvcHBpbmcgZHJvcFxuICAgICBiaXRzIG9mZiBvZiB0aGUgYm90dG9tLiAgRm9yIGNvZGVzIHdoZXJlIGxlbiBpcyBsZXNzIHRoYW4gZHJvcCArIGN1cnIsXG4gICAgIHRob3NlIHRvcCBkcm9wICsgY3VyciAtIGxlbiBiaXRzIGFyZSBpbmNyZW1lbnRlZCB0aHJvdWdoIGFsbCB2YWx1ZXMgdG9cbiAgICAgZmlsbCB0aGUgdGFibGUgd2l0aCByZXBsaWNhdGVkIGVudHJpZXMuXG5cbiAgICAgcm9vdCBpcyB0aGUgbnVtYmVyIG9mIGluZGV4IGJpdHMgZm9yIHRoZSByb290IHRhYmxlLiAgV2hlbiBsZW4gZXhjZWVkc1xuICAgICByb290LCBzdWItdGFibGVzIGFyZSBjcmVhdGVkIHBvaW50ZWQgdG8gYnkgdGhlIHJvb3QgZW50cnkgd2l0aCBhbiBpbmRleFxuICAgICBvZiB0aGUgbG93IHJvb3QgYml0cyBvZiBodWZmLiAgVGhpcyBpcyBzYXZlZCBpbiBsb3cgdG8gY2hlY2sgZm9yIHdoZW4gYVxuICAgICBuZXcgc3ViLXRhYmxlIHNob3VsZCBiZSBzdGFydGVkLiAgZHJvcCBpcyB6ZXJvIHdoZW4gdGhlIHJvb3QgdGFibGUgaXNcbiAgICAgYmVpbmcgZmlsbGVkLCBhbmQgZHJvcCBpcyByb290IHdoZW4gc3ViLXRhYmxlcyBhcmUgYmVpbmcgZmlsbGVkLlxuXG4gICAgIFdoZW4gYSBuZXcgc3ViLXRhYmxlIGlzIG5lZWRlZCwgaXQgaXMgbmVjZXNzYXJ5IHRvIGxvb2sgYWhlYWQgaW4gdGhlXG4gICAgIGNvZGUgbGVuZ3RocyB0byBkZXRlcm1pbmUgd2hhdCBzaXplIHN1Yi10YWJsZSBpcyBuZWVkZWQuICBUaGUgbGVuZ3RoXG4gICAgIGNvdW50cyBhcmUgdXNlZCBmb3IgdGhpcywgYW5kIHNvIGNvdW50W10gaXMgZGVjcmVtZW50ZWQgYXMgY29kZXMgYXJlXG4gICAgIGVudGVyZWQgaW4gdGhlIHRhYmxlcy5cblxuICAgICB1c2VkIGtlZXBzIHRyYWNrIG9mIGhvdyBtYW55IHRhYmxlIGVudHJpZXMgaGF2ZSBiZWVuIGFsbG9jYXRlZCBmcm9tIHRoZVxuICAgICBwcm92aWRlZCAqdGFibGUgc3BhY2UuICBJdCBpcyBjaGVja2VkIGZvciBMRU5TIGFuZCBESVNUIHRhYmxlcyBhZ2FpbnN0XG4gICAgIHRoZSBjb25zdGFudHMgRU5PVUdIX0xFTlMgYW5kIEVOT1VHSF9ESVNUUyB0byBndWFyZCBhZ2FpbnN0IGNoYW5nZXMgaW5cbiAgICAgdGhlIGluaXRpYWwgcm9vdCB0YWJsZSBzaXplIGNvbnN0YW50cy4gIFNlZSB0aGUgY29tbWVudHMgaW4gaW5mdHJlZXMuaFxuICAgICBmb3IgbW9yZSBpbmZvcm1hdGlvbi5cblxuICAgICBzeW0gaW5jcmVtZW50cyB0aHJvdWdoIGFsbCBzeW1ib2xzLCBhbmQgdGhlIGxvb3AgdGVybWluYXRlcyB3aGVuXG4gICAgIGFsbCBjb2RlcyBvZiBsZW5ndGggbWF4LCBpLmUuIGFsbCBjb2RlcywgaGF2ZSBiZWVuIHByb2Nlc3NlZC4gIFRoaXNcbiAgICAgcm91dGluZSBwZXJtaXRzIGluY29tcGxldGUgY29kZXMsIHNvIGFub3RoZXIgbG9vcCBhZnRlciB0aGlzIG9uZSBmaWxsc1xuICAgICBpbiB0aGUgcmVzdCBvZiB0aGUgZGVjb2RpbmcgdGFibGVzIHdpdGggaW52YWxpZCBjb2RlIG1hcmtlcnMuXG4gICAgICovXG5cbiAgICAvKiBzZXQgdXAgZm9yIGNvZGUgdHlwZSAqL1xuICAgIC8vIHBvb3IgbWFuIG9wdGltaXphdGlvbiAtIHVzZSBpZi1lbHNlIGluc3RlYWQgb2Ygc3dpdGNoLFxuICAgIC8vIHRvIGF2b2lkIGRlb3B0cyBpbiBvbGQgdjhcbiAgICBpZiAodHlwZSA9PT0gQ09ERVMkMSkge1xuICAgICAgYmFzZSA9IGV4dHJhID0gd29yazsgICAgLyogZHVtbXkgdmFsdWUtLW5vdCB1c2VkICovXG4gICAgICBlbmQgPSAxOTtcblxuICAgIH0gZWxzZSBpZiAodHlwZSA9PT0gTEVOUyQxKSB7XG4gICAgICBiYXNlID0gbGJhc2U7XG4gICAgICBiYXNlX2luZGV4IC09IDI1NztcbiAgICAgIGV4dHJhID0gbGV4dDtcbiAgICAgIGV4dHJhX2luZGV4IC09IDI1NztcbiAgICAgIGVuZCA9IDI1NjtcblxuICAgIH0gZWxzZSB7ICAgICAgICAgICAgICAgICAgICAvKiBESVNUUyAqL1xuICAgICAgYmFzZSA9IGRiYXNlO1xuICAgICAgZXh0cmEgPSBkZXh0O1xuICAgICAgZW5kID0gLTE7XG4gICAgfVxuXG4gICAgLyogaW5pdGlhbGl6ZSBvcHRzIGZvciBsb29wICovXG4gICAgaHVmZiA9IDA7ICAgICAgICAgICAgICAgICAgIC8qIHN0YXJ0aW5nIGNvZGUgKi9cbiAgICBzeW0gPSAwOyAgICAgICAgICAgICAgICAgICAgLyogc3RhcnRpbmcgY29kZSBzeW1ib2wgKi9cbiAgICBsZW4gPSBtaW47ICAgICAgICAgICAgICAgICAgLyogc3RhcnRpbmcgY29kZSBsZW5ndGggKi9cbiAgICBuZXh0ID0gdGFibGVfaW5kZXg7ICAgICAgICAgICAgICAvKiBjdXJyZW50IHRhYmxlIHRvIGZpbGwgaW4gKi9cbiAgICBjdXJyID0gcm9vdDsgICAgICAgICAgICAgICAgLyogY3VycmVudCB0YWJsZSBpbmRleCBiaXRzICovXG4gICAgZHJvcCA9IDA7ICAgICAgICAgICAgICAgICAgIC8qIGN1cnJlbnQgYml0cyB0byBkcm9wIGZyb20gY29kZSBmb3IgaW5kZXggKi9cbiAgICBsb3cgPSAtMTsgICAgICAgICAgICAgICAgICAgLyogdHJpZ2dlciBuZXcgc3ViLXRhYmxlIHdoZW4gbGVuID4gcm9vdCAqL1xuICAgIHVzZWQgPSAxIDw8IHJvb3Q7ICAgICAgICAgIC8qIHVzZSByb290IHRhYmxlIGVudHJpZXMgKi9cbiAgICBtYXNrID0gdXNlZCAtIDE7ICAgICAgICAgICAgLyogbWFzayBmb3IgY29tcGFyaW5nIGxvdyAqL1xuXG4gICAgLyogY2hlY2sgYXZhaWxhYmxlIHRhYmxlIHNwYWNlICovXG4gICAgaWYgKCh0eXBlID09PSBMRU5TJDEgJiYgdXNlZCA+IEVOT1VHSF9MRU5TJDEpIHx8XG4gICAgICAodHlwZSA9PT0gRElTVFMkMSAmJiB1c2VkID4gRU5PVUdIX0RJU1RTJDEpKSB7XG4gICAgICByZXR1cm4gMTtcbiAgICB9XG5cbiAgICAvKiBwcm9jZXNzIGFsbCBjb2RlcyBhbmQgbWFrZSB0YWJsZSBlbnRyaWVzICovXG4gICAgZm9yICg7Oykge1xuICAgICAgLyogY3JlYXRlIHRhYmxlIGVudHJ5ICovXG4gICAgICBoZXJlX2JpdHMgPSBsZW4gLSBkcm9wO1xuICAgICAgaWYgKHdvcmtbc3ltXSA8IGVuZCkge1xuICAgICAgICBoZXJlX29wID0gMDtcbiAgICAgICAgaGVyZV92YWwgPSB3b3JrW3N5bV07XG4gICAgICB9XG4gICAgICBlbHNlIGlmICh3b3JrW3N5bV0gPiBlbmQpIHtcbiAgICAgICAgaGVyZV9vcCA9IGV4dHJhW2V4dHJhX2luZGV4ICsgd29ya1tzeW1dXTtcbiAgICAgICAgaGVyZV92YWwgPSBiYXNlW2Jhc2VfaW5kZXggKyB3b3JrW3N5bV1dO1xuICAgICAgfVxuICAgICAgZWxzZSB7XG4gICAgICAgIGhlcmVfb3AgPSAzMiArIDY0OyAgICAgICAgIC8qIGVuZCBvZiBibG9jayAqL1xuICAgICAgICBoZXJlX3ZhbCA9IDA7XG4gICAgICB9XG5cbiAgICAgIC8qIHJlcGxpY2F0ZSBmb3IgdGhvc2UgaW5kaWNlcyB3aXRoIGxvdyBsZW4gYml0cyBlcXVhbCB0byBodWZmICovXG4gICAgICBpbmNyID0gMSA8PCAobGVuIC0gZHJvcCk7XG4gICAgICBmaWxsID0gMSA8PCBjdXJyO1xuICAgICAgbWluID0gZmlsbDsgICAgICAgICAgICAgICAgIC8qIHNhdmUgb2Zmc2V0IHRvIG5leHQgdGFibGUgKi9cbiAgICAgIGRvIHtcbiAgICAgICAgZmlsbCAtPSBpbmNyO1xuICAgICAgICB0YWJsZVtuZXh0ICsgKGh1ZmYgPj4gZHJvcCkgKyBmaWxsXSA9IChoZXJlX2JpdHMgPDwgMjQpIHwgKGhlcmVfb3AgPDwgMTYpIHwgaGVyZV92YWwgfDA7XG4gICAgICB9IHdoaWxlIChmaWxsICE9PSAwKTtcblxuICAgICAgLyogYmFja3dhcmRzIGluY3JlbWVudCB0aGUgbGVuLWJpdCBjb2RlIGh1ZmYgKi9cbiAgICAgIGluY3IgPSAxIDw8IChsZW4gLSAxKTtcbiAgICAgIHdoaWxlIChodWZmICYgaW5jcikge1xuICAgICAgICBpbmNyID4+PSAxO1xuICAgICAgfVxuICAgICAgaWYgKGluY3IgIT09IDApIHtcbiAgICAgICAgaHVmZiAmPSBpbmNyIC0gMTtcbiAgICAgICAgaHVmZiArPSBpbmNyO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaHVmZiA9IDA7XG4gICAgICB9XG5cbiAgICAgIC8qIGdvIHRvIG5leHQgc3ltYm9sLCB1cGRhdGUgY291bnQsIGxlbiAqL1xuICAgICAgc3ltKys7XG4gICAgICBpZiAoLS1jb3VudFtsZW5dID09PSAwKSB7XG4gICAgICAgIGlmIChsZW4gPT09IG1heCkgeyBicmVhazsgfVxuICAgICAgICBsZW4gPSBsZW5zW2xlbnNfaW5kZXggKyB3b3JrW3N5bV1dO1xuICAgICAgfVxuXG4gICAgICAvKiBjcmVhdGUgbmV3IHN1Yi10YWJsZSBpZiBuZWVkZWQgKi9cbiAgICAgIGlmIChsZW4gPiByb290ICYmIChodWZmICYgbWFzaykgIT09IGxvdykge1xuICAgICAgICAvKiBpZiBmaXJzdCB0aW1lLCB0cmFuc2l0aW9uIHRvIHN1Yi10YWJsZXMgKi9cbiAgICAgICAgaWYgKGRyb3AgPT09IDApIHtcbiAgICAgICAgICBkcm9wID0gcm9vdDtcbiAgICAgICAgfVxuXG4gICAgICAgIC8qIGluY3JlbWVudCBwYXN0IGxhc3QgdGFibGUgKi9cbiAgICAgICAgbmV4dCArPSBtaW47ICAgICAgICAgICAgLyogaGVyZSBtaW4gaXMgMSA8PCBjdXJyICovXG5cbiAgICAgICAgLyogZGV0ZXJtaW5lIGxlbmd0aCBvZiBuZXh0IHRhYmxlICovXG4gICAgICAgIGN1cnIgPSBsZW4gLSBkcm9wO1xuICAgICAgICBsZWZ0ID0gMSA8PCBjdXJyO1xuICAgICAgICB3aGlsZSAoY3VyciArIGRyb3AgPCBtYXgpIHtcbiAgICAgICAgICBsZWZ0IC09IGNvdW50W2N1cnIgKyBkcm9wXTtcbiAgICAgICAgICBpZiAobGVmdCA8PSAwKSB7IGJyZWFrOyB9XG4gICAgICAgICAgY3VycisrO1xuICAgICAgICAgIGxlZnQgPDw9IDE7XG4gICAgICAgIH1cblxuICAgICAgICAvKiBjaGVjayBmb3IgZW5vdWdoIHNwYWNlICovXG4gICAgICAgIHVzZWQgKz0gMSA8PCBjdXJyO1xuICAgICAgICBpZiAoKHR5cGUgPT09IExFTlMkMSAmJiB1c2VkID4gRU5PVUdIX0xFTlMkMSkgfHxcbiAgICAgICAgICAodHlwZSA9PT0gRElTVFMkMSAmJiB1c2VkID4gRU5PVUdIX0RJU1RTJDEpKSB7XG4gICAgICAgICAgcmV0dXJuIDE7XG4gICAgICAgIH1cblxuICAgICAgICAvKiBwb2ludCBlbnRyeSBpbiByb290IHRhYmxlIHRvIHN1Yi10YWJsZSAqL1xuICAgICAgICBsb3cgPSBodWZmICYgbWFzaztcbiAgICAgICAgLyp0YWJsZS5vcFtsb3ddID0gY3VycjtcbiAgICAgICAgdGFibGUuYml0c1tsb3ddID0gcm9vdDtcbiAgICAgICAgdGFibGUudmFsW2xvd10gPSBuZXh0IC0gb3B0cy50YWJsZV9pbmRleDsqL1xuICAgICAgICB0YWJsZVtsb3ddID0gKHJvb3QgPDwgMjQpIHwgKGN1cnIgPDwgMTYpIHwgKG5leHQgLSB0YWJsZV9pbmRleCkgfDA7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLyogZmlsbCBpbiByZW1haW5pbmcgdGFibGUgZW50cnkgaWYgY29kZSBpcyBpbmNvbXBsZXRlIChndWFyYW50ZWVkIHRvIGhhdmVcbiAgICAgYXQgbW9zdCBvbmUgcmVtYWluaW5nIGVudHJ5LCBzaW5jZSBpZiB0aGUgY29kZSBpcyBpbmNvbXBsZXRlLCB0aGVcbiAgICAgbWF4aW11bSBjb2RlIGxlbmd0aCB0aGF0IHdhcyBhbGxvd2VkIHRvIGdldCB0aGlzIGZhciBpcyBvbmUgYml0KSAqL1xuICAgIGlmIChodWZmICE9PSAwKSB7XG4gICAgICAvL3RhYmxlLm9wW25leHQgKyBodWZmXSA9IDY0OyAgICAgICAgICAgIC8qIGludmFsaWQgY29kZSBtYXJrZXIgKi9cbiAgICAgIC8vdGFibGUuYml0c1tuZXh0ICsgaHVmZl0gPSBsZW4gLSBkcm9wO1xuICAgICAgLy90YWJsZS52YWxbbmV4dCArIGh1ZmZdID0gMDtcbiAgICAgIHRhYmxlW25leHQgKyBodWZmXSA9ICgobGVuIC0gZHJvcCkgPDwgMjQpIHwgKDY0IDw8IDE2KSB8MDtcbiAgICB9XG5cbiAgICAvKiBzZXQgcmV0dXJuIHBhcmFtZXRlcnMgKi9cbiAgICAvL29wdHMudGFibGVfaW5kZXggKz0gdXNlZDtcbiAgICBvcHRzLmJpdHMgPSByb290O1xuICAgIHJldHVybiAwO1xuICB9O1xuXG5cbiAgdmFyIGluZnRyZWVzID0gaW5mbGF0ZV90YWJsZTtcblxuICAvLyAoQykgMTk5NS0yMDEzIEplYW4tbG91cCBHYWlsbHkgYW5kIE1hcmsgQWRsZXJcbiAgLy8gKEMpIDIwMTQtMjAxNyBWaXRhbHkgUHV6cmluIGFuZCBBbmRyZXkgVHVwaXRzaW5cbiAgLy9cbiAgLy8gVGhpcyBzb2Z0d2FyZSBpcyBwcm92aWRlZCAnYXMtaXMnLCB3aXRob3V0IGFueSBleHByZXNzIG9yIGltcGxpZWRcbiAgLy8gd2FycmFudHkuIEluIG5vIGV2ZW50IHdpbGwgdGhlIGF1dGhvcnMgYmUgaGVsZCBsaWFibGUgZm9yIGFueSBkYW1hZ2VzXG4gIC8vIGFyaXNpbmcgZnJvbSB0aGUgdXNlIG9mIHRoaXMgc29mdHdhcmUuXG4gIC8vXG4gIC8vIFBlcm1pc3Npb24gaXMgZ3JhbnRlZCB0byBhbnlvbmUgdG8gdXNlIHRoaXMgc29mdHdhcmUgZm9yIGFueSBwdXJwb3NlLFxuICAvLyBpbmNsdWRpbmcgY29tbWVyY2lhbCBhcHBsaWNhdGlvbnMsIGFuZCB0byBhbHRlciBpdCBhbmQgcmVkaXN0cmlidXRlIGl0XG4gIC8vIGZyZWVseSwgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIHJlc3RyaWN0aW9uczpcbiAgLy9cbiAgLy8gMS4gVGhlIG9yaWdpbiBvZiB0aGlzIHNvZnR3YXJlIG11c3Qgbm90IGJlIG1pc3JlcHJlc2VudGVkOyB5b3UgbXVzdCBub3RcbiAgLy8gICBjbGFpbSB0aGF0IHlvdSB3cm90ZSB0aGUgb3JpZ2luYWwgc29mdHdhcmUuIElmIHlvdSB1c2UgdGhpcyBzb2Z0d2FyZVxuICAvLyAgIGluIGEgcHJvZHVjdCwgYW4gYWNrbm93bGVkZ21lbnQgaW4gdGhlIHByb2R1Y3QgZG9jdW1lbnRhdGlvbiB3b3VsZCBiZVxuICAvLyAgIGFwcHJlY2lhdGVkIGJ1dCBpcyBub3QgcmVxdWlyZWQuXG4gIC8vIDIuIEFsdGVyZWQgc291cmNlIHZlcnNpb25zIG11c3QgYmUgcGxhaW5seSBtYXJrZWQgYXMgc3VjaCwgYW5kIG11c3Qgbm90IGJlXG4gIC8vICAgbWlzcmVwcmVzZW50ZWQgYXMgYmVpbmcgdGhlIG9yaWdpbmFsIHNvZnR3YXJlLlxuICAvLyAzLiBUaGlzIG5vdGljZSBtYXkgbm90IGJlIHJlbW92ZWQgb3IgYWx0ZXJlZCBmcm9tIGFueSBzb3VyY2UgZGlzdHJpYnV0aW9uLlxuXG4gIHZhciBjb25zdGFudHMkMSA9IHtcblxuICAgIC8qIEFsbG93ZWQgZmx1c2ggdmFsdWVzOyBzZWUgZGVmbGF0ZSgpIGFuZCBpbmZsYXRlKCkgYmVsb3cgZm9yIGRldGFpbHMgKi9cbiAgICBaX05PX0ZMVVNIOiAgICAgICAgIDAsXG4gICAgWl9QQVJUSUFMX0ZMVVNIOiAgICAxLFxuICAgIFpfU1lOQ19GTFVTSDogICAgICAgMixcbiAgICBaX0ZVTExfRkxVU0g6ICAgICAgIDMsXG4gICAgWl9GSU5JU0g6ICAgICAgICAgICA0LFxuICAgIFpfQkxPQ0s6ICAgICAgICAgICAgNSxcbiAgICBaX1RSRUVTOiAgICAgICAgICAgIDYsXG5cbiAgICAvKiBSZXR1cm4gY29kZXMgZm9yIHRoZSBjb21wcmVzc2lvbi9kZWNvbXByZXNzaW9uIGZ1bmN0aW9ucy4gTmVnYXRpdmUgdmFsdWVzXG4gICAgKiBhcmUgZXJyb3JzLCBwb3NpdGl2ZSB2YWx1ZXMgYXJlIHVzZWQgZm9yIHNwZWNpYWwgYnV0IG5vcm1hbCBldmVudHMuXG4gICAgKi9cbiAgICBaX09LOiAgICAgICAgICAgICAgIDAsXG4gICAgWl9TVFJFQU1fRU5EOiAgICAgICAxLFxuICAgIFpfTkVFRF9ESUNUOiAgICAgICAgMixcbiAgICBaX0VSUk5POiAgICAgICAgICAgLTEsXG4gICAgWl9TVFJFQU1fRVJST1I6ICAgIC0yLFxuICAgIFpfREFUQV9FUlJPUjogICAgICAtMyxcbiAgICBaX01FTV9FUlJPUjogICAgICAgLTQsXG4gICAgWl9CVUZfRVJST1I6ICAgICAgIC01LFxuICAgIC8vWl9WRVJTSU9OX0VSUk9SOiAtNixcblxuICAgIC8qIGNvbXByZXNzaW9uIGxldmVscyAqL1xuICAgIFpfTk9fQ09NUFJFU1NJT046ICAgICAgICAgMCxcbiAgICBaX0JFU1RfU1BFRUQ6ICAgICAgICAgICAgIDEsXG4gICAgWl9CRVNUX0NPTVBSRVNTSU9OOiAgICAgICA5LFxuICAgIFpfREVGQVVMVF9DT01QUkVTU0lPTjogICAtMSxcblxuXG4gICAgWl9GSUxURVJFRDogICAgICAgICAgICAgICAxLFxuICAgIFpfSFVGRk1BTl9PTkxZOiAgICAgICAgICAgMixcbiAgICBaX1JMRTogICAgICAgICAgICAgICAgICAgIDMsXG4gICAgWl9GSVhFRDogICAgICAgICAgICAgICAgICA0LFxuICAgIFpfREVGQVVMVF9TVFJBVEVHWTogICAgICAgMCxcblxuICAgIC8qIFBvc3NpYmxlIHZhbHVlcyBvZiB0aGUgZGF0YV90eXBlIGZpZWxkICh0aG91Z2ggc2VlIGluZmxhdGUoKSkgKi9cbiAgICBaX0JJTkFSWTogICAgICAgICAgICAgICAgIDAsXG4gICAgWl9URVhUOiAgICAgICAgICAgICAgICAgICAxLFxuICAgIC8vWl9BU0NJSTogICAgICAgICAgICAgICAgMSwgLy8gPSBaX1RFWFQgKGRlcHJlY2F0ZWQpXG4gICAgWl9VTktOT1dOOiAgICAgICAgICAgICAgICAyLFxuXG4gICAgLyogVGhlIGRlZmxhdGUgY29tcHJlc3Npb24gbWV0aG9kICovXG4gICAgWl9ERUZMQVRFRDogICAgICAgICAgICAgICA4XG4gICAgLy9aX05VTEw6ICAgICAgICAgICAgICAgICBudWxsIC8vIFVzZSAtMSBvciBudWxsIGlubGluZSwgZGVwZW5kaW5nIG9uIHZhciB0eXBlXG4gIH07XG5cbiAgLy8gKEMpIDE5OTUtMjAxMyBKZWFuLWxvdXAgR2FpbGx5IGFuZCBNYXJrIEFkbGVyXG4gIC8vIChDKSAyMDE0LTIwMTcgVml0YWx5IFB1enJpbiBhbmQgQW5kcmV5IFR1cGl0c2luXG4gIC8vXG4gIC8vIFRoaXMgc29mdHdhcmUgaXMgcHJvdmlkZWQgJ2FzLWlzJywgd2l0aG91dCBhbnkgZXhwcmVzcyBvciBpbXBsaWVkXG4gIC8vIHdhcnJhbnR5LiBJbiBubyBldmVudCB3aWxsIHRoZSBhdXRob3JzIGJlIGhlbGQgbGlhYmxlIGZvciBhbnkgZGFtYWdlc1xuICAvLyBhcmlzaW5nIGZyb20gdGhlIHVzZSBvZiB0aGlzIHNvZnR3YXJlLlxuICAvL1xuICAvLyBQZXJtaXNzaW9uIGlzIGdyYW50ZWQgdG8gYW55b25lIHRvIHVzZSB0aGlzIHNvZnR3YXJlIGZvciBhbnkgcHVycG9zZSxcbiAgLy8gaW5jbHVkaW5nIGNvbW1lcmNpYWwgYXBwbGljYXRpb25zLCBhbmQgdG8gYWx0ZXIgaXQgYW5kIHJlZGlzdHJpYnV0ZSBpdFxuICAvLyBmcmVlbHksIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyByZXN0cmljdGlvbnM6XG4gIC8vXG4gIC8vIDEuIFRoZSBvcmlnaW4gb2YgdGhpcyBzb2Z0d2FyZSBtdXN0IG5vdCBiZSBtaXNyZXByZXNlbnRlZDsgeW91IG11c3Qgbm90XG4gIC8vICAgY2xhaW0gdGhhdCB5b3Ugd3JvdGUgdGhlIG9yaWdpbmFsIHNvZnR3YXJlLiBJZiB5b3UgdXNlIHRoaXMgc29mdHdhcmVcbiAgLy8gICBpbiBhIHByb2R1Y3QsIGFuIGFja25vd2xlZGdtZW50IGluIHRoZSBwcm9kdWN0IGRvY3VtZW50YXRpb24gd291bGQgYmVcbiAgLy8gICBhcHByZWNpYXRlZCBidXQgaXMgbm90IHJlcXVpcmVkLlxuICAvLyAyLiBBbHRlcmVkIHNvdXJjZSB2ZXJzaW9ucyBtdXN0IGJlIHBsYWlubHkgbWFya2VkIGFzIHN1Y2gsIGFuZCBtdXN0IG5vdCBiZVxuICAvLyAgIG1pc3JlcHJlc2VudGVkIGFzIGJlaW5nIHRoZSBvcmlnaW5hbCBzb2Z0d2FyZS5cbiAgLy8gMy4gVGhpcyBub3RpY2UgbWF5IG5vdCBiZSByZW1vdmVkIG9yIGFsdGVyZWQgZnJvbSBhbnkgc291cmNlIGRpc3RyaWJ1dGlvbi5cblxuXG5cblxuXG5cbiAgY29uc3QgQ09ERVMgPSAwO1xuICBjb25zdCBMRU5TID0gMTtcbiAgY29uc3QgRElTVFMgPSAyO1xuXG4gIC8qIFB1YmxpYyBjb25zdGFudHMgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSovXG4gIC8qID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSovXG5cbiAgY29uc3Qge1xuICAgIFpfRklOSVNIOiBaX0ZJTklTSCQxLCBaX0JMT0NLLCBaX1RSRUVTLFxuICAgIFpfT0s6IFpfT0skMSwgWl9TVFJFQU1fRU5EOiBaX1NUUkVBTV9FTkQkMSwgWl9ORUVEX0RJQ1Q6IFpfTkVFRF9ESUNUJDEsIFpfU1RSRUFNX0VSUk9SOiBaX1NUUkVBTV9FUlJPUiQxLCBaX0RBVEFfRVJST1I6IFpfREFUQV9FUlJPUiQxLCBaX01FTV9FUlJPUjogWl9NRU1fRVJST1IkMSwgWl9CVUZfRVJST1IsXG4gICAgWl9ERUZMQVRFRFxuICB9ID0gY29uc3RhbnRzJDE7XG5cblxuICAvKiBTVEFURVMgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0qL1xuICAvKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0qL1xuXG5cbiAgY29uc3QgICAgSEVBRCA9IDE7ICAgICAgIC8qIGk6IHdhaXRpbmcgZm9yIG1hZ2ljIGhlYWRlciAqL1xuICBjb25zdCAgICBGTEFHUyA9IDI7ICAgICAgLyogaTogd2FpdGluZyBmb3IgbWV0aG9kIGFuZCBmbGFncyAoZ3ppcCkgKi9cbiAgY29uc3QgICAgVElNRSA9IDM7ICAgICAgIC8qIGk6IHdhaXRpbmcgZm9yIG1vZGlmaWNhdGlvbiB0aW1lIChnemlwKSAqL1xuICBjb25zdCAgICBPUyA9IDQ7ICAgICAgICAgLyogaTogd2FpdGluZyBmb3IgZXh0cmEgZmxhZ3MgYW5kIG9wZXJhdGluZyBzeXN0ZW0gKGd6aXApICovXG4gIGNvbnN0ICAgIEVYTEVOID0gNTsgICAgICAvKiBpOiB3YWl0aW5nIGZvciBleHRyYSBsZW5ndGggKGd6aXApICovXG4gIGNvbnN0ICAgIEVYVFJBID0gNjsgICAgICAvKiBpOiB3YWl0aW5nIGZvciBleHRyYSBieXRlcyAoZ3ppcCkgKi9cbiAgY29uc3QgICAgTkFNRSA9IDc7ICAgICAgIC8qIGk6IHdhaXRpbmcgZm9yIGVuZCBvZiBmaWxlIG5hbWUgKGd6aXApICovXG4gIGNvbnN0ICAgIENPTU1FTlQgPSA4OyAgICAvKiBpOiB3YWl0aW5nIGZvciBlbmQgb2YgY29tbWVudCAoZ3ppcCkgKi9cbiAgY29uc3QgICAgSENSQyA9IDk7ICAgICAgIC8qIGk6IHdhaXRpbmcgZm9yIGhlYWRlciBjcmMgKGd6aXApICovXG4gIGNvbnN0ICAgIERJQ1RJRCA9IDEwOyAgICAvKiBpOiB3YWl0aW5nIGZvciBkaWN0aW9uYXJ5IGNoZWNrIHZhbHVlICovXG4gIGNvbnN0ICAgIERJQ1QgPSAxMTsgICAgICAvKiB3YWl0aW5nIGZvciBpbmZsYXRlU2V0RGljdGlvbmFyeSgpIGNhbGwgKi9cbiAgY29uc3QgICAgICAgIFRZUEUgPSAxMjsgICAgICAvKiBpOiB3YWl0aW5nIGZvciB0eXBlIGJpdHMsIGluY2x1ZGluZyBsYXN0LWZsYWcgYml0ICovXG4gIGNvbnN0ICAgICAgICBUWVBFRE8gPSAxMzsgICAgLyogaTogc2FtZSwgYnV0IHNraXAgY2hlY2sgdG8gZXhpdCBpbmZsYXRlIG9uIG5ldyBibG9jayAqL1xuICBjb25zdCAgICAgICAgU1RPUkVEID0gMTQ7ICAgIC8qIGk6IHdhaXRpbmcgZm9yIHN0b3JlZCBzaXplIChsZW5ndGggYW5kIGNvbXBsZW1lbnQpICovXG4gIGNvbnN0ICAgICAgICBDT1BZXyA9IDE1OyAgICAgLyogaS9vOiBzYW1lIGFzIENPUFkgYmVsb3csIGJ1dCBvbmx5IGZpcnN0IHRpbWUgaW4gKi9cbiAgY29uc3QgICAgICAgIENPUFkgPSAxNjsgICAgICAvKiBpL286IHdhaXRpbmcgZm9yIGlucHV0IG9yIG91dHB1dCB0byBjb3B5IHN0b3JlZCBibG9jayAqL1xuICBjb25zdCAgICAgICAgVEFCTEUgPSAxNzsgICAgIC8qIGk6IHdhaXRpbmcgZm9yIGR5bmFtaWMgYmxvY2sgdGFibGUgbGVuZ3RocyAqL1xuICBjb25zdCAgICAgICAgTEVOTEVOUyA9IDE4OyAgIC8qIGk6IHdhaXRpbmcgZm9yIGNvZGUgbGVuZ3RoIGNvZGUgbGVuZ3RocyAqL1xuICBjb25zdCAgICAgICAgQ09ERUxFTlMgPSAxOTsgIC8qIGk6IHdhaXRpbmcgZm9yIGxlbmd0aC9saXQgYW5kIGRpc3RhbmNlIGNvZGUgbGVuZ3RocyAqL1xuICBjb25zdCAgICAgICAgICAgIExFTl8gPSAyMDsgICAgICAvKiBpOiBzYW1lIGFzIExFTiBiZWxvdywgYnV0IG9ubHkgZmlyc3QgdGltZSBpbiAqL1xuICBjb25zdCAgICAgICAgICAgIExFTiA9IDIxOyAgICAgICAvKiBpOiB3YWl0aW5nIGZvciBsZW5ndGgvbGl0L2VvYiBjb2RlICovXG4gIGNvbnN0ICAgICAgICAgICAgTEVORVhUID0gMjI7ICAgIC8qIGk6IHdhaXRpbmcgZm9yIGxlbmd0aCBleHRyYSBiaXRzICovXG4gIGNvbnN0ICAgICAgICAgICAgRElTVCA9IDIzOyAgICAgIC8qIGk6IHdhaXRpbmcgZm9yIGRpc3RhbmNlIGNvZGUgKi9cbiAgY29uc3QgICAgICAgICAgICBESVNURVhUID0gMjQ7ICAgLyogaTogd2FpdGluZyBmb3IgZGlzdGFuY2UgZXh0cmEgYml0cyAqL1xuICBjb25zdCAgICAgICAgICAgIE1BVENIID0gMjU7ICAgICAvKiBvOiB3YWl0aW5nIGZvciBvdXRwdXQgc3BhY2UgdG8gY29weSBzdHJpbmcgKi9cbiAgY29uc3QgICAgICAgICAgICBMSVQgPSAyNjsgICAgICAgLyogbzogd2FpdGluZyBmb3Igb3V0cHV0IHNwYWNlIHRvIHdyaXRlIGxpdGVyYWwgKi9cbiAgY29uc3QgICAgQ0hFQ0sgPSAyNzsgICAgIC8qIGk6IHdhaXRpbmcgZm9yIDMyLWJpdCBjaGVjayB2YWx1ZSAqL1xuICBjb25zdCAgICBMRU5HVEggPSAyODsgICAgLyogaTogd2FpdGluZyBmb3IgMzItYml0IGxlbmd0aCAoZ3ppcCkgKi9cbiAgY29uc3QgICAgRE9ORSA9IDI5OyAgICAgIC8qIGZpbmlzaGVkIGNoZWNrLCBkb25lIC0tIHJlbWFpbiBoZXJlIHVudGlsIHJlc2V0ICovXG4gIGNvbnN0ICAgIEJBRCA9IDMwOyAgICAgICAvKiBnb3QgYSBkYXRhIGVycm9yIC0tIHJlbWFpbiBoZXJlIHVudGlsIHJlc2V0ICovXG4gIGNvbnN0ICAgIE1FTSA9IDMxOyAgICAgICAvKiBnb3QgYW4gaW5mbGF0ZSgpIG1lbW9yeSBlcnJvciAtLSByZW1haW4gaGVyZSB1bnRpbCByZXNldCAqL1xuICBjb25zdCAgICBTWU5DID0gMzI7ICAgICAgLyogbG9va2luZyBmb3Igc3luY2hyb25pemF0aW9uIGJ5dGVzIHRvIHJlc3RhcnQgaW5mbGF0ZSgpICovXG5cbiAgLyogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09Ki9cblxuXG5cbiAgY29uc3QgRU5PVUdIX0xFTlMgPSA4NTI7XG4gIGNvbnN0IEVOT1VHSF9ESVNUUyA9IDU5MjtcbiAgLy9jb25zdCBFTk9VR0ggPSAgKEVOT1VHSF9MRU5TK0VOT1VHSF9ESVNUUyk7XG5cbiAgY29uc3QgTUFYX1dCSVRTID0gMTU7XG4gIC8qIDMySyBMWjc3IHdpbmRvdyAqL1xuICBjb25zdCBERUZfV0JJVFMgPSBNQVhfV0JJVFM7XG5cblxuICBjb25zdCB6c3dhcDMyID0gKHEpID0+IHtcblxuICAgIHJldHVybiAgKCgocSA+Pj4gMjQpICYgMHhmZikgK1xuICAgICAgICAgICAgKChxID4+PiA4KSAmIDB4ZmYwMCkgK1xuICAgICAgICAgICAgKChxICYgMHhmZjAwKSA8PCA4KSArXG4gICAgICAgICAgICAoKHEgJiAweGZmKSA8PCAyNCkpO1xuICB9O1xuXG5cbiAgZnVuY3Rpb24gSW5mbGF0ZVN0YXRlKCkge1xuICAgIHRoaXMubW9kZSA9IDA7ICAgICAgICAgICAgIC8qIGN1cnJlbnQgaW5mbGF0ZSBtb2RlICovXG4gICAgdGhpcy5sYXN0ID0gZmFsc2U7ICAgICAgICAgIC8qIHRydWUgaWYgcHJvY2Vzc2luZyBsYXN0IGJsb2NrICovXG4gICAgdGhpcy53cmFwID0gMDsgICAgICAgICAgICAgIC8qIGJpdCAwIHRydWUgZm9yIHpsaWIsIGJpdCAxIHRydWUgZm9yIGd6aXAgKi9cbiAgICB0aGlzLmhhdmVkaWN0ID0gZmFsc2U7ICAgICAgLyogdHJ1ZSBpZiBkaWN0aW9uYXJ5IHByb3ZpZGVkICovXG4gICAgdGhpcy5mbGFncyA9IDA7ICAgICAgICAgICAgIC8qIGd6aXAgaGVhZGVyIG1ldGhvZCBhbmQgZmxhZ3MgKDAgaWYgemxpYikgKi9cbiAgICB0aGlzLmRtYXggPSAwOyAgICAgICAgICAgICAgLyogemxpYiBoZWFkZXIgbWF4IGRpc3RhbmNlIChJTkZMQVRFX1NUUklDVCkgKi9cbiAgICB0aGlzLmNoZWNrID0gMDsgICAgICAgICAgICAgLyogcHJvdGVjdGVkIGNvcHkgb2YgY2hlY2sgdmFsdWUgKi9cbiAgICB0aGlzLnRvdGFsID0gMDsgICAgICAgICAgICAgLyogcHJvdGVjdGVkIGNvcHkgb2Ygb3V0cHV0IGNvdW50ICovXG4gICAgLy8gVE9ETzogbWF5IGJlIHt9XG4gICAgdGhpcy5oZWFkID0gbnVsbDsgICAgICAgICAgIC8qIHdoZXJlIHRvIHNhdmUgZ3ppcCBoZWFkZXIgaW5mb3JtYXRpb24gKi9cblxuICAgIC8qIHNsaWRpbmcgd2luZG93ICovXG4gICAgdGhpcy53Yml0cyA9IDA7ICAgICAgICAgICAgIC8qIGxvZyBiYXNlIDIgb2YgcmVxdWVzdGVkIHdpbmRvdyBzaXplICovXG4gICAgdGhpcy53c2l6ZSA9IDA7ICAgICAgICAgICAgIC8qIHdpbmRvdyBzaXplIG9yIHplcm8gaWYgbm90IHVzaW5nIHdpbmRvdyAqL1xuICAgIHRoaXMud2hhdmUgPSAwOyAgICAgICAgICAgICAvKiB2YWxpZCBieXRlcyBpbiB0aGUgd2luZG93ICovXG4gICAgdGhpcy53bmV4dCA9IDA7ICAgICAgICAgICAgIC8qIHdpbmRvdyB3cml0ZSBpbmRleCAqL1xuICAgIHRoaXMud2luZG93ID0gbnVsbDsgICAgICAgICAvKiBhbGxvY2F0ZWQgc2xpZGluZyB3aW5kb3csIGlmIG5lZWRlZCAqL1xuXG4gICAgLyogYml0IGFjY3VtdWxhdG9yICovXG4gICAgdGhpcy5ob2xkID0gMDsgICAgICAgICAgICAgIC8qIGlucHV0IGJpdCBhY2N1bXVsYXRvciAqL1xuICAgIHRoaXMuYml0cyA9IDA7ICAgICAgICAgICAgICAvKiBudW1iZXIgb2YgYml0cyBpbiBcImluXCIgKi9cblxuICAgIC8qIGZvciBzdHJpbmcgYW5kIHN0b3JlZCBibG9jayBjb3B5aW5nICovXG4gICAgdGhpcy5sZW5ndGggPSAwOyAgICAgICAgICAgIC8qIGxpdGVyYWwgb3IgbGVuZ3RoIG9mIGRhdGEgdG8gY29weSAqL1xuICAgIHRoaXMub2Zmc2V0ID0gMDsgICAgICAgICAgICAvKiBkaXN0YW5jZSBiYWNrIHRvIGNvcHkgc3RyaW5nIGZyb20gKi9cblxuICAgIC8qIGZvciB0YWJsZSBhbmQgY29kZSBkZWNvZGluZyAqL1xuICAgIHRoaXMuZXh0cmEgPSAwOyAgICAgICAgICAgICAvKiBleHRyYSBiaXRzIG5lZWRlZCAqL1xuXG4gICAgLyogZml4ZWQgYW5kIGR5bmFtaWMgY29kZSB0YWJsZXMgKi9cbiAgICB0aGlzLmxlbmNvZGUgPSBudWxsOyAgICAgICAgICAvKiBzdGFydGluZyB0YWJsZSBmb3IgbGVuZ3RoL2xpdGVyYWwgY29kZXMgKi9cbiAgICB0aGlzLmRpc3Rjb2RlID0gbnVsbDsgICAgICAgICAvKiBzdGFydGluZyB0YWJsZSBmb3IgZGlzdGFuY2UgY29kZXMgKi9cbiAgICB0aGlzLmxlbmJpdHMgPSAwOyAgICAgICAgICAgLyogaW5kZXggYml0cyBmb3IgbGVuY29kZSAqL1xuICAgIHRoaXMuZGlzdGJpdHMgPSAwOyAgICAgICAgICAvKiBpbmRleCBiaXRzIGZvciBkaXN0Y29kZSAqL1xuXG4gICAgLyogZHluYW1pYyB0YWJsZSBidWlsZGluZyAqL1xuICAgIHRoaXMubmNvZGUgPSAwOyAgICAgICAgICAgICAvKiBudW1iZXIgb2YgY29kZSBsZW5ndGggY29kZSBsZW5ndGhzICovXG4gICAgdGhpcy5ubGVuID0gMDsgICAgICAgICAgICAgIC8qIG51bWJlciBvZiBsZW5ndGggY29kZSBsZW5ndGhzICovXG4gICAgdGhpcy5uZGlzdCA9IDA7ICAgICAgICAgICAgIC8qIG51bWJlciBvZiBkaXN0YW5jZSBjb2RlIGxlbmd0aHMgKi9cbiAgICB0aGlzLmhhdmUgPSAwOyAgICAgICAgICAgICAgLyogbnVtYmVyIG9mIGNvZGUgbGVuZ3RocyBpbiBsZW5zW10gKi9cbiAgICB0aGlzLm5leHQgPSBudWxsOyAgICAgICAgICAgICAgLyogbmV4dCBhdmFpbGFibGUgc3BhY2UgaW4gY29kZXNbXSAqL1xuXG4gICAgdGhpcy5sZW5zID0gbmV3IFVpbnQxNkFycmF5KDMyMCk7IC8qIHRlbXBvcmFyeSBzdG9yYWdlIGZvciBjb2RlIGxlbmd0aHMgKi9cbiAgICB0aGlzLndvcmsgPSBuZXcgVWludDE2QXJyYXkoMjg4KTsgLyogd29yayBhcmVhIGZvciBjb2RlIHRhYmxlIGJ1aWxkaW5nICovXG5cbiAgICAvKlxuICAgICBiZWNhdXNlIHdlIGRvbid0IGhhdmUgcG9pbnRlcnMgaW4ganMsIHdlIHVzZSBsZW5jb2RlIGFuZCBkaXN0Y29kZSBkaXJlY3RseVxuICAgICBhcyBidWZmZXJzIHNvIHdlIGRvbid0IG5lZWQgY29kZXNcbiAgICAqL1xuICAgIC8vdGhpcy5jb2RlcyA9IG5ldyBJbnQzMkFycmF5KEVOT1VHSCk7ICAgICAgIC8qIHNwYWNlIGZvciBjb2RlIHRhYmxlcyAqL1xuICAgIHRoaXMubGVuZHluID0gbnVsbDsgICAgICAgICAgICAgIC8qIGR5bmFtaWMgdGFibGUgZm9yIGxlbmd0aC9saXRlcmFsIGNvZGVzIChKUyBzcGVjaWZpYykgKi9cbiAgICB0aGlzLmRpc3RkeW4gPSBudWxsOyAgICAgICAgICAgICAvKiBkeW5hbWljIHRhYmxlIGZvciBkaXN0YW5jZSBjb2RlcyAoSlMgc3BlY2lmaWMpICovXG4gICAgdGhpcy5zYW5lID0gMDsgICAgICAgICAgICAgICAgICAgLyogaWYgZmFsc2UsIGFsbG93IGludmFsaWQgZGlzdGFuY2UgdG9vIGZhciAqL1xuICAgIHRoaXMuYmFjayA9IDA7ICAgICAgICAgICAgICAgICAgIC8qIGJpdHMgYmFjayBvZiBsYXN0IHVucHJvY2Vzc2VkIGxlbmd0aC9saXQgKi9cbiAgICB0aGlzLndhcyA9IDA7ICAgICAgICAgICAgICAgICAgICAvKiBpbml0aWFsIGxlbmd0aCBvZiBtYXRjaCAqL1xuICB9XG5cblxuICBjb25zdCBpbmZsYXRlUmVzZXRLZWVwID0gKHN0cm0pID0+IHtcblxuICAgIGlmICghc3RybSB8fCAhc3RybS5zdGF0ZSkgeyByZXR1cm4gWl9TVFJFQU1fRVJST1IkMTsgfVxuICAgIGNvbnN0IHN0YXRlID0gc3RybS5zdGF0ZTtcbiAgICBzdHJtLnRvdGFsX2luID0gc3RybS50b3RhbF9vdXQgPSBzdGF0ZS50b3RhbCA9IDA7XG4gICAgc3RybS5tc2cgPSAnJzsgLypaX05VTEwqL1xuICAgIGlmIChzdGF0ZS53cmFwKSB7ICAgICAgIC8qIHRvIHN1cHBvcnQgaWxsLWNvbmNlaXZlZCBKYXZhIHRlc3Qgc3VpdGUgKi9cbiAgICAgIHN0cm0uYWRsZXIgPSBzdGF0ZS53cmFwICYgMTtcbiAgICB9XG4gICAgc3RhdGUubW9kZSA9IEhFQUQ7XG4gICAgc3RhdGUubGFzdCA9IDA7XG4gICAgc3RhdGUuaGF2ZWRpY3QgPSAwO1xuICAgIHN0YXRlLmRtYXggPSAzMjc2ODtcbiAgICBzdGF0ZS5oZWFkID0gbnVsbC8qWl9OVUxMKi87XG4gICAgc3RhdGUuaG9sZCA9IDA7XG4gICAgc3RhdGUuYml0cyA9IDA7XG4gICAgLy9zdGF0ZS5sZW5jb2RlID0gc3RhdGUuZGlzdGNvZGUgPSBzdGF0ZS5uZXh0ID0gc3RhdGUuY29kZXM7XG4gICAgc3RhdGUubGVuY29kZSA9IHN0YXRlLmxlbmR5biA9IG5ldyBJbnQzMkFycmF5KEVOT1VHSF9MRU5TKTtcbiAgICBzdGF0ZS5kaXN0Y29kZSA9IHN0YXRlLmRpc3RkeW4gPSBuZXcgSW50MzJBcnJheShFTk9VR0hfRElTVFMpO1xuXG4gICAgc3RhdGUuc2FuZSA9IDE7XG4gICAgc3RhdGUuYmFjayA9IC0xO1xuICAgIC8vVHJhY2V2KChzdGRlcnIsIFwiaW5mbGF0ZTogcmVzZXRcXG5cIikpO1xuICAgIHJldHVybiBaX09LJDE7XG4gIH07XG5cblxuICBjb25zdCBpbmZsYXRlUmVzZXQgPSAoc3RybSkgPT4ge1xuXG4gICAgaWYgKCFzdHJtIHx8ICFzdHJtLnN0YXRlKSB7IHJldHVybiBaX1NUUkVBTV9FUlJPUiQxOyB9XG4gICAgY29uc3Qgc3RhdGUgPSBzdHJtLnN0YXRlO1xuICAgIHN0YXRlLndzaXplID0gMDtcbiAgICBzdGF0ZS53aGF2ZSA9IDA7XG4gICAgc3RhdGUud25leHQgPSAwO1xuICAgIHJldHVybiBpbmZsYXRlUmVzZXRLZWVwKHN0cm0pO1xuXG4gIH07XG5cblxuICBjb25zdCBpbmZsYXRlUmVzZXQyID0gKHN0cm0sIHdpbmRvd0JpdHMpID0+IHtcbiAgICBsZXQgd3JhcDtcblxuICAgIC8qIGdldCB0aGUgc3RhdGUgKi9cbiAgICBpZiAoIXN0cm0gfHwgIXN0cm0uc3RhdGUpIHsgcmV0dXJuIFpfU1RSRUFNX0VSUk9SJDE7IH1cbiAgICBjb25zdCBzdGF0ZSA9IHN0cm0uc3RhdGU7XG5cbiAgICAvKiBleHRyYWN0IHdyYXAgcmVxdWVzdCBmcm9tIHdpbmRvd0JpdHMgcGFyYW1ldGVyICovXG4gICAgaWYgKHdpbmRvd0JpdHMgPCAwKSB7XG4gICAgICB3cmFwID0gMDtcbiAgICAgIHdpbmRvd0JpdHMgPSAtd2luZG93Qml0cztcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICB3cmFwID0gKHdpbmRvd0JpdHMgPj4gNCkgKyAxO1xuICAgICAgaWYgKHdpbmRvd0JpdHMgPCA0OCkge1xuICAgICAgICB3aW5kb3dCaXRzICY9IDE1O1xuICAgICAgfVxuICAgIH1cblxuICAgIC8qIHNldCBudW1iZXIgb2Ygd2luZG93IGJpdHMsIGZyZWUgd2luZG93IGlmIGRpZmZlcmVudCAqL1xuICAgIGlmICh3aW5kb3dCaXRzICYmICh3aW5kb3dCaXRzIDwgOCB8fCB3aW5kb3dCaXRzID4gMTUpKSB7XG4gICAgICByZXR1cm4gWl9TVFJFQU1fRVJST1IkMTtcbiAgICB9XG4gICAgaWYgKHN0YXRlLndpbmRvdyAhPT0gbnVsbCAmJiBzdGF0ZS53Yml0cyAhPT0gd2luZG93Qml0cykge1xuICAgICAgc3RhdGUud2luZG93ID0gbnVsbDtcbiAgICB9XG5cbiAgICAvKiB1cGRhdGUgc3RhdGUgYW5kIHJlc2V0IHRoZSByZXN0IG9mIGl0ICovXG4gICAgc3RhdGUud3JhcCA9IHdyYXA7XG4gICAgc3RhdGUud2JpdHMgPSB3aW5kb3dCaXRzO1xuICAgIHJldHVybiBpbmZsYXRlUmVzZXQoc3RybSk7XG4gIH07XG5cblxuICBjb25zdCBpbmZsYXRlSW5pdDIgPSAoc3RybSwgd2luZG93Qml0cykgPT4ge1xuXG4gICAgaWYgKCFzdHJtKSB7IHJldHVybiBaX1NUUkVBTV9FUlJPUiQxOyB9XG4gICAgLy9zdHJtLm1zZyA9IFpfTlVMTDsgICAgICAgICAgICAgICAgIC8qIGluIGNhc2Ugd2UgcmV0dXJuIGFuIGVycm9yICovXG5cbiAgICBjb25zdCBzdGF0ZSA9IG5ldyBJbmZsYXRlU3RhdGUoKTtcblxuICAgIC8vaWYgKHN0YXRlID09PSBaX05VTEwpIHJldHVybiBaX01FTV9FUlJPUjtcbiAgICAvL1RyYWNldigoc3RkZXJyLCBcImluZmxhdGU6IGFsbG9jYXRlZFxcblwiKSk7XG4gICAgc3RybS5zdGF0ZSA9IHN0YXRlO1xuICAgIHN0YXRlLndpbmRvdyA9IG51bGwvKlpfTlVMTCovO1xuICAgIGNvbnN0IHJldCA9IGluZmxhdGVSZXNldDIoc3RybSwgd2luZG93Qml0cyk7XG4gICAgaWYgKHJldCAhPT0gWl9PSyQxKSB7XG4gICAgICBzdHJtLnN0YXRlID0gbnVsbC8qWl9OVUxMKi87XG4gICAgfVxuICAgIHJldHVybiByZXQ7XG4gIH07XG5cblxuICBjb25zdCBpbmZsYXRlSW5pdCA9IChzdHJtKSA9PiB7XG5cbiAgICByZXR1cm4gaW5mbGF0ZUluaXQyKHN0cm0sIERFRl9XQklUUyk7XG4gIH07XG5cblxuICAvKlxuICAgUmV0dXJuIHN0YXRlIHdpdGggbGVuZ3RoIGFuZCBkaXN0YW5jZSBkZWNvZGluZyB0YWJsZXMgYW5kIGluZGV4IHNpemVzIHNldCB0b1xuICAgZml4ZWQgY29kZSBkZWNvZGluZy4gIE5vcm1hbGx5IHRoaXMgcmV0dXJucyBmaXhlZCB0YWJsZXMgZnJvbSBpbmZmaXhlZC5oLlxuICAgSWYgQlVJTERGSVhFRCBpcyBkZWZpbmVkLCB0aGVuIGluc3RlYWQgdGhpcyByb3V0aW5lIGJ1aWxkcyB0aGUgdGFibGVzIHRoZVxuICAgZmlyc3QgdGltZSBpdCdzIGNhbGxlZCwgYW5kIHJldHVybnMgdGhvc2UgdGFibGVzIHRoZSBmaXJzdCB0aW1lIGFuZFxuICAgdGhlcmVhZnRlci4gIFRoaXMgcmVkdWNlcyB0aGUgc2l6ZSBvZiB0aGUgY29kZSBieSBhYm91dCAySyBieXRlcywgaW5cbiAgIGV4Y2hhbmdlIGZvciBhIGxpdHRsZSBleGVjdXRpb24gdGltZS4gIEhvd2V2ZXIsIEJVSUxERklYRUQgc2hvdWxkIG5vdCBiZVxuICAgdXNlZCBmb3IgdGhyZWFkZWQgYXBwbGljYXRpb25zLCBzaW5jZSB0aGUgcmV3cml0aW5nIG9mIHRoZSB0YWJsZXMgYW5kIHZpcmdpblxuICAgbWF5IG5vdCBiZSB0aHJlYWQtc2FmZS5cbiAgICovXG4gIGxldCB2aXJnaW4gPSB0cnVlO1xuXG4gIGxldCBsZW5maXgsIGRpc3RmaXg7IC8vIFdlIGhhdmUgbm8gcG9pbnRlcnMgaW4gSlMsIHNvIGtlZXAgdGFibGVzIHNlcGFyYXRlXG5cblxuICBjb25zdCBmaXhlZHRhYmxlcyA9IChzdGF0ZSkgPT4ge1xuXG4gICAgLyogYnVpbGQgZml4ZWQgaHVmZm1hbiB0YWJsZXMgaWYgZmlyc3QgY2FsbCAobWF5IG5vdCBiZSB0aHJlYWQgc2FmZSkgKi9cbiAgICBpZiAodmlyZ2luKSB7XG4gICAgICBsZW5maXggPSBuZXcgSW50MzJBcnJheSg1MTIpO1xuICAgICAgZGlzdGZpeCA9IG5ldyBJbnQzMkFycmF5KDMyKTtcblxuICAgICAgLyogbGl0ZXJhbC9sZW5ndGggdGFibGUgKi9cbiAgICAgIGxldCBzeW0gPSAwO1xuICAgICAgd2hpbGUgKHN5bSA8IDE0NCkgeyBzdGF0ZS5sZW5zW3N5bSsrXSA9IDg7IH1cbiAgICAgIHdoaWxlIChzeW0gPCAyNTYpIHsgc3RhdGUubGVuc1tzeW0rK10gPSA5OyB9XG4gICAgICB3aGlsZSAoc3ltIDwgMjgwKSB7IHN0YXRlLmxlbnNbc3ltKytdID0gNzsgfVxuICAgICAgd2hpbGUgKHN5bSA8IDI4OCkgeyBzdGF0ZS5sZW5zW3N5bSsrXSA9IDg7IH1cblxuICAgICAgaW5mdHJlZXMoTEVOUywgIHN0YXRlLmxlbnMsIDAsIDI4OCwgbGVuZml4LCAgIDAsIHN0YXRlLndvcmssIHsgYml0czogOSB9KTtcblxuICAgICAgLyogZGlzdGFuY2UgdGFibGUgKi9cbiAgICAgIHN5bSA9IDA7XG4gICAgICB3aGlsZSAoc3ltIDwgMzIpIHsgc3RhdGUubGVuc1tzeW0rK10gPSA1OyB9XG5cbiAgICAgIGluZnRyZWVzKERJU1RTLCBzdGF0ZS5sZW5zLCAwLCAzMiwgICBkaXN0Zml4LCAwLCBzdGF0ZS53b3JrLCB7IGJpdHM6IDUgfSk7XG5cbiAgICAgIC8qIGRvIHRoaXMganVzdCBvbmNlICovXG4gICAgICB2aXJnaW4gPSBmYWxzZTtcbiAgICB9XG5cbiAgICBzdGF0ZS5sZW5jb2RlID0gbGVuZml4O1xuICAgIHN0YXRlLmxlbmJpdHMgPSA5O1xuICAgIHN0YXRlLmRpc3Rjb2RlID0gZGlzdGZpeDtcbiAgICBzdGF0ZS5kaXN0Yml0cyA9IDU7XG4gIH07XG5cblxuICAvKlxuICAgVXBkYXRlIHRoZSB3aW5kb3cgd2l0aCB0aGUgbGFzdCB3c2l6ZSAobm9ybWFsbHkgMzJLKSBieXRlcyB3cml0dGVuIGJlZm9yZVxuICAgcmV0dXJuaW5nLiAgSWYgd2luZG93IGRvZXMgbm90IGV4aXN0IHlldCwgY3JlYXRlIGl0LiAgVGhpcyBpcyBvbmx5IGNhbGxlZFxuICAgd2hlbiBhIHdpbmRvdyBpcyBhbHJlYWR5IGluIHVzZSwgb3Igd2hlbiBvdXRwdXQgaGFzIGJlZW4gd3JpdHRlbiBkdXJpbmcgdGhpc1xuICAgaW5mbGF0ZSBjYWxsLCBidXQgdGhlIGVuZCBvZiB0aGUgZGVmbGF0ZSBzdHJlYW0gaGFzIG5vdCBiZWVuIHJlYWNoZWQgeWV0LlxuICAgSXQgaXMgYWxzbyBjYWxsZWQgdG8gY3JlYXRlIGEgd2luZG93IGZvciBkaWN0aW9uYXJ5IGRhdGEgd2hlbiBhIGRpY3Rpb25hcnlcbiAgIGlzIGxvYWRlZC5cblxuICAgUHJvdmlkaW5nIG91dHB1dCBidWZmZXJzIGxhcmdlciB0aGFuIDMySyB0byBpbmZsYXRlKCkgc2hvdWxkIHByb3ZpZGUgYSBzcGVlZFxuICAgYWR2YW50YWdlLCBzaW5jZSBvbmx5IHRoZSBsYXN0IDMySyBvZiBvdXRwdXQgaXMgY29waWVkIHRvIHRoZSBzbGlkaW5nIHdpbmRvd1xuICAgdXBvbiByZXR1cm4gZnJvbSBpbmZsYXRlKCksIGFuZCBzaW5jZSBhbGwgZGlzdGFuY2VzIGFmdGVyIHRoZSBmaXJzdCAzMksgb2ZcbiAgIG91dHB1dCB3aWxsIGZhbGwgaW4gdGhlIG91dHB1dCBkYXRhLCBtYWtpbmcgbWF0Y2ggY29waWVzIHNpbXBsZXIgYW5kIGZhc3Rlci5cbiAgIFRoZSBhZHZhbnRhZ2UgbWF5IGJlIGRlcGVuZGVudCBvbiB0aGUgc2l6ZSBvZiB0aGUgcHJvY2Vzc29yJ3MgZGF0YSBjYWNoZXMuXG4gICAqL1xuICBjb25zdCB1cGRhdGV3aW5kb3cgPSAoc3RybSwgc3JjLCBlbmQsIGNvcHkpID0+IHtcblxuICAgIGxldCBkaXN0O1xuICAgIGNvbnN0IHN0YXRlID0gc3RybS5zdGF0ZTtcblxuICAgIC8qIGlmIGl0IGhhc24ndCBiZWVuIGRvbmUgYWxyZWFkeSwgYWxsb2NhdGUgc3BhY2UgZm9yIHRoZSB3aW5kb3cgKi9cbiAgICBpZiAoc3RhdGUud2luZG93ID09PSBudWxsKSB7XG4gICAgICBzdGF0ZS53c2l6ZSA9IDEgPDwgc3RhdGUud2JpdHM7XG4gICAgICBzdGF0ZS53bmV4dCA9IDA7XG4gICAgICBzdGF0ZS53aGF2ZSA9IDA7XG5cbiAgICAgIHN0YXRlLndpbmRvdyA9IG5ldyBVaW50OEFycmF5KHN0YXRlLndzaXplKTtcbiAgICB9XG5cbiAgICAvKiBjb3B5IHN0YXRlLT53c2l6ZSBvciBsZXNzIG91dHB1dCBieXRlcyBpbnRvIHRoZSBjaXJjdWxhciB3aW5kb3cgKi9cbiAgICBpZiAoY29weSA+PSBzdGF0ZS53c2l6ZSkge1xuICAgICAgc3RhdGUud2luZG93LnNldChzcmMuc3ViYXJyYXkoZW5kIC0gc3RhdGUud3NpemUsIGVuZCksIDApO1xuICAgICAgc3RhdGUud25leHQgPSAwO1xuICAgICAgc3RhdGUud2hhdmUgPSBzdGF0ZS53c2l6ZTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICBkaXN0ID0gc3RhdGUud3NpemUgLSBzdGF0ZS53bmV4dDtcbiAgICAgIGlmIChkaXN0ID4gY29weSkge1xuICAgICAgICBkaXN0ID0gY29weTtcbiAgICAgIH1cbiAgICAgIC8vem1lbWNweShzdGF0ZS0+d2luZG93ICsgc3RhdGUtPnduZXh0LCBlbmQgLSBjb3B5LCBkaXN0KTtcbiAgICAgIHN0YXRlLndpbmRvdy5zZXQoc3JjLnN1YmFycmF5KGVuZCAtIGNvcHksIGVuZCAtIGNvcHkgKyBkaXN0KSwgc3RhdGUud25leHQpO1xuICAgICAgY29weSAtPSBkaXN0O1xuICAgICAgaWYgKGNvcHkpIHtcbiAgICAgICAgLy96bWVtY3B5KHN0YXRlLT53aW5kb3csIGVuZCAtIGNvcHksIGNvcHkpO1xuICAgICAgICBzdGF0ZS53aW5kb3cuc2V0KHNyYy5zdWJhcnJheShlbmQgLSBjb3B5LCBlbmQpLCAwKTtcbiAgICAgICAgc3RhdGUud25leHQgPSBjb3B5O1xuICAgICAgICBzdGF0ZS53aGF2ZSA9IHN0YXRlLndzaXplO1xuICAgICAgfVxuICAgICAgZWxzZSB7XG4gICAgICAgIHN0YXRlLnduZXh0ICs9IGRpc3Q7XG4gICAgICAgIGlmIChzdGF0ZS53bmV4dCA9PT0gc3RhdGUud3NpemUpIHsgc3RhdGUud25leHQgPSAwOyB9XG4gICAgICAgIGlmIChzdGF0ZS53aGF2ZSA8IHN0YXRlLndzaXplKSB7IHN0YXRlLndoYXZlICs9IGRpc3Q7IH1cbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIDA7XG4gIH07XG5cblxuICBjb25zdCBpbmZsYXRlJDEgPSAoc3RybSwgZmx1c2gpID0+IHtcblxuICAgIGxldCBzdGF0ZTtcbiAgICBsZXQgaW5wdXQsIG91dHB1dDsgICAgICAgICAgLy8gaW5wdXQvb3V0cHV0IGJ1ZmZlcnNcbiAgICBsZXQgbmV4dDsgICAgICAgICAgICAgICAgICAgLyogbmV4dCBpbnB1dCBJTkRFWCAqL1xuICAgIGxldCBwdXQ7ICAgICAgICAgICAgICAgICAgICAvKiBuZXh0IG91dHB1dCBJTkRFWCAqL1xuICAgIGxldCBoYXZlLCBsZWZ0OyAgICAgICAgICAgICAvKiBhdmFpbGFibGUgaW5wdXQgYW5kIG91dHB1dCAqL1xuICAgIGxldCBob2xkOyAgICAgICAgICAgICAgICAgICAvKiBiaXQgYnVmZmVyICovXG4gICAgbGV0IGJpdHM7ICAgICAgICAgICAgICAgICAgIC8qIGJpdHMgaW4gYml0IGJ1ZmZlciAqL1xuICAgIGxldCBfaW4sIF9vdXQ7ICAgICAgICAgICAgICAvKiBzYXZlIHN0YXJ0aW5nIGF2YWlsYWJsZSBpbnB1dCBhbmQgb3V0cHV0ICovXG4gICAgbGV0IGNvcHk7ICAgICAgICAgICAgICAgICAgIC8qIG51bWJlciBvZiBzdG9yZWQgb3IgbWF0Y2ggYnl0ZXMgdG8gY29weSAqL1xuICAgIGxldCBmcm9tOyAgICAgICAgICAgICAgICAgICAvKiB3aGVyZSB0byBjb3B5IG1hdGNoIGJ5dGVzIGZyb20gKi9cbiAgICBsZXQgZnJvbV9zb3VyY2U7XG4gICAgbGV0IGhlcmUgPSAwOyAgICAgICAgICAgICAgIC8qIGN1cnJlbnQgZGVjb2RpbmcgdGFibGUgZW50cnkgKi9cbiAgICBsZXQgaGVyZV9iaXRzLCBoZXJlX29wLCBoZXJlX3ZhbDsgLy8gcGFrZWQgXCJoZXJlXCIgZGVub3JtYWxpemVkIChKUyBzcGVjaWZpYylcbiAgICAvL2xldCBsYXN0OyAgICAgICAgICAgICAgICAgICAvKiBwYXJlbnQgdGFibGUgZW50cnkgKi9cbiAgICBsZXQgbGFzdF9iaXRzLCBsYXN0X29wLCBsYXN0X3ZhbDsgLy8gcGFrZWQgXCJsYXN0XCIgZGVub3JtYWxpemVkIChKUyBzcGVjaWZpYylcbiAgICBsZXQgbGVuOyAgICAgICAgICAgICAgICAgICAgLyogbGVuZ3RoIHRvIGNvcHkgZm9yIHJlcGVhdHMsIGJpdHMgdG8gZHJvcCAqL1xuICAgIGxldCByZXQ7ICAgICAgICAgICAgICAgICAgICAvKiByZXR1cm4gY29kZSAqL1xuICAgIGNvbnN0IGhidWYgPSBuZXcgVWludDhBcnJheSg0KTsgICAgLyogYnVmZmVyIGZvciBnemlwIGhlYWRlciBjcmMgY2FsY3VsYXRpb24gKi9cbiAgICBsZXQgb3B0cztcblxuICAgIGxldCBuOyAvLyB0ZW1wb3JhcnkgdmFyaWFibGUgZm9yIE5FRURfQklUU1xuXG4gICAgY29uc3Qgb3JkZXIgPSAvKiBwZXJtdXRhdGlvbiBvZiBjb2RlIGxlbmd0aHMgKi9cbiAgICAgIG5ldyBVaW50OEFycmF5KFsgMTYsIDE3LCAxOCwgMCwgOCwgNywgOSwgNiwgMTAsIDUsIDExLCA0LCAxMiwgMywgMTMsIDIsIDE0LCAxLCAxNSBdKTtcblxuXG4gICAgaWYgKCFzdHJtIHx8ICFzdHJtLnN0YXRlIHx8ICFzdHJtLm91dHB1dCB8fFxuICAgICAgICAoIXN0cm0uaW5wdXQgJiYgc3RybS5hdmFpbF9pbiAhPT0gMCkpIHtcbiAgICAgIHJldHVybiBaX1NUUkVBTV9FUlJPUiQxO1xuICAgIH1cblxuICAgIHN0YXRlID0gc3RybS5zdGF0ZTtcbiAgICBpZiAoc3RhdGUubW9kZSA9PT0gVFlQRSkgeyBzdGF0ZS5tb2RlID0gVFlQRURPOyB9ICAgIC8qIHNraXAgY2hlY2sgKi9cblxuXG4gICAgLy8tLS0gTE9BRCgpIC0tLVxuICAgIHB1dCA9IHN0cm0ubmV4dF9vdXQ7XG4gICAgb3V0cHV0ID0gc3RybS5vdXRwdXQ7XG4gICAgbGVmdCA9IHN0cm0uYXZhaWxfb3V0O1xuICAgIG5leHQgPSBzdHJtLm5leHRfaW47XG4gICAgaW5wdXQgPSBzdHJtLmlucHV0O1xuICAgIGhhdmUgPSBzdHJtLmF2YWlsX2luO1xuICAgIGhvbGQgPSBzdGF0ZS5ob2xkO1xuICAgIGJpdHMgPSBzdGF0ZS5iaXRzO1xuICAgIC8vLS0tXG5cbiAgICBfaW4gPSBoYXZlO1xuICAgIF9vdXQgPSBsZWZ0O1xuICAgIHJldCA9IFpfT0skMTtcblxuICAgIGluZl9sZWF2ZTogLy8gZ290byBlbXVsYXRpb25cbiAgICBmb3IgKDs7KSB7XG4gICAgICBzd2l0Y2ggKHN0YXRlLm1vZGUpIHtcbiAgICAgICAgY2FzZSBIRUFEOlxuICAgICAgICAgIGlmIChzdGF0ZS53cmFwID09PSAwKSB7XG4gICAgICAgICAgICBzdGF0ZS5tb2RlID0gVFlQRURPO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICAgIC8vPT09IE5FRURCSVRTKDE2KTtcbiAgICAgICAgICB3aGlsZSAoYml0cyA8IDE2KSB7XG4gICAgICAgICAgICBpZiAoaGF2ZSA9PT0gMCkgeyBicmVhayBpbmZfbGVhdmU7IH1cbiAgICAgICAgICAgIGhhdmUtLTtcbiAgICAgICAgICAgIGhvbGQgKz0gaW5wdXRbbmV4dCsrXSA8PCBiaXRzO1xuICAgICAgICAgICAgYml0cyArPSA4O1xuICAgICAgICAgIH1cbiAgICAgICAgICAvLz09PS8vXG4gICAgICAgICAgaWYgKChzdGF0ZS53cmFwICYgMikgJiYgaG9sZCA9PT0gMHg4YjFmKSB7ICAvKiBnemlwIGhlYWRlciAqL1xuICAgICAgICAgICAgc3RhdGUuY2hlY2sgPSAwLypjcmMzMigwTCwgWl9OVUxMLCAwKSovO1xuICAgICAgICAgICAgLy89PT0gQ1JDMihzdGF0ZS5jaGVjaywgaG9sZCk7XG4gICAgICAgICAgICBoYnVmWzBdID0gaG9sZCAmIDB4ZmY7XG4gICAgICAgICAgICBoYnVmWzFdID0gKGhvbGQgPj4+IDgpICYgMHhmZjtcbiAgICAgICAgICAgIHN0YXRlLmNoZWNrID0gY3JjMzJfMShzdGF0ZS5jaGVjaywgaGJ1ZiwgMiwgMCk7XG4gICAgICAgICAgICAvLz09PS8vXG5cbiAgICAgICAgICAgIC8vPT09IElOSVRCSVRTKCk7XG4gICAgICAgICAgICBob2xkID0gMDtcbiAgICAgICAgICAgIGJpdHMgPSAwO1xuICAgICAgICAgICAgLy89PT0vL1xuICAgICAgICAgICAgc3RhdGUubW9kZSA9IEZMQUdTO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICAgIHN0YXRlLmZsYWdzID0gMDsgICAgICAgICAgIC8qIGV4cGVjdCB6bGliIGhlYWRlciAqL1xuICAgICAgICAgIGlmIChzdGF0ZS5oZWFkKSB7XG4gICAgICAgICAgICBzdGF0ZS5oZWFkLmRvbmUgPSBmYWxzZTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKCEoc3RhdGUud3JhcCAmIDEpIHx8ICAgLyogY2hlY2sgaWYgemxpYiBoZWFkZXIgYWxsb3dlZCAqL1xuICAgICAgICAgICAgKCgoaG9sZCAmIDB4ZmYpLypCSVRTKDgpKi8gPDwgOCkgKyAoaG9sZCA+PiA4KSkgJSAzMSkge1xuICAgICAgICAgICAgc3RybS5tc2cgPSAnaW5jb3JyZWN0IGhlYWRlciBjaGVjayc7XG4gICAgICAgICAgICBzdGF0ZS5tb2RlID0gQkFEO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmICgoaG9sZCAmIDB4MGYpLypCSVRTKDQpKi8gIT09IFpfREVGTEFURUQpIHtcbiAgICAgICAgICAgIHN0cm0ubXNnID0gJ3Vua25vd24gY29tcHJlc3Npb24gbWV0aG9kJztcbiAgICAgICAgICAgIHN0YXRlLm1vZGUgPSBCQUQ7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgICAgLy8tLS0gRFJPUEJJVFMoNCkgLS0tLy9cbiAgICAgICAgICBob2xkID4+Pj0gNDtcbiAgICAgICAgICBiaXRzIC09IDQ7XG4gICAgICAgICAgLy8tLS0vL1xuICAgICAgICAgIGxlbiA9IChob2xkICYgMHgwZikvKkJJVFMoNCkqLyArIDg7XG4gICAgICAgICAgaWYgKHN0YXRlLndiaXRzID09PSAwKSB7XG4gICAgICAgICAgICBzdGF0ZS53Yml0cyA9IGxlbjtcbiAgICAgICAgICB9XG4gICAgICAgICAgZWxzZSBpZiAobGVuID4gc3RhdGUud2JpdHMpIHtcbiAgICAgICAgICAgIHN0cm0ubXNnID0gJ2ludmFsaWQgd2luZG93IHNpemUnO1xuICAgICAgICAgICAgc3RhdGUubW9kZSA9IEJBRDtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIC8vICEhISBwYWtvIHBhdGNoLiBGb3JjZSB1c2UgYG9wdGlvbnMud2luZG93Qml0c2AgaWYgcGFzc2VkLlxuICAgICAgICAgIC8vIFJlcXVpcmVkIHRvIGFsd2F5cyB1c2UgbWF4IHdpbmRvdyBzaXplIGJ5IGRlZmF1bHQuXG4gICAgICAgICAgc3RhdGUuZG1heCA9IDEgPDwgc3RhdGUud2JpdHM7XG4gICAgICAgICAgLy9zdGF0ZS5kbWF4ID0gMSA8PCBsZW47XG5cbiAgICAgICAgICAvL1RyYWNldigoc3RkZXJyLCBcImluZmxhdGU6ICAgemxpYiBoZWFkZXIgb2tcXG5cIikpO1xuICAgICAgICAgIHN0cm0uYWRsZXIgPSBzdGF0ZS5jaGVjayA9IDEvKmFkbGVyMzIoMEwsIFpfTlVMTCwgMCkqLztcbiAgICAgICAgICBzdGF0ZS5tb2RlID0gaG9sZCAmIDB4MjAwID8gRElDVElEIDogVFlQRTtcbiAgICAgICAgICAvLz09PSBJTklUQklUUygpO1xuICAgICAgICAgIGhvbGQgPSAwO1xuICAgICAgICAgIGJpdHMgPSAwO1xuICAgICAgICAgIC8vPT09Ly9cbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBGTEFHUzpcbiAgICAgICAgICAvLz09PSBORUVEQklUUygxNik7ICovXG4gICAgICAgICAgd2hpbGUgKGJpdHMgPCAxNikge1xuICAgICAgICAgICAgaWYgKGhhdmUgPT09IDApIHsgYnJlYWsgaW5mX2xlYXZlOyB9XG4gICAgICAgICAgICBoYXZlLS07XG4gICAgICAgICAgICBob2xkICs9IGlucHV0W25leHQrK10gPDwgYml0cztcbiAgICAgICAgICAgIGJpdHMgKz0gODtcbiAgICAgICAgICB9XG4gICAgICAgICAgLy89PT0vL1xuICAgICAgICAgIHN0YXRlLmZsYWdzID0gaG9sZDtcbiAgICAgICAgICBpZiAoKHN0YXRlLmZsYWdzICYgMHhmZikgIT09IFpfREVGTEFURUQpIHtcbiAgICAgICAgICAgIHN0cm0ubXNnID0gJ3Vua25vd24gY29tcHJlc3Npb24gbWV0aG9kJztcbiAgICAgICAgICAgIHN0YXRlLm1vZGUgPSBCQUQ7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKHN0YXRlLmZsYWdzICYgMHhlMDAwKSB7XG4gICAgICAgICAgICBzdHJtLm1zZyA9ICd1bmtub3duIGhlYWRlciBmbGFncyBzZXQnO1xuICAgICAgICAgICAgc3RhdGUubW9kZSA9IEJBRDtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoc3RhdGUuaGVhZCkge1xuICAgICAgICAgICAgc3RhdGUuaGVhZC50ZXh0ID0gKChob2xkID4+IDgpICYgMSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChzdGF0ZS5mbGFncyAmIDB4MDIwMCkge1xuICAgICAgICAgICAgLy89PT0gQ1JDMihzdGF0ZS5jaGVjaywgaG9sZCk7XG4gICAgICAgICAgICBoYnVmWzBdID0gaG9sZCAmIDB4ZmY7XG4gICAgICAgICAgICBoYnVmWzFdID0gKGhvbGQgPj4+IDgpICYgMHhmZjtcbiAgICAgICAgICAgIHN0YXRlLmNoZWNrID0gY3JjMzJfMShzdGF0ZS5jaGVjaywgaGJ1ZiwgMiwgMCk7XG4gICAgICAgICAgICAvLz09PS8vXG4gICAgICAgICAgfVxuICAgICAgICAgIC8vPT09IElOSVRCSVRTKCk7XG4gICAgICAgICAgaG9sZCA9IDA7XG4gICAgICAgICAgYml0cyA9IDA7XG4gICAgICAgICAgLy89PT0vL1xuICAgICAgICAgIHN0YXRlLm1vZGUgPSBUSU1FO1xuICAgICAgICAgIC8qIGZhbGxzIHRocm91Z2ggKi9cbiAgICAgICAgY2FzZSBUSU1FOlxuICAgICAgICAgIC8vPT09IE5FRURCSVRTKDMyKTsgKi9cbiAgICAgICAgICB3aGlsZSAoYml0cyA8IDMyKSB7XG4gICAgICAgICAgICBpZiAoaGF2ZSA9PT0gMCkgeyBicmVhayBpbmZfbGVhdmU7IH1cbiAgICAgICAgICAgIGhhdmUtLTtcbiAgICAgICAgICAgIGhvbGQgKz0gaW5wdXRbbmV4dCsrXSA8PCBiaXRzO1xuICAgICAgICAgICAgYml0cyArPSA4O1xuICAgICAgICAgIH1cbiAgICAgICAgICAvLz09PS8vXG4gICAgICAgICAgaWYgKHN0YXRlLmhlYWQpIHtcbiAgICAgICAgICAgIHN0YXRlLmhlYWQudGltZSA9IGhvbGQ7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChzdGF0ZS5mbGFncyAmIDB4MDIwMCkge1xuICAgICAgICAgICAgLy89PT0gQ1JDNChzdGF0ZS5jaGVjaywgaG9sZClcbiAgICAgICAgICAgIGhidWZbMF0gPSBob2xkICYgMHhmZjtcbiAgICAgICAgICAgIGhidWZbMV0gPSAoaG9sZCA+Pj4gOCkgJiAweGZmO1xuICAgICAgICAgICAgaGJ1ZlsyXSA9IChob2xkID4+PiAxNikgJiAweGZmO1xuICAgICAgICAgICAgaGJ1ZlszXSA9IChob2xkID4+PiAyNCkgJiAweGZmO1xuICAgICAgICAgICAgc3RhdGUuY2hlY2sgPSBjcmMzMl8xKHN0YXRlLmNoZWNrLCBoYnVmLCA0LCAwKTtcbiAgICAgICAgICAgIC8vPT09XG4gICAgICAgICAgfVxuICAgICAgICAgIC8vPT09IElOSVRCSVRTKCk7XG4gICAgICAgICAgaG9sZCA9IDA7XG4gICAgICAgICAgYml0cyA9IDA7XG4gICAgICAgICAgLy89PT0vL1xuICAgICAgICAgIHN0YXRlLm1vZGUgPSBPUztcbiAgICAgICAgICAvKiBmYWxscyB0aHJvdWdoICovXG4gICAgICAgIGNhc2UgT1M6XG4gICAgICAgICAgLy89PT0gTkVFREJJVFMoMTYpOyAqL1xuICAgICAgICAgIHdoaWxlIChiaXRzIDwgMTYpIHtcbiAgICAgICAgICAgIGlmIChoYXZlID09PSAwKSB7IGJyZWFrIGluZl9sZWF2ZTsgfVxuICAgICAgICAgICAgaGF2ZS0tO1xuICAgICAgICAgICAgaG9sZCArPSBpbnB1dFtuZXh0KytdIDw8IGJpdHM7XG4gICAgICAgICAgICBiaXRzICs9IDg7XG4gICAgICAgICAgfVxuICAgICAgICAgIC8vPT09Ly9cbiAgICAgICAgICBpZiAoc3RhdGUuaGVhZCkge1xuICAgICAgICAgICAgc3RhdGUuaGVhZC54ZmxhZ3MgPSAoaG9sZCAmIDB4ZmYpO1xuICAgICAgICAgICAgc3RhdGUuaGVhZC5vcyA9IChob2xkID4+IDgpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoc3RhdGUuZmxhZ3MgJiAweDAyMDApIHtcbiAgICAgICAgICAgIC8vPT09IENSQzIoc3RhdGUuY2hlY2ssIGhvbGQpO1xuICAgICAgICAgICAgaGJ1ZlswXSA9IGhvbGQgJiAweGZmO1xuICAgICAgICAgICAgaGJ1ZlsxXSA9IChob2xkID4+PiA4KSAmIDB4ZmY7XG4gICAgICAgICAgICBzdGF0ZS5jaGVjayA9IGNyYzMyXzEoc3RhdGUuY2hlY2ssIGhidWYsIDIsIDApO1xuICAgICAgICAgICAgLy89PT0vL1xuICAgICAgICAgIH1cbiAgICAgICAgICAvLz09PSBJTklUQklUUygpO1xuICAgICAgICAgIGhvbGQgPSAwO1xuICAgICAgICAgIGJpdHMgPSAwO1xuICAgICAgICAgIC8vPT09Ly9cbiAgICAgICAgICBzdGF0ZS5tb2RlID0gRVhMRU47XG4gICAgICAgICAgLyogZmFsbHMgdGhyb3VnaCAqL1xuICAgICAgICBjYXNlIEVYTEVOOlxuICAgICAgICAgIGlmIChzdGF0ZS5mbGFncyAmIDB4MDQwMCkge1xuICAgICAgICAgICAgLy89PT0gTkVFREJJVFMoMTYpOyAqL1xuICAgICAgICAgICAgd2hpbGUgKGJpdHMgPCAxNikge1xuICAgICAgICAgICAgICBpZiAoaGF2ZSA9PT0gMCkgeyBicmVhayBpbmZfbGVhdmU7IH1cbiAgICAgICAgICAgICAgaGF2ZS0tO1xuICAgICAgICAgICAgICBob2xkICs9IGlucHV0W25leHQrK10gPDwgYml0cztcbiAgICAgICAgICAgICAgYml0cyArPSA4O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy89PT0vL1xuICAgICAgICAgICAgc3RhdGUubGVuZ3RoID0gaG9sZDtcbiAgICAgICAgICAgIGlmIChzdGF0ZS5oZWFkKSB7XG4gICAgICAgICAgICAgIHN0YXRlLmhlYWQuZXh0cmFfbGVuID0gaG9sZDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChzdGF0ZS5mbGFncyAmIDB4MDIwMCkge1xuICAgICAgICAgICAgICAvLz09PSBDUkMyKHN0YXRlLmNoZWNrLCBob2xkKTtcbiAgICAgICAgICAgICAgaGJ1ZlswXSA9IGhvbGQgJiAweGZmO1xuICAgICAgICAgICAgICBoYnVmWzFdID0gKGhvbGQgPj4+IDgpICYgMHhmZjtcbiAgICAgICAgICAgICAgc3RhdGUuY2hlY2sgPSBjcmMzMl8xKHN0YXRlLmNoZWNrLCBoYnVmLCAyLCAwKTtcbiAgICAgICAgICAgICAgLy89PT0vL1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy89PT0gSU5JVEJJVFMoKTtcbiAgICAgICAgICAgIGhvbGQgPSAwO1xuICAgICAgICAgICAgYml0cyA9IDA7XG4gICAgICAgICAgICAvLz09PS8vXG4gICAgICAgICAgfVxuICAgICAgICAgIGVsc2UgaWYgKHN0YXRlLmhlYWQpIHtcbiAgICAgICAgICAgIHN0YXRlLmhlYWQuZXh0cmEgPSBudWxsLypaX05VTEwqLztcbiAgICAgICAgICB9XG4gICAgICAgICAgc3RhdGUubW9kZSA9IEVYVFJBO1xuICAgICAgICAgIC8qIGZhbGxzIHRocm91Z2ggKi9cbiAgICAgICAgY2FzZSBFWFRSQTpcbiAgICAgICAgICBpZiAoc3RhdGUuZmxhZ3MgJiAweDA0MDApIHtcbiAgICAgICAgICAgIGNvcHkgPSBzdGF0ZS5sZW5ndGg7XG4gICAgICAgICAgICBpZiAoY29weSA+IGhhdmUpIHsgY29weSA9IGhhdmU7IH1cbiAgICAgICAgICAgIGlmIChjb3B5KSB7XG4gICAgICAgICAgICAgIGlmIChzdGF0ZS5oZWFkKSB7XG4gICAgICAgICAgICAgICAgbGVuID0gc3RhdGUuaGVhZC5leHRyYV9sZW4gLSBzdGF0ZS5sZW5ndGg7XG4gICAgICAgICAgICAgICAgaWYgKCFzdGF0ZS5oZWFkLmV4dHJhKSB7XG4gICAgICAgICAgICAgICAgICAvLyBVc2UgdW50eXBlZCBhcnJheSBmb3IgbW9yZSBjb252ZW5pZW50IHByb2Nlc3NpbmcgbGF0ZXJcbiAgICAgICAgICAgICAgICAgIHN0YXRlLmhlYWQuZXh0cmEgPSBuZXcgVWludDhBcnJheShzdGF0ZS5oZWFkLmV4dHJhX2xlbik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHN0YXRlLmhlYWQuZXh0cmEuc2V0KFxuICAgICAgICAgICAgICAgICAgaW5wdXQuc3ViYXJyYXkoXG4gICAgICAgICAgICAgICAgICAgIG5leHQsXG4gICAgICAgICAgICAgICAgICAgIC8vIGV4dHJhIGZpZWxkIGlzIGxpbWl0ZWQgdG8gNjU1MzYgYnl0ZXNcbiAgICAgICAgICAgICAgICAgICAgLy8gLSBubyBuZWVkIGZvciBhZGRpdGlvbmFsIHNpemUgY2hlY2tcbiAgICAgICAgICAgICAgICAgICAgbmV4dCArIGNvcHlcbiAgICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgICAvKmxlbiArIGNvcHkgPiBzdGF0ZS5oZWFkLmV4dHJhX21heCAtIGxlbiA/IHN0YXRlLmhlYWQuZXh0cmFfbWF4IDogY29weSwqL1xuICAgICAgICAgICAgICAgICAgbGVuXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICAvL3ptZW1jcHkoc3RhdGUuaGVhZC5leHRyYSArIGxlbiwgbmV4dCxcbiAgICAgICAgICAgICAgICAvLyAgICAgICAgbGVuICsgY29weSA+IHN0YXRlLmhlYWQuZXh0cmFfbWF4ID9cbiAgICAgICAgICAgICAgICAvLyAgICAgICAgc3RhdGUuaGVhZC5leHRyYV9tYXggLSBsZW4gOiBjb3B5KTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBpZiAoc3RhdGUuZmxhZ3MgJiAweDAyMDApIHtcbiAgICAgICAgICAgICAgICBzdGF0ZS5jaGVjayA9IGNyYzMyXzEoc3RhdGUuY2hlY2ssIGlucHV0LCBjb3B5LCBuZXh0KTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBoYXZlIC09IGNvcHk7XG4gICAgICAgICAgICAgIG5leHQgKz0gY29weTtcbiAgICAgICAgICAgICAgc3RhdGUubGVuZ3RoIC09IGNvcHk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoc3RhdGUubGVuZ3RoKSB7IGJyZWFrIGluZl9sZWF2ZTsgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBzdGF0ZS5sZW5ndGggPSAwO1xuICAgICAgICAgIHN0YXRlLm1vZGUgPSBOQU1FO1xuICAgICAgICAgIC8qIGZhbGxzIHRocm91Z2ggKi9cbiAgICAgICAgY2FzZSBOQU1FOlxuICAgICAgICAgIGlmIChzdGF0ZS5mbGFncyAmIDB4MDgwMCkge1xuICAgICAgICAgICAgaWYgKGhhdmUgPT09IDApIHsgYnJlYWsgaW5mX2xlYXZlOyB9XG4gICAgICAgICAgICBjb3B5ID0gMDtcbiAgICAgICAgICAgIGRvIHtcbiAgICAgICAgICAgICAgLy8gVE9ETzogMiBvciAxIGJ5dGVzP1xuICAgICAgICAgICAgICBsZW4gPSBpbnB1dFtuZXh0ICsgY29weSsrXTtcbiAgICAgICAgICAgICAgLyogdXNlIGNvbnN0YW50IGxpbWl0IGJlY2F1c2UgaW4ganMgd2Ugc2hvdWxkIG5vdCBwcmVhbGxvY2F0ZSBtZW1vcnkgKi9cbiAgICAgICAgICAgICAgaWYgKHN0YXRlLmhlYWQgJiYgbGVuICYmXG4gICAgICAgICAgICAgICAgICAoc3RhdGUubGVuZ3RoIDwgNjU1MzYgLypzdGF0ZS5oZWFkLm5hbWVfbWF4Ki8pKSB7XG4gICAgICAgICAgICAgICAgc3RhdGUuaGVhZC5uYW1lICs9IFN0cmluZy5mcm9tQ2hhckNvZGUobGVuKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSB3aGlsZSAobGVuICYmIGNvcHkgPCBoYXZlKTtcblxuICAgICAgICAgICAgaWYgKHN0YXRlLmZsYWdzICYgMHgwMjAwKSB7XG4gICAgICAgICAgICAgIHN0YXRlLmNoZWNrID0gY3JjMzJfMShzdGF0ZS5jaGVjaywgaW5wdXQsIGNvcHksIG5leHQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaGF2ZSAtPSBjb3B5O1xuICAgICAgICAgICAgbmV4dCArPSBjb3B5O1xuICAgICAgICAgICAgaWYgKGxlbikgeyBicmVhayBpbmZfbGVhdmU7IH1cbiAgICAgICAgICB9XG4gICAgICAgICAgZWxzZSBpZiAoc3RhdGUuaGVhZCkge1xuICAgICAgICAgICAgc3RhdGUuaGVhZC5uYW1lID0gbnVsbDtcbiAgICAgICAgICB9XG4gICAgICAgICAgc3RhdGUubGVuZ3RoID0gMDtcbiAgICAgICAgICBzdGF0ZS5tb2RlID0gQ09NTUVOVDtcbiAgICAgICAgICAvKiBmYWxscyB0aHJvdWdoICovXG4gICAgICAgIGNhc2UgQ09NTUVOVDpcbiAgICAgICAgICBpZiAoc3RhdGUuZmxhZ3MgJiAweDEwMDApIHtcbiAgICAgICAgICAgIGlmIChoYXZlID09PSAwKSB7IGJyZWFrIGluZl9sZWF2ZTsgfVxuICAgICAgICAgICAgY29weSA9IDA7XG4gICAgICAgICAgICBkbyB7XG4gICAgICAgICAgICAgIGxlbiA9IGlucHV0W25leHQgKyBjb3B5KytdO1xuICAgICAgICAgICAgICAvKiB1c2UgY29uc3RhbnQgbGltaXQgYmVjYXVzZSBpbiBqcyB3ZSBzaG91bGQgbm90IHByZWFsbG9jYXRlIG1lbW9yeSAqL1xuICAgICAgICAgICAgICBpZiAoc3RhdGUuaGVhZCAmJiBsZW4gJiZcbiAgICAgICAgICAgICAgICAgIChzdGF0ZS5sZW5ndGggPCA2NTUzNiAvKnN0YXRlLmhlYWQuY29tbV9tYXgqLykpIHtcbiAgICAgICAgICAgICAgICBzdGF0ZS5oZWFkLmNvbW1lbnQgKz0gU3RyaW5nLmZyb21DaGFyQ29kZShsZW4pO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IHdoaWxlIChsZW4gJiYgY29weSA8IGhhdmUpO1xuICAgICAgICAgICAgaWYgKHN0YXRlLmZsYWdzICYgMHgwMjAwKSB7XG4gICAgICAgICAgICAgIHN0YXRlLmNoZWNrID0gY3JjMzJfMShzdGF0ZS5jaGVjaywgaW5wdXQsIGNvcHksIG5leHQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaGF2ZSAtPSBjb3B5O1xuICAgICAgICAgICAgbmV4dCArPSBjb3B5O1xuICAgICAgICAgICAgaWYgKGxlbikgeyBicmVhayBpbmZfbGVhdmU7IH1cbiAgICAgICAgICB9XG4gICAgICAgICAgZWxzZSBpZiAoc3RhdGUuaGVhZCkge1xuICAgICAgICAgICAgc3RhdGUuaGVhZC5jb21tZW50ID0gbnVsbDtcbiAgICAgICAgICB9XG4gICAgICAgICAgc3RhdGUubW9kZSA9IEhDUkM7XG4gICAgICAgICAgLyogZmFsbHMgdGhyb3VnaCAqL1xuICAgICAgICBjYXNlIEhDUkM6XG4gICAgICAgICAgaWYgKHN0YXRlLmZsYWdzICYgMHgwMjAwKSB7XG4gICAgICAgICAgICAvLz09PSBORUVEQklUUygxNik7ICovXG4gICAgICAgICAgICB3aGlsZSAoYml0cyA8IDE2KSB7XG4gICAgICAgICAgICAgIGlmIChoYXZlID09PSAwKSB7IGJyZWFrIGluZl9sZWF2ZTsgfVxuICAgICAgICAgICAgICBoYXZlLS07XG4gICAgICAgICAgICAgIGhvbGQgKz0gaW5wdXRbbmV4dCsrXSA8PCBiaXRzO1xuICAgICAgICAgICAgICBiaXRzICs9IDg7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLz09PS8vXG4gICAgICAgICAgICBpZiAoaG9sZCAhPT0gKHN0YXRlLmNoZWNrICYgMHhmZmZmKSkge1xuICAgICAgICAgICAgICBzdHJtLm1zZyA9ICdoZWFkZXIgY3JjIG1pc21hdGNoJztcbiAgICAgICAgICAgICAgc3RhdGUubW9kZSA9IEJBRDtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLz09PSBJTklUQklUUygpO1xuICAgICAgICAgICAgaG9sZCA9IDA7XG4gICAgICAgICAgICBiaXRzID0gMDtcbiAgICAgICAgICAgIC8vPT09Ly9cbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKHN0YXRlLmhlYWQpIHtcbiAgICAgICAgICAgIHN0YXRlLmhlYWQuaGNyYyA9ICgoc3RhdGUuZmxhZ3MgPj4gOSkgJiAxKTtcbiAgICAgICAgICAgIHN0YXRlLmhlYWQuZG9uZSA9IHRydWU7XG4gICAgICAgICAgfVxuICAgICAgICAgIHN0cm0uYWRsZXIgPSBzdGF0ZS5jaGVjayA9IDA7XG4gICAgICAgICAgc3RhdGUubW9kZSA9IFRZUEU7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgRElDVElEOlxuICAgICAgICAgIC8vPT09IE5FRURCSVRTKDMyKTsgKi9cbiAgICAgICAgICB3aGlsZSAoYml0cyA8IDMyKSB7XG4gICAgICAgICAgICBpZiAoaGF2ZSA9PT0gMCkgeyBicmVhayBpbmZfbGVhdmU7IH1cbiAgICAgICAgICAgIGhhdmUtLTtcbiAgICAgICAgICAgIGhvbGQgKz0gaW5wdXRbbmV4dCsrXSA8PCBiaXRzO1xuICAgICAgICAgICAgYml0cyArPSA4O1xuICAgICAgICAgIH1cbiAgICAgICAgICAvLz09PS8vXG4gICAgICAgICAgc3RybS5hZGxlciA9IHN0YXRlLmNoZWNrID0genN3YXAzMihob2xkKTtcbiAgICAgICAgICAvLz09PSBJTklUQklUUygpO1xuICAgICAgICAgIGhvbGQgPSAwO1xuICAgICAgICAgIGJpdHMgPSAwO1xuICAgICAgICAgIC8vPT09Ly9cbiAgICAgICAgICBzdGF0ZS5tb2RlID0gRElDVDtcbiAgICAgICAgICAvKiBmYWxscyB0aHJvdWdoICovXG4gICAgICAgIGNhc2UgRElDVDpcbiAgICAgICAgICBpZiAoc3RhdGUuaGF2ZWRpY3QgPT09IDApIHtcbiAgICAgICAgICAgIC8vLS0tIFJFU1RPUkUoKSAtLS1cbiAgICAgICAgICAgIHN0cm0ubmV4dF9vdXQgPSBwdXQ7XG4gICAgICAgICAgICBzdHJtLmF2YWlsX291dCA9IGxlZnQ7XG4gICAgICAgICAgICBzdHJtLm5leHRfaW4gPSBuZXh0O1xuICAgICAgICAgICAgc3RybS5hdmFpbF9pbiA9IGhhdmU7XG4gICAgICAgICAgICBzdGF0ZS5ob2xkID0gaG9sZDtcbiAgICAgICAgICAgIHN0YXRlLmJpdHMgPSBiaXRzO1xuICAgICAgICAgICAgLy8tLS1cbiAgICAgICAgICAgIHJldHVybiBaX05FRURfRElDVCQxO1xuICAgICAgICAgIH1cbiAgICAgICAgICBzdHJtLmFkbGVyID0gc3RhdGUuY2hlY2sgPSAxLyphZGxlcjMyKDBMLCBaX05VTEwsIDApKi87XG4gICAgICAgICAgc3RhdGUubW9kZSA9IFRZUEU7XG4gICAgICAgICAgLyogZmFsbHMgdGhyb3VnaCAqL1xuICAgICAgICBjYXNlIFRZUEU6XG4gICAgICAgICAgaWYgKGZsdXNoID09PSBaX0JMT0NLIHx8IGZsdXNoID09PSBaX1RSRUVTKSB7IGJyZWFrIGluZl9sZWF2ZTsgfVxuICAgICAgICAgIC8qIGZhbGxzIHRocm91Z2ggKi9cbiAgICAgICAgY2FzZSBUWVBFRE86XG4gICAgICAgICAgaWYgKHN0YXRlLmxhc3QpIHtcbiAgICAgICAgICAgIC8vLS0tIEJZVEVCSVRTKCkgLS0tLy9cbiAgICAgICAgICAgIGhvbGQgPj4+PSBiaXRzICYgNztcbiAgICAgICAgICAgIGJpdHMgLT0gYml0cyAmIDc7XG4gICAgICAgICAgICAvLy0tLS8vXG4gICAgICAgICAgICBzdGF0ZS5tb2RlID0gQ0hFQ0s7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgICAgLy89PT0gTkVFREJJVFMoMyk7ICovXG4gICAgICAgICAgd2hpbGUgKGJpdHMgPCAzKSB7XG4gICAgICAgICAgICBpZiAoaGF2ZSA9PT0gMCkgeyBicmVhayBpbmZfbGVhdmU7IH1cbiAgICAgICAgICAgIGhhdmUtLTtcbiAgICAgICAgICAgIGhvbGQgKz0gaW5wdXRbbmV4dCsrXSA8PCBiaXRzO1xuICAgICAgICAgICAgYml0cyArPSA4O1xuICAgICAgICAgIH1cbiAgICAgICAgICAvLz09PS8vXG4gICAgICAgICAgc3RhdGUubGFzdCA9IChob2xkICYgMHgwMSkvKkJJVFMoMSkqLztcbiAgICAgICAgICAvLy0tLSBEUk9QQklUUygxKSAtLS0vL1xuICAgICAgICAgIGhvbGQgPj4+PSAxO1xuICAgICAgICAgIGJpdHMgLT0gMTtcbiAgICAgICAgICAvLy0tLS8vXG5cbiAgICAgICAgICBzd2l0Y2ggKChob2xkICYgMHgwMykvKkJJVFMoMikqLykge1xuICAgICAgICAgICAgY2FzZSAwOiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLyogc3RvcmVkIGJsb2NrICovXG4gICAgICAgICAgICAgIC8vVHJhY2V2KChzdGRlcnIsIFwiaW5mbGF0ZTogICAgIHN0b3JlZCBibG9jayVzXFxuXCIsXG4gICAgICAgICAgICAgIC8vICAgICAgICBzdGF0ZS5sYXN0ID8gXCIgKGxhc3QpXCIgOiBcIlwiKSk7XG4gICAgICAgICAgICAgIHN0YXRlLm1vZGUgPSBTVE9SRUQ7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAxOiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLyogZml4ZWQgYmxvY2sgKi9cbiAgICAgICAgICAgICAgZml4ZWR0YWJsZXMoc3RhdGUpO1xuICAgICAgICAgICAgICAvL1RyYWNldigoc3RkZXJyLCBcImluZmxhdGU6ICAgICBmaXhlZCBjb2RlcyBibG9jayVzXFxuXCIsXG4gICAgICAgICAgICAgIC8vICAgICAgICBzdGF0ZS5sYXN0ID8gXCIgKGxhc3QpXCIgOiBcIlwiKSk7XG4gICAgICAgICAgICAgIHN0YXRlLm1vZGUgPSBMRU5fOyAgICAgICAgICAgICAvKiBkZWNvZGUgY29kZXMgKi9cbiAgICAgICAgICAgICAgaWYgKGZsdXNoID09PSBaX1RSRUVTKSB7XG4gICAgICAgICAgICAgICAgLy8tLS0gRFJPUEJJVFMoMikgLS0tLy9cbiAgICAgICAgICAgICAgICBob2xkID4+Pj0gMjtcbiAgICAgICAgICAgICAgICBiaXRzIC09IDI7XG4gICAgICAgICAgICAgICAgLy8tLS0vL1xuICAgICAgICAgICAgICAgIGJyZWFrIGluZl9sZWF2ZTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgMjogICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8qIGR5bmFtaWMgYmxvY2sgKi9cbiAgICAgICAgICAgICAgLy9UcmFjZXYoKHN0ZGVyciwgXCJpbmZsYXRlOiAgICAgZHluYW1pYyBjb2RlcyBibG9jayVzXFxuXCIsXG4gICAgICAgICAgICAgIC8vICAgICAgICBzdGF0ZS5sYXN0ID8gXCIgKGxhc3QpXCIgOiBcIlwiKSk7XG4gICAgICAgICAgICAgIHN0YXRlLm1vZGUgPSBUQUJMRTtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgICAgIHN0cm0ubXNnID0gJ2ludmFsaWQgYmxvY2sgdHlwZSc7XG4gICAgICAgICAgICAgIHN0YXRlLm1vZGUgPSBCQUQ7XG4gICAgICAgICAgfVxuICAgICAgICAgIC8vLS0tIERST1BCSVRTKDIpIC0tLS8vXG4gICAgICAgICAgaG9sZCA+Pj49IDI7XG4gICAgICAgICAgYml0cyAtPSAyO1xuICAgICAgICAgIC8vLS0tLy9cbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBTVE9SRUQ6XG4gICAgICAgICAgLy8tLS0gQllURUJJVFMoKSAtLS0vLyAvKiBnbyB0byBieXRlIGJvdW5kYXJ5ICovXG4gICAgICAgICAgaG9sZCA+Pj49IGJpdHMgJiA3O1xuICAgICAgICAgIGJpdHMgLT0gYml0cyAmIDc7XG4gICAgICAgICAgLy8tLS0vL1xuICAgICAgICAgIC8vPT09IE5FRURCSVRTKDMyKTsgKi9cbiAgICAgICAgICB3aGlsZSAoYml0cyA8IDMyKSB7XG4gICAgICAgICAgICBpZiAoaGF2ZSA9PT0gMCkgeyBicmVhayBpbmZfbGVhdmU7IH1cbiAgICAgICAgICAgIGhhdmUtLTtcbiAgICAgICAgICAgIGhvbGQgKz0gaW5wdXRbbmV4dCsrXSA8PCBiaXRzO1xuICAgICAgICAgICAgYml0cyArPSA4O1xuICAgICAgICAgIH1cbiAgICAgICAgICAvLz09PS8vXG4gICAgICAgICAgaWYgKChob2xkICYgMHhmZmZmKSAhPT0gKChob2xkID4+PiAxNikgXiAweGZmZmYpKSB7XG4gICAgICAgICAgICBzdHJtLm1zZyA9ICdpbnZhbGlkIHN0b3JlZCBibG9jayBsZW5ndGhzJztcbiAgICAgICAgICAgIHN0YXRlLm1vZGUgPSBCQUQ7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgICAgc3RhdGUubGVuZ3RoID0gaG9sZCAmIDB4ZmZmZjtcbiAgICAgICAgICAvL1RyYWNldigoc3RkZXJyLCBcImluZmxhdGU6ICAgICAgIHN0b3JlZCBsZW5ndGggJXVcXG5cIixcbiAgICAgICAgICAvLyAgICAgICAgc3RhdGUubGVuZ3RoKSk7XG4gICAgICAgICAgLy89PT0gSU5JVEJJVFMoKTtcbiAgICAgICAgICBob2xkID0gMDtcbiAgICAgICAgICBiaXRzID0gMDtcbiAgICAgICAgICAvLz09PS8vXG4gICAgICAgICAgc3RhdGUubW9kZSA9IENPUFlfO1xuICAgICAgICAgIGlmIChmbHVzaCA9PT0gWl9UUkVFUykgeyBicmVhayBpbmZfbGVhdmU7IH1cbiAgICAgICAgICAvKiBmYWxscyB0aHJvdWdoICovXG4gICAgICAgIGNhc2UgQ09QWV86XG4gICAgICAgICAgc3RhdGUubW9kZSA9IENPUFk7XG4gICAgICAgICAgLyogZmFsbHMgdGhyb3VnaCAqL1xuICAgICAgICBjYXNlIENPUFk6XG4gICAgICAgICAgY29weSA9IHN0YXRlLmxlbmd0aDtcbiAgICAgICAgICBpZiAoY29weSkge1xuICAgICAgICAgICAgaWYgKGNvcHkgPiBoYXZlKSB7IGNvcHkgPSBoYXZlOyB9XG4gICAgICAgICAgICBpZiAoY29weSA+IGxlZnQpIHsgY29weSA9IGxlZnQ7IH1cbiAgICAgICAgICAgIGlmIChjb3B5ID09PSAwKSB7IGJyZWFrIGluZl9sZWF2ZTsgfVxuICAgICAgICAgICAgLy8tLS0gem1lbWNweShwdXQsIG5leHQsIGNvcHkpOyAtLS1cbiAgICAgICAgICAgIG91dHB1dC5zZXQoaW5wdXQuc3ViYXJyYXkobmV4dCwgbmV4dCArIGNvcHkpLCBwdXQpO1xuICAgICAgICAgICAgLy8tLS0vL1xuICAgICAgICAgICAgaGF2ZSAtPSBjb3B5O1xuICAgICAgICAgICAgbmV4dCArPSBjb3B5O1xuICAgICAgICAgICAgbGVmdCAtPSBjb3B5O1xuICAgICAgICAgICAgcHV0ICs9IGNvcHk7XG4gICAgICAgICAgICBzdGF0ZS5sZW5ndGggLT0gY29weTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgICAvL1RyYWNldigoc3RkZXJyLCBcImluZmxhdGU6ICAgICAgIHN0b3JlZCBlbmRcXG5cIikpO1xuICAgICAgICAgIHN0YXRlLm1vZGUgPSBUWVBFO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIFRBQkxFOlxuICAgICAgICAgIC8vPT09IE5FRURCSVRTKDE0KTsgKi9cbiAgICAgICAgICB3aGlsZSAoYml0cyA8IDE0KSB7XG4gICAgICAgICAgICBpZiAoaGF2ZSA9PT0gMCkgeyBicmVhayBpbmZfbGVhdmU7IH1cbiAgICAgICAgICAgIGhhdmUtLTtcbiAgICAgICAgICAgIGhvbGQgKz0gaW5wdXRbbmV4dCsrXSA8PCBiaXRzO1xuICAgICAgICAgICAgYml0cyArPSA4O1xuICAgICAgICAgIH1cbiAgICAgICAgICAvLz09PS8vXG4gICAgICAgICAgc3RhdGUubmxlbiA9IChob2xkICYgMHgxZikvKkJJVFMoNSkqLyArIDI1NztcbiAgICAgICAgICAvLy0tLSBEUk9QQklUUyg1KSAtLS0vL1xuICAgICAgICAgIGhvbGQgPj4+PSA1O1xuICAgICAgICAgIGJpdHMgLT0gNTtcbiAgICAgICAgICAvLy0tLS8vXG4gICAgICAgICAgc3RhdGUubmRpc3QgPSAoaG9sZCAmIDB4MWYpLypCSVRTKDUpKi8gKyAxO1xuICAgICAgICAgIC8vLS0tIERST1BCSVRTKDUpIC0tLS8vXG4gICAgICAgICAgaG9sZCA+Pj49IDU7XG4gICAgICAgICAgYml0cyAtPSA1O1xuICAgICAgICAgIC8vLS0tLy9cbiAgICAgICAgICBzdGF0ZS5uY29kZSA9IChob2xkICYgMHgwZikvKkJJVFMoNCkqLyArIDQ7XG4gICAgICAgICAgLy8tLS0gRFJPUEJJVFMoNCkgLS0tLy9cbiAgICAgICAgICBob2xkID4+Pj0gNDtcbiAgICAgICAgICBiaXRzIC09IDQ7XG4gICAgICAgICAgLy8tLS0vL1xuICAvLyNpZm5kZWYgUEtaSVBfQlVHX1dPUktBUk9VTkRcbiAgICAgICAgICBpZiAoc3RhdGUubmxlbiA+IDI4NiB8fCBzdGF0ZS5uZGlzdCA+IDMwKSB7XG4gICAgICAgICAgICBzdHJtLm1zZyA9ICd0b28gbWFueSBsZW5ndGggb3IgZGlzdGFuY2Ugc3ltYm9scyc7XG4gICAgICAgICAgICBzdGF0ZS5tb2RlID0gQkFEO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAvLyNlbmRpZlxuICAgICAgICAgIC8vVHJhY2V2KChzdGRlcnIsIFwiaW5mbGF0ZTogICAgICAgdGFibGUgc2l6ZXMgb2tcXG5cIikpO1xuICAgICAgICAgIHN0YXRlLmhhdmUgPSAwO1xuICAgICAgICAgIHN0YXRlLm1vZGUgPSBMRU5MRU5TO1xuICAgICAgICAgIC8qIGZhbGxzIHRocm91Z2ggKi9cbiAgICAgICAgY2FzZSBMRU5MRU5TOlxuICAgICAgICAgIHdoaWxlIChzdGF0ZS5oYXZlIDwgc3RhdGUubmNvZGUpIHtcbiAgICAgICAgICAgIC8vPT09IE5FRURCSVRTKDMpO1xuICAgICAgICAgICAgd2hpbGUgKGJpdHMgPCAzKSB7XG4gICAgICAgICAgICAgIGlmIChoYXZlID09PSAwKSB7IGJyZWFrIGluZl9sZWF2ZTsgfVxuICAgICAgICAgICAgICBoYXZlLS07XG4gICAgICAgICAgICAgIGhvbGQgKz0gaW5wdXRbbmV4dCsrXSA8PCBiaXRzO1xuICAgICAgICAgICAgICBiaXRzICs9IDg7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLz09PS8vXG4gICAgICAgICAgICBzdGF0ZS5sZW5zW29yZGVyW3N0YXRlLmhhdmUrK11dID0gKGhvbGQgJiAweDA3KTsvL0JJVFMoMyk7XG4gICAgICAgICAgICAvLy0tLSBEUk9QQklUUygzKSAtLS0vL1xuICAgICAgICAgICAgaG9sZCA+Pj49IDM7XG4gICAgICAgICAgICBiaXRzIC09IDM7XG4gICAgICAgICAgICAvLy0tLS8vXG4gICAgICAgICAgfVxuICAgICAgICAgIHdoaWxlIChzdGF0ZS5oYXZlIDwgMTkpIHtcbiAgICAgICAgICAgIHN0YXRlLmxlbnNbb3JkZXJbc3RhdGUuaGF2ZSsrXV0gPSAwO1xuICAgICAgICAgIH1cbiAgICAgICAgICAvLyBXZSBoYXZlIHNlcGFyYXRlIHRhYmxlcyAmIG5vIHBvaW50ZXJzLiAyIGNvbW1lbnRlZCBsaW5lcyBiZWxvdyBub3QgbmVlZGVkLlxuICAgICAgICAgIC8vc3RhdGUubmV4dCA9IHN0YXRlLmNvZGVzO1xuICAgICAgICAgIC8vc3RhdGUubGVuY29kZSA9IHN0YXRlLm5leHQ7XG4gICAgICAgICAgLy8gU3dpdGNoIHRvIHVzZSBkeW5hbWljIHRhYmxlXG4gICAgICAgICAgc3RhdGUubGVuY29kZSA9IHN0YXRlLmxlbmR5bjtcbiAgICAgICAgICBzdGF0ZS5sZW5iaXRzID0gNztcblxuICAgICAgICAgIG9wdHMgPSB7IGJpdHM6IHN0YXRlLmxlbmJpdHMgfTtcbiAgICAgICAgICByZXQgPSBpbmZ0cmVlcyhDT0RFUywgc3RhdGUubGVucywgMCwgMTksIHN0YXRlLmxlbmNvZGUsIDAsIHN0YXRlLndvcmssIG9wdHMpO1xuICAgICAgICAgIHN0YXRlLmxlbmJpdHMgPSBvcHRzLmJpdHM7XG5cbiAgICAgICAgICBpZiAocmV0KSB7XG4gICAgICAgICAgICBzdHJtLm1zZyA9ICdpbnZhbGlkIGNvZGUgbGVuZ3RocyBzZXQnO1xuICAgICAgICAgICAgc3RhdGUubW9kZSA9IEJBRDtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgICAvL1RyYWNldigoc3RkZXJyLCBcImluZmxhdGU6ICAgICAgIGNvZGUgbGVuZ3RocyBva1xcblwiKSk7XG4gICAgICAgICAgc3RhdGUuaGF2ZSA9IDA7XG4gICAgICAgICAgc3RhdGUubW9kZSA9IENPREVMRU5TO1xuICAgICAgICAgIC8qIGZhbGxzIHRocm91Z2ggKi9cbiAgICAgICAgY2FzZSBDT0RFTEVOUzpcbiAgICAgICAgICB3aGlsZSAoc3RhdGUuaGF2ZSA8IHN0YXRlLm5sZW4gKyBzdGF0ZS5uZGlzdCkge1xuICAgICAgICAgICAgZm9yICg7Oykge1xuICAgICAgICAgICAgICBoZXJlID0gc3RhdGUubGVuY29kZVtob2xkICYgKCgxIDw8IHN0YXRlLmxlbmJpdHMpIC0gMSldOy8qQklUUyhzdGF0ZS5sZW5iaXRzKSovXG4gICAgICAgICAgICAgIGhlcmVfYml0cyA9IGhlcmUgPj4+IDI0O1xuICAgICAgICAgICAgICBoZXJlX29wID0gKGhlcmUgPj4+IDE2KSAmIDB4ZmY7XG4gICAgICAgICAgICAgIGhlcmVfdmFsID0gaGVyZSAmIDB4ZmZmZjtcblxuICAgICAgICAgICAgICBpZiAoKGhlcmVfYml0cykgPD0gYml0cykgeyBicmVhazsgfVxuICAgICAgICAgICAgICAvLy0tLSBQVUxMQllURSgpIC0tLS8vXG4gICAgICAgICAgICAgIGlmIChoYXZlID09PSAwKSB7IGJyZWFrIGluZl9sZWF2ZTsgfVxuICAgICAgICAgICAgICBoYXZlLS07XG4gICAgICAgICAgICAgIGhvbGQgKz0gaW5wdXRbbmV4dCsrXSA8PCBiaXRzO1xuICAgICAgICAgICAgICBiaXRzICs9IDg7XG4gICAgICAgICAgICAgIC8vLS0tLy9cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChoZXJlX3ZhbCA8IDE2KSB7XG4gICAgICAgICAgICAgIC8vLS0tIERST1BCSVRTKGhlcmUuYml0cykgLS0tLy9cbiAgICAgICAgICAgICAgaG9sZCA+Pj49IGhlcmVfYml0cztcbiAgICAgICAgICAgICAgYml0cyAtPSBoZXJlX2JpdHM7XG4gICAgICAgICAgICAgIC8vLS0tLy9cbiAgICAgICAgICAgICAgc3RhdGUubGVuc1tzdGF0ZS5oYXZlKytdID0gaGVyZV92YWw7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgaWYgKGhlcmVfdmFsID09PSAxNikge1xuICAgICAgICAgICAgICAgIC8vPT09IE5FRURCSVRTKGhlcmUuYml0cyArIDIpO1xuICAgICAgICAgICAgICAgIG4gPSBoZXJlX2JpdHMgKyAyO1xuICAgICAgICAgICAgICAgIHdoaWxlIChiaXRzIDwgbikge1xuICAgICAgICAgICAgICAgICAgaWYgKGhhdmUgPT09IDApIHsgYnJlYWsgaW5mX2xlYXZlOyB9XG4gICAgICAgICAgICAgICAgICBoYXZlLS07XG4gICAgICAgICAgICAgICAgICBob2xkICs9IGlucHV0W25leHQrK10gPDwgYml0cztcbiAgICAgICAgICAgICAgICAgIGJpdHMgKz0gODtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgLy89PT0vL1xuICAgICAgICAgICAgICAgIC8vLS0tIERST1BCSVRTKGhlcmUuYml0cykgLS0tLy9cbiAgICAgICAgICAgICAgICBob2xkID4+Pj0gaGVyZV9iaXRzO1xuICAgICAgICAgICAgICAgIGJpdHMgLT0gaGVyZV9iaXRzO1xuICAgICAgICAgICAgICAgIC8vLS0tLy9cbiAgICAgICAgICAgICAgICBpZiAoc3RhdGUuaGF2ZSA9PT0gMCkge1xuICAgICAgICAgICAgICAgICAgc3RybS5tc2cgPSAnaW52YWxpZCBiaXQgbGVuZ3RoIHJlcGVhdCc7XG4gICAgICAgICAgICAgICAgICBzdGF0ZS5tb2RlID0gQkFEO1xuICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGxlbiA9IHN0YXRlLmxlbnNbc3RhdGUuaGF2ZSAtIDFdO1xuICAgICAgICAgICAgICAgIGNvcHkgPSAzICsgKGhvbGQgJiAweDAzKTsvL0JJVFMoMik7XG4gICAgICAgICAgICAgICAgLy8tLS0gRFJPUEJJVFMoMikgLS0tLy9cbiAgICAgICAgICAgICAgICBob2xkID4+Pj0gMjtcbiAgICAgICAgICAgICAgICBiaXRzIC09IDI7XG4gICAgICAgICAgICAgICAgLy8tLS0vL1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGVsc2UgaWYgKGhlcmVfdmFsID09PSAxNykge1xuICAgICAgICAgICAgICAgIC8vPT09IE5FRURCSVRTKGhlcmUuYml0cyArIDMpO1xuICAgICAgICAgICAgICAgIG4gPSBoZXJlX2JpdHMgKyAzO1xuICAgICAgICAgICAgICAgIHdoaWxlIChiaXRzIDwgbikge1xuICAgICAgICAgICAgICAgICAgaWYgKGhhdmUgPT09IDApIHsgYnJlYWsgaW5mX2xlYXZlOyB9XG4gICAgICAgICAgICAgICAgICBoYXZlLS07XG4gICAgICAgICAgICAgICAgICBob2xkICs9IGlucHV0W25leHQrK10gPDwgYml0cztcbiAgICAgICAgICAgICAgICAgIGJpdHMgKz0gODtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgLy89PT0vL1xuICAgICAgICAgICAgICAgIC8vLS0tIERST1BCSVRTKGhlcmUuYml0cykgLS0tLy9cbiAgICAgICAgICAgICAgICBob2xkID4+Pj0gaGVyZV9iaXRzO1xuICAgICAgICAgICAgICAgIGJpdHMgLT0gaGVyZV9iaXRzO1xuICAgICAgICAgICAgICAgIC8vLS0tLy9cbiAgICAgICAgICAgICAgICBsZW4gPSAwO1xuICAgICAgICAgICAgICAgIGNvcHkgPSAzICsgKGhvbGQgJiAweDA3KTsvL0JJVFMoMyk7XG4gICAgICAgICAgICAgICAgLy8tLS0gRFJPUEJJVFMoMykgLS0tLy9cbiAgICAgICAgICAgICAgICBob2xkID4+Pj0gMztcbiAgICAgICAgICAgICAgICBiaXRzIC09IDM7XG4gICAgICAgICAgICAgICAgLy8tLS0vL1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIC8vPT09IE5FRURCSVRTKGhlcmUuYml0cyArIDcpO1xuICAgICAgICAgICAgICAgIG4gPSBoZXJlX2JpdHMgKyA3O1xuICAgICAgICAgICAgICAgIHdoaWxlIChiaXRzIDwgbikge1xuICAgICAgICAgICAgICAgICAgaWYgKGhhdmUgPT09IDApIHsgYnJlYWsgaW5mX2xlYXZlOyB9XG4gICAgICAgICAgICAgICAgICBoYXZlLS07XG4gICAgICAgICAgICAgICAgICBob2xkICs9IGlucHV0W25leHQrK10gPDwgYml0cztcbiAgICAgICAgICAgICAgICAgIGJpdHMgKz0gODtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgLy89PT0vL1xuICAgICAgICAgICAgICAgIC8vLS0tIERST1BCSVRTKGhlcmUuYml0cykgLS0tLy9cbiAgICAgICAgICAgICAgICBob2xkID4+Pj0gaGVyZV9iaXRzO1xuICAgICAgICAgICAgICAgIGJpdHMgLT0gaGVyZV9iaXRzO1xuICAgICAgICAgICAgICAgIC8vLS0tLy9cbiAgICAgICAgICAgICAgICBsZW4gPSAwO1xuICAgICAgICAgICAgICAgIGNvcHkgPSAxMSArIChob2xkICYgMHg3Zik7Ly9CSVRTKDcpO1xuICAgICAgICAgICAgICAgIC8vLS0tIERST1BCSVRTKDcpIC0tLS8vXG4gICAgICAgICAgICAgICAgaG9sZCA+Pj49IDc7XG4gICAgICAgICAgICAgICAgYml0cyAtPSA3O1xuICAgICAgICAgICAgICAgIC8vLS0tLy9cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBpZiAoc3RhdGUuaGF2ZSArIGNvcHkgPiBzdGF0ZS5ubGVuICsgc3RhdGUubmRpc3QpIHtcbiAgICAgICAgICAgICAgICBzdHJtLm1zZyA9ICdpbnZhbGlkIGJpdCBsZW5ndGggcmVwZWF0JztcbiAgICAgICAgICAgICAgICBzdGF0ZS5tb2RlID0gQkFEO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIHdoaWxlIChjb3B5LS0pIHtcbiAgICAgICAgICAgICAgICBzdGF0ZS5sZW5zW3N0YXRlLmhhdmUrK10gPSBsZW47XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICAvKiBoYW5kbGUgZXJyb3IgYnJlYWtzIGluIHdoaWxlICovXG4gICAgICAgICAgaWYgKHN0YXRlLm1vZGUgPT09IEJBRCkgeyBicmVhazsgfVxuXG4gICAgICAgICAgLyogY2hlY2sgZm9yIGVuZC1vZi1ibG9jayBjb2RlIChiZXR0ZXIgaGF2ZSBvbmUpICovXG4gICAgICAgICAgaWYgKHN0YXRlLmxlbnNbMjU2XSA9PT0gMCkge1xuICAgICAgICAgICAgc3RybS5tc2cgPSAnaW52YWxpZCBjb2RlIC0tIG1pc3NpbmcgZW5kLW9mLWJsb2NrJztcbiAgICAgICAgICAgIHN0YXRlLm1vZGUgPSBCQUQ7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG5cbiAgICAgICAgICAvKiBidWlsZCBjb2RlIHRhYmxlcyAtLSBub3RlOiBkbyBub3QgY2hhbmdlIHRoZSBsZW5iaXRzIG9yIGRpc3RiaXRzXG4gICAgICAgICAgICAgdmFsdWVzIGhlcmUgKDkgYW5kIDYpIHdpdGhvdXQgcmVhZGluZyB0aGUgY29tbWVudHMgaW4gaW5mdHJlZXMuaFxuICAgICAgICAgICAgIGNvbmNlcm5pbmcgdGhlIEVOT1VHSCBjb25zdGFudHMsIHdoaWNoIGRlcGVuZCBvbiB0aG9zZSB2YWx1ZXMgKi9cbiAgICAgICAgICBzdGF0ZS5sZW5iaXRzID0gOTtcblxuICAgICAgICAgIG9wdHMgPSB7IGJpdHM6IHN0YXRlLmxlbmJpdHMgfTtcbiAgICAgICAgICByZXQgPSBpbmZ0cmVlcyhMRU5TLCBzdGF0ZS5sZW5zLCAwLCBzdGF0ZS5ubGVuLCBzdGF0ZS5sZW5jb2RlLCAwLCBzdGF0ZS53b3JrLCBvcHRzKTtcbiAgICAgICAgICAvLyBXZSBoYXZlIHNlcGFyYXRlIHRhYmxlcyAmIG5vIHBvaW50ZXJzLiAyIGNvbW1lbnRlZCBsaW5lcyBiZWxvdyBub3QgbmVlZGVkLlxuICAgICAgICAgIC8vIHN0YXRlLm5leHRfaW5kZXggPSBvcHRzLnRhYmxlX2luZGV4O1xuICAgICAgICAgIHN0YXRlLmxlbmJpdHMgPSBvcHRzLmJpdHM7XG4gICAgICAgICAgLy8gc3RhdGUubGVuY29kZSA9IHN0YXRlLm5leHQ7XG5cbiAgICAgICAgICBpZiAocmV0KSB7XG4gICAgICAgICAgICBzdHJtLm1zZyA9ICdpbnZhbGlkIGxpdGVyYWwvbGVuZ3RocyBzZXQnO1xuICAgICAgICAgICAgc3RhdGUubW9kZSA9IEJBRDtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHN0YXRlLmRpc3RiaXRzID0gNjtcbiAgICAgICAgICAvL3N0YXRlLmRpc3Rjb2RlLmNvcHkoc3RhdGUuY29kZXMpO1xuICAgICAgICAgIC8vIFN3aXRjaCB0byB1c2UgZHluYW1pYyB0YWJsZVxuICAgICAgICAgIHN0YXRlLmRpc3Rjb2RlID0gc3RhdGUuZGlzdGR5bjtcbiAgICAgICAgICBvcHRzID0geyBiaXRzOiBzdGF0ZS5kaXN0Yml0cyB9O1xuICAgICAgICAgIHJldCA9IGluZnRyZWVzKERJU1RTLCBzdGF0ZS5sZW5zLCBzdGF0ZS5ubGVuLCBzdGF0ZS5uZGlzdCwgc3RhdGUuZGlzdGNvZGUsIDAsIHN0YXRlLndvcmssIG9wdHMpO1xuICAgICAgICAgIC8vIFdlIGhhdmUgc2VwYXJhdGUgdGFibGVzICYgbm8gcG9pbnRlcnMuIDIgY29tbWVudGVkIGxpbmVzIGJlbG93IG5vdCBuZWVkZWQuXG4gICAgICAgICAgLy8gc3RhdGUubmV4dF9pbmRleCA9IG9wdHMudGFibGVfaW5kZXg7XG4gICAgICAgICAgc3RhdGUuZGlzdGJpdHMgPSBvcHRzLmJpdHM7XG4gICAgICAgICAgLy8gc3RhdGUuZGlzdGNvZGUgPSBzdGF0ZS5uZXh0O1xuXG4gICAgICAgICAgaWYgKHJldCkge1xuICAgICAgICAgICAgc3RybS5tc2cgPSAnaW52YWxpZCBkaXN0YW5jZXMgc2V0JztcbiAgICAgICAgICAgIHN0YXRlLm1vZGUgPSBCQUQ7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgICAgLy9UcmFjZXYoKHN0ZGVyciwgJ2luZmxhdGU6ICAgICAgIGNvZGVzIG9rXFxuJykpO1xuICAgICAgICAgIHN0YXRlLm1vZGUgPSBMRU5fO1xuICAgICAgICAgIGlmIChmbHVzaCA9PT0gWl9UUkVFUykgeyBicmVhayBpbmZfbGVhdmU7IH1cbiAgICAgICAgICAvKiBmYWxscyB0aHJvdWdoICovXG4gICAgICAgIGNhc2UgTEVOXzpcbiAgICAgICAgICBzdGF0ZS5tb2RlID0gTEVOO1xuICAgICAgICAgIC8qIGZhbGxzIHRocm91Z2ggKi9cbiAgICAgICAgY2FzZSBMRU46XG4gICAgICAgICAgaWYgKGhhdmUgPj0gNiAmJiBsZWZ0ID49IDI1OCkge1xuICAgICAgICAgICAgLy8tLS0gUkVTVE9SRSgpIC0tLVxuICAgICAgICAgICAgc3RybS5uZXh0X291dCA9IHB1dDtcbiAgICAgICAgICAgIHN0cm0uYXZhaWxfb3V0ID0gbGVmdDtcbiAgICAgICAgICAgIHN0cm0ubmV4dF9pbiA9IG5leHQ7XG4gICAgICAgICAgICBzdHJtLmF2YWlsX2luID0gaGF2ZTtcbiAgICAgICAgICAgIHN0YXRlLmhvbGQgPSBob2xkO1xuICAgICAgICAgICAgc3RhdGUuYml0cyA9IGJpdHM7XG4gICAgICAgICAgICAvLy0tLVxuICAgICAgICAgICAgaW5mZmFzdChzdHJtLCBfb3V0KTtcbiAgICAgICAgICAgIC8vLS0tIExPQUQoKSAtLS1cbiAgICAgICAgICAgIHB1dCA9IHN0cm0ubmV4dF9vdXQ7XG4gICAgICAgICAgICBvdXRwdXQgPSBzdHJtLm91dHB1dDtcbiAgICAgICAgICAgIGxlZnQgPSBzdHJtLmF2YWlsX291dDtcbiAgICAgICAgICAgIG5leHQgPSBzdHJtLm5leHRfaW47XG4gICAgICAgICAgICBpbnB1dCA9IHN0cm0uaW5wdXQ7XG4gICAgICAgICAgICBoYXZlID0gc3RybS5hdmFpbF9pbjtcbiAgICAgICAgICAgIGhvbGQgPSBzdGF0ZS5ob2xkO1xuICAgICAgICAgICAgYml0cyA9IHN0YXRlLmJpdHM7XG4gICAgICAgICAgICAvLy0tLVxuXG4gICAgICAgICAgICBpZiAoc3RhdGUubW9kZSA9PT0gVFlQRSkge1xuICAgICAgICAgICAgICBzdGF0ZS5iYWNrID0gLTE7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgICAgc3RhdGUuYmFjayA9IDA7XG4gICAgICAgICAgZm9yICg7Oykge1xuICAgICAgICAgICAgaGVyZSA9IHN0YXRlLmxlbmNvZGVbaG9sZCAmICgoMSA8PCBzdGF0ZS5sZW5iaXRzKSAtIDEpXTsgIC8qQklUUyhzdGF0ZS5sZW5iaXRzKSovXG4gICAgICAgICAgICBoZXJlX2JpdHMgPSBoZXJlID4+PiAyNDtcbiAgICAgICAgICAgIGhlcmVfb3AgPSAoaGVyZSA+Pj4gMTYpICYgMHhmZjtcbiAgICAgICAgICAgIGhlcmVfdmFsID0gaGVyZSAmIDB4ZmZmZjtcblxuICAgICAgICAgICAgaWYgKGhlcmVfYml0cyA8PSBiaXRzKSB7IGJyZWFrOyB9XG4gICAgICAgICAgICAvLy0tLSBQVUxMQllURSgpIC0tLS8vXG4gICAgICAgICAgICBpZiAoaGF2ZSA9PT0gMCkgeyBicmVhayBpbmZfbGVhdmU7IH1cbiAgICAgICAgICAgIGhhdmUtLTtcbiAgICAgICAgICAgIGhvbGQgKz0gaW5wdXRbbmV4dCsrXSA8PCBiaXRzO1xuICAgICAgICAgICAgYml0cyArPSA4O1xuICAgICAgICAgICAgLy8tLS0vL1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoaGVyZV9vcCAmJiAoaGVyZV9vcCAmIDB4ZjApID09PSAwKSB7XG4gICAgICAgICAgICBsYXN0X2JpdHMgPSBoZXJlX2JpdHM7XG4gICAgICAgICAgICBsYXN0X29wID0gaGVyZV9vcDtcbiAgICAgICAgICAgIGxhc3RfdmFsID0gaGVyZV92YWw7XG4gICAgICAgICAgICBmb3IgKDs7KSB7XG4gICAgICAgICAgICAgIGhlcmUgPSBzdGF0ZS5sZW5jb2RlW2xhc3RfdmFsICtcbiAgICAgICAgICAgICAgICAgICAgICAoKGhvbGQgJiAoKDEgPDwgKGxhc3RfYml0cyArIGxhc3Rfb3ApKSAtIDEpKS8qQklUUyhsYXN0LmJpdHMgKyBsYXN0Lm9wKSovID4+IGxhc3RfYml0cyldO1xuICAgICAgICAgICAgICBoZXJlX2JpdHMgPSBoZXJlID4+PiAyNDtcbiAgICAgICAgICAgICAgaGVyZV9vcCA9IChoZXJlID4+PiAxNikgJiAweGZmO1xuICAgICAgICAgICAgICBoZXJlX3ZhbCA9IGhlcmUgJiAweGZmZmY7XG5cbiAgICAgICAgICAgICAgaWYgKChsYXN0X2JpdHMgKyBoZXJlX2JpdHMpIDw9IGJpdHMpIHsgYnJlYWs7IH1cbiAgICAgICAgICAgICAgLy8tLS0gUFVMTEJZVEUoKSAtLS0vL1xuICAgICAgICAgICAgICBpZiAoaGF2ZSA9PT0gMCkgeyBicmVhayBpbmZfbGVhdmU7IH1cbiAgICAgICAgICAgICAgaGF2ZS0tO1xuICAgICAgICAgICAgICBob2xkICs9IGlucHV0W25leHQrK10gPDwgYml0cztcbiAgICAgICAgICAgICAgYml0cyArPSA4O1xuICAgICAgICAgICAgICAvLy0tLS8vXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLy0tLSBEUk9QQklUUyhsYXN0LmJpdHMpIC0tLS8vXG4gICAgICAgICAgICBob2xkID4+Pj0gbGFzdF9iaXRzO1xuICAgICAgICAgICAgYml0cyAtPSBsYXN0X2JpdHM7XG4gICAgICAgICAgICAvLy0tLS8vXG4gICAgICAgICAgICBzdGF0ZS5iYWNrICs9IGxhc3RfYml0cztcbiAgICAgICAgICB9XG4gICAgICAgICAgLy8tLS0gRFJPUEJJVFMoaGVyZS5iaXRzKSAtLS0vL1xuICAgICAgICAgIGhvbGQgPj4+PSBoZXJlX2JpdHM7XG4gICAgICAgICAgYml0cyAtPSBoZXJlX2JpdHM7XG4gICAgICAgICAgLy8tLS0vL1xuICAgICAgICAgIHN0YXRlLmJhY2sgKz0gaGVyZV9iaXRzO1xuICAgICAgICAgIHN0YXRlLmxlbmd0aCA9IGhlcmVfdmFsO1xuICAgICAgICAgIGlmIChoZXJlX29wID09PSAwKSB7XG4gICAgICAgICAgICAvL1RyYWNldnYoKHN0ZGVyciwgaGVyZS52YWwgPj0gMHgyMCAmJiBoZXJlLnZhbCA8IDB4N2YgP1xuICAgICAgICAgICAgLy8gICAgICAgIFwiaW5mbGF0ZTogICAgICAgICBsaXRlcmFsICclYydcXG5cIiA6XG4gICAgICAgICAgICAvLyAgICAgICAgXCJpbmZsYXRlOiAgICAgICAgIGxpdGVyYWwgMHglMDJ4XFxuXCIsIGhlcmUudmFsKSk7XG4gICAgICAgICAgICBzdGF0ZS5tb2RlID0gTElUO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChoZXJlX29wICYgMzIpIHtcbiAgICAgICAgICAgIC8vVHJhY2V2digoc3RkZXJyLCBcImluZmxhdGU6ICAgICAgICAgZW5kIG9mIGJsb2NrXFxuXCIpKTtcbiAgICAgICAgICAgIHN0YXRlLmJhY2sgPSAtMTtcbiAgICAgICAgICAgIHN0YXRlLm1vZGUgPSBUWVBFO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChoZXJlX29wICYgNjQpIHtcbiAgICAgICAgICAgIHN0cm0ubXNnID0gJ2ludmFsaWQgbGl0ZXJhbC9sZW5ndGggY29kZSc7XG4gICAgICAgICAgICBzdGF0ZS5tb2RlID0gQkFEO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICAgIHN0YXRlLmV4dHJhID0gaGVyZV9vcCAmIDE1O1xuICAgICAgICAgIHN0YXRlLm1vZGUgPSBMRU5FWFQ7XG4gICAgICAgICAgLyogZmFsbHMgdGhyb3VnaCAqL1xuICAgICAgICBjYXNlIExFTkVYVDpcbiAgICAgICAgICBpZiAoc3RhdGUuZXh0cmEpIHtcbiAgICAgICAgICAgIC8vPT09IE5FRURCSVRTKHN0YXRlLmV4dHJhKTtcbiAgICAgICAgICAgIG4gPSBzdGF0ZS5leHRyYTtcbiAgICAgICAgICAgIHdoaWxlIChiaXRzIDwgbikge1xuICAgICAgICAgICAgICBpZiAoaGF2ZSA9PT0gMCkgeyBicmVhayBpbmZfbGVhdmU7IH1cbiAgICAgICAgICAgICAgaGF2ZS0tO1xuICAgICAgICAgICAgICBob2xkICs9IGlucHV0W25leHQrK10gPDwgYml0cztcbiAgICAgICAgICAgICAgYml0cyArPSA4O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy89PT0vL1xuICAgICAgICAgICAgc3RhdGUubGVuZ3RoICs9IGhvbGQgJiAoKDEgPDwgc3RhdGUuZXh0cmEpIC0gMSkvKkJJVFMoc3RhdGUuZXh0cmEpKi87XG4gICAgICAgICAgICAvLy0tLSBEUk9QQklUUyhzdGF0ZS5leHRyYSkgLS0tLy9cbiAgICAgICAgICAgIGhvbGQgPj4+PSBzdGF0ZS5leHRyYTtcbiAgICAgICAgICAgIGJpdHMgLT0gc3RhdGUuZXh0cmE7XG4gICAgICAgICAgICAvLy0tLS8vXG4gICAgICAgICAgICBzdGF0ZS5iYWNrICs9IHN0YXRlLmV4dHJhO1xuICAgICAgICAgIH1cbiAgICAgICAgICAvL1RyYWNldnYoKHN0ZGVyciwgXCJpbmZsYXRlOiAgICAgICAgIGxlbmd0aCAldVxcblwiLCBzdGF0ZS5sZW5ndGgpKTtcbiAgICAgICAgICBzdGF0ZS53YXMgPSBzdGF0ZS5sZW5ndGg7XG4gICAgICAgICAgc3RhdGUubW9kZSA9IERJU1Q7XG4gICAgICAgICAgLyogZmFsbHMgdGhyb3VnaCAqL1xuICAgICAgICBjYXNlIERJU1Q6XG4gICAgICAgICAgZm9yICg7Oykge1xuICAgICAgICAgICAgaGVyZSA9IHN0YXRlLmRpc3Rjb2RlW2hvbGQgJiAoKDEgPDwgc3RhdGUuZGlzdGJpdHMpIC0gMSldOy8qQklUUyhzdGF0ZS5kaXN0Yml0cykqL1xuICAgICAgICAgICAgaGVyZV9iaXRzID0gaGVyZSA+Pj4gMjQ7XG4gICAgICAgICAgICBoZXJlX29wID0gKGhlcmUgPj4+IDE2KSAmIDB4ZmY7XG4gICAgICAgICAgICBoZXJlX3ZhbCA9IGhlcmUgJiAweGZmZmY7XG5cbiAgICAgICAgICAgIGlmICgoaGVyZV9iaXRzKSA8PSBiaXRzKSB7IGJyZWFrOyB9XG4gICAgICAgICAgICAvLy0tLSBQVUxMQllURSgpIC0tLS8vXG4gICAgICAgICAgICBpZiAoaGF2ZSA9PT0gMCkgeyBicmVhayBpbmZfbGVhdmU7IH1cbiAgICAgICAgICAgIGhhdmUtLTtcbiAgICAgICAgICAgIGhvbGQgKz0gaW5wdXRbbmV4dCsrXSA8PCBiaXRzO1xuICAgICAgICAgICAgYml0cyArPSA4O1xuICAgICAgICAgICAgLy8tLS0vL1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoKGhlcmVfb3AgJiAweGYwKSA9PT0gMCkge1xuICAgICAgICAgICAgbGFzdF9iaXRzID0gaGVyZV9iaXRzO1xuICAgICAgICAgICAgbGFzdF9vcCA9IGhlcmVfb3A7XG4gICAgICAgICAgICBsYXN0X3ZhbCA9IGhlcmVfdmFsO1xuICAgICAgICAgICAgZm9yICg7Oykge1xuICAgICAgICAgICAgICBoZXJlID0gc3RhdGUuZGlzdGNvZGVbbGFzdF92YWwgK1xuICAgICAgICAgICAgICAgICAgICAgICgoaG9sZCAmICgoMSA8PCAobGFzdF9iaXRzICsgbGFzdF9vcCkpIC0gMSkpLypCSVRTKGxhc3QuYml0cyArIGxhc3Qub3ApKi8gPj4gbGFzdF9iaXRzKV07XG4gICAgICAgICAgICAgIGhlcmVfYml0cyA9IGhlcmUgPj4+IDI0O1xuICAgICAgICAgICAgICBoZXJlX29wID0gKGhlcmUgPj4+IDE2KSAmIDB4ZmY7XG4gICAgICAgICAgICAgIGhlcmVfdmFsID0gaGVyZSAmIDB4ZmZmZjtcblxuICAgICAgICAgICAgICBpZiAoKGxhc3RfYml0cyArIGhlcmVfYml0cykgPD0gYml0cykgeyBicmVhazsgfVxuICAgICAgICAgICAgICAvLy0tLSBQVUxMQllURSgpIC0tLS8vXG4gICAgICAgICAgICAgIGlmIChoYXZlID09PSAwKSB7IGJyZWFrIGluZl9sZWF2ZTsgfVxuICAgICAgICAgICAgICBoYXZlLS07XG4gICAgICAgICAgICAgIGhvbGQgKz0gaW5wdXRbbmV4dCsrXSA8PCBiaXRzO1xuICAgICAgICAgICAgICBiaXRzICs9IDg7XG4gICAgICAgICAgICAgIC8vLS0tLy9cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vLS0tIERST1BCSVRTKGxhc3QuYml0cykgLS0tLy9cbiAgICAgICAgICAgIGhvbGQgPj4+PSBsYXN0X2JpdHM7XG4gICAgICAgICAgICBiaXRzIC09IGxhc3RfYml0cztcbiAgICAgICAgICAgIC8vLS0tLy9cbiAgICAgICAgICAgIHN0YXRlLmJhY2sgKz0gbGFzdF9iaXRzO1xuICAgICAgICAgIH1cbiAgICAgICAgICAvLy0tLSBEUk9QQklUUyhoZXJlLmJpdHMpIC0tLS8vXG4gICAgICAgICAgaG9sZCA+Pj49IGhlcmVfYml0cztcbiAgICAgICAgICBiaXRzIC09IGhlcmVfYml0cztcbiAgICAgICAgICAvLy0tLS8vXG4gICAgICAgICAgc3RhdGUuYmFjayArPSBoZXJlX2JpdHM7XG4gICAgICAgICAgaWYgKGhlcmVfb3AgJiA2NCkge1xuICAgICAgICAgICAgc3RybS5tc2cgPSAnaW52YWxpZCBkaXN0YW5jZSBjb2RlJztcbiAgICAgICAgICAgIHN0YXRlLm1vZGUgPSBCQUQ7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgICAgc3RhdGUub2Zmc2V0ID0gaGVyZV92YWw7XG4gICAgICAgICAgc3RhdGUuZXh0cmEgPSAoaGVyZV9vcCkgJiAxNTtcbiAgICAgICAgICBzdGF0ZS5tb2RlID0gRElTVEVYVDtcbiAgICAgICAgICAvKiBmYWxscyB0aHJvdWdoICovXG4gICAgICAgIGNhc2UgRElTVEVYVDpcbiAgICAgICAgICBpZiAoc3RhdGUuZXh0cmEpIHtcbiAgICAgICAgICAgIC8vPT09IE5FRURCSVRTKHN0YXRlLmV4dHJhKTtcbiAgICAgICAgICAgIG4gPSBzdGF0ZS5leHRyYTtcbiAgICAgICAgICAgIHdoaWxlIChiaXRzIDwgbikge1xuICAgICAgICAgICAgICBpZiAoaGF2ZSA9PT0gMCkgeyBicmVhayBpbmZfbGVhdmU7IH1cbiAgICAgICAgICAgICAgaGF2ZS0tO1xuICAgICAgICAgICAgICBob2xkICs9IGlucHV0W25leHQrK10gPDwgYml0cztcbiAgICAgICAgICAgICAgYml0cyArPSA4O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy89PT0vL1xuICAgICAgICAgICAgc3RhdGUub2Zmc2V0ICs9IGhvbGQgJiAoKDEgPDwgc3RhdGUuZXh0cmEpIC0gMSkvKkJJVFMoc3RhdGUuZXh0cmEpKi87XG4gICAgICAgICAgICAvLy0tLSBEUk9QQklUUyhzdGF0ZS5leHRyYSkgLS0tLy9cbiAgICAgICAgICAgIGhvbGQgPj4+PSBzdGF0ZS5leHRyYTtcbiAgICAgICAgICAgIGJpdHMgLT0gc3RhdGUuZXh0cmE7XG4gICAgICAgICAgICAvLy0tLS8vXG4gICAgICAgICAgICBzdGF0ZS5iYWNrICs9IHN0YXRlLmV4dHJhO1xuICAgICAgICAgIH1cbiAgLy8jaWZkZWYgSU5GTEFURV9TVFJJQ1RcbiAgICAgICAgICBpZiAoc3RhdGUub2Zmc2V0ID4gc3RhdGUuZG1heCkge1xuICAgICAgICAgICAgc3RybS5tc2cgPSAnaW52YWxpZCBkaXN0YW5jZSB0b28gZmFyIGJhY2snO1xuICAgICAgICAgICAgc3RhdGUubW9kZSA9IEJBRDtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgLy8jZW5kaWZcbiAgICAgICAgICAvL1RyYWNldnYoKHN0ZGVyciwgXCJpbmZsYXRlOiAgICAgICAgIGRpc3RhbmNlICV1XFxuXCIsIHN0YXRlLm9mZnNldCkpO1xuICAgICAgICAgIHN0YXRlLm1vZGUgPSBNQVRDSDtcbiAgICAgICAgICAvKiBmYWxscyB0aHJvdWdoICovXG4gICAgICAgIGNhc2UgTUFUQ0g6XG4gICAgICAgICAgaWYgKGxlZnQgPT09IDApIHsgYnJlYWsgaW5mX2xlYXZlOyB9XG4gICAgICAgICAgY29weSA9IF9vdXQgLSBsZWZ0O1xuICAgICAgICAgIGlmIChzdGF0ZS5vZmZzZXQgPiBjb3B5KSB7ICAgICAgICAgLyogY29weSBmcm9tIHdpbmRvdyAqL1xuICAgICAgICAgICAgY29weSA9IHN0YXRlLm9mZnNldCAtIGNvcHk7XG4gICAgICAgICAgICBpZiAoY29weSA+IHN0YXRlLndoYXZlKSB7XG4gICAgICAgICAgICAgIGlmIChzdGF0ZS5zYW5lKSB7XG4gICAgICAgICAgICAgICAgc3RybS5tc2cgPSAnaW52YWxpZCBkaXN0YW5jZSB0b28gZmFyIGJhY2snO1xuICAgICAgICAgICAgICAgIHN0YXRlLm1vZGUgPSBCQUQ7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgIH1cbiAgLy8gKCEpIFRoaXMgYmxvY2sgaXMgZGlzYWJsZWQgaW4gemxpYiBkZWZhdWx0cyxcbiAgLy8gZG9uJ3QgZW5hYmxlIGl0IGZvciBiaW5hcnkgY29tcGF0aWJpbGl0eVxuICAvLyNpZmRlZiBJTkZMQVRFX0FMTE9XX0lOVkFMSURfRElTVEFOQ0VfVE9PRkFSX0FSUlJcbiAgLy8gICAgICAgICAgVHJhY2UoKHN0ZGVyciwgXCJpbmZsYXRlLmMgdG9vIGZhclxcblwiKSk7XG4gIC8vICAgICAgICAgIGNvcHkgLT0gc3RhdGUud2hhdmU7XG4gIC8vICAgICAgICAgIGlmIChjb3B5ID4gc3RhdGUubGVuZ3RoKSB7IGNvcHkgPSBzdGF0ZS5sZW5ndGg7IH1cbiAgLy8gICAgICAgICAgaWYgKGNvcHkgPiBsZWZ0KSB7IGNvcHkgPSBsZWZ0OyB9XG4gIC8vICAgICAgICAgIGxlZnQgLT0gY29weTtcbiAgLy8gICAgICAgICAgc3RhdGUubGVuZ3RoIC09IGNvcHk7XG4gIC8vICAgICAgICAgIGRvIHtcbiAgLy8gICAgICAgICAgICBvdXRwdXRbcHV0KytdID0gMDtcbiAgLy8gICAgICAgICAgfSB3aGlsZSAoLS1jb3B5KTtcbiAgLy8gICAgICAgICAgaWYgKHN0YXRlLmxlbmd0aCA9PT0gMCkgeyBzdGF0ZS5tb2RlID0gTEVOOyB9XG4gIC8vICAgICAgICAgIGJyZWFrO1xuICAvLyNlbmRpZlxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGNvcHkgPiBzdGF0ZS53bmV4dCkge1xuICAgICAgICAgICAgICBjb3B5IC09IHN0YXRlLnduZXh0O1xuICAgICAgICAgICAgICBmcm9tID0gc3RhdGUud3NpemUgLSBjb3B5O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgIGZyb20gPSBzdGF0ZS53bmV4dCAtIGNvcHk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoY29weSA+IHN0YXRlLmxlbmd0aCkgeyBjb3B5ID0gc3RhdGUubGVuZ3RoOyB9XG4gICAgICAgICAgICBmcm9tX3NvdXJjZSA9IHN0YXRlLndpbmRvdztcbiAgICAgICAgICB9XG4gICAgICAgICAgZWxzZSB7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLyogY29weSBmcm9tIG91dHB1dCAqL1xuICAgICAgICAgICAgZnJvbV9zb3VyY2UgPSBvdXRwdXQ7XG4gICAgICAgICAgICBmcm9tID0gcHV0IC0gc3RhdGUub2Zmc2V0O1xuICAgICAgICAgICAgY29weSA9IHN0YXRlLmxlbmd0aDtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKGNvcHkgPiBsZWZ0KSB7IGNvcHkgPSBsZWZ0OyB9XG4gICAgICAgICAgbGVmdCAtPSBjb3B5O1xuICAgICAgICAgIHN0YXRlLmxlbmd0aCAtPSBjb3B5O1xuICAgICAgICAgIGRvIHtcbiAgICAgICAgICAgIG91dHB1dFtwdXQrK10gPSBmcm9tX3NvdXJjZVtmcm9tKytdO1xuICAgICAgICAgIH0gd2hpbGUgKC0tY29weSk7XG4gICAgICAgICAgaWYgKHN0YXRlLmxlbmd0aCA9PT0gMCkgeyBzdGF0ZS5tb2RlID0gTEVOOyB9XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgTElUOlxuICAgICAgICAgIGlmIChsZWZ0ID09PSAwKSB7IGJyZWFrIGluZl9sZWF2ZTsgfVxuICAgICAgICAgIG91dHB1dFtwdXQrK10gPSBzdGF0ZS5sZW5ndGg7XG4gICAgICAgICAgbGVmdC0tO1xuICAgICAgICAgIHN0YXRlLm1vZGUgPSBMRU47XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgQ0hFQ0s6XG4gICAgICAgICAgaWYgKHN0YXRlLndyYXApIHtcbiAgICAgICAgICAgIC8vPT09IE5FRURCSVRTKDMyKTtcbiAgICAgICAgICAgIHdoaWxlIChiaXRzIDwgMzIpIHtcbiAgICAgICAgICAgICAgaWYgKGhhdmUgPT09IDApIHsgYnJlYWsgaW5mX2xlYXZlOyB9XG4gICAgICAgICAgICAgIGhhdmUtLTtcbiAgICAgICAgICAgICAgLy8gVXNlICd8JyBpbnN0ZWFkIG9mICcrJyB0byBtYWtlIHN1cmUgdGhhdCByZXN1bHQgaXMgc2lnbmVkXG4gICAgICAgICAgICAgIGhvbGQgfD0gaW5wdXRbbmV4dCsrXSA8PCBiaXRzO1xuICAgICAgICAgICAgICBiaXRzICs9IDg7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLz09PS8vXG4gICAgICAgICAgICBfb3V0IC09IGxlZnQ7XG4gICAgICAgICAgICBzdHJtLnRvdGFsX291dCArPSBfb3V0O1xuICAgICAgICAgICAgc3RhdGUudG90YWwgKz0gX291dDtcbiAgICAgICAgICAgIGlmIChfb3V0KSB7XG4gICAgICAgICAgICAgIHN0cm0uYWRsZXIgPSBzdGF0ZS5jaGVjayA9XG4gICAgICAgICAgICAgICAgICAvKlVQREFURShzdGF0ZS5jaGVjaywgcHV0IC0gX291dCwgX291dCk7Ki9cbiAgICAgICAgICAgICAgICAgIChzdGF0ZS5mbGFncyA/IGNyYzMyXzEoc3RhdGUuY2hlY2ssIG91dHB1dCwgX291dCwgcHV0IC0gX291dCkgOiBhZGxlcjMyXzEoc3RhdGUuY2hlY2ssIG91dHB1dCwgX291dCwgcHV0IC0gX291dCkpO1xuXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBfb3V0ID0gbGVmdDtcbiAgICAgICAgICAgIC8vIE5COiBjcmMzMiBzdG9yZWQgYXMgc2lnbmVkIDMyLWJpdCBpbnQsIHpzd2FwMzIgcmV0dXJucyBzaWduZWQgdG9vXG4gICAgICAgICAgICBpZiAoKHN0YXRlLmZsYWdzID8gaG9sZCA6IHpzd2FwMzIoaG9sZCkpICE9PSBzdGF0ZS5jaGVjaykge1xuICAgICAgICAgICAgICBzdHJtLm1zZyA9ICdpbmNvcnJlY3QgZGF0YSBjaGVjayc7XG4gICAgICAgICAgICAgIHN0YXRlLm1vZGUgPSBCQUQ7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy89PT0gSU5JVEJJVFMoKTtcbiAgICAgICAgICAgIGhvbGQgPSAwO1xuICAgICAgICAgICAgYml0cyA9IDA7XG4gICAgICAgICAgICAvLz09PS8vXG4gICAgICAgICAgICAvL1RyYWNldigoc3RkZXJyLCBcImluZmxhdGU6ICAgY2hlY2sgbWF0Y2hlcyB0cmFpbGVyXFxuXCIpKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgc3RhdGUubW9kZSA9IExFTkdUSDtcbiAgICAgICAgICAvKiBmYWxscyB0aHJvdWdoICovXG4gICAgICAgIGNhc2UgTEVOR1RIOlxuICAgICAgICAgIGlmIChzdGF0ZS53cmFwICYmIHN0YXRlLmZsYWdzKSB7XG4gICAgICAgICAgICAvLz09PSBORUVEQklUUygzMik7XG4gICAgICAgICAgICB3aGlsZSAoYml0cyA8IDMyKSB7XG4gICAgICAgICAgICAgIGlmIChoYXZlID09PSAwKSB7IGJyZWFrIGluZl9sZWF2ZTsgfVxuICAgICAgICAgICAgICBoYXZlLS07XG4gICAgICAgICAgICAgIGhvbGQgKz0gaW5wdXRbbmV4dCsrXSA8PCBiaXRzO1xuICAgICAgICAgICAgICBiaXRzICs9IDg7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLz09PS8vXG4gICAgICAgICAgICBpZiAoaG9sZCAhPT0gKHN0YXRlLnRvdGFsICYgMHhmZmZmZmZmZikpIHtcbiAgICAgICAgICAgICAgc3RybS5tc2cgPSAnaW5jb3JyZWN0IGxlbmd0aCBjaGVjayc7XG4gICAgICAgICAgICAgIHN0YXRlLm1vZGUgPSBCQUQ7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy89PT0gSU5JVEJJVFMoKTtcbiAgICAgICAgICAgIGhvbGQgPSAwO1xuICAgICAgICAgICAgYml0cyA9IDA7XG4gICAgICAgICAgICAvLz09PS8vXG4gICAgICAgICAgICAvL1RyYWNldigoc3RkZXJyLCBcImluZmxhdGU6ICAgbGVuZ3RoIG1hdGNoZXMgdHJhaWxlclxcblwiKSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHN0YXRlLm1vZGUgPSBET05FO1xuICAgICAgICAgIC8qIGZhbGxzIHRocm91Z2ggKi9cbiAgICAgICAgY2FzZSBET05FOlxuICAgICAgICAgIHJldCA9IFpfU1RSRUFNX0VORCQxO1xuICAgICAgICAgIGJyZWFrIGluZl9sZWF2ZTtcbiAgICAgICAgY2FzZSBCQUQ6XG4gICAgICAgICAgcmV0ID0gWl9EQVRBX0VSUk9SJDE7XG4gICAgICAgICAgYnJlYWsgaW5mX2xlYXZlO1xuICAgICAgICBjYXNlIE1FTTpcbiAgICAgICAgICByZXR1cm4gWl9NRU1fRVJST1IkMTtcbiAgICAgICAgY2FzZSBTWU5DOlxuICAgICAgICAgIC8qIGZhbGxzIHRocm91Z2ggKi9cbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICByZXR1cm4gWl9TVFJFQU1fRVJST1IkMTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBpbmZfbGVhdmUgPC0gaGVyZSBpcyByZWFsIHBsYWNlIGZvciBcImdvdG8gaW5mX2xlYXZlXCIsIGVtdWxhdGVkIHZpYSBcImJyZWFrIGluZl9sZWF2ZVwiXG5cbiAgICAvKlxuICAgICAgIFJldHVybiBmcm9tIGluZmxhdGUoKSwgdXBkYXRpbmcgdGhlIHRvdGFsIGNvdW50cyBhbmQgdGhlIGNoZWNrIHZhbHVlLlxuICAgICAgIElmIHRoZXJlIHdhcyBubyBwcm9ncmVzcyBkdXJpbmcgdGhlIGluZmxhdGUoKSBjYWxsLCByZXR1cm4gYSBidWZmZXJcbiAgICAgICBlcnJvci4gIENhbGwgdXBkYXRld2luZG93KCkgdG8gY3JlYXRlIGFuZC9vciB1cGRhdGUgdGhlIHdpbmRvdyBzdGF0ZS5cbiAgICAgICBOb3RlOiBhIG1lbW9yeSBlcnJvciBmcm9tIGluZmxhdGUoKSBpcyBub24tcmVjb3ZlcmFibGUuXG4gICAgICovXG5cbiAgICAvLy0tLSBSRVNUT1JFKCkgLS0tXG4gICAgc3RybS5uZXh0X291dCA9IHB1dDtcbiAgICBzdHJtLmF2YWlsX291dCA9IGxlZnQ7XG4gICAgc3RybS5uZXh0X2luID0gbmV4dDtcbiAgICBzdHJtLmF2YWlsX2luID0gaGF2ZTtcbiAgICBzdGF0ZS5ob2xkID0gaG9sZDtcbiAgICBzdGF0ZS5iaXRzID0gYml0cztcbiAgICAvLy0tLVxuXG4gICAgaWYgKHN0YXRlLndzaXplIHx8IChfb3V0ICE9PSBzdHJtLmF2YWlsX291dCAmJiBzdGF0ZS5tb2RlIDwgQkFEICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAoc3RhdGUubW9kZSA8IENIRUNLIHx8IGZsdXNoICE9PSBaX0ZJTklTSCQxKSkpIHtcbiAgICAgIGlmICh1cGRhdGV3aW5kb3coc3RybSwgc3RybS5vdXRwdXQsIHN0cm0ubmV4dF9vdXQsIF9vdXQgLSBzdHJtLmF2YWlsX291dCkpIDtcbiAgICB9XG4gICAgX2luIC09IHN0cm0uYXZhaWxfaW47XG4gICAgX291dCAtPSBzdHJtLmF2YWlsX291dDtcbiAgICBzdHJtLnRvdGFsX2luICs9IF9pbjtcbiAgICBzdHJtLnRvdGFsX291dCArPSBfb3V0O1xuICAgIHN0YXRlLnRvdGFsICs9IF9vdXQ7XG4gICAgaWYgKHN0YXRlLndyYXAgJiYgX291dCkge1xuICAgICAgc3RybS5hZGxlciA9IHN0YXRlLmNoZWNrID0gLypVUERBVEUoc3RhdGUuY2hlY2ssIHN0cm0ubmV4dF9vdXQgLSBfb3V0LCBfb3V0KTsqL1xuICAgICAgICAoc3RhdGUuZmxhZ3MgPyBjcmMzMl8xKHN0YXRlLmNoZWNrLCBvdXRwdXQsIF9vdXQsIHN0cm0ubmV4dF9vdXQgLSBfb3V0KSA6IGFkbGVyMzJfMShzdGF0ZS5jaGVjaywgb3V0cHV0LCBfb3V0LCBzdHJtLm5leHRfb3V0IC0gX291dCkpO1xuICAgIH1cbiAgICBzdHJtLmRhdGFfdHlwZSA9IHN0YXRlLmJpdHMgKyAoc3RhdGUubGFzdCA/IDY0IDogMCkgK1xuICAgICAgICAgICAgICAgICAgICAgIChzdGF0ZS5tb2RlID09PSBUWVBFID8gMTI4IDogMCkgK1xuICAgICAgICAgICAgICAgICAgICAgIChzdGF0ZS5tb2RlID09PSBMRU5fIHx8IHN0YXRlLm1vZGUgPT09IENPUFlfID8gMjU2IDogMCk7XG4gICAgaWYgKCgoX2luID09PSAwICYmIF9vdXQgPT09IDApIHx8IGZsdXNoID09PSBaX0ZJTklTSCQxKSAmJiByZXQgPT09IFpfT0skMSkge1xuICAgICAgcmV0ID0gWl9CVUZfRVJST1I7XG4gICAgfVxuICAgIHJldHVybiByZXQ7XG4gIH07XG5cblxuICBjb25zdCBpbmZsYXRlRW5kID0gKHN0cm0pID0+IHtcblxuICAgIGlmICghc3RybSB8fCAhc3RybS5zdGF0ZSAvKnx8IHN0cm0tPnpmcmVlID09IChmcmVlX2Z1bmMpMCovKSB7XG4gICAgICByZXR1cm4gWl9TVFJFQU1fRVJST1IkMTtcbiAgICB9XG5cbiAgICBsZXQgc3RhdGUgPSBzdHJtLnN0YXRlO1xuICAgIGlmIChzdGF0ZS53aW5kb3cpIHtcbiAgICAgIHN0YXRlLndpbmRvdyA9IG51bGw7XG4gICAgfVxuICAgIHN0cm0uc3RhdGUgPSBudWxsO1xuICAgIHJldHVybiBaX09LJDE7XG4gIH07XG5cblxuICBjb25zdCBpbmZsYXRlR2V0SGVhZGVyID0gKHN0cm0sIGhlYWQpID0+IHtcblxuICAgIC8qIGNoZWNrIHN0YXRlICovXG4gICAgaWYgKCFzdHJtIHx8ICFzdHJtLnN0YXRlKSB7IHJldHVybiBaX1NUUkVBTV9FUlJPUiQxOyB9XG4gICAgY29uc3Qgc3RhdGUgPSBzdHJtLnN0YXRlO1xuICAgIGlmICgoc3RhdGUud3JhcCAmIDIpID09PSAwKSB7IHJldHVybiBaX1NUUkVBTV9FUlJPUiQxOyB9XG5cbiAgICAvKiBzYXZlIGhlYWRlciBzdHJ1Y3R1cmUgKi9cbiAgICBzdGF0ZS5oZWFkID0gaGVhZDtcbiAgICBoZWFkLmRvbmUgPSBmYWxzZTtcbiAgICByZXR1cm4gWl9PSyQxO1xuICB9O1xuXG5cbiAgY29uc3QgaW5mbGF0ZVNldERpY3Rpb25hcnkgPSAoc3RybSwgZGljdGlvbmFyeSkgPT4ge1xuICAgIGNvbnN0IGRpY3RMZW5ndGggPSBkaWN0aW9uYXJ5Lmxlbmd0aDtcblxuICAgIGxldCBzdGF0ZTtcbiAgICBsZXQgZGljdGlkO1xuICAgIGxldCByZXQ7XG5cbiAgICAvKiBjaGVjayBzdGF0ZSAqL1xuICAgIGlmICghc3RybSAvKiA9PSBaX05VTEwgKi8gfHwgIXN0cm0uc3RhdGUgLyogPT0gWl9OVUxMICovKSB7IHJldHVybiBaX1NUUkVBTV9FUlJPUiQxOyB9XG4gICAgc3RhdGUgPSBzdHJtLnN0YXRlO1xuXG4gICAgaWYgKHN0YXRlLndyYXAgIT09IDAgJiYgc3RhdGUubW9kZSAhPT0gRElDVCkge1xuICAgICAgcmV0dXJuIFpfU1RSRUFNX0VSUk9SJDE7XG4gICAgfVxuXG4gICAgLyogY2hlY2sgZm9yIGNvcnJlY3QgZGljdGlvbmFyeSBpZGVudGlmaWVyICovXG4gICAgaWYgKHN0YXRlLm1vZGUgPT09IERJQ1QpIHtcbiAgICAgIGRpY3RpZCA9IDE7IC8qIGFkbGVyMzIoMCwgbnVsbCwgMCkqL1xuICAgICAgLyogZGljdGlkID0gYWRsZXIzMihkaWN0aWQsIGRpY3Rpb25hcnksIGRpY3RMZW5ndGgpOyAqL1xuICAgICAgZGljdGlkID0gYWRsZXIzMl8xKGRpY3RpZCwgZGljdGlvbmFyeSwgZGljdExlbmd0aCwgMCk7XG4gICAgICBpZiAoZGljdGlkICE9PSBzdGF0ZS5jaGVjaykge1xuICAgICAgICByZXR1cm4gWl9EQVRBX0VSUk9SJDE7XG4gICAgICB9XG4gICAgfVxuICAgIC8qIGNvcHkgZGljdGlvbmFyeSB0byB3aW5kb3cgdXNpbmcgdXBkYXRld2luZG93KCksIHdoaWNoIHdpbGwgYW1lbmQgdGhlXG4gICAgIGV4aXN0aW5nIGRpY3Rpb25hcnkgaWYgYXBwcm9wcmlhdGUgKi9cbiAgICByZXQgPSB1cGRhdGV3aW5kb3coc3RybSwgZGljdGlvbmFyeSwgZGljdExlbmd0aCwgZGljdExlbmd0aCk7XG4gICAgaWYgKHJldCkge1xuICAgICAgc3RhdGUubW9kZSA9IE1FTTtcbiAgICAgIHJldHVybiBaX01FTV9FUlJPUiQxO1xuICAgIH1cbiAgICBzdGF0ZS5oYXZlZGljdCA9IDE7XG4gICAgLy8gVHJhY2V2KChzdGRlcnIsIFwiaW5mbGF0ZTogICBkaWN0aW9uYXJ5IHNldFxcblwiKSk7XG4gICAgcmV0dXJuIFpfT0skMTtcbiAgfTtcblxuXG4gIHZhciBpbmZsYXRlUmVzZXRfMSA9IGluZmxhdGVSZXNldDtcbiAgdmFyIGluZmxhdGVSZXNldDJfMSA9IGluZmxhdGVSZXNldDI7XG4gIHZhciBpbmZsYXRlUmVzZXRLZWVwXzEgPSBpbmZsYXRlUmVzZXRLZWVwO1xuICB2YXIgaW5mbGF0ZUluaXRfMSA9IGluZmxhdGVJbml0O1xuICB2YXIgaW5mbGF0ZUluaXQyXzEgPSBpbmZsYXRlSW5pdDI7XG4gIHZhciBpbmZsYXRlXzIkMSA9IGluZmxhdGUkMTtcbiAgdmFyIGluZmxhdGVFbmRfMSA9IGluZmxhdGVFbmQ7XG4gIHZhciBpbmZsYXRlR2V0SGVhZGVyXzEgPSBpbmZsYXRlR2V0SGVhZGVyO1xuICB2YXIgaW5mbGF0ZVNldERpY3Rpb25hcnlfMSA9IGluZmxhdGVTZXREaWN0aW9uYXJ5O1xuICB2YXIgaW5mbGF0ZUluZm8gPSAncGFrbyBpbmZsYXRlIChmcm9tIE5vZGVjYSBwcm9qZWN0KSc7XG5cbiAgLyogTm90IGltcGxlbWVudGVkXG4gIG1vZHVsZS5leHBvcnRzLmluZmxhdGVDb3B5ID0gaW5mbGF0ZUNvcHk7XG4gIG1vZHVsZS5leHBvcnRzLmluZmxhdGVHZXREaWN0aW9uYXJ5ID0gaW5mbGF0ZUdldERpY3Rpb25hcnk7XG4gIG1vZHVsZS5leHBvcnRzLmluZmxhdGVNYXJrID0gaW5mbGF0ZU1hcms7XG4gIG1vZHVsZS5leHBvcnRzLmluZmxhdGVQcmltZSA9IGluZmxhdGVQcmltZTtcbiAgbW9kdWxlLmV4cG9ydHMuaW5mbGF0ZVN5bmMgPSBpbmZsYXRlU3luYztcbiAgbW9kdWxlLmV4cG9ydHMuaW5mbGF0ZVN5bmNQb2ludCA9IGluZmxhdGVTeW5jUG9pbnQ7XG4gIG1vZHVsZS5leHBvcnRzLmluZmxhdGVVbmRlcm1pbmUgPSBpbmZsYXRlVW5kZXJtaW5lO1xuICAqL1xuXG4gIHZhciBpbmZsYXRlXzEkMSA9IHtcbiAgXHRpbmZsYXRlUmVzZXQ6IGluZmxhdGVSZXNldF8xLFxuICBcdGluZmxhdGVSZXNldDI6IGluZmxhdGVSZXNldDJfMSxcbiAgXHRpbmZsYXRlUmVzZXRLZWVwOiBpbmZsYXRlUmVzZXRLZWVwXzEsXG4gIFx0aW5mbGF0ZUluaXQ6IGluZmxhdGVJbml0XzEsXG4gIFx0aW5mbGF0ZUluaXQyOiBpbmZsYXRlSW5pdDJfMSxcbiAgXHRpbmZsYXRlOiBpbmZsYXRlXzIkMSxcbiAgXHRpbmZsYXRlRW5kOiBpbmZsYXRlRW5kXzEsXG4gIFx0aW5mbGF0ZUdldEhlYWRlcjogaW5mbGF0ZUdldEhlYWRlcl8xLFxuICBcdGluZmxhdGVTZXREaWN0aW9uYXJ5OiBpbmZsYXRlU2V0RGljdGlvbmFyeV8xLFxuICBcdGluZmxhdGVJbmZvOiBpbmZsYXRlSW5mb1xuICB9O1xuXG4gIGNvbnN0IF9oYXMgPSAob2JqLCBrZXkpID0+IHtcbiAgICByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwga2V5KTtcbiAgfTtcblxuICB2YXIgYXNzaWduID0gZnVuY3Rpb24gKG9iaiAvKmZyb20xLCBmcm9tMiwgZnJvbTMsIC4uLiovKSB7XG4gICAgY29uc3Qgc291cmNlcyA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cywgMSk7XG4gICAgd2hpbGUgKHNvdXJjZXMubGVuZ3RoKSB7XG4gICAgICBjb25zdCBzb3VyY2UgPSBzb3VyY2VzLnNoaWZ0KCk7XG4gICAgICBpZiAoIXNvdXJjZSkgeyBjb250aW51ZTsgfVxuXG4gICAgICBpZiAodHlwZW9mIHNvdXJjZSAhPT0gJ29iamVjdCcpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihzb3VyY2UgKyAnbXVzdCBiZSBub24tb2JqZWN0Jyk7XG4gICAgICB9XG5cbiAgICAgIGZvciAoY29uc3QgcCBpbiBzb3VyY2UpIHtcbiAgICAgICAgaWYgKF9oYXMoc291cmNlLCBwKSkge1xuICAgICAgICAgIG9ialtwXSA9IHNvdXJjZVtwXTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBvYmo7XG4gIH07XG5cblxuICAvLyBKb2luIGFycmF5IG9mIGNodW5rcyB0byBzaW5nbGUgYXJyYXkuXG4gIHZhciBmbGF0dGVuQ2h1bmtzID0gKGNodW5rcykgPT4ge1xuICAgIC8vIGNhbGN1bGF0ZSBkYXRhIGxlbmd0aFxuICAgIGxldCBsZW4gPSAwO1xuXG4gICAgZm9yIChsZXQgaSA9IDAsIGwgPSBjaHVua3MubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICBsZW4gKz0gY2h1bmtzW2ldLmxlbmd0aDtcbiAgICB9XG5cbiAgICAvLyBqb2luIGNodW5rc1xuICAgIGNvbnN0IHJlc3VsdCA9IG5ldyBVaW50OEFycmF5KGxlbik7XG5cbiAgICBmb3IgKGxldCBpID0gMCwgcG9zID0gMCwgbCA9IGNodW5rcy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgIGxldCBjaHVuayA9IGNodW5rc1tpXTtcbiAgICAgIHJlc3VsdC5zZXQoY2h1bmssIHBvcyk7XG4gICAgICBwb3MgKz0gY2h1bmsubGVuZ3RoO1xuICAgIH1cblxuICAgIHJldHVybiByZXN1bHQ7XG4gIH07XG5cbiAgdmFyIGNvbW1vbiA9IHtcbiAgXHRhc3NpZ246IGFzc2lnbixcbiAgXHRmbGF0dGVuQ2h1bmtzOiBmbGF0dGVuQ2h1bmtzXG4gIH07XG5cbiAgLy8gU3RyaW5nIGVuY29kZS9kZWNvZGUgaGVscGVyc1xuXG5cbiAgLy8gUXVpY2sgY2hlY2sgaWYgd2UgY2FuIHVzZSBmYXN0IGFycmF5IHRvIGJpbiBzdHJpbmcgY29udmVyc2lvblxuICAvL1xuICAvLyAtIGFwcGx5KEFycmF5KSBjYW4gZmFpbCBvbiBBbmRyb2lkIDIuMlxuICAvLyAtIGFwcGx5KFVpbnQ4QXJyYXkpIGNhbiBmYWlsIG9uIGlPUyA1LjEgU2FmYXJpXG4gIC8vXG4gIGxldCBTVFJfQVBQTFlfVUlBX09LID0gdHJ1ZTtcblxuICB0cnkgeyBTdHJpbmcuZnJvbUNoYXJDb2RlLmFwcGx5KG51bGwsIG5ldyBVaW50OEFycmF5KDEpKTsgfSBjYXRjaCAoX18pIHsgU1RSX0FQUExZX1VJQV9PSyA9IGZhbHNlOyB9XG5cblxuICAvLyBUYWJsZSB3aXRoIHV0ZjggbGVuZ3RocyAoY2FsY3VsYXRlZCBieSBmaXJzdCBieXRlIG9mIHNlcXVlbmNlKVxuICAvLyBOb3RlLCB0aGF0IDUgJiA2LWJ5dGUgdmFsdWVzIGFuZCBzb21lIDQtYnl0ZSB2YWx1ZXMgY2FuIG5vdCBiZSByZXByZXNlbnRlZCBpbiBKUyxcbiAgLy8gYmVjYXVzZSBtYXggcG9zc2libGUgY29kZXBvaW50IGlzIDB4MTBmZmZmXG4gIGNvbnN0IF91dGY4bGVuID0gbmV3IFVpbnQ4QXJyYXkoMjU2KTtcbiAgZm9yIChsZXQgcSA9IDA7IHEgPCAyNTY7IHErKykge1xuICAgIF91dGY4bGVuW3FdID0gKHEgPj0gMjUyID8gNiA6IHEgPj0gMjQ4ID8gNSA6IHEgPj0gMjQwID8gNCA6IHEgPj0gMjI0ID8gMyA6IHEgPj0gMTkyID8gMiA6IDEpO1xuICB9XG4gIF91dGY4bGVuWzI1NF0gPSBfdXRmOGxlblsyNTRdID0gMTsgLy8gSW52YWxpZCBzZXF1ZW5jZSBzdGFydFxuXG5cbiAgLy8gY29udmVydCBzdHJpbmcgdG8gYXJyYXkgKHR5cGVkLCB3aGVuIHBvc3NpYmxlKVxuICB2YXIgc3RyaW5nMmJ1ZiA9IChzdHIpID0+IHtcbiAgICBpZiAodHlwZW9mIFRleHRFbmNvZGVyID09PSAnZnVuY3Rpb24nICYmIFRleHRFbmNvZGVyLnByb3RvdHlwZS5lbmNvZGUpIHtcbiAgICAgIHJldHVybiBuZXcgVGV4dEVuY29kZXIoKS5lbmNvZGUoc3RyKTtcbiAgICB9XG5cbiAgICBsZXQgYnVmLCBjLCBjMiwgbV9wb3MsIGksIHN0cl9sZW4gPSBzdHIubGVuZ3RoLCBidWZfbGVuID0gMDtcblxuICAgIC8vIGNvdW50IGJpbmFyeSBzaXplXG4gICAgZm9yIChtX3BvcyA9IDA7IG1fcG9zIDwgc3RyX2xlbjsgbV9wb3MrKykge1xuICAgICAgYyA9IHN0ci5jaGFyQ29kZUF0KG1fcG9zKTtcbiAgICAgIGlmICgoYyAmIDB4ZmMwMCkgPT09IDB4ZDgwMCAmJiAobV9wb3MgKyAxIDwgc3RyX2xlbikpIHtcbiAgICAgICAgYzIgPSBzdHIuY2hhckNvZGVBdChtX3BvcyArIDEpO1xuICAgICAgICBpZiAoKGMyICYgMHhmYzAwKSA9PT0gMHhkYzAwKSB7XG4gICAgICAgICAgYyA9IDB4MTAwMDAgKyAoKGMgLSAweGQ4MDApIDw8IDEwKSArIChjMiAtIDB4ZGMwMCk7XG4gICAgICAgICAgbV9wb3MrKztcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgYnVmX2xlbiArPSBjIDwgMHg4MCA/IDEgOiBjIDwgMHg4MDAgPyAyIDogYyA8IDB4MTAwMDAgPyAzIDogNDtcbiAgICB9XG5cbiAgICAvLyBhbGxvY2F0ZSBidWZmZXJcbiAgICBidWYgPSBuZXcgVWludDhBcnJheShidWZfbGVuKTtcblxuICAgIC8vIGNvbnZlcnRcbiAgICBmb3IgKGkgPSAwLCBtX3BvcyA9IDA7IGkgPCBidWZfbGVuOyBtX3BvcysrKSB7XG4gICAgICBjID0gc3RyLmNoYXJDb2RlQXQobV9wb3MpO1xuICAgICAgaWYgKChjICYgMHhmYzAwKSA9PT0gMHhkODAwICYmIChtX3BvcyArIDEgPCBzdHJfbGVuKSkge1xuICAgICAgICBjMiA9IHN0ci5jaGFyQ29kZUF0KG1fcG9zICsgMSk7XG4gICAgICAgIGlmICgoYzIgJiAweGZjMDApID09PSAweGRjMDApIHtcbiAgICAgICAgICBjID0gMHgxMDAwMCArICgoYyAtIDB4ZDgwMCkgPDwgMTApICsgKGMyIC0gMHhkYzAwKTtcbiAgICAgICAgICBtX3BvcysrO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoYyA8IDB4ODApIHtcbiAgICAgICAgLyogb25lIGJ5dGUgKi9cbiAgICAgICAgYnVmW2krK10gPSBjO1xuICAgICAgfSBlbHNlIGlmIChjIDwgMHg4MDApIHtcbiAgICAgICAgLyogdHdvIGJ5dGVzICovXG4gICAgICAgIGJ1ZltpKytdID0gMHhDMCB8IChjID4+PiA2KTtcbiAgICAgICAgYnVmW2krK10gPSAweDgwIHwgKGMgJiAweDNmKTtcbiAgICAgIH0gZWxzZSBpZiAoYyA8IDB4MTAwMDApIHtcbiAgICAgICAgLyogdGhyZWUgYnl0ZXMgKi9cbiAgICAgICAgYnVmW2krK10gPSAweEUwIHwgKGMgPj4+IDEyKTtcbiAgICAgICAgYnVmW2krK10gPSAweDgwIHwgKGMgPj4+IDYgJiAweDNmKTtcbiAgICAgICAgYnVmW2krK10gPSAweDgwIHwgKGMgJiAweDNmKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8qIGZvdXIgYnl0ZXMgKi9cbiAgICAgICAgYnVmW2krK10gPSAweGYwIHwgKGMgPj4+IDE4KTtcbiAgICAgICAgYnVmW2krK10gPSAweDgwIHwgKGMgPj4+IDEyICYgMHgzZik7XG4gICAgICAgIGJ1ZltpKytdID0gMHg4MCB8IChjID4+PiA2ICYgMHgzZik7XG4gICAgICAgIGJ1ZltpKytdID0gMHg4MCB8IChjICYgMHgzZik7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGJ1ZjtcbiAgfTtcblxuICAvLyBIZWxwZXJcbiAgY29uc3QgYnVmMmJpbnN0cmluZyA9IChidWYsIGxlbikgPT4ge1xuICAgIC8vIE9uIENocm9tZSwgdGhlIGFyZ3VtZW50cyBpbiBhIGZ1bmN0aW9uIGNhbGwgdGhhdCBhcmUgYWxsb3dlZCBpcyBgNjU1MzRgLlxuICAgIC8vIElmIHRoZSBsZW5ndGggb2YgdGhlIGJ1ZmZlciBpcyBzbWFsbGVyIHRoYW4gdGhhdCwgd2UgY2FuIHVzZSB0aGlzIG9wdGltaXphdGlvbixcbiAgICAvLyBvdGhlcndpc2Ugd2Ugd2lsbCB0YWtlIGEgc2xvd2VyIHBhdGguXG4gICAgaWYgKGxlbiA8IDY1NTM0KSB7XG4gICAgICBpZiAoYnVmLnN1YmFycmF5ICYmIFNUUl9BUFBMWV9VSUFfT0spIHtcbiAgICAgICAgcmV0dXJuIFN0cmluZy5mcm9tQ2hhckNvZGUuYXBwbHkobnVsbCwgYnVmLmxlbmd0aCA9PT0gbGVuID8gYnVmIDogYnVmLnN1YmFycmF5KDAsIGxlbikpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGxldCByZXN1bHQgPSAnJztcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICByZXN1bHQgKz0gU3RyaW5nLmZyb21DaGFyQ29kZShidWZbaV0pO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9O1xuXG5cbiAgLy8gY29udmVydCBhcnJheSB0byBzdHJpbmdcbiAgdmFyIGJ1ZjJzdHJpbmcgPSAoYnVmLCBtYXgpID0+IHtcbiAgICBjb25zdCBsZW4gPSBtYXggfHwgYnVmLmxlbmd0aDtcblxuICAgIGlmICh0eXBlb2YgVGV4dERlY29kZXIgPT09ICdmdW5jdGlvbicgJiYgVGV4dERlY29kZXIucHJvdG90eXBlLmRlY29kZSkge1xuICAgICAgcmV0dXJuIG5ldyBUZXh0RGVjb2RlcigpLmRlY29kZShidWYuc3ViYXJyYXkoMCwgbWF4KSk7XG4gICAgfVxuXG4gICAgbGV0IGksIG91dDtcblxuICAgIC8vIFJlc2VydmUgbWF4IHBvc3NpYmxlIGxlbmd0aCAoMiB3b3JkcyBwZXIgY2hhcilcbiAgICAvLyBOQjogYnkgdW5rbm93biByZWFzb25zLCBBcnJheSBpcyBzaWduaWZpY2FudGx5IGZhc3RlciBmb3JcbiAgICAvLyAgICAgU3RyaW5nLmZyb21DaGFyQ29kZS5hcHBseSB0aGFuIFVpbnQxNkFycmF5LlxuICAgIGNvbnN0IHV0ZjE2YnVmID0gbmV3IEFycmF5KGxlbiAqIDIpO1xuXG4gICAgZm9yIChvdXQgPSAwLCBpID0gMDsgaSA8IGxlbjspIHtcbiAgICAgIGxldCBjID0gYnVmW2krK107XG4gICAgICAvLyBxdWljayBwcm9jZXNzIGFzY2lpXG4gICAgICBpZiAoYyA8IDB4ODApIHsgdXRmMTZidWZbb3V0KytdID0gYzsgY29udGludWU7IH1cblxuICAgICAgbGV0IGNfbGVuID0gX3V0ZjhsZW5bY107XG4gICAgICAvLyBza2lwIDUgJiA2IGJ5dGUgY29kZXNcbiAgICAgIGlmIChjX2xlbiA+IDQpIHsgdXRmMTZidWZbb3V0KytdID0gMHhmZmZkOyBpICs9IGNfbGVuIC0gMTsgY29udGludWU7IH1cblxuICAgICAgLy8gYXBwbHkgbWFzayBvbiBmaXJzdCBieXRlXG4gICAgICBjICY9IGNfbGVuID09PSAyID8gMHgxZiA6IGNfbGVuID09PSAzID8gMHgwZiA6IDB4MDc7XG4gICAgICAvLyBqb2luIHRoZSByZXN0XG4gICAgICB3aGlsZSAoY19sZW4gPiAxICYmIGkgPCBsZW4pIHtcbiAgICAgICAgYyA9IChjIDw8IDYpIHwgKGJ1ZltpKytdICYgMHgzZik7XG4gICAgICAgIGNfbGVuLS07XG4gICAgICB9XG5cbiAgICAgIC8vIHRlcm1pbmF0ZWQgYnkgZW5kIG9mIHN0cmluZz9cbiAgICAgIGlmIChjX2xlbiA+IDEpIHsgdXRmMTZidWZbb3V0KytdID0gMHhmZmZkOyBjb250aW51ZTsgfVxuXG4gICAgICBpZiAoYyA8IDB4MTAwMDApIHtcbiAgICAgICAgdXRmMTZidWZbb3V0KytdID0gYztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGMgLT0gMHgxMDAwMDtcbiAgICAgICAgdXRmMTZidWZbb3V0KytdID0gMHhkODAwIHwgKChjID4+IDEwKSAmIDB4M2ZmKTtcbiAgICAgICAgdXRmMTZidWZbb3V0KytdID0gMHhkYzAwIHwgKGMgJiAweDNmZik7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGJ1ZjJiaW5zdHJpbmcodXRmMTZidWYsIG91dCk7XG4gIH07XG5cblxuICAvLyBDYWxjdWxhdGUgbWF4IHBvc3NpYmxlIHBvc2l0aW9uIGluIHV0ZjggYnVmZmVyLFxuICAvLyB0aGF0IHdpbGwgbm90IGJyZWFrIHNlcXVlbmNlLiBJZiB0aGF0J3Mgbm90IHBvc3NpYmxlXG4gIC8vIC0gKHZlcnkgc21hbGwgbGltaXRzKSByZXR1cm4gbWF4IHNpemUgYXMgaXMuXG4gIC8vXG4gIC8vIGJ1ZltdIC0gdXRmOCBieXRlcyBhcnJheVxuICAvLyBtYXggICAtIGxlbmd0aCBsaW1pdCAobWFuZGF0b3J5KTtcbiAgdmFyIHV0Zjhib3JkZXIgPSAoYnVmLCBtYXgpID0+IHtcblxuICAgIG1heCA9IG1heCB8fCBidWYubGVuZ3RoO1xuICAgIGlmIChtYXggPiBidWYubGVuZ3RoKSB7IG1heCA9IGJ1Zi5sZW5ndGg7IH1cblxuICAgIC8vIGdvIGJhY2sgZnJvbSBsYXN0IHBvc2l0aW9uLCB1bnRpbCBzdGFydCBvZiBzZXF1ZW5jZSBmb3VuZFxuICAgIGxldCBwb3MgPSBtYXggLSAxO1xuICAgIHdoaWxlIChwb3MgPj0gMCAmJiAoYnVmW3Bvc10gJiAweEMwKSA9PT0gMHg4MCkgeyBwb3MtLTsgfVxuXG4gICAgLy8gVmVyeSBzbWFsbCBhbmQgYnJva2VuIHNlcXVlbmNlLFxuICAgIC8vIHJldHVybiBtYXgsIGJlY2F1c2Ugd2Ugc2hvdWxkIHJldHVybiBzb21ldGhpbmcgYW55d2F5LlxuICAgIGlmIChwb3MgPCAwKSB7IHJldHVybiBtYXg7IH1cblxuICAgIC8vIElmIHdlIGNhbWUgdG8gc3RhcnQgb2YgYnVmZmVyIC0gdGhhdCBtZWFucyBidWZmZXIgaXMgdG9vIHNtYWxsLFxuICAgIC8vIHJldHVybiBtYXggdG9vLlxuICAgIGlmIChwb3MgPT09IDApIHsgcmV0dXJuIG1heDsgfVxuXG4gICAgcmV0dXJuIChwb3MgKyBfdXRmOGxlbltidWZbcG9zXV0gPiBtYXgpID8gcG9zIDogbWF4O1xuICB9O1xuXG4gIHZhciBzdHJpbmdzID0ge1xuICBcdHN0cmluZzJidWY6IHN0cmluZzJidWYsXG4gIFx0YnVmMnN0cmluZzogYnVmMnN0cmluZyxcbiAgXHR1dGY4Ym9yZGVyOiB1dGY4Ym9yZGVyXG4gIH07XG5cbiAgLy8gKEMpIDE5OTUtMjAxMyBKZWFuLWxvdXAgR2FpbGx5IGFuZCBNYXJrIEFkbGVyXG4gIC8vIChDKSAyMDE0LTIwMTcgVml0YWx5IFB1enJpbiBhbmQgQW5kcmV5IFR1cGl0c2luXG4gIC8vXG4gIC8vIFRoaXMgc29mdHdhcmUgaXMgcHJvdmlkZWQgJ2FzLWlzJywgd2l0aG91dCBhbnkgZXhwcmVzcyBvciBpbXBsaWVkXG4gIC8vIHdhcnJhbnR5LiBJbiBubyBldmVudCB3aWxsIHRoZSBhdXRob3JzIGJlIGhlbGQgbGlhYmxlIGZvciBhbnkgZGFtYWdlc1xuICAvLyBhcmlzaW5nIGZyb20gdGhlIHVzZSBvZiB0aGlzIHNvZnR3YXJlLlxuICAvL1xuICAvLyBQZXJtaXNzaW9uIGlzIGdyYW50ZWQgdG8gYW55b25lIHRvIHVzZSB0aGlzIHNvZnR3YXJlIGZvciBhbnkgcHVycG9zZSxcbiAgLy8gaW5jbHVkaW5nIGNvbW1lcmNpYWwgYXBwbGljYXRpb25zLCBhbmQgdG8gYWx0ZXIgaXQgYW5kIHJlZGlzdHJpYnV0ZSBpdFxuICAvLyBmcmVlbHksIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyByZXN0cmljdGlvbnM6XG4gIC8vXG4gIC8vIDEuIFRoZSBvcmlnaW4gb2YgdGhpcyBzb2Z0d2FyZSBtdXN0IG5vdCBiZSBtaXNyZXByZXNlbnRlZDsgeW91IG11c3Qgbm90XG4gIC8vICAgY2xhaW0gdGhhdCB5b3Ugd3JvdGUgdGhlIG9yaWdpbmFsIHNvZnR3YXJlLiBJZiB5b3UgdXNlIHRoaXMgc29mdHdhcmVcbiAgLy8gICBpbiBhIHByb2R1Y3QsIGFuIGFja25vd2xlZGdtZW50IGluIHRoZSBwcm9kdWN0IGRvY3VtZW50YXRpb24gd291bGQgYmVcbiAgLy8gICBhcHByZWNpYXRlZCBidXQgaXMgbm90IHJlcXVpcmVkLlxuICAvLyAyLiBBbHRlcmVkIHNvdXJjZSB2ZXJzaW9ucyBtdXN0IGJlIHBsYWlubHkgbWFya2VkIGFzIHN1Y2gsIGFuZCBtdXN0IG5vdCBiZVxuICAvLyAgIG1pc3JlcHJlc2VudGVkIGFzIGJlaW5nIHRoZSBvcmlnaW5hbCBzb2Z0d2FyZS5cbiAgLy8gMy4gVGhpcyBub3RpY2UgbWF5IG5vdCBiZSByZW1vdmVkIG9yIGFsdGVyZWQgZnJvbSBhbnkgc291cmNlIGRpc3RyaWJ1dGlvbi5cblxuICB2YXIgbWVzc2FnZXMgPSB7XG4gICAgMjogICAgICAnbmVlZCBkaWN0aW9uYXJ5JywgICAgIC8qIFpfTkVFRF9ESUNUICAgICAgIDIgICovXG4gICAgMTogICAgICAnc3RyZWFtIGVuZCcsICAgICAgICAgIC8qIFpfU1RSRUFNX0VORCAgICAgIDEgICovXG4gICAgMDogICAgICAnJywgICAgICAgICAgICAgICAgICAgIC8qIFpfT0sgICAgICAgICAgICAgIDAgICovXG4gICAgJy0xJzogICAnZmlsZSBlcnJvcicsICAgICAgICAgIC8qIFpfRVJSTk8gICAgICAgICAoLTEpICovXG4gICAgJy0yJzogICAnc3RyZWFtIGVycm9yJywgICAgICAgIC8qIFpfU1RSRUFNX0VSUk9SICAoLTIpICovXG4gICAgJy0zJzogICAnZGF0YSBlcnJvcicsICAgICAgICAgIC8qIFpfREFUQV9FUlJPUiAgICAoLTMpICovXG4gICAgJy00JzogICAnaW5zdWZmaWNpZW50IG1lbW9yeScsIC8qIFpfTUVNX0VSUk9SICAgICAoLTQpICovXG4gICAgJy01JzogICAnYnVmZmVyIGVycm9yJywgICAgICAgIC8qIFpfQlVGX0VSUk9SICAgICAoLTUpICovXG4gICAgJy02JzogICAnaW5jb21wYXRpYmxlIHZlcnNpb24nIC8qIFpfVkVSU0lPTl9FUlJPUiAoLTYpICovXG4gIH07XG5cbiAgLy8gKEMpIDE5OTUtMjAxMyBKZWFuLWxvdXAgR2FpbGx5IGFuZCBNYXJrIEFkbGVyXG4gIC8vIChDKSAyMDE0LTIwMTcgVml0YWx5IFB1enJpbiBhbmQgQW5kcmV5IFR1cGl0c2luXG4gIC8vXG4gIC8vIFRoaXMgc29mdHdhcmUgaXMgcHJvdmlkZWQgJ2FzLWlzJywgd2l0aG91dCBhbnkgZXhwcmVzcyBvciBpbXBsaWVkXG4gIC8vIHdhcnJhbnR5LiBJbiBubyBldmVudCB3aWxsIHRoZSBhdXRob3JzIGJlIGhlbGQgbGlhYmxlIGZvciBhbnkgZGFtYWdlc1xuICAvLyBhcmlzaW5nIGZyb20gdGhlIHVzZSBvZiB0aGlzIHNvZnR3YXJlLlxuICAvL1xuICAvLyBQZXJtaXNzaW9uIGlzIGdyYW50ZWQgdG8gYW55b25lIHRvIHVzZSB0aGlzIHNvZnR3YXJlIGZvciBhbnkgcHVycG9zZSxcbiAgLy8gaW5jbHVkaW5nIGNvbW1lcmNpYWwgYXBwbGljYXRpb25zLCBhbmQgdG8gYWx0ZXIgaXQgYW5kIHJlZGlzdHJpYnV0ZSBpdFxuICAvLyBmcmVlbHksIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyByZXN0cmljdGlvbnM6XG4gIC8vXG4gIC8vIDEuIFRoZSBvcmlnaW4gb2YgdGhpcyBzb2Z0d2FyZSBtdXN0IG5vdCBiZSBtaXNyZXByZXNlbnRlZDsgeW91IG11c3Qgbm90XG4gIC8vICAgY2xhaW0gdGhhdCB5b3Ugd3JvdGUgdGhlIG9yaWdpbmFsIHNvZnR3YXJlLiBJZiB5b3UgdXNlIHRoaXMgc29mdHdhcmVcbiAgLy8gICBpbiBhIHByb2R1Y3QsIGFuIGFja25vd2xlZGdtZW50IGluIHRoZSBwcm9kdWN0IGRvY3VtZW50YXRpb24gd291bGQgYmVcbiAgLy8gICBhcHByZWNpYXRlZCBidXQgaXMgbm90IHJlcXVpcmVkLlxuICAvLyAyLiBBbHRlcmVkIHNvdXJjZSB2ZXJzaW9ucyBtdXN0IGJlIHBsYWlubHkgbWFya2VkIGFzIHN1Y2gsIGFuZCBtdXN0IG5vdCBiZVxuICAvLyAgIG1pc3JlcHJlc2VudGVkIGFzIGJlaW5nIHRoZSBvcmlnaW5hbCBzb2Z0d2FyZS5cbiAgLy8gMy4gVGhpcyBub3RpY2UgbWF5IG5vdCBiZSByZW1vdmVkIG9yIGFsdGVyZWQgZnJvbSBhbnkgc291cmNlIGRpc3RyaWJ1dGlvbi5cblxuICBmdW5jdGlvbiBaU3RyZWFtKCkge1xuICAgIC8qIG5leHQgaW5wdXQgYnl0ZSAqL1xuICAgIHRoaXMuaW5wdXQgPSBudWxsOyAvLyBKUyBzcGVjaWZpYywgYmVjYXVzZSB3ZSBoYXZlIG5vIHBvaW50ZXJzXG4gICAgdGhpcy5uZXh0X2luID0gMDtcbiAgICAvKiBudW1iZXIgb2YgYnl0ZXMgYXZhaWxhYmxlIGF0IGlucHV0ICovXG4gICAgdGhpcy5hdmFpbF9pbiA9IDA7XG4gICAgLyogdG90YWwgbnVtYmVyIG9mIGlucHV0IGJ5dGVzIHJlYWQgc28gZmFyICovXG4gICAgdGhpcy50b3RhbF9pbiA9IDA7XG4gICAgLyogbmV4dCBvdXRwdXQgYnl0ZSBzaG91bGQgYmUgcHV0IHRoZXJlICovXG4gICAgdGhpcy5vdXRwdXQgPSBudWxsOyAvLyBKUyBzcGVjaWZpYywgYmVjYXVzZSB3ZSBoYXZlIG5vIHBvaW50ZXJzXG4gICAgdGhpcy5uZXh0X291dCA9IDA7XG4gICAgLyogcmVtYWluaW5nIGZyZWUgc3BhY2UgYXQgb3V0cHV0ICovXG4gICAgdGhpcy5hdmFpbF9vdXQgPSAwO1xuICAgIC8qIHRvdGFsIG51bWJlciBvZiBieXRlcyBvdXRwdXQgc28gZmFyICovXG4gICAgdGhpcy50b3RhbF9vdXQgPSAwO1xuICAgIC8qIGxhc3QgZXJyb3IgbWVzc2FnZSwgTlVMTCBpZiBubyBlcnJvciAqL1xuICAgIHRoaXMubXNnID0gJycvKlpfTlVMTCovO1xuICAgIC8qIG5vdCB2aXNpYmxlIGJ5IGFwcGxpY2F0aW9ucyAqL1xuICAgIHRoaXMuc3RhdGUgPSBudWxsO1xuICAgIC8qIGJlc3QgZ3Vlc3MgYWJvdXQgdGhlIGRhdGEgdHlwZTogYmluYXJ5IG9yIHRleHQgKi9cbiAgICB0aGlzLmRhdGFfdHlwZSA9IDIvKlpfVU5LTk9XTiovO1xuICAgIC8qIGFkbGVyMzIgdmFsdWUgb2YgdGhlIHVuY29tcHJlc3NlZCBkYXRhICovXG4gICAgdGhpcy5hZGxlciA9IDA7XG4gIH1cblxuICB2YXIgenN0cmVhbSA9IFpTdHJlYW07XG5cbiAgLy8gKEMpIDE5OTUtMjAxMyBKZWFuLWxvdXAgR2FpbGx5IGFuZCBNYXJrIEFkbGVyXG4gIC8vIChDKSAyMDE0LTIwMTcgVml0YWx5IFB1enJpbiBhbmQgQW5kcmV5IFR1cGl0c2luXG4gIC8vXG4gIC8vIFRoaXMgc29mdHdhcmUgaXMgcHJvdmlkZWQgJ2FzLWlzJywgd2l0aG91dCBhbnkgZXhwcmVzcyBvciBpbXBsaWVkXG4gIC8vIHdhcnJhbnR5LiBJbiBubyBldmVudCB3aWxsIHRoZSBhdXRob3JzIGJlIGhlbGQgbGlhYmxlIGZvciBhbnkgZGFtYWdlc1xuICAvLyBhcmlzaW5nIGZyb20gdGhlIHVzZSBvZiB0aGlzIHNvZnR3YXJlLlxuICAvL1xuICAvLyBQZXJtaXNzaW9uIGlzIGdyYW50ZWQgdG8gYW55b25lIHRvIHVzZSB0aGlzIHNvZnR3YXJlIGZvciBhbnkgcHVycG9zZSxcbiAgLy8gaW5jbHVkaW5nIGNvbW1lcmNpYWwgYXBwbGljYXRpb25zLCBhbmQgdG8gYWx0ZXIgaXQgYW5kIHJlZGlzdHJpYnV0ZSBpdFxuICAvLyBmcmVlbHksIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyByZXN0cmljdGlvbnM6XG4gIC8vXG4gIC8vIDEuIFRoZSBvcmlnaW4gb2YgdGhpcyBzb2Z0d2FyZSBtdXN0IG5vdCBiZSBtaXNyZXByZXNlbnRlZDsgeW91IG11c3Qgbm90XG4gIC8vICAgY2xhaW0gdGhhdCB5b3Ugd3JvdGUgdGhlIG9yaWdpbmFsIHNvZnR3YXJlLiBJZiB5b3UgdXNlIHRoaXMgc29mdHdhcmVcbiAgLy8gICBpbiBhIHByb2R1Y3QsIGFuIGFja25vd2xlZGdtZW50IGluIHRoZSBwcm9kdWN0IGRvY3VtZW50YXRpb24gd291bGQgYmVcbiAgLy8gICBhcHByZWNpYXRlZCBidXQgaXMgbm90IHJlcXVpcmVkLlxuICAvLyAyLiBBbHRlcmVkIHNvdXJjZSB2ZXJzaW9ucyBtdXN0IGJlIHBsYWlubHkgbWFya2VkIGFzIHN1Y2gsIGFuZCBtdXN0IG5vdCBiZVxuICAvLyAgIG1pc3JlcHJlc2VudGVkIGFzIGJlaW5nIHRoZSBvcmlnaW5hbCBzb2Z0d2FyZS5cbiAgLy8gMy4gVGhpcyBub3RpY2UgbWF5IG5vdCBiZSByZW1vdmVkIG9yIGFsdGVyZWQgZnJvbSBhbnkgc291cmNlIGRpc3RyaWJ1dGlvbi5cblxuICBmdW5jdGlvbiBHWmhlYWRlcigpIHtcbiAgICAvKiB0cnVlIGlmIGNvbXByZXNzZWQgZGF0YSBiZWxpZXZlZCB0byBiZSB0ZXh0ICovXG4gICAgdGhpcy50ZXh0ICAgICAgID0gMDtcbiAgICAvKiBtb2RpZmljYXRpb24gdGltZSAqL1xuICAgIHRoaXMudGltZSAgICAgICA9IDA7XG4gICAgLyogZXh0cmEgZmxhZ3MgKG5vdCB1c2VkIHdoZW4gd3JpdGluZyBhIGd6aXAgZmlsZSkgKi9cbiAgICB0aGlzLnhmbGFncyAgICAgPSAwO1xuICAgIC8qIG9wZXJhdGluZyBzeXN0ZW0gKi9cbiAgICB0aGlzLm9zICAgICAgICAgPSAwO1xuICAgIC8qIHBvaW50ZXIgdG8gZXh0cmEgZmllbGQgb3IgWl9OVUxMIGlmIG5vbmUgKi9cbiAgICB0aGlzLmV4dHJhICAgICAgPSBudWxsO1xuICAgIC8qIGV4dHJhIGZpZWxkIGxlbmd0aCAodmFsaWQgaWYgZXh0cmEgIT0gWl9OVUxMKSAqL1xuICAgIHRoaXMuZXh0cmFfbGVuICA9IDA7IC8vIEFjdHVhbGx5LCB3ZSBkb24ndCBuZWVkIGl0IGluIEpTLFxuICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGJ1dCBsZWF2ZSBmb3IgZmV3IGNvZGUgbW9kaWZpY2F0aW9uc1xuXG4gICAgLy9cbiAgICAvLyBTZXR1cCBsaW1pdHMgaXMgbm90IG5lY2Vzc2FyeSBiZWNhdXNlIGluIGpzIHdlIHNob3VsZCBub3QgcHJlYWxsb2NhdGUgbWVtb3J5XG4gICAgLy8gZm9yIGluZmxhdGUgdXNlIGNvbnN0YW50IGxpbWl0IGluIDY1NTM2IGJ5dGVzXG4gICAgLy9cblxuICAgIC8qIHNwYWNlIGF0IGV4dHJhIChvbmx5IHdoZW4gcmVhZGluZyBoZWFkZXIpICovXG4gICAgLy8gdGhpcy5leHRyYV9tYXggID0gMDtcbiAgICAvKiBwb2ludGVyIHRvIHplcm8tdGVybWluYXRlZCBmaWxlIG5hbWUgb3IgWl9OVUxMICovXG4gICAgdGhpcy5uYW1lICAgICAgID0gJyc7XG4gICAgLyogc3BhY2UgYXQgbmFtZSAob25seSB3aGVuIHJlYWRpbmcgaGVhZGVyKSAqL1xuICAgIC8vIHRoaXMubmFtZV9tYXggICA9IDA7XG4gICAgLyogcG9pbnRlciB0byB6ZXJvLXRlcm1pbmF0ZWQgY29tbWVudCBvciBaX05VTEwgKi9cbiAgICB0aGlzLmNvbW1lbnQgICAgPSAnJztcbiAgICAvKiBzcGFjZSBhdCBjb21tZW50IChvbmx5IHdoZW4gcmVhZGluZyBoZWFkZXIpICovXG4gICAgLy8gdGhpcy5jb21tX21heCAgID0gMDtcbiAgICAvKiB0cnVlIGlmIHRoZXJlIHdhcyBvciB3aWxsIGJlIGEgaGVhZGVyIGNyYyAqL1xuICAgIHRoaXMuaGNyYyAgICAgICA9IDA7XG4gICAgLyogdHJ1ZSB3aGVuIGRvbmUgcmVhZGluZyBnemlwIGhlYWRlciAobm90IHVzZWQgd2hlbiB3cml0aW5nIGEgZ3ppcCBmaWxlKSAqL1xuICAgIHRoaXMuZG9uZSAgICAgICA9IGZhbHNlO1xuICB9XG5cbiAgdmFyIGd6aGVhZGVyID0gR1poZWFkZXI7XG5cbiAgY29uc3QgdG9TdHJpbmcgPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nO1xuXG4gIC8qIFB1YmxpYyBjb25zdGFudHMgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSovXG4gIC8qID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSovXG5cbiAgY29uc3Qge1xuICAgIFpfTk9fRkxVU0gsIFpfRklOSVNILFxuICAgIFpfT0ssIFpfU1RSRUFNX0VORCwgWl9ORUVEX0RJQ1QsIFpfU1RSRUFNX0VSUk9SLCBaX0RBVEFfRVJST1IsIFpfTUVNX0VSUk9SXG4gIH0gPSBjb25zdGFudHMkMTtcblxuICAvKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0qL1xuXG5cbiAgLyoqXG4gICAqIGNsYXNzIEluZmxhdGVcbiAgICpcbiAgICogR2VuZXJpYyBKUy1zdHlsZSB3cmFwcGVyIGZvciB6bGliIGNhbGxzLiBJZiB5b3UgZG9uJ3QgbmVlZFxuICAgKiBzdHJlYW1pbmcgYmVoYXZpb3VyIC0gdXNlIG1vcmUgc2ltcGxlIGZ1bmN0aW9uczogW1tpbmZsYXRlXV1cbiAgICogYW5kIFtbaW5mbGF0ZVJhd11dLlxuICAgKiovXG5cbiAgLyogaW50ZXJuYWxcbiAgICogaW5mbGF0ZS5jaHVua3MgLT4gQXJyYXlcbiAgICpcbiAgICogQ2h1bmtzIG9mIG91dHB1dCBkYXRhLCBpZiBbW0luZmxhdGUjb25EYXRhXV0gbm90IG92ZXJyaWRkZW4uXG4gICAqKi9cblxuICAvKipcbiAgICogSW5mbGF0ZS5yZXN1bHQgLT4gVWludDhBcnJheXxTdHJpbmdcbiAgICpcbiAgICogVW5jb21wcmVzc2VkIHJlc3VsdCwgZ2VuZXJhdGVkIGJ5IGRlZmF1bHQgW1tJbmZsYXRlI29uRGF0YV1dXG4gICAqIGFuZCBbW0luZmxhdGUjb25FbmRdXSBoYW5kbGVycy4gRmlsbGVkIGFmdGVyIHlvdSBwdXNoIGxhc3QgY2h1bmtcbiAgICogKGNhbGwgW1tJbmZsYXRlI3B1c2hdXSB3aXRoIGBaX0ZJTklTSGAgLyBgdHJ1ZWAgcGFyYW0pLlxuICAgKiovXG5cbiAgLyoqXG4gICAqIEluZmxhdGUuZXJyIC0+IE51bWJlclxuICAgKlxuICAgKiBFcnJvciBjb2RlIGFmdGVyIGluZmxhdGUgZmluaXNoZWQuIDAgKFpfT0spIG9uIHN1Y2Nlc3MuXG4gICAqIFNob3VsZCBiZSBjaGVja2VkIGlmIGJyb2tlbiBkYXRhIHBvc3NpYmxlLlxuICAgKiovXG5cbiAgLyoqXG4gICAqIEluZmxhdGUubXNnIC0+IFN0cmluZ1xuICAgKlxuICAgKiBFcnJvciBtZXNzYWdlLCBpZiBbW0luZmxhdGUuZXJyXV0gIT0gMFxuICAgKiovXG5cblxuICAvKipcbiAgICogbmV3IEluZmxhdGUob3B0aW9ucylcbiAgICogLSBvcHRpb25zIChPYmplY3QpOiB6bGliIGluZmxhdGUgb3B0aW9ucy5cbiAgICpcbiAgICogQ3JlYXRlcyBuZXcgaW5mbGF0b3IgaW5zdGFuY2Ugd2l0aCBzcGVjaWZpZWQgcGFyYW1zLiBUaHJvd3MgZXhjZXB0aW9uXG4gICAqIG9uIGJhZCBwYXJhbXMuIFN1cHBvcnRlZCBvcHRpb25zOlxuICAgKlxuICAgKiAtIGB3aW5kb3dCaXRzYFxuICAgKiAtIGBkaWN0aW9uYXJ5YFxuICAgKlxuICAgKiBbaHR0cDovL3psaWIubmV0L21hbnVhbC5odG1sI0FkdmFuY2VkXShodHRwOi8vemxpYi5uZXQvbWFudWFsLmh0bWwjQWR2YW5jZWQpXG4gICAqIGZvciBtb3JlIGluZm9ybWF0aW9uIG9uIHRoZXNlLlxuICAgKlxuICAgKiBBZGRpdGlvbmFsIG9wdGlvbnMsIGZvciBpbnRlcm5hbCBuZWVkczpcbiAgICpcbiAgICogLSBgY2h1bmtTaXplYCAtIHNpemUgb2YgZ2VuZXJhdGVkIGRhdGEgY2h1bmtzICgxNksgYnkgZGVmYXVsdClcbiAgICogLSBgcmF3YCAoQm9vbGVhbikgLSBkbyByYXcgaW5mbGF0ZVxuICAgKiAtIGB0b2AgKFN0cmluZykgLSBpZiBlcXVhbCB0byAnc3RyaW5nJywgdGhlbiByZXN1bHQgd2lsbCBiZSBjb252ZXJ0ZWRcbiAgICogICBmcm9tIHV0ZjggdG8gdXRmMTYgKGphdmFzY3JpcHQpIHN0cmluZy4gV2hlbiBzdHJpbmcgb3V0cHV0IHJlcXVlc3RlZCxcbiAgICogICBjaHVuayBsZW5ndGggY2FuIGRpZmZlciBmcm9tIGBjaHVua1NpemVgLCBkZXBlbmRpbmcgb24gY29udGVudC5cbiAgICpcbiAgICogQnkgZGVmYXVsdCwgd2hlbiBubyBvcHRpb25zIHNldCwgYXV0b2RldGVjdCBkZWZsYXRlL2d6aXAgZGF0YSBmb3JtYXQgdmlhXG4gICAqIHdyYXBwZXIgaGVhZGVyLlxuICAgKlxuICAgKiAjIyMjIyBFeGFtcGxlOlxuICAgKlxuICAgKiBgYGBqYXZhc2NyaXB0XG4gICAqIGNvbnN0IHBha28gPSByZXF1aXJlKCdwYWtvJylcbiAgICogY29uc3QgY2h1bmsxID0gbmV3IFVpbnQ4QXJyYXkoWzEsMiwzLDQsNSw2LDcsOCw5XSlcbiAgICogY29uc3QgY2h1bmsyID0gbmV3IFVpbnQ4QXJyYXkoWzEwLDExLDEyLDEzLDE0LDE1LDE2LDE3LDE4LDE5XSk7XG4gICAqXG4gICAqIGNvbnN0IGluZmxhdGUgPSBuZXcgcGFrby5JbmZsYXRlKHsgbGV2ZWw6IDN9KTtcbiAgICpcbiAgICogaW5mbGF0ZS5wdXNoKGNodW5rMSwgZmFsc2UpO1xuICAgKiBpbmZsYXRlLnB1c2goY2h1bmsyLCB0cnVlKTsgIC8vIHRydWUgLT4gbGFzdCBjaHVua1xuICAgKlxuICAgKiBpZiAoaW5mbGF0ZS5lcnIpIHsgdGhyb3cgbmV3IEVycm9yKGluZmxhdGUuZXJyKTsgfVxuICAgKlxuICAgKiBjb25zb2xlLmxvZyhpbmZsYXRlLnJlc3VsdCk7XG4gICAqIGBgYFxuICAgKiovXG4gIGZ1bmN0aW9uIEluZmxhdGUob3B0aW9ucykge1xuICAgIHRoaXMub3B0aW9ucyA9IGNvbW1vbi5hc3NpZ24oe1xuICAgICAgY2h1bmtTaXplOiAxMDI0ICogNjQsXG4gICAgICB3aW5kb3dCaXRzOiAxNSxcbiAgICAgIHRvOiAnJ1xuICAgIH0sIG9wdGlvbnMgfHwge30pO1xuXG4gICAgY29uc3Qgb3B0ID0gdGhpcy5vcHRpb25zO1xuXG4gICAgLy8gRm9yY2Ugd2luZG93IHNpemUgZm9yIGByYXdgIGRhdGEsIGlmIG5vdCBzZXQgZGlyZWN0bHksXG4gICAgLy8gYmVjYXVzZSB3ZSBoYXZlIG5vIGhlYWRlciBmb3IgYXV0b2RldGVjdC5cbiAgICBpZiAob3B0LnJhdyAmJiAob3B0LndpbmRvd0JpdHMgPj0gMCkgJiYgKG9wdC53aW5kb3dCaXRzIDwgMTYpKSB7XG4gICAgICBvcHQud2luZG93Qml0cyA9IC1vcHQud2luZG93Qml0cztcbiAgICAgIGlmIChvcHQud2luZG93Qml0cyA9PT0gMCkgeyBvcHQud2luZG93Qml0cyA9IC0xNTsgfVxuICAgIH1cblxuICAgIC8vIElmIGB3aW5kb3dCaXRzYCBub3QgZGVmaW5lZCAoYW5kIG1vZGUgbm90IHJhdykgLSBzZXQgYXV0b2RldGVjdCBmbGFnIGZvciBnemlwL2RlZmxhdGVcbiAgICBpZiAoKG9wdC53aW5kb3dCaXRzID49IDApICYmIChvcHQud2luZG93Qml0cyA8IDE2KSAmJlxuICAgICAgICAhKG9wdGlvbnMgJiYgb3B0aW9ucy53aW5kb3dCaXRzKSkge1xuICAgICAgb3B0LndpbmRvd0JpdHMgKz0gMzI7XG4gICAgfVxuXG4gICAgLy8gR3ppcCBoZWFkZXIgaGFzIG5vIGluZm8gYWJvdXQgd2luZG93cyBzaXplLCB3ZSBjYW4gZG8gYXV0b2RldGVjdCBvbmx5XG4gICAgLy8gZm9yIGRlZmxhdGUuIFNvLCBpZiB3aW5kb3cgc2l6ZSBub3Qgc2V0LCBmb3JjZSBpdCB0byBtYXggd2hlbiBnemlwIHBvc3NpYmxlXG4gICAgaWYgKChvcHQud2luZG93Qml0cyA+IDE1KSAmJiAob3B0LndpbmRvd0JpdHMgPCA0OCkpIHtcbiAgICAgIC8vIGJpdCAzICgxNikgLT4gZ3ppcHBlZCBkYXRhXG4gICAgICAvLyBiaXQgNCAoMzIpIC0+IGF1dG9kZXRlY3QgZ3ppcC9kZWZsYXRlXG4gICAgICBpZiAoKG9wdC53aW5kb3dCaXRzICYgMTUpID09PSAwKSB7XG4gICAgICAgIG9wdC53aW5kb3dCaXRzIHw9IDE1O1xuICAgICAgfVxuICAgIH1cblxuICAgIHRoaXMuZXJyICAgID0gMDsgICAgICAvLyBlcnJvciBjb2RlLCBpZiBoYXBwZW5zICgwID0gWl9PSylcbiAgICB0aGlzLm1zZyAgICA9ICcnOyAgICAgLy8gZXJyb3IgbWVzc2FnZVxuICAgIHRoaXMuZW5kZWQgID0gZmFsc2U7ICAvLyB1c2VkIHRvIGF2b2lkIG11bHRpcGxlIG9uRW5kKCkgY2FsbHNcbiAgICB0aGlzLmNodW5rcyA9IFtdOyAgICAgLy8gY2h1bmtzIG9mIGNvbXByZXNzZWQgZGF0YVxuXG4gICAgdGhpcy5zdHJtICAgPSBuZXcgenN0cmVhbSgpO1xuICAgIHRoaXMuc3RybS5hdmFpbF9vdXQgPSAwO1xuXG4gICAgbGV0IHN0YXR1cyAgPSBpbmZsYXRlXzEkMS5pbmZsYXRlSW5pdDIoXG4gICAgICB0aGlzLnN0cm0sXG4gICAgICBvcHQud2luZG93Qml0c1xuICAgICk7XG5cbiAgICBpZiAoc3RhdHVzICE9PSBaX09LKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IobWVzc2FnZXNbc3RhdHVzXSk7XG4gICAgfVxuXG4gICAgdGhpcy5oZWFkZXIgPSBuZXcgZ3poZWFkZXIoKTtcblxuICAgIGluZmxhdGVfMSQxLmluZmxhdGVHZXRIZWFkZXIodGhpcy5zdHJtLCB0aGlzLmhlYWRlcik7XG5cbiAgICAvLyBTZXR1cCBkaWN0aW9uYXJ5XG4gICAgaWYgKG9wdC5kaWN0aW9uYXJ5KSB7XG4gICAgICAvLyBDb252ZXJ0IGRhdGEgaWYgbmVlZGVkXG4gICAgICBpZiAodHlwZW9mIG9wdC5kaWN0aW9uYXJ5ID09PSAnc3RyaW5nJykge1xuICAgICAgICBvcHQuZGljdGlvbmFyeSA9IHN0cmluZ3Muc3RyaW5nMmJ1ZihvcHQuZGljdGlvbmFyeSk7XG4gICAgICB9IGVsc2UgaWYgKHRvU3RyaW5nLmNhbGwob3B0LmRpY3Rpb25hcnkpID09PSAnW29iamVjdCBBcnJheUJ1ZmZlcl0nKSB7XG4gICAgICAgIG9wdC5kaWN0aW9uYXJ5ID0gbmV3IFVpbnQ4QXJyYXkob3B0LmRpY3Rpb25hcnkpO1xuICAgICAgfVxuICAgICAgaWYgKG9wdC5yYXcpIHsgLy9JbiByYXcgbW9kZSB3ZSBuZWVkIHRvIHNldCB0aGUgZGljdGlvbmFyeSBlYXJseVxuICAgICAgICBzdGF0dXMgPSBpbmZsYXRlXzEkMS5pbmZsYXRlU2V0RGljdGlvbmFyeSh0aGlzLnN0cm0sIG9wdC5kaWN0aW9uYXJ5KTtcbiAgICAgICAgaWYgKHN0YXR1cyAhPT0gWl9PSykge1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcihtZXNzYWdlc1tzdGF0dXNdKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBJbmZsYXRlI3B1c2goZGF0YVssIGZsdXNoX21vZGVdKSAtPiBCb29sZWFuXG4gICAqIC0gZGF0YSAoVWludDhBcnJheXxBcnJheUJ1ZmZlcik6IGlucHV0IGRhdGFcbiAgICogLSBmbHVzaF9tb2RlIChOdW1iZXJ8Qm9vbGVhbik6IDAuLjYgZm9yIGNvcnJlc3BvbmRpbmcgWl9OT19GTFVTSC4uWl9UUkVFXG4gICAqICAgZmx1c2ggbW9kZXMuIFNlZSBjb25zdGFudHMuIFNraXBwZWQgb3IgYGZhbHNlYCBtZWFucyBaX05PX0ZMVVNILFxuICAgKiAgIGB0cnVlYCBtZWFucyBaX0ZJTklTSC5cbiAgICpcbiAgICogU2VuZHMgaW5wdXQgZGF0YSB0byBpbmZsYXRlIHBpcGUsIGdlbmVyYXRpbmcgW1tJbmZsYXRlI29uRGF0YV1dIGNhbGxzIHdpdGhcbiAgICogbmV3IG91dHB1dCBjaHVua3MuIFJldHVybnMgYHRydWVgIG9uIHN1Y2Nlc3MuIElmIGVuZCBvZiBzdHJlYW0gZGV0ZWN0ZWQsXG4gICAqIFtbSW5mbGF0ZSNvbkVuZF1dIHdpbGwgYmUgY2FsbGVkLlxuICAgKlxuICAgKiBgZmx1c2hfbW9kZWAgaXMgbm90IG5lZWRlZCBmb3Igbm9ybWFsIG9wZXJhdGlvbiwgYmVjYXVzZSBlbmQgb2Ygc3RyZWFtXG4gICAqIGRldGVjdGVkIGF1dG9tYXRpY2FsbHkuIFlvdSBtYXkgdHJ5IHRvIHVzZSBpdCBmb3IgYWR2YW5jZWQgdGhpbmdzLCBidXRcbiAgICogdGhpcyBmdW5jdGlvbmFsaXR5IHdhcyBub3QgdGVzdGVkLlxuICAgKlxuICAgKiBPbiBmYWlsIGNhbGwgW1tJbmZsYXRlI29uRW5kXV0gd2l0aCBlcnJvciBjb2RlIGFuZCByZXR1cm4gZmFsc2UuXG4gICAqXG4gICAqICMjIyMjIEV4YW1wbGVcbiAgICpcbiAgICogYGBgamF2YXNjcmlwdFxuICAgKiBwdXNoKGNodW5rLCBmYWxzZSk7IC8vIHB1c2ggb25lIG9mIGRhdGEgY2h1bmtzXG4gICAqIC4uLlxuICAgKiBwdXNoKGNodW5rLCB0cnVlKTsgIC8vIHB1c2ggbGFzdCBjaHVua1xuICAgKiBgYGBcbiAgICoqL1xuICBJbmZsYXRlLnByb3RvdHlwZS5wdXNoID0gZnVuY3Rpb24gKGRhdGEsIGZsdXNoX21vZGUpIHtcbiAgICBjb25zdCBzdHJtID0gdGhpcy5zdHJtO1xuICAgIGNvbnN0IGNodW5rU2l6ZSA9IHRoaXMub3B0aW9ucy5jaHVua1NpemU7XG4gICAgY29uc3QgZGljdGlvbmFyeSA9IHRoaXMub3B0aW9ucy5kaWN0aW9uYXJ5O1xuICAgIGxldCBzdGF0dXMsIF9mbHVzaF9tb2RlLCBsYXN0X2F2YWlsX291dDtcblxuICAgIGlmICh0aGlzLmVuZGVkKSByZXR1cm4gZmFsc2U7XG5cbiAgICBpZiAoZmx1c2hfbW9kZSA9PT0gfn5mbHVzaF9tb2RlKSBfZmx1c2hfbW9kZSA9IGZsdXNoX21vZGU7XG4gICAgZWxzZSBfZmx1c2hfbW9kZSA9IGZsdXNoX21vZGUgPT09IHRydWUgPyBaX0ZJTklTSCA6IFpfTk9fRkxVU0g7XG5cbiAgICAvLyBDb252ZXJ0IGRhdGEgaWYgbmVlZGVkXG4gICAgaWYgKHRvU3RyaW5nLmNhbGwoZGF0YSkgPT09ICdbb2JqZWN0IEFycmF5QnVmZmVyXScpIHtcbiAgICAgIHN0cm0uaW5wdXQgPSBuZXcgVWludDhBcnJheShkYXRhKTtcbiAgICB9IGVsc2Uge1xuICAgICAgc3RybS5pbnB1dCA9IGRhdGE7XG4gICAgfVxuXG4gICAgc3RybS5uZXh0X2luID0gMDtcbiAgICBzdHJtLmF2YWlsX2luID0gc3RybS5pbnB1dC5sZW5ndGg7XG5cbiAgICBmb3IgKDs7KSB7XG4gICAgICBpZiAoc3RybS5hdmFpbF9vdXQgPT09IDApIHtcbiAgICAgICAgc3RybS5vdXRwdXQgPSBuZXcgVWludDhBcnJheShjaHVua1NpemUpO1xuICAgICAgICBzdHJtLm5leHRfb3V0ID0gMDtcbiAgICAgICAgc3RybS5hdmFpbF9vdXQgPSBjaHVua1NpemU7XG4gICAgICB9XG5cbiAgICAgIHN0YXR1cyA9IGluZmxhdGVfMSQxLmluZmxhdGUoc3RybSwgX2ZsdXNoX21vZGUpO1xuXG4gICAgICBpZiAoc3RhdHVzID09PSBaX05FRURfRElDVCAmJiBkaWN0aW9uYXJ5KSB7XG4gICAgICAgIHN0YXR1cyA9IGluZmxhdGVfMSQxLmluZmxhdGVTZXREaWN0aW9uYXJ5KHN0cm0sIGRpY3Rpb25hcnkpO1xuXG4gICAgICAgIGlmIChzdGF0dXMgPT09IFpfT0spIHtcbiAgICAgICAgICBzdGF0dXMgPSBpbmZsYXRlXzEkMS5pbmZsYXRlKHN0cm0sIF9mbHVzaF9tb2RlKTtcbiAgICAgICAgfSBlbHNlIGlmIChzdGF0dXMgPT09IFpfREFUQV9FUlJPUikge1xuICAgICAgICAgIC8vIFJlcGxhY2UgY29kZSB3aXRoIG1vcmUgdmVyYm9zZVxuICAgICAgICAgIHN0YXR1cyA9IFpfTkVFRF9ESUNUO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8vIFNraXAgc255YyBtYXJrZXJzIGlmIG1vcmUgZGF0YSBmb2xsb3dzIGFuZCBub3QgcmF3IG1vZGVcbiAgICAgIHdoaWxlIChzdHJtLmF2YWlsX2luID4gMCAmJlxuICAgICAgICAgICAgIHN0YXR1cyA9PT0gWl9TVFJFQU1fRU5EICYmXG4gICAgICAgICAgICAgc3RybS5zdGF0ZS53cmFwID4gMCAmJlxuICAgICAgICAgICAgIGRhdGFbc3RybS5uZXh0X2luXSAhPT0gMClcbiAgICAgIHtcbiAgICAgICAgaW5mbGF0ZV8xJDEuaW5mbGF0ZVJlc2V0KHN0cm0pO1xuICAgICAgICBzdGF0dXMgPSBpbmZsYXRlXzEkMS5pbmZsYXRlKHN0cm0sIF9mbHVzaF9tb2RlKTtcbiAgICAgIH1cblxuICAgICAgc3dpdGNoIChzdGF0dXMpIHtcbiAgICAgICAgY2FzZSBaX1NUUkVBTV9FUlJPUjpcbiAgICAgICAgY2FzZSBaX0RBVEFfRVJST1I6XG4gICAgICAgIGNhc2UgWl9ORUVEX0RJQ1Q6XG4gICAgICAgIGNhc2UgWl9NRU1fRVJST1I6XG4gICAgICAgICAgdGhpcy5vbkVuZChzdGF0dXMpO1xuICAgICAgICAgIHRoaXMuZW5kZWQgPSB0cnVlO1xuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cblxuICAgICAgLy8gUmVtZW1iZXIgcmVhbCBgYXZhaWxfb3V0YCB2YWx1ZSwgYmVjYXVzZSB3ZSBtYXkgcGF0Y2ggb3V0IGJ1ZmZlciBjb250ZW50XG4gICAgICAvLyB0byBhbGlnbiB1dGY4IHN0cmluZ3MgYm91bmRhcmllcy5cbiAgICAgIGxhc3RfYXZhaWxfb3V0ID0gc3RybS5hdmFpbF9vdXQ7XG5cbiAgICAgIGlmIChzdHJtLm5leHRfb3V0KSB7XG4gICAgICAgIGlmIChzdHJtLmF2YWlsX291dCA9PT0gMCB8fCBzdGF0dXMgPT09IFpfU1RSRUFNX0VORCkge1xuXG4gICAgICAgICAgaWYgKHRoaXMub3B0aW9ucy50byA9PT0gJ3N0cmluZycpIHtcblxuICAgICAgICAgICAgbGV0IG5leHRfb3V0X3V0ZjggPSBzdHJpbmdzLnV0Zjhib3JkZXIoc3RybS5vdXRwdXQsIHN0cm0ubmV4dF9vdXQpO1xuXG4gICAgICAgICAgICBsZXQgdGFpbCA9IHN0cm0ubmV4dF9vdXQgLSBuZXh0X291dF91dGY4O1xuICAgICAgICAgICAgbGV0IHV0ZjhzdHIgPSBzdHJpbmdzLmJ1ZjJzdHJpbmcoc3RybS5vdXRwdXQsIG5leHRfb3V0X3V0ZjgpO1xuXG4gICAgICAgICAgICAvLyBtb3ZlIHRhaWwgJiByZWFsaWduIGNvdW50ZXJzXG4gICAgICAgICAgICBzdHJtLm5leHRfb3V0ID0gdGFpbDtcbiAgICAgICAgICAgIHN0cm0uYXZhaWxfb3V0ID0gY2h1bmtTaXplIC0gdGFpbDtcbiAgICAgICAgICAgIGlmICh0YWlsKSBzdHJtLm91dHB1dC5zZXQoc3RybS5vdXRwdXQuc3ViYXJyYXkobmV4dF9vdXRfdXRmOCwgbmV4dF9vdXRfdXRmOCArIHRhaWwpLCAwKTtcblxuICAgICAgICAgICAgdGhpcy5vbkRhdGEodXRmOHN0cik7XG5cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5vbkRhdGEoc3RybS5vdXRwdXQubGVuZ3RoID09PSBzdHJtLm5leHRfb3V0ID8gc3RybS5vdXRwdXQgOiBzdHJtLm91dHB1dC5zdWJhcnJheSgwLCBzdHJtLm5leHRfb3V0KSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8vIE11c3QgcmVwZWF0IGl0ZXJhdGlvbiBpZiBvdXQgYnVmZmVyIGlzIGZ1bGxcbiAgICAgIGlmIChzdGF0dXMgPT09IFpfT0sgJiYgbGFzdF9hdmFpbF9vdXQgPT09IDApIGNvbnRpbnVlO1xuXG4gICAgICAvLyBGaW5hbGl6ZSBpZiBlbmQgb2Ygc3RyZWFtIHJlYWNoZWQuXG4gICAgICBpZiAoc3RhdHVzID09PSBaX1NUUkVBTV9FTkQpIHtcbiAgICAgICAgc3RhdHVzID0gaW5mbGF0ZV8xJDEuaW5mbGF0ZUVuZCh0aGlzLnN0cm0pO1xuICAgICAgICB0aGlzLm9uRW5kKHN0YXR1cyk7XG4gICAgICAgIHRoaXMuZW5kZWQgPSB0cnVlO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cblxuICAgICAgaWYgKHN0cm0uYXZhaWxfaW4gPT09IDApIGJyZWFrO1xuICAgIH1cblxuICAgIHJldHVybiB0cnVlO1xuICB9O1xuXG5cbiAgLyoqXG4gICAqIEluZmxhdGUjb25EYXRhKGNodW5rKSAtPiBWb2lkXG4gICAqIC0gY2h1bmsgKFVpbnQ4QXJyYXl8U3RyaW5nKTogb3V0cHV0IGRhdGEuIFdoZW4gc3RyaW5nIG91dHB1dCByZXF1ZXN0ZWQsXG4gICAqICAgZWFjaCBjaHVuayB3aWxsIGJlIHN0cmluZy5cbiAgICpcbiAgICogQnkgZGVmYXVsdCwgc3RvcmVzIGRhdGEgYmxvY2tzIGluIGBjaHVua3NbXWAgcHJvcGVydHkgYW5kIGdsdWVcbiAgICogdGhvc2UgaW4gYG9uRW5kYC4gT3ZlcnJpZGUgdGhpcyBoYW5kbGVyLCBpZiB5b3UgbmVlZCBhbm90aGVyIGJlaGF2aW91ci5cbiAgICoqL1xuICBJbmZsYXRlLnByb3RvdHlwZS5vbkRhdGEgPSBmdW5jdGlvbiAoY2h1bmspIHtcbiAgICB0aGlzLmNodW5rcy5wdXNoKGNodW5rKTtcbiAgfTtcblxuXG4gIC8qKlxuICAgKiBJbmZsYXRlI29uRW5kKHN0YXR1cykgLT4gVm9pZFxuICAgKiAtIHN0YXR1cyAoTnVtYmVyKTogaW5mbGF0ZSBzdGF0dXMuIDAgKFpfT0spIG9uIHN1Y2Nlc3MsXG4gICAqICAgb3RoZXIgaWYgbm90LlxuICAgKlxuICAgKiBDYWxsZWQgZWl0aGVyIGFmdGVyIHlvdSB0ZWxsIGluZmxhdGUgdGhhdCB0aGUgaW5wdXQgc3RyZWFtIGlzXG4gICAqIGNvbXBsZXRlIChaX0ZJTklTSCkuIEJ5IGRlZmF1bHQgLSBqb2luIGNvbGxlY3RlZCBjaHVua3MsXG4gICAqIGZyZWUgbWVtb3J5IGFuZCBmaWxsIGByZXN1bHRzYCAvIGBlcnJgIHByb3BlcnRpZXMuXG4gICAqKi9cbiAgSW5mbGF0ZS5wcm90b3R5cGUub25FbmQgPSBmdW5jdGlvbiAoc3RhdHVzKSB7XG4gICAgLy8gT24gc3VjY2VzcyAtIGpvaW5cbiAgICBpZiAoc3RhdHVzID09PSBaX09LKSB7XG4gICAgICBpZiAodGhpcy5vcHRpb25zLnRvID09PSAnc3RyaW5nJykge1xuICAgICAgICB0aGlzLnJlc3VsdCA9IHRoaXMuY2h1bmtzLmpvaW4oJycpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5yZXN1bHQgPSBjb21tb24uZmxhdHRlbkNodW5rcyh0aGlzLmNodW5rcyk7XG4gICAgICB9XG4gICAgfVxuICAgIHRoaXMuY2h1bmtzID0gW107XG4gICAgdGhpcy5lcnIgPSBzdGF0dXM7XG4gICAgdGhpcy5tc2cgPSB0aGlzLnN0cm0ubXNnO1xuICB9O1xuXG5cbiAgLyoqXG4gICAqIGluZmxhdGUoZGF0YVssIG9wdGlvbnNdKSAtPiBVaW50OEFycmF5fFN0cmluZ1xuICAgKiAtIGRhdGEgKFVpbnQ4QXJyYXkpOiBpbnB1dCBkYXRhIHRvIGRlY29tcHJlc3MuXG4gICAqIC0gb3B0aW9ucyAoT2JqZWN0KTogemxpYiBpbmZsYXRlIG9wdGlvbnMuXG4gICAqXG4gICAqIERlY29tcHJlc3MgYGRhdGFgIHdpdGggaW5mbGF0ZS91bmd6aXAgYW5kIGBvcHRpb25zYC4gQXV0b2RldGVjdFxuICAgKiBmb3JtYXQgdmlhIHdyYXBwZXIgaGVhZGVyIGJ5IGRlZmF1bHQuIFRoYXQncyB3aHkgd2UgZG9uJ3QgcHJvdmlkZVxuICAgKiBzZXBhcmF0ZSBgdW5nemlwYCBtZXRob2QuXG4gICAqXG4gICAqIFN1cHBvcnRlZCBvcHRpb25zIGFyZTpcbiAgICpcbiAgICogLSB3aW5kb3dCaXRzXG4gICAqXG4gICAqIFtodHRwOi8vemxpYi5uZXQvbWFudWFsLmh0bWwjQWR2YW5jZWRdKGh0dHA6Ly96bGliLm5ldC9tYW51YWwuaHRtbCNBZHZhbmNlZClcbiAgICogZm9yIG1vcmUgaW5mb3JtYXRpb24uXG4gICAqXG4gICAqIFN1Z2FyIChvcHRpb25zKTpcbiAgICpcbiAgICogLSBgcmF3YCAoQm9vbGVhbikgLSBzYXkgdGhhdCB3ZSB3b3JrIHdpdGggcmF3IHN0cmVhbSwgaWYgeW91IGRvbid0IHdpc2ggdG8gc3BlY2lmeVxuICAgKiAgIG5lZ2F0aXZlIHdpbmRvd0JpdHMgaW1wbGljaXRseS5cbiAgICogLSBgdG9gIChTdHJpbmcpIC0gaWYgZXF1YWwgdG8gJ3N0cmluZycsIHRoZW4gcmVzdWx0IHdpbGwgYmUgY29udmVydGVkXG4gICAqICAgZnJvbSB1dGY4IHRvIHV0ZjE2IChqYXZhc2NyaXB0KSBzdHJpbmcuIFdoZW4gc3RyaW5nIG91dHB1dCByZXF1ZXN0ZWQsXG4gICAqICAgY2h1bmsgbGVuZ3RoIGNhbiBkaWZmZXIgZnJvbSBgY2h1bmtTaXplYCwgZGVwZW5kaW5nIG9uIGNvbnRlbnQuXG4gICAqXG4gICAqXG4gICAqICMjIyMjIEV4YW1wbGU6XG4gICAqXG4gICAqIGBgYGphdmFzY3JpcHRcbiAgICogY29uc3QgcGFrbyA9IHJlcXVpcmUoJ3Bha28nKTtcbiAgICogY29uc3QgaW5wdXQgPSBwYWtvLmRlZmxhdGUobmV3IFVpbnQ4QXJyYXkoWzEsMiwzLDQsNSw2LDcsOCw5XSkpO1xuICAgKiBsZXQgb3V0cHV0O1xuICAgKlxuICAgKiB0cnkge1xuICAgKiAgIG91dHB1dCA9IHBha28uaW5mbGF0ZShpbnB1dCk7XG4gICAqIH0gY2F0Y2ggKGVycikge1xuICAgKiAgIGNvbnNvbGUubG9nKGVycik7XG4gICAqIH1cbiAgICogYGBgXG4gICAqKi9cbiAgZnVuY3Rpb24gaW5mbGF0ZShpbnB1dCwgb3B0aW9ucykge1xuICAgIGNvbnN0IGluZmxhdG9yID0gbmV3IEluZmxhdGUob3B0aW9ucyk7XG5cbiAgICBpbmZsYXRvci5wdXNoKGlucHV0KTtcblxuICAgIC8vIFRoYXQgd2lsbCBuZXZlciBoYXBwZW5zLCBpZiB5b3UgZG9uJ3QgY2hlYXQgd2l0aCBvcHRpb25zIDopXG4gICAgaWYgKGluZmxhdG9yLmVycikgdGhyb3cgaW5mbGF0b3IubXNnIHx8IG1lc3NhZ2VzW2luZmxhdG9yLmVycl07XG5cbiAgICByZXR1cm4gaW5mbGF0b3IucmVzdWx0O1xuICB9XG5cblxuICAvKipcbiAgICogaW5mbGF0ZVJhdyhkYXRhWywgb3B0aW9uc10pIC0+IFVpbnQ4QXJyYXl8U3RyaW5nXG4gICAqIC0gZGF0YSAoVWludDhBcnJheSk6IGlucHV0IGRhdGEgdG8gZGVjb21wcmVzcy5cbiAgICogLSBvcHRpb25zIChPYmplY3QpOiB6bGliIGluZmxhdGUgb3B0aW9ucy5cbiAgICpcbiAgICogVGhlIHNhbWUgYXMgW1tpbmZsYXRlXV0sIGJ1dCBjcmVhdGVzIHJhdyBkYXRhLCB3aXRob3V0IHdyYXBwZXJcbiAgICogKGhlYWRlciBhbmQgYWRsZXIzMiBjcmMpLlxuICAgKiovXG4gIGZ1bmN0aW9uIGluZmxhdGVSYXcoaW5wdXQsIG9wdGlvbnMpIHtcbiAgICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgICBvcHRpb25zLnJhdyA9IHRydWU7XG4gICAgcmV0dXJuIGluZmxhdGUoaW5wdXQsIG9wdGlvbnMpO1xuICB9XG5cblxuICAvKipcbiAgICogdW5nemlwKGRhdGFbLCBvcHRpb25zXSkgLT4gVWludDhBcnJheXxTdHJpbmdcbiAgICogLSBkYXRhIChVaW50OEFycmF5KTogaW5wdXQgZGF0YSB0byBkZWNvbXByZXNzLlxuICAgKiAtIG9wdGlvbnMgKE9iamVjdCk6IHpsaWIgaW5mbGF0ZSBvcHRpb25zLlxuICAgKlxuICAgKiBKdXN0IHNob3J0Y3V0IHRvIFtbaW5mbGF0ZV1dLCBiZWNhdXNlIGl0IGF1dG9kZXRlY3RzIGZvcm1hdFxuICAgKiBieSBoZWFkZXIuY29udGVudC4gRG9uZSBmb3IgY29udmVuaWVuY2UuXG4gICAqKi9cblxuXG4gIHZhciBJbmZsYXRlXzEgPSBJbmZsYXRlO1xuICB2YXIgaW5mbGF0ZV8yID0gaW5mbGF0ZTtcbiAgdmFyIGluZmxhdGVSYXdfMSA9IGluZmxhdGVSYXc7XG4gIHZhciB1bmd6aXAgPSBpbmZsYXRlO1xuICB2YXIgY29uc3RhbnRzID0gY29uc3RhbnRzJDE7XG5cbiAgdmFyIGluZmxhdGVfMSA9IHtcbiAgXHRJbmZsYXRlOiBJbmZsYXRlXzEsXG4gIFx0aW5mbGF0ZTogaW5mbGF0ZV8yLFxuICBcdGluZmxhdGVSYXc6IGluZmxhdGVSYXdfMSxcbiAgXHR1bmd6aXA6IHVuZ3ppcCxcbiAgXHRjb25zdGFudHM6IGNvbnN0YW50c1xuICB9O1xuXG4gIGV4cG9ydHMuSW5mbGF0ZSA9IEluZmxhdGVfMTtcbiAgZXhwb3J0cy5jb25zdGFudHMgPSBjb25zdGFudHM7XG4gIGV4cG9ydHNbJ2RlZmF1bHQnXSA9IGluZmxhdGVfMTtcbiAgZXhwb3J0cy5pbmZsYXRlID0gaW5mbGF0ZV8yO1xuICBleHBvcnRzLmluZmxhdGVSYXcgPSBpbmZsYXRlUmF3XzE7XG4gIGV4cG9ydHMudW5nemlwID0gdW5nemlwO1xuXG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG5cbn0pKSk7XG4iLCIvLyBUaGUgbW9kdWxlIGNhY2hlXG52YXIgX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fID0ge307XG5cbi8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG5mdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuXHR2YXIgY2FjaGVkTW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXTtcblx0aWYgKGNhY2hlZE1vZHVsZSAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0cmV0dXJuIGNhY2hlZE1vZHVsZS5leHBvcnRzO1xuXHR9XG5cdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG5cdHZhciBtb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdID0ge1xuXHRcdC8vIG5vIG1vZHVsZS5pZCBuZWVkZWRcblx0XHQvLyBubyBtb2R1bGUubG9hZGVkIG5lZWRlZFxuXHRcdGV4cG9ydHM6IHt9XG5cdH07XG5cblx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG5cdF9fd2VicGFja19tb2R1bGVzX19bbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG5cdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG5cdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbn1cblxuIiwiLy8gZGVmaW5lIGdldHRlciBmdW5jdGlvbnMgZm9yIGhhcm1vbnkgZXhwb3J0c1xuX193ZWJwYWNrX3JlcXVpcmVfXy5kID0gKGV4cG9ydHMsIGRlZmluaXRpb24pID0+IHtcblx0Zm9yKHZhciBrZXkgaW4gZGVmaW5pdGlvbikge1xuXHRcdGlmKF9fd2VicGFja19yZXF1aXJlX18ubyhkZWZpbml0aW9uLCBrZXkpICYmICFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywga2V5KSkge1xuXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIGtleSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGRlZmluaXRpb25ba2V5XSB9KTtcblx0XHR9XG5cdH1cbn07IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5vID0gKG9iaiwgcHJvcCkgPT4gKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIHByb3ApKSIsIi8vIGRlZmluZSBfX2VzTW9kdWxlIG9uIGV4cG9ydHNcbl9fd2VicGFja19yZXF1aXJlX18uciA9IChleHBvcnRzKSA9PiB7XG5cdGlmKHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnICYmIFN5bWJvbC50b1N0cmluZ1RhZykge1xuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuXHR9XG5cdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG59OyIsImNvbnN0IGU9XCJ1bmRlZmluZWRcIiE9dHlwZW9mIGdsb2JhbFRoaXM/Z2xvYmFsVGhpczpcInVuZGVmaW5lZFwiIT10eXBlb2Ygc2VsZj9zZWxmOlwidW5kZWZpbmVkXCIhPXR5cGVvZiB3aW5kb3c/d2luZG93Omdsb2JhbCx0PU9iamVjdC5rZXlzLG49QXJyYXkuaXNBcnJheTtmdW5jdGlvbiByKGUsbil7cmV0dXJuXCJvYmplY3RcIiE9dHlwZW9mIG58fHQobikuZm9yRWFjaCgoZnVuY3Rpb24odCl7ZVt0XT1uW3RdfSkpLGV9XCJ1bmRlZmluZWRcIj09dHlwZW9mIFByb21pc2V8fGUuUHJvbWlzZXx8KGUuUHJvbWlzZT1Qcm9taXNlKTtjb25zdCBzPU9iamVjdC5nZXRQcm90b3R5cGVPZixpPXt9Lmhhc093blByb3BlcnR5O2Z1bmN0aW9uIG8oZSx0KXtyZXR1cm4gaS5jYWxsKGUsdCl9ZnVuY3Rpb24gYShlLG4pe1wiZnVuY3Rpb25cIj09dHlwZW9mIG4mJihuPW4ocyhlKSkpLChcInVuZGVmaW5lZFwiPT10eXBlb2YgUmVmbGVjdD90OlJlZmxlY3Qub3duS2V5cykobikuZm9yRWFjaCgodD0+e2woZSx0LG5bdF0pfSkpfWNvbnN0IHU9T2JqZWN0LmRlZmluZVByb3BlcnR5O2Z1bmN0aW9uIGwoZSx0LG4scyl7dShlLHQscihuJiZvKG4sXCJnZXRcIikmJlwiZnVuY3Rpb25cIj09dHlwZW9mIG4uZ2V0P3tnZXQ6bi5nZXQsc2V0Om4uc2V0LGNvbmZpZ3VyYWJsZTohMH06e3ZhbHVlOm4sY29uZmlndXJhYmxlOiEwLHdyaXRhYmxlOiEwfSxzKSl9ZnVuY3Rpb24gYyhlKXtyZXR1cm57ZnJvbTpmdW5jdGlvbih0KXtyZXR1cm4gZS5wcm90b3R5cGU9T2JqZWN0LmNyZWF0ZSh0LnByb3RvdHlwZSksbChlLnByb3RvdHlwZSxcImNvbnN0cnVjdG9yXCIsZSkse2V4dGVuZDphLmJpbmQobnVsbCxlLnByb3RvdHlwZSl9fX19Y29uc3QgaD1PYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yO2Z1bmN0aW9uIGQoZSx0KXtsZXQgbjtyZXR1cm4gaChlLHQpfHwobj1zKGUpKSYmZChuLHQpfWNvbnN0IGY9W10uc2xpY2U7ZnVuY3Rpb24gcChlLHQsbil7cmV0dXJuIGYuY2FsbChlLHQsbil9ZnVuY3Rpb24geShlLHQpe3JldHVybiB0KGUpfWZ1bmN0aW9uIG0oZSl7aWYoIWUpdGhyb3cgbmV3IEVycm9yKFwiQXNzZXJ0aW9uIEZhaWxlZFwiKX1mdW5jdGlvbiB2KHQpe2Uuc2V0SW1tZWRpYXRlP3NldEltbWVkaWF0ZSh0KTpzZXRUaW1lb3V0KHQsMCl9ZnVuY3Rpb24gZyhlLHQpe3JldHVybiBlLnJlZHVjZSgoKGUsbixyKT0+e3ZhciBzPXQobixyKTtyZXR1cm4gcyYmKGVbc1swXV09c1sxXSksZX0pLHt9KX1mdW5jdGlvbiBiKGUsdCl7aWYobyhlLHQpKXJldHVybiBlW3RdO2lmKCF0KXJldHVybiBlO2lmKFwic3RyaW5nXCIhPXR5cGVvZiB0KXtmb3IodmFyIG49W10scj0wLHM9dC5sZW5ndGg7cjxzOysrcil7dmFyIGk9YihlLHRbcl0pO24ucHVzaChpKX1yZXR1cm4gbn12YXIgYT10LmluZGV4T2YoXCIuXCIpO2lmKC0xIT09YSl7dmFyIHU9ZVt0LnN1YnN0cigwLGEpXTtyZXR1cm4gdm9pZCAwPT09dT92b2lkIDA6Yih1LHQuc3Vic3RyKGErMSkpfX1mdW5jdGlvbiBfKGUsdCxyKXtpZihlJiZ2b2lkIDAhPT10JiYoIShcImlzRnJvemVuXCJpbiBPYmplY3QpfHwhT2JqZWN0LmlzRnJvemVuKGUpKSlpZihcInN0cmluZ1wiIT10eXBlb2YgdCYmXCJsZW5ndGhcImluIHQpe20oXCJzdHJpbmdcIiE9dHlwZW9mIHImJlwibGVuZ3RoXCJpbiByKTtmb3IodmFyIHM9MCxpPXQubGVuZ3RoO3M8aTsrK3MpXyhlLHRbc10scltzXSl9ZWxzZXt2YXIgbz10LmluZGV4T2YoXCIuXCIpO2lmKC0xIT09byl7dmFyIGE9dC5zdWJzdHIoMCxvKSx1PXQuc3Vic3RyKG8rMSk7aWYoXCJcIj09PXUpdm9pZCAwPT09cj9uKGUpJiYhaXNOYU4ocGFyc2VJbnQoYSkpP2Uuc3BsaWNlKGEsMSk6ZGVsZXRlIGVbYV06ZVthXT1yO2Vsc2V7dmFyIGw9ZVthXTtsfHwobD1lW2FdPXt9KSxfKGwsdSxyKX19ZWxzZSB2b2lkIDA9PT1yP24oZSkmJiFpc05hTihwYXJzZUludCh0KSk/ZS5zcGxpY2UodCwxKTpkZWxldGUgZVt0XTplW3RdPXJ9fWZ1bmN0aW9uIHcoZSl7dmFyIHQ9e307Zm9yKHZhciBuIGluIGUpbyhlLG4pJiYodFtuXT1lW25dKTtyZXR1cm4gdH1jb25zdCB4PVtdLmNvbmNhdDtmdW5jdGlvbiBrKGUpe3JldHVybiB4LmFwcGx5KFtdLGUpfWNvbnN0IEU9XCJCb29sZWFuLFN0cmluZyxEYXRlLFJlZ0V4cCxCbG9iLEZpbGUsRmlsZUxpc3QsRmlsZVN5c3RlbUZpbGVIYW5kbGUsQXJyYXlCdWZmZXIsRGF0YVZpZXcsVWludDhDbGFtcGVkQXJyYXksSW1hZ2VCaXRtYXAsSW1hZ2VEYXRhLE1hcCxTZXQsQ3J5cHRvS2V5XCIuc3BsaXQoXCIsXCIpLmNvbmNhdChrKFs4LDE2LDMyLDY0XS5tYXAoKGU9PltcIkludFwiLFwiVWludFwiLFwiRmxvYXRcIl0ubWFwKCh0PT50K2UrXCJBcnJheVwiKSkpKSkpLmZpbHRlcigodD0+ZVt0XSkpLFA9RS5tYXAoKHQ9PmVbdF0pKTtnKEUsKGU9PltlLCEwXSkpO2xldCBLPW51bGw7ZnVuY3Rpb24gTyhlKXtLPVwidW5kZWZpbmVkXCIhPXR5cGVvZiBXZWFrTWFwJiZuZXcgV2Vha01hcDtjb25zdCB0PVMoZSk7cmV0dXJuIEs9bnVsbCx0fWZ1bmN0aW9uIFMoZSl7aWYoIWV8fFwib2JqZWN0XCIhPXR5cGVvZiBlKXJldHVybiBlO2xldCB0PUsmJksuZ2V0KGUpO2lmKHQpcmV0dXJuIHQ7aWYobihlKSl7dD1bXSxLJiZLLnNldChlLHQpO2Zvcih2YXIgcj0wLGk9ZS5sZW5ndGg7cjxpOysrcil0LnB1c2goUyhlW3JdKSl9ZWxzZSBpZihQLmluZGV4T2YoZS5jb25zdHJ1Y3Rvcik+PTApdD1lO2Vsc2V7Y29uc3Qgbj1zKGUpO2Zvcih2YXIgYSBpbiB0PW49PT1PYmplY3QucHJvdG90eXBlP3t9Ok9iamVjdC5jcmVhdGUobiksSyYmSy5zZXQoZSx0KSxlKW8oZSxhKSYmKHRbYV09UyhlW2FdKSl9cmV0dXJuIHR9Y29uc3R7dG9TdHJpbmc6QX09e307ZnVuY3Rpb24gQyhlKXtyZXR1cm4gQS5jYWxsKGUpLnNsaWNlKDgsLTEpfWNvbnN0IGo9XCJ1bmRlZmluZWRcIiE9dHlwZW9mIFN5bWJvbD9TeW1ib2wuaXRlcmF0b3I6XCJAQGl0ZXJhdG9yXCIsRD1cInN5bWJvbFwiPT10eXBlb2Ygaj9mdW5jdGlvbihlKXt2YXIgdDtyZXR1cm4gbnVsbCE9ZSYmKHQ9ZVtqXSkmJnQuYXBwbHkoZSl9OmZ1bmN0aW9uKCl7cmV0dXJuIG51bGx9LEk9e307ZnVuY3Rpb24gQihlKXt2YXIgdCxyLHMsaTtpZigxPT09YXJndW1lbnRzLmxlbmd0aCl7aWYobihlKSlyZXR1cm4gZS5zbGljZSgpO2lmKHRoaXM9PT1JJiZcInN0cmluZ1wiPT10eXBlb2YgZSlyZXR1cm5bZV07aWYoaT1EKGUpKXtmb3Iocj1bXTshKHM9aS5uZXh0KCkpLmRvbmU7KXIucHVzaChzLnZhbHVlKTtyZXR1cm4gcn1pZihudWxsPT1lKXJldHVybltlXTtpZihcIm51bWJlclwiPT10eXBlb2YodD1lLmxlbmd0aCkpe2ZvcihyPW5ldyBBcnJheSh0KTt0LS07KXJbdF09ZVt0XTtyZXR1cm4gcn1yZXR1cm5bZV19Zm9yKHQ9YXJndW1lbnRzLmxlbmd0aCxyPW5ldyBBcnJheSh0KTt0LS07KXJbdF09YXJndW1lbnRzW3RdO3JldHVybiByfWNvbnN0IFQ9XCJ1bmRlZmluZWRcIiE9dHlwZW9mIFN5bWJvbD9lPT5cIkFzeW5jRnVuY3Rpb25cIj09PWVbU3ltYm9sLnRvU3RyaW5nVGFnXTooKT0+ITE7dmFyIFI9XCJ1bmRlZmluZWRcIiE9dHlwZW9mIGxvY2F0aW9uJiYvXihodHRwfGh0dHBzKTpcXC9cXC8obG9jYWxob3N0fDEyN1xcLjBcXC4wXFwuMSkvLnRlc3QobG9jYXRpb24uaHJlZik7ZnVuY3Rpb24gRihlLHQpe1I9ZSxNPXR9dmFyIE09KCk9PiEwO2NvbnN0IE49IW5ldyBFcnJvcihcIlwiKS5zdGFjaztmdW5jdGlvbiBxKCl7aWYoTil0cnl7dGhyb3cgcS5hcmd1bWVudHMsbmV3IEVycm9yfWNhdGNoKGUpe3JldHVybiBlfXJldHVybiBuZXcgRXJyb3J9ZnVuY3Rpb24gJChlLHQpe3ZhciBuPWUuc3RhY2s7cmV0dXJuIG4/KHQ9dHx8MCwwPT09bi5pbmRleE9mKGUubmFtZSkmJih0Kz0oZS5uYW1lK2UubWVzc2FnZSkuc3BsaXQoXCJcXG5cIikubGVuZ3RoKSxuLnNwbGl0KFwiXFxuXCIpLnNsaWNlKHQpLmZpbHRlcihNKS5tYXAoKGU9PlwiXFxuXCIrZSkpLmpvaW4oXCJcIikpOlwiXCJ9dmFyIFU9W1wiVW5rbm93blwiLFwiQ29uc3RyYWludFwiLFwiRGF0YVwiLFwiVHJhbnNhY3Rpb25JbmFjdGl2ZVwiLFwiUmVhZE9ubHlcIixcIlZlcnNpb25cIixcIk5vdEZvdW5kXCIsXCJJbnZhbGlkU3RhdGVcIixcIkludmFsaWRBY2Nlc3NcIixcIkFib3J0XCIsXCJUaW1lb3V0XCIsXCJRdW90YUV4Y2VlZGVkXCIsXCJTeW50YXhcIixcIkRhdGFDbG9uZVwiXSxMPVtcIk1vZGlmeVwiLFwiQnVsa1wiLFwiT3BlbkZhaWxlZFwiLFwiVmVyc2lvbkNoYW5nZVwiLFwiU2NoZW1hXCIsXCJVcGdyYWRlXCIsXCJJbnZhbGlkVGFibGVcIixcIk1pc3NpbmdBUElcIixcIk5vU3VjaERhdGFiYXNlXCIsXCJJbnZhbGlkQXJndW1lbnRcIixcIlN1YlRyYW5zYWN0aW9uXCIsXCJVbnN1cHBvcnRlZFwiLFwiSW50ZXJuYWxcIixcIkRhdGFiYXNlQ2xvc2VkXCIsXCJQcmVtYXR1cmVDb21taXRcIixcIkZvcmVpZ25Bd2FpdFwiXS5jb25jYXQoVSksVj17VmVyc2lvbkNoYW5nZWQ6XCJEYXRhYmFzZSB2ZXJzaW9uIGNoYW5nZWQgYnkgb3RoZXIgZGF0YWJhc2UgY29ubmVjdGlvblwiLERhdGFiYXNlQ2xvc2VkOlwiRGF0YWJhc2UgaGFzIGJlZW4gY2xvc2VkXCIsQWJvcnQ6XCJUcmFuc2FjdGlvbiBhYm9ydGVkXCIsVHJhbnNhY3Rpb25JbmFjdGl2ZTpcIlRyYW5zYWN0aW9uIGhhcyBhbHJlYWR5IGNvbXBsZXRlZCBvciBmYWlsZWRcIixNaXNzaW5nQVBJOlwiSW5kZXhlZERCIEFQSSBtaXNzaW5nLiBQbGVhc2UgdmlzaXQgaHR0cHM6Ly90aW55dXJsLmNvbS95MnV1dnNrYlwifTtmdW5jdGlvbiBXKGUsdCl7dGhpcy5fZT1xKCksdGhpcy5uYW1lPWUsdGhpcy5tZXNzYWdlPXR9ZnVuY3Rpb24gWShlLHQpe3JldHVybiBlK1wiLiBFcnJvcnM6IFwiK09iamVjdC5rZXlzKHQpLm1hcCgoZT0+dFtlXS50b1N0cmluZygpKSkuZmlsdGVyKCgoZSx0LG4pPT5uLmluZGV4T2YoZSk9PT10KSkuam9pbihcIlxcblwiKX1mdW5jdGlvbiB6KGUsdCxuLHIpe3RoaXMuX2U9cSgpLHRoaXMuZmFpbHVyZXM9dCx0aGlzLmZhaWxlZEtleXM9cix0aGlzLnN1Y2Nlc3NDb3VudD1uLHRoaXMubWVzc2FnZT1ZKGUsdCl9ZnVuY3Rpb24gRyhlLHQpe3RoaXMuX2U9cSgpLHRoaXMubmFtZT1cIkJ1bGtFcnJvclwiLHRoaXMuZmFpbHVyZXM9T2JqZWN0LmtleXModCkubWFwKChlPT50W2VdKSksdGhpcy5mYWlsdXJlc0J5UG9zPXQsdGhpcy5tZXNzYWdlPVkoZSx0KX1jKFcpLmZyb20oRXJyb3IpLmV4dGVuZCh7c3RhY2s6e2dldDpmdW5jdGlvbigpe3JldHVybiB0aGlzLl9zdGFja3x8KHRoaXMuX3N0YWNrPXRoaXMubmFtZStcIjogXCIrdGhpcy5tZXNzYWdlKyQodGhpcy5fZSwyKSl9fSx0b1N0cmluZzpmdW5jdGlvbigpe3JldHVybiB0aGlzLm5hbWUrXCI6IFwiK3RoaXMubWVzc2FnZX19KSxjKHopLmZyb20oVyksYyhHKS5mcm9tKFcpO3ZhciBIPUwucmVkdWNlKCgoZSx0KT0+KGVbdF09dCtcIkVycm9yXCIsZSkpLHt9KTtjb25zdCBRPVc7dmFyIFg9TC5yZWR1Y2UoKChlLHQpPT57dmFyIG49dCtcIkVycm9yXCI7ZnVuY3Rpb24gcihlLHIpe3RoaXMuX2U9cSgpLHRoaXMubmFtZT1uLGU/XCJzdHJpbmdcIj09dHlwZW9mIGU/KHRoaXMubWVzc2FnZT1gJHtlfSR7cj9cIlxcbiBcIityOlwiXCJ9YCx0aGlzLmlubmVyPXJ8fG51bGwpOlwib2JqZWN0XCI9PXR5cGVvZiBlJiYodGhpcy5tZXNzYWdlPWAke2UubmFtZX0gJHtlLm1lc3NhZ2V9YCx0aGlzLmlubmVyPWUpOih0aGlzLm1lc3NhZ2U9Vlt0XXx8bix0aGlzLmlubmVyPW51bGwpfXJldHVybiBjKHIpLmZyb20oUSksZVt0XT1yLGV9KSx7fSk7WC5TeW50YXg9U3ludGF4RXJyb3IsWC5UeXBlPVR5cGVFcnJvcixYLlJhbmdlPVJhbmdlRXJyb3I7dmFyIEo9VS5yZWR1Y2UoKChlLHQpPT4oZVt0K1wiRXJyb3JcIl09WFt0XSxlKSkse30pO3ZhciBaPUwucmVkdWNlKCgoZSx0KT0+KC0xPT09W1wiU3ludGF4XCIsXCJUeXBlXCIsXCJSYW5nZVwiXS5pbmRleE9mKHQpJiYoZVt0K1wiRXJyb3JcIl09WFt0XSksZSkpLHt9KTtmdW5jdGlvbiBlZSgpe31mdW5jdGlvbiB0ZShlKXtyZXR1cm4gZX1mdW5jdGlvbiBuZShlLHQpe3JldHVybiBudWxsPT1lfHxlPT09dGU/dDpmdW5jdGlvbihuKXtyZXR1cm4gdChlKG4pKX19ZnVuY3Rpb24gcmUoZSx0KXtyZXR1cm4gZnVuY3Rpb24oKXtlLmFwcGx5KHRoaXMsYXJndW1lbnRzKSx0LmFwcGx5KHRoaXMsYXJndW1lbnRzKX19ZnVuY3Rpb24gc2UoZSx0KXtyZXR1cm4gZT09PWVlP3Q6ZnVuY3Rpb24oKXt2YXIgbj1lLmFwcGx5KHRoaXMsYXJndW1lbnRzKTt2b2lkIDAhPT1uJiYoYXJndW1lbnRzWzBdPW4pO3ZhciByPXRoaXMub25zdWNjZXNzLHM9dGhpcy5vbmVycm9yO3RoaXMub25zdWNjZXNzPW51bGwsdGhpcy5vbmVycm9yPW51bGw7dmFyIGk9dC5hcHBseSh0aGlzLGFyZ3VtZW50cyk7cmV0dXJuIHImJih0aGlzLm9uc3VjY2Vzcz10aGlzLm9uc3VjY2Vzcz9yZShyLHRoaXMub25zdWNjZXNzKTpyKSxzJiYodGhpcy5vbmVycm9yPXRoaXMub25lcnJvcj9yZShzLHRoaXMub25lcnJvcik6cyksdm9pZCAwIT09aT9pOm59fWZ1bmN0aW9uIGllKGUsdCl7cmV0dXJuIGU9PT1lZT90OmZ1bmN0aW9uKCl7ZS5hcHBseSh0aGlzLGFyZ3VtZW50cyk7dmFyIG49dGhpcy5vbnN1Y2Nlc3Mscj10aGlzLm9uZXJyb3I7dGhpcy5vbnN1Y2Nlc3M9dGhpcy5vbmVycm9yPW51bGwsdC5hcHBseSh0aGlzLGFyZ3VtZW50cyksbiYmKHRoaXMub25zdWNjZXNzPXRoaXMub25zdWNjZXNzP3JlKG4sdGhpcy5vbnN1Y2Nlc3MpOm4pLHImJih0aGlzLm9uZXJyb3I9dGhpcy5vbmVycm9yP3JlKHIsdGhpcy5vbmVycm9yKTpyKX19ZnVuY3Rpb24gb2UoZSx0KXtyZXR1cm4gZT09PWVlP3Q6ZnVuY3Rpb24obil7dmFyIHM9ZS5hcHBseSh0aGlzLGFyZ3VtZW50cyk7cihuLHMpO3ZhciBpPXRoaXMub25zdWNjZXNzLG89dGhpcy5vbmVycm9yO3RoaXMub25zdWNjZXNzPW51bGwsdGhpcy5vbmVycm9yPW51bGw7dmFyIGE9dC5hcHBseSh0aGlzLGFyZ3VtZW50cyk7cmV0dXJuIGkmJih0aGlzLm9uc3VjY2Vzcz10aGlzLm9uc3VjY2Vzcz9yZShpLHRoaXMub25zdWNjZXNzKTppKSxvJiYodGhpcy5vbmVycm9yPXRoaXMub25lcnJvcj9yZShvLHRoaXMub25lcnJvcik6byksdm9pZCAwPT09cz92b2lkIDA9PT1hP3ZvaWQgMDphOnIocyxhKX19ZnVuY3Rpb24gYWUoZSx0KXtyZXR1cm4gZT09PWVlP3Q6ZnVuY3Rpb24oKXtyZXR1cm4hMSE9PXQuYXBwbHkodGhpcyxhcmd1bWVudHMpJiZlLmFwcGx5KHRoaXMsYXJndW1lbnRzKX19ZnVuY3Rpb24gdWUoZSx0KXtyZXR1cm4gZT09PWVlP3Q6ZnVuY3Rpb24oKXt2YXIgbj1lLmFwcGx5KHRoaXMsYXJndW1lbnRzKTtpZihuJiZcImZ1bmN0aW9uXCI9PXR5cGVvZiBuLnRoZW4pe2Zvcih2YXIgcj10aGlzLHM9YXJndW1lbnRzLmxlbmd0aCxpPW5ldyBBcnJheShzKTtzLS07KWlbc109YXJndW1lbnRzW3NdO3JldHVybiBuLnRoZW4oKGZ1bmN0aW9uKCl7cmV0dXJuIHQuYXBwbHkocixpKX0pKX1yZXR1cm4gdC5hcHBseSh0aGlzLGFyZ3VtZW50cyl9fVouTW9kaWZ5RXJyb3I9eixaLkRleGllRXJyb3I9VyxaLkJ1bGtFcnJvcj1HO3ZhciBsZT17fTtjb25zdFtjZSxoZSxkZV09XCJ1bmRlZmluZWRcIj09dHlwZW9mIFByb21pc2U/W106KCgpPT57bGV0IGU9UHJvbWlzZS5yZXNvbHZlKCk7aWYoXCJ1bmRlZmluZWRcIj09dHlwZW9mIGNyeXB0b3x8IWNyeXB0by5zdWJ0bGUpcmV0dXJuW2UscyhlKSxlXTtjb25zdCB0PWNyeXB0by5zdWJ0bGUuZGlnZXN0KFwiU0hBLTUxMlwiLG5ldyBVaW50OEFycmF5KFswXSkpO3JldHVyblt0LHModCksZV19KSgpLGZlPWhlJiZoZS50aGVuLHBlPWNlJiZjZS5jb25zdHJ1Y3Rvcix5ZT0hIWRlO3ZhciBtZT0hMSx2ZT1kZT8oKT0+e2RlLnRoZW4ocWUpfTplLnNldEltbWVkaWF0ZT9zZXRJbW1lZGlhdGUuYmluZChudWxsLHFlKTplLk11dGF0aW9uT2JzZXJ2ZXI/KCk9Pnt2YXIgZT1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO25ldyBNdXRhdGlvbk9ic2VydmVyKCgoKT0+e3FlKCksZT1udWxsfSkpLm9ic2VydmUoZSx7YXR0cmlidXRlczohMH0pLGUuc2V0QXR0cmlidXRlKFwiaVwiLFwiMVwiKX06KCk9PntzZXRUaW1lb3V0KHFlLDApfSxnZT1mdW5jdGlvbihlLHQpe09lLnB1c2goW2UsdF0pLF9lJiYodmUoKSxfZT0hMSl9LGJlPSEwLF9lPSEwLHdlPVtdLHhlPVtdLGtlPW51bGwsRWU9dGUsUGU9e2lkOlwiZ2xvYmFsXCIsZ2xvYmFsOiEwLHJlZjowLHVuaGFuZGxlZHM6W10sb251bmhhbmRsZWQ6Y3QscGdwOiExLGVudjp7fSxmaW5hbGl6ZTpmdW5jdGlvbigpe3RoaXMudW5oYW5kbGVkcy5mb3JFYWNoKChlPT57dHJ5e2N0KGVbMF0sZVsxXSl9Y2F0Y2goZSl7fX0pKX19LEtlPVBlLE9lPVtdLFNlPTAsQWU9W107ZnVuY3Rpb24gQ2UoZSl7aWYoXCJvYmplY3RcIiE9dHlwZW9mIHRoaXMpdGhyb3cgbmV3IFR5cGVFcnJvcihcIlByb21pc2VzIG11c3QgYmUgY29uc3RydWN0ZWQgdmlhIG5ld1wiKTt0aGlzLl9saXN0ZW5lcnM9W10sdGhpcy5vbnVuY2F0Y2hlZD1lZSx0aGlzLl9saWI9ITE7dmFyIHQ9dGhpcy5fUFNEPUtlO2lmKFImJih0aGlzLl9zdGFja0hvbGRlcj1xKCksdGhpcy5fcHJldj1udWxsLHRoaXMuX251bVByZXY9MCksXCJmdW5jdGlvblwiIT10eXBlb2YgZSl7aWYoZSE9PWxlKXRocm93IG5ldyBUeXBlRXJyb3IoXCJOb3QgYSBmdW5jdGlvblwiKTtyZXR1cm4gdGhpcy5fc3RhdGU9YXJndW1lbnRzWzFdLHRoaXMuX3ZhbHVlPWFyZ3VtZW50c1syXSx2b2lkKCExPT09dGhpcy5fc3RhdGUmJkJlKHRoaXMsdGhpcy5fdmFsdWUpKX10aGlzLl9zdGF0ZT1udWxsLHRoaXMuX3ZhbHVlPW51bGwsKyt0LnJlZixJZSh0aGlzLGUpfWNvbnN0IGplPXtnZXQ6ZnVuY3Rpb24oKXt2YXIgZT1LZSx0PVFlO2Z1bmN0aW9uIG4obixyKXt2YXIgcz0hZS5nbG9iYWwmJihlIT09S2V8fHQhPT1RZSk7Y29uc3QgaT1zJiYhZXQoKTt2YXIgbz1uZXcgQ2UoKCh0LG8pPT57UmUodGhpcyxuZXcgRGUodXQobixlLHMsaSksdXQocixlLHMsaSksdCxvLGUpKX0pKTtyZXR1cm4gUiYmTmUobyx0aGlzKSxvfXJldHVybiBuLnByb3RvdHlwZT1sZSxufSxzZXQ6ZnVuY3Rpb24oZSl7bCh0aGlzLFwidGhlblwiLGUmJmUucHJvdG90eXBlPT09bGU/amU6e2dldDpmdW5jdGlvbigpe3JldHVybiBlfSxzZXQ6amUuc2V0fSl9fTtmdW5jdGlvbiBEZShlLHQsbixyLHMpe3RoaXMub25GdWxmaWxsZWQ9XCJmdW5jdGlvblwiPT10eXBlb2YgZT9lOm51bGwsdGhpcy5vblJlamVjdGVkPVwiZnVuY3Rpb25cIj09dHlwZW9mIHQ/dDpudWxsLHRoaXMucmVzb2x2ZT1uLHRoaXMucmVqZWN0PXIsdGhpcy5wc2Q9c31mdW5jdGlvbiBJZShlLHQpe3RyeXt0KCh0PT57aWYobnVsbD09PWUuX3N0YXRlKXtpZih0PT09ZSl0aHJvdyBuZXcgVHlwZUVycm9yKFwiQSBwcm9taXNlIGNhbm5vdCBiZSByZXNvbHZlZCB3aXRoIGl0c2VsZi5cIik7dmFyIG49ZS5fbGliJiYkZSgpO3QmJlwiZnVuY3Rpb25cIj09dHlwZW9mIHQudGhlbj9JZShlLCgoZSxuKT0+e3QgaW5zdGFuY2VvZiBDZT90Ll90aGVuKGUsbik6dC50aGVuKGUsbil9KSk6KGUuX3N0YXRlPSEwLGUuX3ZhbHVlPXQsVGUoZSkpLG4mJlVlKCl9fSksQmUuYmluZChudWxsLGUpKX1jYXRjaCh0KXtCZShlLHQpfX1mdW5jdGlvbiBCZShlLHQpe2lmKHhlLnB1c2godCksbnVsbD09PWUuX3N0YXRlKXt2YXIgbj1lLl9saWImJiRlKCk7dD1FZSh0KSxlLl9zdGF0ZT0hMSxlLl92YWx1ZT10LFImJm51bGwhPT10JiZcIm9iamVjdFwiPT10eXBlb2YgdCYmIXQuX3Byb21pc2UmJmZ1bmN0aW9uKGUsdCxuKXt0cnl7ZS5hcHBseShudWxsLG4pfWNhdGNoKGUpe3QmJnQoZSl9fSgoKCk9Pnt2YXIgbj1kKHQsXCJzdGFja1wiKTt0Ll9wcm9taXNlPWUsbCh0LFwic3RhY2tcIix7Z2V0OigpPT5tZT9uJiYobi5nZXQ/bi5nZXQuYXBwbHkodCk6bi52YWx1ZSk6ZS5zdGFja30pfSkpLGZ1bmN0aW9uKGUpe3dlLnNvbWUoKHQ9PnQuX3ZhbHVlPT09ZS5fdmFsdWUpKXx8d2UucHVzaChlKX0oZSksVGUoZSksbiYmVWUoKX19ZnVuY3Rpb24gVGUoZSl7dmFyIHQ9ZS5fbGlzdGVuZXJzO2UuX2xpc3RlbmVycz1bXTtmb3IodmFyIG49MCxyPXQubGVuZ3RoO248cjsrK24pUmUoZSx0W25dKTt2YXIgcz1lLl9QU0Q7LS1zLnJlZnx8cy5maW5hbGl6ZSgpLDA9PT1TZSYmKCsrU2UsZ2UoKCgpPT57MD09LS1TZSYmTGUoKX0pLFtdKSl9ZnVuY3Rpb24gUmUoZSx0KXtpZihudWxsIT09ZS5fc3RhdGUpe3ZhciBuPWUuX3N0YXRlP3Qub25GdWxmaWxsZWQ6dC5vblJlamVjdGVkO2lmKG51bGw9PT1uKXJldHVybihlLl9zdGF0ZT90LnJlc29sdmU6dC5yZWplY3QpKGUuX3ZhbHVlKTsrK3QucHNkLnJlZiwrK1NlLGdlKEZlLFtuLGUsdF0pfWVsc2UgZS5fbGlzdGVuZXJzLnB1c2godCl9ZnVuY3Rpb24gRmUoZSx0LG4pe3RyeXtrZT10O3ZhciByLHM9dC5fdmFsdWU7dC5fc3RhdGU/cj1lKHMpOih4ZS5sZW5ndGgmJih4ZT1bXSkscj1lKHMpLC0xPT09eGUuaW5kZXhPZihzKSYmZnVuY3Rpb24oZSl7dmFyIHQ9d2UubGVuZ3RoO2Zvcig7dDspaWYod2VbLS10XS5fdmFsdWU9PT1lLl92YWx1ZSlyZXR1cm4gdm9pZCB3ZS5zcGxpY2UodCwxKX0odCkpLG4ucmVzb2x2ZShyKX1jYXRjaChlKXtuLnJlamVjdChlKX1maW5hbGx5e2tlPW51bGwsMD09LS1TZSYmTGUoKSwtLW4ucHNkLnJlZnx8bi5wc2QuZmluYWxpemUoKX19ZnVuY3Rpb24gTWUoZSx0LG4pe2lmKHQubGVuZ3RoPT09bilyZXR1cm4gdDt2YXIgcj1cIlwiO2lmKCExPT09ZS5fc3RhdGUpe3ZhciBzLGksbz1lLl92YWx1ZTtudWxsIT1vPyhzPW8ubmFtZXx8XCJFcnJvclwiLGk9by5tZXNzYWdlfHxvLHI9JChvLDApKToocz1vLGk9XCJcIiksdC5wdXNoKHMrKGk/XCI6IFwiK2k6XCJcIikrcil9cmV0dXJuIFImJigocj0kKGUuX3N0YWNrSG9sZGVyLDIpKSYmLTE9PT10LmluZGV4T2YocikmJnQucHVzaChyKSxlLl9wcmV2JiZNZShlLl9wcmV2LHQsbikpLHR9ZnVuY3Rpb24gTmUoZSx0KXt2YXIgbj10P3QuX251bVByZXYrMTowO248MTAwJiYoZS5fcHJldj10LGUuX251bVByZXY9bil9ZnVuY3Rpb24gcWUoKXskZSgpJiZVZSgpfWZ1bmN0aW9uICRlKCl7dmFyIGU9YmU7cmV0dXJuIGJlPSExLF9lPSExLGV9ZnVuY3Rpb24gVWUoKXt2YXIgZSx0LG47ZG97Zm9yKDtPZS5sZW5ndGg+MDspZm9yKGU9T2UsT2U9W10sbj1lLmxlbmd0aCx0PTA7dDxuOysrdCl7dmFyIHI9ZVt0XTtyWzBdLmFwcGx5KG51bGwsclsxXSl9fXdoaWxlKE9lLmxlbmd0aD4wKTtiZT0hMCxfZT0hMH1mdW5jdGlvbiBMZSgpe3ZhciBlPXdlO3dlPVtdLGUuZm9yRWFjaCgoZT0+e2UuX1BTRC5vbnVuaGFuZGxlZC5jYWxsKG51bGwsZS5fdmFsdWUsZSl9KSk7Zm9yKHZhciB0PUFlLnNsaWNlKDApLG49dC5sZW5ndGg7bjspdFstLW5dKCl9ZnVuY3Rpb24gVmUoZSl7cmV0dXJuIG5ldyBDZShsZSwhMSxlKX1mdW5jdGlvbiBXZShlLHQpe3ZhciBuPUtlO3JldHVybiBmdW5jdGlvbigpe3ZhciByPSRlKCkscz1LZTt0cnl7cmV0dXJuIHN0KG4sITApLGUuYXBwbHkodGhpcyxhcmd1bWVudHMpfWNhdGNoKGUpe3QmJnQoZSl9ZmluYWxseXtzdChzLCExKSxyJiZVZSgpfX19YShDZS5wcm90b3R5cGUse3RoZW46amUsX3RoZW46ZnVuY3Rpb24oZSx0KXtSZSh0aGlzLG5ldyBEZShudWxsLG51bGwsZSx0LEtlKSl9LGNhdGNoOmZ1bmN0aW9uKGUpe2lmKDE9PT1hcmd1bWVudHMubGVuZ3RoKXJldHVybiB0aGlzLnRoZW4obnVsbCxlKTt2YXIgdD1hcmd1bWVudHNbMF0sbj1hcmd1bWVudHNbMV07cmV0dXJuXCJmdW5jdGlvblwiPT10eXBlb2YgdD90aGlzLnRoZW4obnVsbCwoZT0+ZSBpbnN0YW5jZW9mIHQ/bihlKTpWZShlKSkpOnRoaXMudGhlbihudWxsLChlPT5lJiZlLm5hbWU9PT10P24oZSk6VmUoZSkpKX0sZmluYWxseTpmdW5jdGlvbihlKXtyZXR1cm4gdGhpcy50aGVuKCh0PT4oZSgpLHQpKSwodD0+KGUoKSxWZSh0KSkpKX0sc3RhY2s6e2dldDpmdW5jdGlvbigpe2lmKHRoaXMuX3N0YWNrKXJldHVybiB0aGlzLl9zdGFjazt0cnl7bWU9ITA7dmFyIGU9TWUodGhpcyxbXSwyMCkuam9pbihcIlxcbkZyb20gcHJldmlvdXM6IFwiKTtyZXR1cm4gbnVsbCE9PXRoaXMuX3N0YXRlJiYodGhpcy5fc3RhY2s9ZSksZX1maW5hbGx5e21lPSExfX19LHRpbWVvdXQ6ZnVuY3Rpb24oZSx0KXtyZXR1cm4gZTwxLzA/bmV3IENlKCgobixyKT0+e3ZhciBzPXNldFRpbWVvdXQoKCgpPT5yKG5ldyBYLlRpbWVvdXQodCkpKSxlKTt0aGlzLnRoZW4obixyKS5maW5hbGx5KGNsZWFyVGltZW91dC5iaW5kKG51bGwscykpfSkpOnRoaXN9fSksXCJ1bmRlZmluZWRcIiE9dHlwZW9mIFN5bWJvbCYmU3ltYm9sLnRvU3RyaW5nVGFnJiZsKENlLnByb3RvdHlwZSxTeW1ib2wudG9TdHJpbmdUYWcsXCJEZXhpZS5Qcm9taXNlXCIpLFBlLmVudj1pdCgpLGEoQ2Use2FsbDpmdW5jdGlvbigpe3ZhciBlPUIuYXBwbHkobnVsbCxhcmd1bWVudHMpLm1hcCh0dCk7cmV0dXJuIG5ldyBDZSgoZnVuY3Rpb24odCxuKXswPT09ZS5sZW5ndGgmJnQoW10pO3ZhciByPWUubGVuZ3RoO2UuZm9yRWFjaCgoKHMsaSk9PkNlLnJlc29sdmUocykudGhlbigobj0+e2VbaV09biwtLXJ8fHQoZSl9KSxuKSkpfSkpfSxyZXNvbHZlOmU9PntpZihlIGluc3RhbmNlb2YgQ2UpcmV0dXJuIGU7aWYoZSYmXCJmdW5jdGlvblwiPT10eXBlb2YgZS50aGVuKXJldHVybiBuZXcgQ2UoKCh0LG4pPT57ZS50aGVuKHQsbil9KSk7dmFyIHQ9bmV3IENlKGxlLCEwLGUpO3JldHVybiBOZSh0LGtlKSx0fSxyZWplY3Q6VmUscmFjZTpmdW5jdGlvbigpe3ZhciBlPUIuYXBwbHkobnVsbCxhcmd1bWVudHMpLm1hcCh0dCk7cmV0dXJuIG5ldyBDZSgoKHQsbik9PntlLm1hcCgoZT0+Q2UucmVzb2x2ZShlKS50aGVuKHQsbikpKX0pKX0sUFNEOntnZXQ6KCk9PktlLHNldDplPT5LZT1lfSx0b3RhbEVjaG9lczp7Z2V0OigpPT5RZX0sbmV3UFNEOkplLHVzZVBTRDpvdCxzY2hlZHVsZXI6e2dldDooKT0+Z2Usc2V0OmU9PntnZT1lfX0scmVqZWN0aW9uTWFwcGVyOntnZXQ6KCk9PkVlLHNldDplPT57RWU9ZX19LGZvbGxvdzooZSx0KT0+bmV3IENlKCgobixyKT0+SmUoKCh0LG4pPT57dmFyIHI9S2U7ci51bmhhbmRsZWRzPVtdLHIub251bmhhbmRsZWQ9bixyLmZpbmFsaXplPXJlKChmdW5jdGlvbigpeyFmdW5jdGlvbihlKXtmdW5jdGlvbiB0KCl7ZSgpLEFlLnNwbGljZShBZS5pbmRleE9mKHQpLDEpfUFlLnB1c2godCksKytTZSxnZSgoKCk9PnswPT0tLVNlJiZMZSgpfSksW10pfSgoKCk9PnswPT09dGhpcy51bmhhbmRsZWRzLmxlbmd0aD90KCk6bih0aGlzLnVuaGFuZGxlZHNbMF0pfSkpfSksci5maW5hbGl6ZSksZSgpfSksdCxuLHIpKSl9KSxwZSYmKHBlLmFsbFNldHRsZWQmJmwoQ2UsXCJhbGxTZXR0bGVkXCIsKGZ1bmN0aW9uKCl7Y29uc3QgZT1CLmFwcGx5KG51bGwsYXJndW1lbnRzKS5tYXAodHQpO3JldHVybiBuZXcgQ2UoKHQ9PnswPT09ZS5sZW5ndGgmJnQoW10pO2xldCBuPWUubGVuZ3RoO2NvbnN0IHI9bmV3IEFycmF5KG4pO2UuZm9yRWFjaCgoKGUscyk9PkNlLnJlc29sdmUoZSkudGhlbigoZT0+cltzXT17c3RhdHVzOlwiZnVsZmlsbGVkXCIsdmFsdWU6ZX0pLChlPT5yW3NdPXtzdGF0dXM6XCJyZWplY3RlZFwiLHJlYXNvbjplfSkpLnRoZW4oKCgpPT4tLW58fHQocikpKSkpfSkpfSkpLHBlLmFueSYmXCJ1bmRlZmluZWRcIiE9dHlwZW9mIEFnZ3JlZ2F0ZUVycm9yJiZsKENlLFwiYW55XCIsKGZ1bmN0aW9uKCl7Y29uc3QgZT1CLmFwcGx5KG51bGwsYXJndW1lbnRzKS5tYXAodHQpO3JldHVybiBuZXcgQ2UoKCh0LG4pPT57MD09PWUubGVuZ3RoJiZuKG5ldyBBZ2dyZWdhdGVFcnJvcihbXSkpO2xldCByPWUubGVuZ3RoO2NvbnN0IHM9bmV3IEFycmF5KHIpO2UuZm9yRWFjaCgoKGUsaSk9PkNlLnJlc29sdmUoZSkudGhlbigoZT0+dChlKSksKGU9PntzW2ldPWUsLS1yfHxuKG5ldyBBZ2dyZWdhdGVFcnJvcihzKSl9KSkpKX0pKX0pKSk7Y29uc3QgWWU9e2F3YWl0czowLGVjaG9lczowLGlkOjB9O3ZhciB6ZT0wLEdlPVtdLEhlPTAsUWU9MCxYZT0wO2Z1bmN0aW9uIEplKGUsdCxuLHMpe3ZhciBpPUtlLG89T2JqZWN0LmNyZWF0ZShpKTtvLnBhcmVudD1pLG8ucmVmPTAsby5nbG9iYWw9ITEsby5pZD0rK1hlO3ZhciBhPVBlLmVudjtvLmVudj15ZT97UHJvbWlzZTpDZSxQcm9taXNlUHJvcDp7dmFsdWU6Q2UsY29uZmlndXJhYmxlOiEwLHdyaXRhYmxlOiEwfSxhbGw6Q2UuYWxsLHJhY2U6Q2UucmFjZSxhbGxTZXR0bGVkOkNlLmFsbFNldHRsZWQsYW55OkNlLmFueSxyZXNvbHZlOkNlLnJlc29sdmUscmVqZWN0OkNlLnJlamVjdCxudGhlbjpsdChhLm50aGVuLG8pLGd0aGVuOmx0KGEuZ3RoZW4sbyl9Ont9LHQmJnIobyx0KSwrK2kucmVmLG8uZmluYWxpemU9ZnVuY3Rpb24oKXstLXRoaXMucGFyZW50LnJlZnx8dGhpcy5wYXJlbnQuZmluYWxpemUoKX07dmFyIHU9b3QobyxlLG4scyk7cmV0dXJuIDA9PT1vLnJlZiYmby5maW5hbGl6ZSgpLHV9ZnVuY3Rpb24gWmUoKXtyZXR1cm4gWWUuaWR8fChZZS5pZD0rK3plKSwrK1llLmF3YWl0cyxZZS5lY2hvZXMrPTEwMCxZZS5pZH1mdW5jdGlvbiBldCgpe3JldHVybiEhWWUuYXdhaXRzJiYoMD09LS1ZZS5hd2FpdHMmJihZZS5pZD0wKSxZZS5lY2hvZXM9MTAwKlllLmF3YWl0cywhMCl9ZnVuY3Rpb24gdHQoZSl7cmV0dXJuIFllLmVjaG9lcyYmZSYmZS5jb25zdHJ1Y3Rvcj09PXBlPyhaZSgpLGUudGhlbigoZT0+KGV0KCksZSkpLChlPT4oZXQoKSxodChlKSkpKSk6ZX1mdW5jdGlvbiBudChlKXsrK1FlLFllLmVjaG9lcyYmMCE9LS1ZZS5lY2hvZXN8fChZZS5lY2hvZXM9WWUuaWQ9MCksR2UucHVzaChLZSksc3QoZSwhMCl9ZnVuY3Rpb24gcnQoKXt2YXIgZT1HZVtHZS5sZW5ndGgtMV07R2UucG9wKCksc3QoZSwhMSl9ZnVuY3Rpb24gc3QodCxuKXt2YXIgcj1LZTtpZigobj8hWWUuZWNob2VzfHxIZSsrJiZ0PT09S2U6IUhlfHwtLUhlJiZ0PT09S2UpfHxhdChuP250LmJpbmQobnVsbCx0KTpydCksdCE9PUtlJiYoS2U9dCxyPT09UGUmJihQZS5lbnY9aXQoKSkseWUpKXt2YXIgcz1QZS5lbnYuUHJvbWlzZSxpPXQuZW52O2hlLnRoZW49aS5udGhlbixzLnByb3RvdHlwZS50aGVuPWkuZ3RoZW4sKHIuZ2xvYmFsfHx0Lmdsb2JhbCkmJihPYmplY3QuZGVmaW5lUHJvcGVydHkoZSxcIlByb21pc2VcIixpLlByb21pc2VQcm9wKSxzLmFsbD1pLmFsbCxzLnJhY2U9aS5yYWNlLHMucmVzb2x2ZT1pLnJlc29sdmUscy5yZWplY3Q9aS5yZWplY3QsaS5hbGxTZXR0bGVkJiYocy5hbGxTZXR0bGVkPWkuYWxsU2V0dGxlZCksaS5hbnkmJihzLmFueT1pLmFueSkpfX1mdW5jdGlvbiBpdCgpe3ZhciB0PWUuUHJvbWlzZTtyZXR1cm4geWU/e1Byb21pc2U6dCxQcm9taXNlUHJvcDpPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGUsXCJQcm9taXNlXCIpLGFsbDp0LmFsbCxyYWNlOnQucmFjZSxhbGxTZXR0bGVkOnQuYWxsU2V0dGxlZCxhbnk6dC5hbnkscmVzb2x2ZTp0LnJlc29sdmUscmVqZWN0OnQucmVqZWN0LG50aGVuOmhlLnRoZW4sZ3RoZW46dC5wcm90b3R5cGUudGhlbn06e319ZnVuY3Rpb24gb3QoZSx0LG4scixzKXt2YXIgaT1LZTt0cnl7cmV0dXJuIHN0KGUsITApLHQobixyLHMpfWZpbmFsbHl7c3QoaSwhMSl9fWZ1bmN0aW9uIGF0KGUpe2ZlLmNhbGwoY2UsZSl9ZnVuY3Rpb24gdXQoZSx0LG4scil7cmV0dXJuXCJmdW5jdGlvblwiIT10eXBlb2YgZT9lOmZ1bmN0aW9uKCl7dmFyIHM9S2U7biYmWmUoKSxzdCh0LCEwKTt0cnl7cmV0dXJuIGUuYXBwbHkodGhpcyxhcmd1bWVudHMpfWZpbmFsbHl7c3QocywhMSksciYmYXQoZXQpfX19ZnVuY3Rpb24gbHQoZSx0KXtyZXR1cm4gZnVuY3Rpb24obixyKXtyZXR1cm4gZS5jYWxsKHRoaXMsdXQobix0KSx1dChyLHQpKX19LTE9PT0oXCJcIitmZSkuaW5kZXhPZihcIltuYXRpdmUgY29kZV1cIikmJihaZT1ldD1lZSk7ZnVuY3Rpb24gY3QodCxuKXt2YXIgczt0cnl7cz1uLm9udW5jYXRjaGVkKHQpfWNhdGNoKGUpe31pZighMSE9PXMpdHJ5e3ZhciBpLG89e3Byb21pc2U6bixyZWFzb246dH07aWYoZS5kb2N1bWVudCYmZG9jdW1lbnQuY3JlYXRlRXZlbnQ/KChpPWRvY3VtZW50LmNyZWF0ZUV2ZW50KFwiRXZlbnRcIikpLmluaXRFdmVudChcInVuaGFuZGxlZHJlamVjdGlvblwiLCEwLCEwKSxyKGksbykpOmUuQ3VzdG9tRXZlbnQmJnIoaT1uZXcgQ3VzdG9tRXZlbnQoXCJ1bmhhbmRsZWRyZWplY3Rpb25cIix7ZGV0YWlsOm99KSxvKSxpJiZlLmRpc3BhdGNoRXZlbnQmJihkaXNwYXRjaEV2ZW50KGkpLCFlLlByb21pc2VSZWplY3Rpb25FdmVudCYmZS5vbnVuaGFuZGxlZHJlamVjdGlvbikpdHJ5e2Uub251bmhhbmRsZWRyZWplY3Rpb24oaSl9Y2F0Y2goZSl7fVImJmkmJiFpLmRlZmF1bHRQcmV2ZW50ZWQmJmNvbnNvbGUud2FybihgVW5oYW5kbGVkIHJlamVjdGlvbjogJHt0LnN0YWNrfHx0fWApfWNhdGNoKGUpe319dmFyIGh0PUNlLnJlamVjdDtmdW5jdGlvbiBkdChlLHQsbixyKXtpZihlLmlkYmRiJiYoZS5fc3RhdGUub3BlbkNvbXBsZXRlfHxLZS5sZXRUaHJvdWdofHxlLl92aXApKXt2YXIgcz1lLl9jcmVhdGVUcmFuc2FjdGlvbih0LG4sZS5fZGJTY2hlbWEpO3RyeXtzLmNyZWF0ZSgpLGUuX3N0YXRlLlBSMTM5OF9tYXhMb29wPTN9Y2F0Y2gocyl7cmV0dXJuIHMubmFtZT09PUguSW52YWxpZFN0YXRlJiZlLmlzT3BlbigpJiYtLWUuX3N0YXRlLlBSMTM5OF9tYXhMb29wPjA/KGNvbnNvbGUud2FybihcIkRleGllOiBOZWVkIHRvIHJlb3BlbiBkYlwiKSxlLl9jbG9zZSgpLGUub3BlbigpLnRoZW4oKCgpPT5kdChlLHQsbixyKSkpKTpodChzKX1yZXR1cm4gcy5fcHJvbWlzZSh0LCgoZSx0KT0+SmUoKCgpPT4oS2UudHJhbnM9cyxyKGUsdCxzKSkpKSkpLnRoZW4oKGU9PnMuX2NvbXBsZXRpb24udGhlbigoKCk9PmUpKSkpfWlmKGUuX3N0YXRlLm9wZW5Db21wbGV0ZSlyZXR1cm4gaHQobmV3IFguRGF0YWJhc2VDbG9zZWQoZS5fc3RhdGUuZGJPcGVuRXJyb3IpKTtpZighZS5fc3RhdGUuaXNCZWluZ09wZW5lZCl7aWYoIWUuX29wdGlvbnMuYXV0b09wZW4pcmV0dXJuIGh0KG5ldyBYLkRhdGFiYXNlQ2xvc2VkKTtlLm9wZW4oKS5jYXRjaChlZSl9cmV0dXJuIGUuX3N0YXRlLmRiUmVhZHlQcm9taXNlLnRoZW4oKCgpPT5kdChlLHQsbixyKSkpfWNvbnN0IGZ0PVN0cmluZy5mcm9tQ2hhckNvZGUoNjU1MzUpLHB0PVwiSW52YWxpZCBrZXkgcHJvdmlkZWQuIEtleXMgbXVzdCBiZSBvZiB0eXBlIHN0cmluZywgbnVtYmVyLCBEYXRlIG9yIEFycmF5PHN0cmluZyB8IG51bWJlciB8IERhdGU+LlwiLHl0PVtdLG10PVwidW5kZWZpbmVkXCIhPXR5cGVvZiBuYXZpZ2F0b3ImJi8oTVNJRXxUcmlkZW50fEVkZ2UpLy50ZXN0KG5hdmlnYXRvci51c2VyQWdlbnQpLHZ0PW10LGd0PW10LGJ0PWU9PiEvKGRleGllXFwuanN8ZGV4aWVcXC5taW5cXC5qcykvLnRlc3QoZSk7ZnVuY3Rpb24gX3QoZSx0KXtyZXR1cm4gZT90P2Z1bmN0aW9uKCl7cmV0dXJuIGUuYXBwbHkodGhpcyxhcmd1bWVudHMpJiZ0LmFwcGx5KHRoaXMsYXJndW1lbnRzKX06ZTp0fWNvbnN0IHd0PXt0eXBlOjMsbG93ZXI6LTEvMCxsb3dlck9wZW46ITEsdXBwZXI6W1tdXSx1cHBlck9wZW46ITF9O2Z1bmN0aW9uIHh0KGUpe3JldHVyblwic3RyaW5nXCIhPXR5cGVvZiBlfHwvXFwuLy50ZXN0KGUpP2U9PmU6dD0+KHZvaWQgMD09PXRbZV0mJmUgaW4gdCYmZGVsZXRlKHQ9Tyh0KSlbZV0sdCl9Y2xhc3Mga3R7X3RyYW5zKGUsdCxuKXtjb25zdCByPXRoaXMuX3R4fHxLZS50cmFucyxzPXRoaXMubmFtZTtmdW5jdGlvbiBpKGUsbixyKXtpZighci5zY2hlbWFbc10pdGhyb3cgbmV3IFguTm90Rm91bmQoXCJUYWJsZSBcIitzK1wiIG5vdCBwYXJ0IG9mIHRyYW5zYWN0aW9uXCIpO3JldHVybiB0KHIuaWRidHJhbnMscil9Y29uc3Qgbz0kZSgpO3RyeXtyZXR1cm4gciYmci5kYj09PXRoaXMuZGI/cj09PUtlLnRyYW5zP3IuX3Byb21pc2UoZSxpLG4pOkplKCgoKT0+ci5fcHJvbWlzZShlLGksbikpLHt0cmFuczpyLHRyYW5zbGVzczpLZS50cmFuc2xlc3N8fEtlfSk6ZHQodGhpcy5kYixlLFt0aGlzLm5hbWVdLGkpfWZpbmFsbHl7byYmVWUoKX19Z2V0KGUsdCl7cmV0dXJuIGUmJmUuY29uc3RydWN0b3I9PT1PYmplY3Q/dGhpcy53aGVyZShlKS5maXJzdCh0KTp0aGlzLl90cmFucyhcInJlYWRvbmx5XCIsKHQ9PnRoaXMuY29yZS5nZXQoe3RyYW5zOnQsa2V5OmV9KS50aGVuKChlPT50aGlzLmhvb2sucmVhZGluZy5maXJlKGUpKSkpKS50aGVuKHQpfXdoZXJlKGUpe2lmKFwic3RyaW5nXCI9PXR5cGVvZiBlKXJldHVybiBuZXcgdGhpcy5kYi5XaGVyZUNsYXVzZSh0aGlzLGUpO2lmKG4oZSkpcmV0dXJuIG5ldyB0aGlzLmRiLldoZXJlQ2xhdXNlKHRoaXMsYFske2Uuam9pbihcIitcIil9XWApO2NvbnN0IHI9dChlKTtpZigxPT09ci5sZW5ndGgpcmV0dXJuIHRoaXMud2hlcmUoclswXSkuZXF1YWxzKGVbclswXV0pO2NvbnN0IHM9dGhpcy5zY2hlbWEuaW5kZXhlcy5jb25jYXQodGhpcy5zY2hlbWEucHJpbUtleSkuZmlsdGVyKChlPT5lLmNvbXBvdW5kJiZyLmV2ZXJ5KCh0PT5lLmtleVBhdGguaW5kZXhPZih0KT49MCkpJiZlLmtleVBhdGguZXZlcnkoKGU9PnIuaW5kZXhPZihlKT49MCkpKSlbMF07aWYocyYmdGhpcy5kYi5fbWF4S2V5IT09ZnQpcmV0dXJuIHRoaXMud2hlcmUocy5uYW1lKS5lcXVhbHMocy5rZXlQYXRoLm1hcCgodD0+ZVt0XSkpKTshcyYmUiYmY29uc29sZS53YXJuKGBUaGUgcXVlcnkgJHtKU09OLnN0cmluZ2lmeShlKX0gb24gJHt0aGlzLm5hbWV9IHdvdWxkIGJlbmVmaXQgb2YgYSBjb21wb3VuZCBpbmRleCBbJHtyLmpvaW4oXCIrXCIpfV1gKTtjb25zdHtpZHhCeU5hbWU6aX09dGhpcy5zY2hlbWEsbz10aGlzLmRiLl9kZXBzLmluZGV4ZWREQjtmdW5jdGlvbiBhKGUsdCl7dHJ5e3JldHVybiAwPT09by5jbXAoZSx0KX1jYXRjaChlKXtyZXR1cm4hMX19Y29uc3RbdSxsXT1yLnJlZHVjZSgoKFt0LHJdLHMpPT57Y29uc3Qgbz1pW3NdLHU9ZVtzXTtyZXR1cm5bdHx8byx0fHwhbz9fdChyLG8mJm8ubXVsdGk/ZT0+e2NvbnN0IHQ9YihlLHMpO3JldHVybiBuKHQpJiZ0LnNvbWUoKGU9PmEodSxlKSkpfTplPT5hKHUsYihlLHMpKSk6cl19KSxbbnVsbCxudWxsXSk7cmV0dXJuIHU/dGhpcy53aGVyZSh1Lm5hbWUpLmVxdWFscyhlW3Uua2V5UGF0aF0pLmZpbHRlcihsKTpzP3RoaXMuZmlsdGVyKGwpOnRoaXMud2hlcmUocikuZXF1YWxzKFwiXCIpfWZpbHRlcihlKXtyZXR1cm4gdGhpcy50b0NvbGxlY3Rpb24oKS5hbmQoZSl9Y291bnQoZSl7cmV0dXJuIHRoaXMudG9Db2xsZWN0aW9uKCkuY291bnQoZSl9b2Zmc2V0KGUpe3JldHVybiB0aGlzLnRvQ29sbGVjdGlvbigpLm9mZnNldChlKX1saW1pdChlKXtyZXR1cm4gdGhpcy50b0NvbGxlY3Rpb24oKS5saW1pdChlKX1lYWNoKGUpe3JldHVybiB0aGlzLnRvQ29sbGVjdGlvbigpLmVhY2goZSl9dG9BcnJheShlKXtyZXR1cm4gdGhpcy50b0NvbGxlY3Rpb24oKS50b0FycmF5KGUpfXRvQ29sbGVjdGlvbigpe3JldHVybiBuZXcgdGhpcy5kYi5Db2xsZWN0aW9uKG5ldyB0aGlzLmRiLldoZXJlQ2xhdXNlKHRoaXMpKX1vcmRlckJ5KGUpe3JldHVybiBuZXcgdGhpcy5kYi5Db2xsZWN0aW9uKG5ldyB0aGlzLmRiLldoZXJlQ2xhdXNlKHRoaXMsbihlKT9gWyR7ZS5qb2luKFwiK1wiKX1dYDplKSl9cmV2ZXJzZSgpe3JldHVybiB0aGlzLnRvQ29sbGVjdGlvbigpLnJldmVyc2UoKX1tYXBUb0NsYXNzKGUpe3RoaXMuc2NoZW1hLm1hcHBlZENsYXNzPWU7Y29uc3QgdD10PT57aWYoIXQpcmV0dXJuIHQ7Y29uc3Qgbj1PYmplY3QuY3JlYXRlKGUucHJvdG90eXBlKTtmb3IodmFyIHIgaW4gdClpZihvKHQscikpdHJ5e25bcl09dFtyXX1jYXRjaChlKXt9cmV0dXJuIG59O3JldHVybiB0aGlzLnNjaGVtYS5yZWFkSG9vayYmdGhpcy5ob29rLnJlYWRpbmcudW5zdWJzY3JpYmUodGhpcy5zY2hlbWEucmVhZEhvb2spLHRoaXMuc2NoZW1hLnJlYWRIb29rPXQsdGhpcy5ob29rKFwicmVhZGluZ1wiLHQpLGV9ZGVmaW5lQ2xhc3MoKXtyZXR1cm4gdGhpcy5tYXBUb0NsYXNzKChmdW5jdGlvbihlKXtyKHRoaXMsZSl9KSl9YWRkKGUsdCl7Y29uc3R7YXV0bzpuLGtleVBhdGg6cn09dGhpcy5zY2hlbWEucHJpbUtleTtsZXQgcz1lO3JldHVybiByJiZuJiYocz14dChyKShlKSksdGhpcy5fdHJhbnMoXCJyZWFkd3JpdGVcIiwoZT0+dGhpcy5jb3JlLm11dGF0ZSh7dHJhbnM6ZSx0eXBlOlwiYWRkXCIsa2V5czpudWxsIT10P1t0XTpudWxsLHZhbHVlczpbc119KSkpLnRoZW4oKGU9PmUubnVtRmFpbHVyZXM/Q2UucmVqZWN0KGUuZmFpbHVyZXNbMF0pOmUubGFzdFJlc3VsdCkpLnRoZW4oKHQ9PntpZihyKXRyeXtfKGUscix0KX1jYXRjaChlKXt9cmV0dXJuIHR9KSl9dXBkYXRlKGUscil7aWYoXCJvYmplY3RcIiE9dHlwZW9mIGV8fG4oZSkpcmV0dXJuIHRoaXMud2hlcmUoXCI6aWRcIikuZXF1YWxzKGUpLm1vZGlmeShyKTt7Y29uc3Qgbj1iKGUsdGhpcy5zY2hlbWEucHJpbUtleS5rZXlQYXRoKTtpZih2b2lkIDA9PT1uKXJldHVybiBodChuZXcgWC5JbnZhbGlkQXJndW1lbnQoXCJHaXZlbiBvYmplY3QgZG9lcyBub3QgY29udGFpbiBpdHMgcHJpbWFyeSBrZXlcIikpO3RyeXtcImZ1bmN0aW9uXCIhPXR5cGVvZiByP3QocikuZm9yRWFjaCgodD0+e18oZSx0LHJbdF0pfSkpOnIoZSx7dmFsdWU6ZSxwcmltS2V5Om59KX1jYXRjaChlKXt9cmV0dXJuIHRoaXMud2hlcmUoXCI6aWRcIikuZXF1YWxzKG4pLm1vZGlmeShyKX19cHV0KGUsdCl7Y29uc3R7YXV0bzpuLGtleVBhdGg6cn09dGhpcy5zY2hlbWEucHJpbUtleTtsZXQgcz1lO3JldHVybiByJiZuJiYocz14dChyKShlKSksdGhpcy5fdHJhbnMoXCJyZWFkd3JpdGVcIiwoZT0+dGhpcy5jb3JlLm11dGF0ZSh7dHJhbnM6ZSx0eXBlOlwicHV0XCIsdmFsdWVzOltzXSxrZXlzOm51bGwhPXQ/W3RdOm51bGx9KSkpLnRoZW4oKGU9PmUubnVtRmFpbHVyZXM/Q2UucmVqZWN0KGUuZmFpbHVyZXNbMF0pOmUubGFzdFJlc3VsdCkpLnRoZW4oKHQ9PntpZihyKXRyeXtfKGUscix0KX1jYXRjaChlKXt9cmV0dXJuIHR9KSl9ZGVsZXRlKGUpe3JldHVybiB0aGlzLl90cmFucyhcInJlYWR3cml0ZVwiLCh0PT50aGlzLmNvcmUubXV0YXRlKHt0cmFuczp0LHR5cGU6XCJkZWxldGVcIixrZXlzOltlXX0pKSkudGhlbigoZT0+ZS5udW1GYWlsdXJlcz9DZS5yZWplY3QoZS5mYWlsdXJlc1swXSk6dm9pZCAwKSl9Y2xlYXIoKXtyZXR1cm4gdGhpcy5fdHJhbnMoXCJyZWFkd3JpdGVcIiwoZT0+dGhpcy5jb3JlLm11dGF0ZSh7dHJhbnM6ZSx0eXBlOlwiZGVsZXRlUmFuZ2VcIixyYW5nZTp3dH0pKSkudGhlbigoZT0+ZS5udW1GYWlsdXJlcz9DZS5yZWplY3QoZS5mYWlsdXJlc1swXSk6dm9pZCAwKSl9YnVsa0dldChlKXtyZXR1cm4gdGhpcy5fdHJhbnMoXCJyZWFkb25seVwiLCh0PT50aGlzLmNvcmUuZ2V0TWFueSh7a2V5czplLHRyYW5zOnR9KS50aGVuKChlPT5lLm1hcCgoZT0+dGhpcy5ob29rLnJlYWRpbmcuZmlyZShlKSkpKSkpKX1idWxrQWRkKGUsdCxuKXtjb25zdCByPUFycmF5LmlzQXJyYXkodCk/dDp2b2lkIDAscz0obj1ufHwocj92b2lkIDA6dCkpP24uYWxsS2V5czp2b2lkIDA7cmV0dXJuIHRoaXMuX3RyYW5zKFwicmVhZHdyaXRlXCIsKHQ9Pntjb25zdHthdXRvOm4sa2V5UGF0aDppfT10aGlzLnNjaGVtYS5wcmltS2V5O2lmKGkmJnIpdGhyb3cgbmV3IFguSW52YWxpZEFyZ3VtZW50KFwiYnVsa0FkZCgpOiBrZXlzIGFyZ3VtZW50IGludmFsaWQgb24gdGFibGVzIHdpdGggaW5ib3VuZCBrZXlzXCIpO2lmKHImJnIubGVuZ3RoIT09ZS5sZW5ndGgpdGhyb3cgbmV3IFguSW52YWxpZEFyZ3VtZW50KFwiQXJndW1lbnRzIG9iamVjdHMgYW5kIGtleXMgbXVzdCBoYXZlIHRoZSBzYW1lIGxlbmd0aFwiKTtjb25zdCBvPWUubGVuZ3RoO2xldCBhPWkmJm4/ZS5tYXAoeHQoaSkpOmU7cmV0dXJuIHRoaXMuY29yZS5tdXRhdGUoe3RyYW5zOnQsdHlwZTpcImFkZFwiLGtleXM6cix2YWx1ZXM6YSx3YW50UmVzdWx0czpzfSkudGhlbigoKHtudW1GYWlsdXJlczplLHJlc3VsdHM6dCxsYXN0UmVzdWx0Om4sZmFpbHVyZXM6cn0pPT57aWYoMD09PWUpcmV0dXJuIHM/dDpuO3Rocm93IG5ldyBHKGAke3RoaXMubmFtZX0uYnVsa0FkZCgpOiAke2V9IG9mICR7b30gb3BlcmF0aW9ucyBmYWlsZWRgLHIpfSkpfSkpfWJ1bGtQdXQoZSx0LG4pe2NvbnN0IHI9QXJyYXkuaXNBcnJheSh0KT90OnZvaWQgMCxzPShuPW58fChyP3ZvaWQgMDp0KSk/bi5hbGxLZXlzOnZvaWQgMDtyZXR1cm4gdGhpcy5fdHJhbnMoXCJyZWFkd3JpdGVcIiwodD0+e2NvbnN0e2F1dG86bixrZXlQYXRoOml9PXRoaXMuc2NoZW1hLnByaW1LZXk7aWYoaSYmcil0aHJvdyBuZXcgWC5JbnZhbGlkQXJndW1lbnQoXCJidWxrUHV0KCk6IGtleXMgYXJndW1lbnQgaW52YWxpZCBvbiB0YWJsZXMgd2l0aCBpbmJvdW5kIGtleXNcIik7aWYociYmci5sZW5ndGghPT1lLmxlbmd0aCl0aHJvdyBuZXcgWC5JbnZhbGlkQXJndW1lbnQoXCJBcmd1bWVudHMgb2JqZWN0cyBhbmQga2V5cyBtdXN0IGhhdmUgdGhlIHNhbWUgbGVuZ3RoXCIpO2NvbnN0IG89ZS5sZW5ndGg7bGV0IGE9aSYmbj9lLm1hcCh4dChpKSk6ZTtyZXR1cm4gdGhpcy5jb3JlLm11dGF0ZSh7dHJhbnM6dCx0eXBlOlwicHV0XCIsa2V5czpyLHZhbHVlczphLHdhbnRSZXN1bHRzOnN9KS50aGVuKCgoe251bUZhaWx1cmVzOmUscmVzdWx0czp0LGxhc3RSZXN1bHQ6bixmYWlsdXJlczpyfSk9PntpZigwPT09ZSlyZXR1cm4gcz90Om47dGhyb3cgbmV3IEcoYCR7dGhpcy5uYW1lfS5idWxrUHV0KCk6ICR7ZX0gb2YgJHtvfSBvcGVyYXRpb25zIGZhaWxlZGAscil9KSl9KSl9YnVsa0RlbGV0ZShlKXtjb25zdCB0PWUubGVuZ3RoO3JldHVybiB0aGlzLl90cmFucyhcInJlYWR3cml0ZVwiLCh0PT50aGlzLmNvcmUubXV0YXRlKHt0cmFuczp0LHR5cGU6XCJkZWxldGVcIixrZXlzOmV9KSkpLnRoZW4oKCh7bnVtRmFpbHVyZXM6ZSxsYXN0UmVzdWx0Om4sZmFpbHVyZXM6cn0pPT57aWYoMD09PWUpcmV0dXJuIG47dGhyb3cgbmV3IEcoYCR7dGhpcy5uYW1lfS5idWxrRGVsZXRlKCk6ICR7ZX0gb2YgJHt0fSBvcGVyYXRpb25zIGZhaWxlZGAscil9KSl9fWZ1bmN0aW9uIEV0KGUpe3ZhciByPXt9LHM9ZnVuY3Rpb24odCxuKXtpZihuKXtmb3IodmFyIHM9YXJndW1lbnRzLmxlbmd0aCxpPW5ldyBBcnJheShzLTEpOy0tczspaVtzLTFdPWFyZ3VtZW50c1tzXTtyZXR1cm4gclt0XS5zdWJzY3JpYmUuYXBwbHkobnVsbCxpKSxlfWlmKFwic3RyaW5nXCI9PXR5cGVvZiB0KXJldHVybiByW3RdfTtzLmFkZEV2ZW50VHlwZT1hO2Zvcih2YXIgaT0xLG89YXJndW1lbnRzLmxlbmd0aDtpPG87KytpKWEoYXJndW1lbnRzW2ldKTtyZXR1cm4gcztmdW5jdGlvbiBhKGUsdCxuKXtpZihcIm9iamVjdFwiPT10eXBlb2YgZSlyZXR1cm4gdShlKTt0fHwodD1hZSksbnx8KG49ZWUpO3ZhciBpPXtzdWJzY3JpYmVyczpbXSxmaXJlOm4sc3Vic2NyaWJlOmZ1bmN0aW9uKGUpey0xPT09aS5zdWJzY3JpYmVycy5pbmRleE9mKGUpJiYoaS5zdWJzY3JpYmVycy5wdXNoKGUpLGkuZmlyZT10KGkuZmlyZSxlKSl9LHVuc3Vic2NyaWJlOmZ1bmN0aW9uKGUpe2kuc3Vic2NyaWJlcnM9aS5zdWJzY3JpYmVycy5maWx0ZXIoKGZ1bmN0aW9uKHQpe3JldHVybiB0IT09ZX0pKSxpLmZpcmU9aS5zdWJzY3JpYmVycy5yZWR1Y2UodCxuKX19O3JldHVybiByW2VdPXNbZV09aSxpfWZ1bmN0aW9uIHUoZSl7dChlKS5mb3JFYWNoKChmdW5jdGlvbih0KXt2YXIgcj1lW3RdO2lmKG4ocikpYSh0LGVbdF1bMF0sZVt0XVsxXSk7ZWxzZXtpZihcImFzYXBcIiE9PXIpdGhyb3cgbmV3IFguSW52YWxpZEFyZ3VtZW50KFwiSW52YWxpZCBldmVudCBjb25maWdcIik7dmFyIHM9YSh0LHRlLChmdW5jdGlvbigpe2Zvcih2YXIgZT1hcmd1bWVudHMubGVuZ3RoLHQ9bmV3IEFycmF5KGUpO2UtLTspdFtlXT1hcmd1bWVudHNbZV07cy5zdWJzY3JpYmVycy5mb3JFYWNoKChmdW5jdGlvbihlKXt2KChmdW5jdGlvbigpe2UuYXBwbHkobnVsbCx0KX0pKX0pKX0pKX19KSl9fWZ1bmN0aW9uIFB0KGUsdCl7cmV0dXJuIGModCkuZnJvbSh7cHJvdG90eXBlOmV9KSx0fWZ1bmN0aW9uIEt0KGUsdCl7cmV0dXJuIShlLmZpbHRlcnx8ZS5hbGdvcml0aG18fGUub3IpJiYodD9lLmp1c3RMaW1pdDohZS5yZXBsYXlGaWx0ZXIpfWZ1bmN0aW9uIE90KGUsdCl7ZS5maWx0ZXI9X3QoZS5maWx0ZXIsdCl9ZnVuY3Rpb24gU3QoZSx0LG4pe3ZhciByPWUucmVwbGF5RmlsdGVyO2UucmVwbGF5RmlsdGVyPXI/KCk9Pl90KHIoKSx0KCkpOnQsZS5qdXN0TGltaXQ9biYmIXJ9ZnVuY3Rpb24gQXQoZSx0KXtpZihlLmlzUHJpbUtleSlyZXR1cm4gdC5wcmltYXJ5S2V5O2NvbnN0IG49dC5nZXRJbmRleEJ5S2V5UGF0aChlLmluZGV4KTtpZighbil0aHJvdyBuZXcgWC5TY2hlbWEoXCJLZXlQYXRoIFwiK2UuaW5kZXgrXCIgb24gb2JqZWN0IHN0b3JlIFwiK3QubmFtZStcIiBpcyBub3QgaW5kZXhlZFwiKTtyZXR1cm4gbn1mdW5jdGlvbiBDdChlLHQsbil7Y29uc3Qgcj1BdChlLHQuc2NoZW1hKTtyZXR1cm4gdC5vcGVuQ3Vyc29yKHt0cmFuczpuLHZhbHVlczohZS5rZXlzT25seSxyZXZlcnNlOlwicHJldlwiPT09ZS5kaXIsdW5pcXVlOiEhZS51bmlxdWUscXVlcnk6e2luZGV4OnIscmFuZ2U6ZS5yYW5nZX19KX1mdW5jdGlvbiBqdChlLHQsbixyKXtjb25zdCBzPWUucmVwbGF5RmlsdGVyP190KGUuZmlsdGVyLGUucmVwbGF5RmlsdGVyKCkpOmUuZmlsdGVyO2lmKGUub3Ipe2NvbnN0IGk9e30sYT0oZSxuLHIpPT57aWYoIXN8fHMobixyLChlPT5uLnN0b3AoZSkpLChlPT5uLmZhaWwoZSkpKSl7dmFyIGE9bi5wcmltYXJ5S2V5LHU9XCJcIithO1wiW29iamVjdCBBcnJheUJ1ZmZlcl1cIj09PXUmJih1PVwiXCIrbmV3IFVpbnQ4QXJyYXkoYSkpLG8oaSx1KXx8KGlbdV09ITAsdChlLG4scikpfX07cmV0dXJuIFByb21pc2UuYWxsKFtlLm9yLl9pdGVyYXRlKGEsbiksRHQoQ3QoZSxyLG4pLGUuYWxnb3JpdGhtLGEsIWUua2V5c09ubHkmJmUudmFsdWVNYXBwZXIpXSl9cmV0dXJuIER0KEN0KGUscixuKSxfdChlLmFsZ29yaXRobSxzKSx0LCFlLmtleXNPbmx5JiZlLnZhbHVlTWFwcGVyKX1mdW5jdGlvbiBEdChlLHQsbixyKXt2YXIgcz1XZShyPyhlLHQscyk9Pm4ocihlKSx0LHMpOm4pO3JldHVybiBlLnRoZW4oKGU9PntpZihlKXJldHVybiBlLnN0YXJ0KCgoKT0+e3ZhciBuPSgpPT5lLmNvbnRpbnVlKCk7dCYmIXQoZSwoZT0+bj1lKSwodD0+e2Uuc3RvcCh0KSxuPWVlfSksKHQ9PntlLmZhaWwodCksbj1lZX0pKXx8cyhlLnZhbHVlLGUsKGU9Pm49ZSkpLG4oKX0pKX0pKX1mdW5jdGlvbiBJdChlLHQpe3RyeXtjb25zdCBuPUJ0KGUpLHI9QnQodCk7aWYobiE9PXIpcmV0dXJuXCJBcnJheVwiPT09bj8xOlwiQXJyYXlcIj09PXI/LTE6XCJiaW5hcnlcIj09PW4/MTpcImJpbmFyeVwiPT09cj8tMTpcInN0cmluZ1wiPT09bj8xOlwic3RyaW5nXCI9PT1yPy0xOlwiRGF0ZVwiPT09bj8xOlwiRGF0ZVwiIT09cj9OYU46LTE7c3dpdGNoKG4pe2Nhc2VcIm51bWJlclwiOmNhc2VcIkRhdGVcIjpjYXNlXCJzdHJpbmdcIjpyZXR1cm4gZT50PzE6ZTx0Py0xOjA7Y2FzZVwiYmluYXJ5XCI6cmV0dXJuIGZ1bmN0aW9uKGUsdCl7Y29uc3Qgbj1lLmxlbmd0aCxyPXQubGVuZ3RoLHM9bjxyP246cjtmb3IobGV0IG49MDtuPHM7KytuKWlmKGVbbl0hPT10W25dKXJldHVybiBlW25dPHRbbl0/LTE6MTtyZXR1cm4gbj09PXI/MDpuPHI/LTE6MX0oVHQoZSksVHQodCkpO2Nhc2VcIkFycmF5XCI6cmV0dXJuIGZ1bmN0aW9uKGUsdCl7Y29uc3Qgbj1lLmxlbmd0aCxyPXQubGVuZ3RoLHM9bjxyP246cjtmb3IobGV0IG49MDtuPHM7KytuKXtjb25zdCByPUl0KGVbbl0sdFtuXSk7aWYoMCE9PXIpcmV0dXJuIHJ9cmV0dXJuIG49PT1yPzA6bjxyPy0xOjF9KGUsdCl9fWNhdGNoKGUpe31yZXR1cm4gTmFOfWZ1bmN0aW9uIEJ0KGUpe2NvbnN0IHQ9dHlwZW9mIGU7aWYoXCJvYmplY3RcIiE9PXQpcmV0dXJuIHQ7aWYoQXJyYXlCdWZmZXIuaXNWaWV3KGUpKXJldHVyblwiYmluYXJ5XCI7Y29uc3Qgbj1DKGUpO3JldHVyblwiQXJyYXlCdWZmZXJcIj09PW4/XCJiaW5hcnlcIjpufWZ1bmN0aW9uIFR0KGUpe3JldHVybiBlIGluc3RhbmNlb2YgVWludDhBcnJheT9lOkFycmF5QnVmZmVyLmlzVmlldyhlKT9uZXcgVWludDhBcnJheShlLmJ1ZmZlcixlLmJ5dGVPZmZzZXQsZS5ieXRlTGVuZ3RoKTpuZXcgVWludDhBcnJheShlKX1jbGFzcyBSdHtfcmVhZChlLHQpe3ZhciBuPXRoaXMuX2N0eDtyZXR1cm4gbi5lcnJvcj9uLnRhYmxlLl90cmFucyhudWxsLGh0LmJpbmQobnVsbCxuLmVycm9yKSk6bi50YWJsZS5fdHJhbnMoXCJyZWFkb25seVwiLGUpLnRoZW4odCl9X3dyaXRlKGUpe3ZhciB0PXRoaXMuX2N0eDtyZXR1cm4gdC5lcnJvcj90LnRhYmxlLl90cmFucyhudWxsLGh0LmJpbmQobnVsbCx0LmVycm9yKSk6dC50YWJsZS5fdHJhbnMoXCJyZWFkd3JpdGVcIixlLFwibG9ja2VkXCIpfV9hZGRBbGdvcml0aG0oZSl7dmFyIHQ9dGhpcy5fY3R4O3QuYWxnb3JpdGhtPV90KHQuYWxnb3JpdGhtLGUpfV9pdGVyYXRlKGUsdCl7cmV0dXJuIGp0KHRoaXMuX2N0eCxlLHQsdGhpcy5fY3R4LnRhYmxlLmNvcmUpfWNsb25lKGUpe3ZhciB0PU9iamVjdC5jcmVhdGUodGhpcy5jb25zdHJ1Y3Rvci5wcm90b3R5cGUpLG49T2JqZWN0LmNyZWF0ZSh0aGlzLl9jdHgpO3JldHVybiBlJiZyKG4sZSksdC5fY3R4PW4sdH1yYXcoKXtyZXR1cm4gdGhpcy5fY3R4LnZhbHVlTWFwcGVyPW51bGwsdGhpc31lYWNoKGUpe3ZhciB0PXRoaXMuX2N0eDtyZXR1cm4gdGhpcy5fcmVhZCgobj0+anQodCxlLG4sdC50YWJsZS5jb3JlKSkpfWNvdW50KGUpe3JldHVybiB0aGlzLl9yZWFkKChlPT57Y29uc3QgdD10aGlzLl9jdHgsbj10LnRhYmxlLmNvcmU7aWYoS3QodCwhMCkpcmV0dXJuIG4uY291bnQoe3RyYW5zOmUscXVlcnk6e2luZGV4OkF0KHQsbi5zY2hlbWEpLHJhbmdlOnQucmFuZ2V9fSkudGhlbigoZT0+TWF0aC5taW4oZSx0LmxpbWl0KSkpO3ZhciByPTA7cmV0dXJuIGp0KHQsKCgpPT4oKytyLCExKSksZSxuKS50aGVuKCgoKT0+cikpfSkpLnRoZW4oZSl9c29ydEJ5KGUsdCl7Y29uc3Qgbj1lLnNwbGl0KFwiLlwiKS5yZXZlcnNlKCkscj1uWzBdLHM9bi5sZW5ndGgtMTtmdW5jdGlvbiBpKGUsdCl7cmV0dXJuIHQ/aShlW25bdF1dLHQtMSk6ZVtyXX12YXIgbz1cIm5leHRcIj09PXRoaXMuX2N0eC5kaXI/MTotMTtmdW5jdGlvbiBhKGUsdCl7dmFyIG49aShlLHMpLHI9aSh0LHMpO3JldHVybiBuPHI/LW86bj5yP286MH1yZXR1cm4gdGhpcy50b0FycmF5KChmdW5jdGlvbihlKXtyZXR1cm4gZS5zb3J0KGEpfSkpLnRoZW4odCl9dG9BcnJheShlKXtyZXR1cm4gdGhpcy5fcmVhZCgoZT0+e3ZhciB0PXRoaXMuX2N0eDtpZihcIm5leHRcIj09PXQuZGlyJiZLdCh0LCEwKSYmdC5saW1pdD4wKXtjb25zdHt2YWx1ZU1hcHBlcjpufT10LHI9QXQodCx0LnRhYmxlLmNvcmUuc2NoZW1hKTtyZXR1cm4gdC50YWJsZS5jb3JlLnF1ZXJ5KHt0cmFuczplLGxpbWl0OnQubGltaXQsdmFsdWVzOiEwLHF1ZXJ5OntpbmRleDpyLHJhbmdlOnQucmFuZ2V9fSkudGhlbigoKHtyZXN1bHQ6ZX0pPT5uP2UubWFwKG4pOmUpKX17Y29uc3Qgbj1bXTtyZXR1cm4ganQodCwoZT0+bi5wdXNoKGUpKSxlLHQudGFibGUuY29yZSkudGhlbigoKCk9Pm4pKX19KSxlKX1vZmZzZXQoZSl7dmFyIHQ9dGhpcy5fY3R4O3JldHVybiBlPD0wfHwodC5vZmZzZXQrPWUsS3QodCk/U3QodCwoKCk9Pnt2YXIgdD1lO3JldHVybihlLG4pPT4wPT09dHx8KDE9PT10PygtLXQsITEpOihuKCgoKT0+e2UuYWR2YW5jZSh0KSx0PTB9KSksITEpKX0pKTpTdCh0LCgoKT0+e3ZhciB0PWU7cmV0dXJuKCk9Pi0tdDwwfSkpKSx0aGlzfWxpbWl0KGUpe3JldHVybiB0aGlzLl9jdHgubGltaXQ9TWF0aC5taW4odGhpcy5fY3R4LmxpbWl0LGUpLFN0KHRoaXMuX2N0eCwoKCk9Pnt2YXIgdD1lO3JldHVybiBmdW5jdGlvbihlLG4scil7cmV0dXJuLS10PD0wJiZuKHIpLHQ+PTB9fSksITApLHRoaXN9dW50aWwoZSx0KXtyZXR1cm4gT3QodGhpcy5fY3R4LChmdW5jdGlvbihuLHIscyl7cmV0dXJuIWUobi52YWx1ZSl8fChyKHMpLHQpfSkpLHRoaXN9Zmlyc3QoZSl7cmV0dXJuIHRoaXMubGltaXQoMSkudG9BcnJheSgoZnVuY3Rpb24oZSl7cmV0dXJuIGVbMF19KSkudGhlbihlKX1sYXN0KGUpe3JldHVybiB0aGlzLnJldmVyc2UoKS5maXJzdChlKX1maWx0ZXIoZSl7dmFyIHQsbjtyZXR1cm4gT3QodGhpcy5fY3R4LChmdW5jdGlvbih0KXtyZXR1cm4gZSh0LnZhbHVlKX0pKSx0PXRoaXMuX2N0eCxuPWUsdC5pc01hdGNoPV90KHQuaXNNYXRjaCxuKSx0aGlzfWFuZChlKXtyZXR1cm4gdGhpcy5maWx0ZXIoZSl9b3IoZSl7cmV0dXJuIG5ldyB0aGlzLmRiLldoZXJlQ2xhdXNlKHRoaXMuX2N0eC50YWJsZSxlLHRoaXMpfXJldmVyc2UoKXtyZXR1cm4gdGhpcy5fY3R4LmRpcj1cInByZXZcIj09PXRoaXMuX2N0eC5kaXI/XCJuZXh0XCI6XCJwcmV2XCIsdGhpcy5fb25kaXJlY3Rpb25jaGFuZ2UmJnRoaXMuX29uZGlyZWN0aW9uY2hhbmdlKHRoaXMuX2N0eC5kaXIpLHRoaXN9ZGVzYygpe3JldHVybiB0aGlzLnJldmVyc2UoKX1lYWNoS2V5KGUpe3ZhciB0PXRoaXMuX2N0eDtyZXR1cm4gdC5rZXlzT25seT0hdC5pc01hdGNoLHRoaXMuZWFjaCgoZnVuY3Rpb24odCxuKXtlKG4ua2V5LG4pfSkpfWVhY2hVbmlxdWVLZXkoZSl7cmV0dXJuIHRoaXMuX2N0eC51bmlxdWU9XCJ1bmlxdWVcIix0aGlzLmVhY2hLZXkoZSl9ZWFjaFByaW1hcnlLZXkoZSl7dmFyIHQ9dGhpcy5fY3R4O3JldHVybiB0LmtleXNPbmx5PSF0LmlzTWF0Y2gsdGhpcy5lYWNoKChmdW5jdGlvbih0LG4pe2Uobi5wcmltYXJ5S2V5LG4pfSkpfWtleXMoZSl7dmFyIHQ9dGhpcy5fY3R4O3Qua2V5c09ubHk9IXQuaXNNYXRjaDt2YXIgbj1bXTtyZXR1cm4gdGhpcy5lYWNoKChmdW5jdGlvbihlLHQpe24ucHVzaCh0LmtleSl9KSkudGhlbigoZnVuY3Rpb24oKXtyZXR1cm4gbn0pKS50aGVuKGUpfXByaW1hcnlLZXlzKGUpe3ZhciB0PXRoaXMuX2N0eDtpZihcIm5leHRcIj09PXQuZGlyJiZLdCh0LCEwKSYmdC5saW1pdD4wKXJldHVybiB0aGlzLl9yZWFkKChlPT57dmFyIG49QXQodCx0LnRhYmxlLmNvcmUuc2NoZW1hKTtyZXR1cm4gdC50YWJsZS5jb3JlLnF1ZXJ5KHt0cmFuczplLHZhbHVlczohMSxsaW1pdDp0LmxpbWl0LHF1ZXJ5OntpbmRleDpuLHJhbmdlOnQucmFuZ2V9fSl9KSkudGhlbigoKHtyZXN1bHQ6ZX0pPT5lKSkudGhlbihlKTt0LmtleXNPbmx5PSF0LmlzTWF0Y2g7dmFyIG49W107cmV0dXJuIHRoaXMuZWFjaCgoZnVuY3Rpb24oZSx0KXtuLnB1c2godC5wcmltYXJ5S2V5KX0pKS50aGVuKChmdW5jdGlvbigpe3JldHVybiBufSkpLnRoZW4oZSl9dW5pcXVlS2V5cyhlKXtyZXR1cm4gdGhpcy5fY3R4LnVuaXF1ZT1cInVuaXF1ZVwiLHRoaXMua2V5cyhlKX1maXJzdEtleShlKXtyZXR1cm4gdGhpcy5saW1pdCgxKS5rZXlzKChmdW5jdGlvbihlKXtyZXR1cm4gZVswXX0pKS50aGVuKGUpfWxhc3RLZXkoZSl7cmV0dXJuIHRoaXMucmV2ZXJzZSgpLmZpcnN0S2V5KGUpfWRpc3RpbmN0KCl7dmFyIGU9dGhpcy5fY3R4LHQ9ZS5pbmRleCYmZS50YWJsZS5zY2hlbWEuaWR4QnlOYW1lW2UuaW5kZXhdO2lmKCF0fHwhdC5tdWx0aSlyZXR1cm4gdGhpczt2YXIgbj17fTtyZXR1cm4gT3QodGhpcy5fY3R4LChmdW5jdGlvbihlKXt2YXIgdD1lLnByaW1hcnlLZXkudG9TdHJpbmcoKSxyPW8obix0KTtyZXR1cm4gblt0XT0hMCwhcn0pKSx0aGlzfW1vZGlmeShlKXt2YXIgbj10aGlzLl9jdHg7cmV0dXJuIHRoaXMuX3dyaXRlKChyPT57dmFyIHM7aWYoXCJmdW5jdGlvblwiPT10eXBlb2YgZSlzPWU7ZWxzZXt2YXIgaT10KGUpLG89aS5sZW5ndGg7cz1mdW5jdGlvbih0KXtmb3IodmFyIG49ITEscj0wO3I8bzsrK3Ipe3ZhciBzPWlbcl0sYT1lW3NdO2IodCxzKSE9PWEmJihfKHQscyxhKSxuPSEwKX1yZXR1cm4gbn19Y29uc3QgYT1uLnRhYmxlLmNvcmUse291dGJvdW5kOnUsZXh0cmFjdEtleTpsfT1hLnNjaGVtYS5wcmltYXJ5S2V5LGM9dGhpcy5kYi5fb3B0aW9ucy5tb2RpZnlDaHVua1NpemV8fDIwMCxoPVtdO2xldCBkPTA7Y29uc3QgZj1bXSxwPShlLG4pPT57Y29uc3R7ZmFpbHVyZXM6cixudW1GYWlsdXJlczpzfT1uO2QrPWUtcztmb3IobGV0IGUgb2YgdChyKSloLnB1c2gocltlXSl9O3JldHVybiB0aGlzLmNsb25lKCkucHJpbWFyeUtleXMoKS50aGVuKCh0PT57Y29uc3QgaT1vPT57Y29uc3QgaD1NYXRoLm1pbihjLHQubGVuZ3RoLW8pO3JldHVybiBhLmdldE1hbnkoe3RyYW5zOnIsa2V5czp0LnNsaWNlKG8sbytoKSxjYWNoZTpcImltbXV0YWJsZVwifSkudGhlbigoZD0+e2NvbnN0IGY9W10seT1bXSxtPXU/W106bnVsbCx2PVtdO2ZvcihsZXQgZT0wO2U8aDsrK2Upe2NvbnN0IG49ZFtlXSxyPXt2YWx1ZTpPKG4pLHByaW1LZXk6dFtvK2VdfTshMSE9PXMuY2FsbChyLHIudmFsdWUscikmJihudWxsPT1yLnZhbHVlP3YucHVzaCh0W28rZV0pOnV8fDA9PT1JdChsKG4pLGwoci52YWx1ZSkpPyh5LnB1c2goci52YWx1ZSksdSYmbS5wdXNoKHRbbytlXSkpOih2LnB1c2godFtvK2VdKSxmLnB1c2goci52YWx1ZSkpKX1jb25zdCBnPUt0KG4pJiZuLmxpbWl0PT09MS8wJiYoXCJmdW5jdGlvblwiIT10eXBlb2YgZXx8ZT09PUZ0KSYme2luZGV4Om4uaW5kZXgscmFuZ2U6bi5yYW5nZX07cmV0dXJuIFByb21pc2UucmVzb2x2ZShmLmxlbmd0aD4wJiZhLm11dGF0ZSh7dHJhbnM6cix0eXBlOlwiYWRkXCIsdmFsdWVzOmZ9KS50aGVuKChlPT57Zm9yKGxldCB0IGluIGUuZmFpbHVyZXMpdi5zcGxpY2UocGFyc2VJbnQodCksMSk7cChmLmxlbmd0aCxlKX0pKSkudGhlbigoKCk9Pih5Lmxlbmd0aD4wfHxnJiZcIm9iamVjdFwiPT10eXBlb2YgZSkmJmEubXV0YXRlKHt0cmFuczpyLHR5cGU6XCJwdXRcIixrZXlzOm0sdmFsdWVzOnksY3JpdGVyaWE6ZyxjaGFuZ2VTcGVjOlwiZnVuY3Rpb25cIiE9dHlwZW9mIGUmJmV9KS50aGVuKChlPT5wKHkubGVuZ3RoLGUpKSkpKS50aGVuKCgoKT0+KHYubGVuZ3RoPjB8fGcmJmU9PT1GdCkmJmEubXV0YXRlKHt0cmFuczpyLHR5cGU6XCJkZWxldGVcIixrZXlzOnYsY3JpdGVyaWE6Z30pLnRoZW4oKGU9PnAodi5sZW5ndGgsZSkpKSkpLnRoZW4oKCgpPT50Lmxlbmd0aD5vK2gmJmkobytjKSkpfSkpfTtyZXR1cm4gaSgwKS50aGVuKCgoKT0+e2lmKGgubGVuZ3RoPjApdGhyb3cgbmV3IHooXCJFcnJvciBtb2RpZnlpbmcgb25lIG9yIG1vcmUgb2JqZWN0c1wiLGgsZCxmKTtyZXR1cm4gdC5sZW5ndGh9KSl9KSl9KSl9ZGVsZXRlKCl7dmFyIGU9dGhpcy5fY3R4LHQ9ZS5yYW5nZTtyZXR1cm4gS3QoZSkmJihlLmlzUHJpbUtleSYmIWd0fHwzPT09dC50eXBlKT90aGlzLl93cml0ZSgobj0+e2NvbnN0e3ByaW1hcnlLZXk6cn09ZS50YWJsZS5jb3JlLnNjaGVtYSxzPXQ7cmV0dXJuIGUudGFibGUuY29yZS5jb3VudCh7dHJhbnM6bixxdWVyeTp7aW5kZXg6cixyYW5nZTpzfX0pLnRoZW4oKHQ9PmUudGFibGUuY29yZS5tdXRhdGUoe3RyYW5zOm4sdHlwZTpcImRlbGV0ZVJhbmdlXCIscmFuZ2U6c30pLnRoZW4oKCh7ZmFpbHVyZXM6ZSxsYXN0UmVzdWx0Om4scmVzdWx0czpyLG51bUZhaWx1cmVzOnN9KT0+e2lmKHMpdGhyb3cgbmV3IHooXCJDb3VsZCBub3QgZGVsZXRlIHNvbWUgdmFsdWVzXCIsT2JqZWN0LmtleXMoZSkubWFwKCh0PT5lW3RdKSksdC1zKTtyZXR1cm4gdC1zfSkpKSl9KSk6dGhpcy5tb2RpZnkoRnQpfX1jb25zdCBGdD0oZSx0KT0+dC52YWx1ZT1udWxsO2Z1bmN0aW9uIE10KGUsdCl7cmV0dXJuIGU8dD8tMTplPT09dD8wOjF9ZnVuY3Rpb24gTnQoZSx0KXtyZXR1cm4gZT50Py0xOmU9PT10PzA6MX1mdW5jdGlvbiBxdChlLHQsbil7dmFyIHI9ZSBpbnN0YW5jZW9mIFl0P25ldyBlLkNvbGxlY3Rpb24oZSk6ZTtyZXR1cm4gci5fY3R4LmVycm9yPW4/bmV3IG4odCk6bmV3IFR5cGVFcnJvcih0KSxyfWZ1bmN0aW9uICR0KGUpe3JldHVybiBuZXcgZS5Db2xsZWN0aW9uKGUsKCgpPT5XdChcIlwiKSkpLmxpbWl0KDApfWZ1bmN0aW9uIFV0KGUsdCxuLHIscyxpKXtmb3IodmFyIG89TWF0aC5taW4oZS5sZW5ndGgsci5sZW5ndGgpLGE9LTEsdT0wO3U8bzsrK3Upe3ZhciBsPXRbdV07aWYobCE9PXJbdV0pcmV0dXJuIHMoZVt1XSxuW3VdKTwwP2Uuc3Vic3RyKDAsdSkrblt1XStuLnN1YnN0cih1KzEpOnMoZVt1XSxyW3VdKTwwP2Uuc3Vic3RyKDAsdSkrclt1XStuLnN1YnN0cih1KzEpOmE+PTA/ZS5zdWJzdHIoMCxhKSt0W2FdK24uc3Vic3RyKGErMSk6bnVsbDtzKGVbdV0sbCk8MCYmKGE9dSl9cmV0dXJuIG88ci5sZW5ndGgmJlwibmV4dFwiPT09aT9lK24uc3Vic3RyKGUubGVuZ3RoKTpvPGUubGVuZ3RoJiZcInByZXZcIj09PWk/ZS5zdWJzdHIoMCxuLmxlbmd0aCk6YTwwP251bGw6ZS5zdWJzdHIoMCxhKStyW2FdK24uc3Vic3RyKGErMSl9ZnVuY3Rpb24gTHQoZSx0LG4scil7dmFyIHMsaSxvLGEsdSxsLGMsaD1uLmxlbmd0aDtpZighbi5ldmVyeSgoZT0+XCJzdHJpbmdcIj09dHlwZW9mIGUpKSlyZXR1cm4gcXQoZSxcIlN0cmluZyBleHBlY3RlZC5cIik7ZnVuY3Rpb24gZChlKXtzPWZ1bmN0aW9uKGUpe3JldHVyblwibmV4dFwiPT09ZT9lPT5lLnRvVXBwZXJDYXNlKCk6ZT0+ZS50b0xvd2VyQ2FzZSgpfShlKSxpPWZ1bmN0aW9uKGUpe3JldHVyblwibmV4dFwiPT09ZT9lPT5lLnRvTG93ZXJDYXNlKCk6ZT0+ZS50b1VwcGVyQ2FzZSgpfShlKSxvPVwibmV4dFwiPT09ZT9NdDpOdDt2YXIgdD1uLm1hcCgoZnVuY3Rpb24oZSl7cmV0dXJue2xvd2VyOmkoZSksdXBwZXI6cyhlKX19KSkuc29ydCgoZnVuY3Rpb24oZSx0KXtyZXR1cm4gbyhlLmxvd2VyLHQubG93ZXIpfSkpO2E9dC5tYXAoKGZ1bmN0aW9uKGUpe3JldHVybiBlLnVwcGVyfSkpLHU9dC5tYXAoKGZ1bmN0aW9uKGUpe3JldHVybiBlLmxvd2VyfSkpLGw9ZSxjPVwibmV4dFwiPT09ZT9cIlwiOnJ9ZChcIm5leHRcIik7dmFyIGY9bmV3IGUuQ29sbGVjdGlvbihlLCgoKT0+VnQoYVswXSx1W2gtMV0rcikpKTtmLl9vbmRpcmVjdGlvbmNoYW5nZT1mdW5jdGlvbihlKXtkKGUpfTt2YXIgcD0wO3JldHVybiBmLl9hZGRBbGdvcml0aG0oKGZ1bmN0aW9uKGUsbixyKXt2YXIgcz1lLmtleTtpZihcInN0cmluZ1wiIT10eXBlb2YgcylyZXR1cm4hMTt2YXIgZD1pKHMpO2lmKHQoZCx1LHApKXJldHVybiEwO2Zvcih2YXIgZj1udWxsLHk9cDt5PGg7Kyt5KXt2YXIgbT1VdChzLGQsYVt5XSx1W3ldLG8sbCk7bnVsbD09PW0mJm51bGw9PT1mP3A9eSsxOihudWxsPT09Znx8byhmLG0pPjApJiYoZj1tKX1yZXR1cm4gbihudWxsIT09Zj9mdW5jdGlvbigpe2UuY29udGludWUoZitjKX06ciksITF9KSksZn1mdW5jdGlvbiBWdChlLHQsbixyKXtyZXR1cm57dHlwZToyLGxvd2VyOmUsdXBwZXI6dCxsb3dlck9wZW46bix1cHBlck9wZW46cn19ZnVuY3Rpb24gV3QoZSl7cmV0dXJue3R5cGU6MSxsb3dlcjplLHVwcGVyOmV9fWNsYXNzIFl0e2dldCBDb2xsZWN0aW9uKCl7cmV0dXJuIHRoaXMuX2N0eC50YWJsZS5kYi5Db2xsZWN0aW9ufWJldHdlZW4oZSx0LG4scil7bj0hMSE9PW4scj0hMD09PXI7dHJ5e3JldHVybiB0aGlzLl9jbXAoZSx0KT4wfHwwPT09dGhpcy5fY21wKGUsdCkmJihufHxyKSYmKCFufHwhcik/JHQodGhpcyk6bmV3IHRoaXMuQ29sbGVjdGlvbih0aGlzLCgoKT0+VnQoZSx0LCFuLCFyKSkpfWNhdGNoKGUpe3JldHVybiBxdCh0aGlzLHB0KX19ZXF1YWxzKGUpe3JldHVybiBudWxsPT1lP3F0KHRoaXMscHQpOm5ldyB0aGlzLkNvbGxlY3Rpb24odGhpcywoKCk9Pld0KGUpKSl9YWJvdmUoZSl7cmV0dXJuIG51bGw9PWU/cXQodGhpcyxwdCk6bmV3IHRoaXMuQ29sbGVjdGlvbih0aGlzLCgoKT0+VnQoZSx2b2lkIDAsITApKSl9YWJvdmVPckVxdWFsKGUpe3JldHVybiBudWxsPT1lP3F0KHRoaXMscHQpOm5ldyB0aGlzLkNvbGxlY3Rpb24odGhpcywoKCk9PlZ0KGUsdm9pZCAwLCExKSkpfWJlbG93KGUpe3JldHVybiBudWxsPT1lP3F0KHRoaXMscHQpOm5ldyB0aGlzLkNvbGxlY3Rpb24odGhpcywoKCk9PlZ0KHZvaWQgMCxlLCExLCEwKSkpfWJlbG93T3JFcXVhbChlKXtyZXR1cm4gbnVsbD09ZT9xdCh0aGlzLHB0KTpuZXcgdGhpcy5Db2xsZWN0aW9uKHRoaXMsKCgpPT5WdCh2b2lkIDAsZSkpKX1zdGFydHNXaXRoKGUpe3JldHVyblwic3RyaW5nXCIhPXR5cGVvZiBlP3F0KHRoaXMsXCJTdHJpbmcgZXhwZWN0ZWQuXCIpOnRoaXMuYmV0d2VlbihlLGUrZnQsITAsITApfXN0YXJ0c1dpdGhJZ25vcmVDYXNlKGUpe3JldHVyblwiXCI9PT1lP3RoaXMuc3RhcnRzV2l0aChlKTpMdCh0aGlzLCgoZSx0KT0+MD09PWUuaW5kZXhPZih0WzBdKSksW2VdLGZ0KX1lcXVhbHNJZ25vcmVDYXNlKGUpe3JldHVybiBMdCh0aGlzLCgoZSx0KT0+ZT09PXRbMF0pLFtlXSxcIlwiKX1hbnlPZklnbm9yZUNhc2UoKXt2YXIgZT1CLmFwcGx5KEksYXJndW1lbnRzKTtyZXR1cm4gMD09PWUubGVuZ3RoPyR0KHRoaXMpOkx0KHRoaXMsKChlLHQpPT4tMSE9PXQuaW5kZXhPZihlKSksZSxcIlwiKX1zdGFydHNXaXRoQW55T2ZJZ25vcmVDYXNlKCl7dmFyIGU9Qi5hcHBseShJLGFyZ3VtZW50cyk7cmV0dXJuIDA9PT1lLmxlbmd0aD8kdCh0aGlzKTpMdCh0aGlzLCgoZSx0KT0+dC5zb21lKCh0PT4wPT09ZS5pbmRleE9mKHQpKSkpLGUsZnQpfWFueU9mKCl7Y29uc3QgZT1CLmFwcGx5KEksYXJndW1lbnRzKTtsZXQgdD10aGlzLl9jbXA7dHJ5e2Uuc29ydCh0KX1jYXRjaChlKXtyZXR1cm4gcXQodGhpcyxwdCl9aWYoMD09PWUubGVuZ3RoKXJldHVybiAkdCh0aGlzKTtjb25zdCBuPW5ldyB0aGlzLkNvbGxlY3Rpb24odGhpcywoKCk9PlZ0KGVbMF0sZVtlLmxlbmd0aC0xXSkpKTtuLl9vbmRpcmVjdGlvbmNoYW5nZT1uPT57dD1cIm5leHRcIj09PW4/dGhpcy5fYXNjZW5kaW5nOnRoaXMuX2Rlc2NlbmRpbmcsZS5zb3J0KHQpfTtsZXQgcj0wO3JldHVybiBuLl9hZGRBbGdvcml0aG0oKChuLHMsaSk9Pntjb25zdCBvPW4ua2V5O2Zvcig7dChvLGVbcl0pPjA7KWlmKCsrcixyPT09ZS5sZW5ndGgpcmV0dXJuIHMoaSksITE7cmV0dXJuIDA9PT10KG8sZVtyXSl8fChzKCgoKT0+e24uY29udGludWUoZVtyXSl9KSksITEpfSkpLG59bm90RXF1YWwoZSl7cmV0dXJuIHRoaXMuaW5BbnlSYW5nZShbWy0oMS8wKSxlXSxbZSx0aGlzLmRiLl9tYXhLZXldXSx7aW5jbHVkZUxvd2VyczohMSxpbmNsdWRlVXBwZXJzOiExfSl9bm9uZU9mKCl7Y29uc3QgZT1CLmFwcGx5KEksYXJndW1lbnRzKTtpZigwPT09ZS5sZW5ndGgpcmV0dXJuIG5ldyB0aGlzLkNvbGxlY3Rpb24odGhpcyk7dHJ5e2Uuc29ydCh0aGlzLl9hc2NlbmRpbmcpfWNhdGNoKGUpe3JldHVybiBxdCh0aGlzLHB0KX1jb25zdCB0PWUucmVkdWNlKCgoZSx0KT0+ZT9lLmNvbmNhdChbW2VbZS5sZW5ndGgtMV1bMV0sdF1dKTpbWy0oMS8wKSx0XV0pLG51bGwpO3JldHVybiB0LnB1c2goW2VbZS5sZW5ndGgtMV0sdGhpcy5kYi5fbWF4S2V5XSksdGhpcy5pbkFueVJhbmdlKHQse2luY2x1ZGVMb3dlcnM6ITEsaW5jbHVkZVVwcGVyczohMX0pfWluQW55UmFuZ2UoZSx0KXtjb25zdCBuPXRoaXMuX2NtcCxyPXRoaXMuX2FzY2VuZGluZyxzPXRoaXMuX2Rlc2NlbmRpbmcsaT10aGlzLl9taW4sbz10aGlzLl9tYXg7aWYoMD09PWUubGVuZ3RoKXJldHVybiAkdCh0aGlzKTtpZighZS5ldmVyeSgoZT0+dm9pZCAwIT09ZVswXSYmdm9pZCAwIT09ZVsxXSYmcihlWzBdLGVbMV0pPD0wKSkpcmV0dXJuIHF0KHRoaXMsXCJGaXJzdCBhcmd1bWVudCB0byBpbkFueVJhbmdlKCkgbXVzdCBiZSBhbiBBcnJheSBvZiB0d28tdmFsdWUgQXJyYXlzIFtsb3dlcix1cHBlcl0gd2hlcmUgdXBwZXIgbXVzdCBub3QgYmUgbG93ZXIgdGhhbiBsb3dlclwiLFguSW52YWxpZEFyZ3VtZW50KTtjb25zdCBhPSF0fHwhMSE9PXQuaW5jbHVkZUxvd2Vycyx1PXQmJiEwPT09dC5pbmNsdWRlVXBwZXJzO2xldCBsLGM9cjtmdW5jdGlvbiBoKGUsdCl7cmV0dXJuIGMoZVswXSx0WzBdKX10cnl7bD1lLnJlZHVjZSgoZnVuY3Rpb24oZSx0KXtsZXQgcj0wLHM9ZS5sZW5ndGg7Zm9yKDtyPHM7KytyKXtjb25zdCBzPWVbcl07aWYobih0WzBdLHNbMV0pPDAmJm4odFsxXSxzWzBdKT4wKXtzWzBdPWkoc1swXSx0WzBdKSxzWzFdPW8oc1sxXSx0WzFdKTticmVha319cmV0dXJuIHI9PT1zJiZlLnB1c2godCksZX0pLFtdKSxsLnNvcnQoaCl9Y2F0Y2goZSl7cmV0dXJuIHF0KHRoaXMscHQpfWxldCBkPTA7Y29uc3QgZj11P2U9PnIoZSxsW2RdWzFdKT4wOmU9PnIoZSxsW2RdWzFdKT49MCxwPWE/ZT0+cyhlLGxbZF1bMF0pPjA6ZT0+cyhlLGxbZF1bMF0pPj0wO2xldCB5PWY7Y29uc3QgbT1uZXcgdGhpcy5Db2xsZWN0aW9uKHRoaXMsKCgpPT5WdChsWzBdWzBdLGxbbC5sZW5ndGgtMV1bMV0sIWEsIXUpKSk7cmV0dXJuIG0uX29uZGlyZWN0aW9uY2hhbmdlPWU9PntcIm5leHRcIj09PWU/KHk9ZixjPXIpOih5PXAsYz1zKSxsLnNvcnQoaCl9LG0uX2FkZEFsZ29yaXRobSgoKGUsdCxuKT0+e2Zvcih2YXIgcz1lLmtleTt5KHMpOylpZigrK2QsZD09PWwubGVuZ3RoKXJldHVybiB0KG4pLCExO3JldHVybiEhZnVuY3Rpb24oZSl7cmV0dXJuIWYoZSkmJiFwKGUpfShzKXx8KDA9PT10aGlzLl9jbXAocyxsW2RdWzFdKXx8MD09PXRoaXMuX2NtcChzLGxbZF1bMF0pfHx0KCgoKT0+e2M9PT1yP2UuY29udGludWUobFtkXVswXSk6ZS5jb250aW51ZShsW2RdWzFdKX0pKSwhMSl9KSksbX1zdGFydHNXaXRoQW55T2YoKXtjb25zdCBlPUIuYXBwbHkoSSxhcmd1bWVudHMpO3JldHVybiBlLmV2ZXJ5KChlPT5cInN0cmluZ1wiPT10eXBlb2YgZSkpPzA9PT1lLmxlbmd0aD8kdCh0aGlzKTp0aGlzLmluQW55UmFuZ2UoZS5tYXAoKGU9PltlLGUrZnRdKSkpOnF0KHRoaXMsXCJzdGFydHNXaXRoQW55T2YoKSBvbmx5IHdvcmtzIHdpdGggc3RyaW5nc1wiKX19ZnVuY3Rpb24genQoZSl7cmV0dXJuIFdlKChmdW5jdGlvbih0KXtyZXR1cm4gR3QodCksZSh0LnRhcmdldC5lcnJvciksITF9KSl9ZnVuY3Rpb24gR3QoZSl7ZS5zdG9wUHJvcGFnYXRpb24mJmUuc3RvcFByb3BhZ2F0aW9uKCksZS5wcmV2ZW50RGVmYXVsdCYmZS5wcmV2ZW50RGVmYXVsdCgpfWNvbnN0IEh0PUV0KG51bGwsXCJzdG9yYWdlbXV0YXRlZFwiKTtjbGFzcyBRdHtfbG9jaygpe3JldHVybiBtKCFLZS5nbG9iYWwpLCsrdGhpcy5fcmVjdWxvY2ssMSE9PXRoaXMuX3JlY3Vsb2NrfHxLZS5nbG9iYWx8fChLZS5sb2NrT3duZXJGb3I9dGhpcyksdGhpc31fdW5sb2NrKCl7aWYobSghS2UuZ2xvYmFsKSwwPT0tLXRoaXMuX3JlY3Vsb2NrKWZvcihLZS5nbG9iYWx8fChLZS5sb2NrT3duZXJGb3I9bnVsbCk7dGhpcy5fYmxvY2tlZEZ1bmNzLmxlbmd0aD4wJiYhdGhpcy5fbG9ja2VkKCk7KXt2YXIgZT10aGlzLl9ibG9ja2VkRnVuY3Muc2hpZnQoKTt0cnl7b3QoZVsxXSxlWzBdKX1jYXRjaChlKXt9fXJldHVybiB0aGlzfV9sb2NrZWQoKXtyZXR1cm4gdGhpcy5fcmVjdWxvY2smJktlLmxvY2tPd25lckZvciE9PXRoaXN9Y3JlYXRlKGUpe2lmKCF0aGlzLm1vZGUpcmV0dXJuIHRoaXM7Y29uc3QgdD10aGlzLmRiLmlkYmRiLG49dGhpcy5kYi5fc3RhdGUuZGJPcGVuRXJyb3I7aWYobSghdGhpcy5pZGJ0cmFucyksIWUmJiF0KXN3aXRjaChuJiZuLm5hbWUpe2Nhc2VcIkRhdGFiYXNlQ2xvc2VkRXJyb3JcIjp0aHJvdyBuZXcgWC5EYXRhYmFzZUNsb3NlZChuKTtjYXNlXCJNaXNzaW5nQVBJRXJyb3JcIjp0aHJvdyBuZXcgWC5NaXNzaW5nQVBJKG4ubWVzc2FnZSxuKTtkZWZhdWx0OnRocm93IG5ldyBYLk9wZW5GYWlsZWQobil9aWYoIXRoaXMuYWN0aXZlKXRocm93IG5ldyBYLlRyYW5zYWN0aW9uSW5hY3RpdmU7cmV0dXJuIG0obnVsbD09PXRoaXMuX2NvbXBsZXRpb24uX3N0YXRlKSwoZT10aGlzLmlkYnRyYW5zPWV8fCh0aGlzLmRiLmNvcmU/dGhpcy5kYi5jb3JlLnRyYW5zYWN0aW9uKHRoaXMuc3RvcmVOYW1lcyx0aGlzLm1vZGUse2R1cmFiaWxpdHk6dGhpcy5jaHJvbWVUcmFuc2FjdGlvbkR1cmFiaWxpdHl9KTp0LnRyYW5zYWN0aW9uKHRoaXMuc3RvcmVOYW1lcyx0aGlzLm1vZGUse2R1cmFiaWxpdHk6dGhpcy5jaHJvbWVUcmFuc2FjdGlvbkR1cmFiaWxpdHl9KSkpLm9uZXJyb3I9V2UoKHQ9PntHdCh0KSx0aGlzLl9yZWplY3QoZS5lcnJvcil9KSksZS5vbmFib3J0PVdlKCh0PT57R3QodCksdGhpcy5hY3RpdmUmJnRoaXMuX3JlamVjdChuZXcgWC5BYm9ydChlLmVycm9yKSksdGhpcy5hY3RpdmU9ITEsdGhpcy5vbihcImFib3J0XCIpLmZpcmUodCl9KSksZS5vbmNvbXBsZXRlPVdlKCgoKT0+e3RoaXMuYWN0aXZlPSExLHRoaXMuX3Jlc29sdmUoKSxcIm11dGF0ZWRQYXJ0c1wiaW4gZSYmSHQuc3RvcmFnZW11dGF0ZWQuZmlyZShlLm11dGF0ZWRQYXJ0cyl9KSksdGhpc31fcHJvbWlzZShlLHQsbil7aWYoXCJyZWFkd3JpdGVcIj09PWUmJlwicmVhZHdyaXRlXCIhPT10aGlzLm1vZGUpcmV0dXJuIGh0KG5ldyBYLlJlYWRPbmx5KFwiVHJhbnNhY3Rpb24gaXMgcmVhZG9ubHlcIikpO2lmKCF0aGlzLmFjdGl2ZSlyZXR1cm4gaHQobmV3IFguVHJhbnNhY3Rpb25JbmFjdGl2ZSk7aWYodGhpcy5fbG9ja2VkKCkpcmV0dXJuIG5ldyBDZSgoKHIscyk9Pnt0aGlzLl9ibG9ja2VkRnVuY3MucHVzaChbKCk9Pnt0aGlzLl9wcm9taXNlKGUsdCxuKS50aGVuKHIscyl9LEtlXSl9KSk7aWYobilyZXR1cm4gSmUoKCgpPT57dmFyIGU9bmV3IENlKCgoZSxuKT0+e3RoaXMuX2xvY2soKTtjb25zdCByPXQoZSxuLHRoaXMpO3ImJnIudGhlbiYmci50aGVuKGUsbil9KSk7cmV0dXJuIGUuZmluYWxseSgoKCk9PnRoaXMuX3VubG9jaygpKSksZS5fbGliPSEwLGV9KSk7dmFyIHI9bmV3IENlKCgoZSxuKT0+e3ZhciByPXQoZSxuLHRoaXMpO3ImJnIudGhlbiYmci50aGVuKGUsbil9KSk7cmV0dXJuIHIuX2xpYj0hMCxyfV9yb290KCl7cmV0dXJuIHRoaXMucGFyZW50P3RoaXMucGFyZW50Ll9yb290KCk6dGhpc313YWl0Rm9yKGUpe3ZhciB0PXRoaXMuX3Jvb3QoKTtjb25zdCBuPUNlLnJlc29sdmUoZSk7aWYodC5fd2FpdGluZ0Zvcil0Ll93YWl0aW5nRm9yPXQuX3dhaXRpbmdGb3IudGhlbigoKCk9Pm4pKTtlbHNle3QuX3dhaXRpbmdGb3I9bix0Ll93YWl0aW5nUXVldWU9W107dmFyIHI9dC5pZGJ0cmFucy5vYmplY3RTdG9yZSh0LnN0b3JlTmFtZXNbMF0pOyFmdW5jdGlvbiBlKCl7Zm9yKCsrdC5fc3BpbkNvdW50O3QuX3dhaXRpbmdRdWV1ZS5sZW5ndGg7KXQuX3dhaXRpbmdRdWV1ZS5zaGlmdCgpKCk7dC5fd2FpdGluZ0ZvciYmKHIuZ2V0KC0xLzApLm9uc3VjY2Vzcz1lKX0oKX12YXIgcz10Ll93YWl0aW5nRm9yO3JldHVybiBuZXcgQ2UoKChlLHIpPT57bi50aGVuKChuPT50Ll93YWl0aW5nUXVldWUucHVzaChXZShlLmJpbmQobnVsbCxuKSkpKSwoZT0+dC5fd2FpdGluZ1F1ZXVlLnB1c2goV2Uoci5iaW5kKG51bGwsZSkpKSkpLmZpbmFsbHkoKCgpPT57dC5fd2FpdGluZ0Zvcj09PXMmJih0Ll93YWl0aW5nRm9yPW51bGwpfSkpfSkpfWFib3J0KCl7dGhpcy5hY3RpdmUmJih0aGlzLmFjdGl2ZT0hMSx0aGlzLmlkYnRyYW5zJiZ0aGlzLmlkYnRyYW5zLmFib3J0KCksdGhpcy5fcmVqZWN0KG5ldyBYLkFib3J0KSl9dGFibGUoZSl7Y29uc3QgdD10aGlzLl9tZW1vaXplZFRhYmxlc3x8KHRoaXMuX21lbW9pemVkVGFibGVzPXt9KTtpZihvKHQsZSkpcmV0dXJuIHRbZV07Y29uc3Qgbj10aGlzLnNjaGVtYVtlXTtpZighbil0aHJvdyBuZXcgWC5Ob3RGb3VuZChcIlRhYmxlIFwiK2UrXCIgbm90IHBhcnQgb2YgdHJhbnNhY3Rpb25cIik7Y29uc3Qgcj1uZXcgdGhpcy5kYi5UYWJsZShlLG4sdGhpcyk7cmV0dXJuIHIuY29yZT10aGlzLmRiLmNvcmUudGFibGUoZSksdFtlXT1yLHJ9fWZ1bmN0aW9uIFh0KGUsdCxuLHIscyxpLG8pe3JldHVybntuYW1lOmUsa2V5UGF0aDp0LHVuaXF1ZTpuLG11bHRpOnIsYXV0bzpzLGNvbXBvdW5kOmksc3JjOihuJiYhbz9cIiZcIjpcIlwiKSsocj9cIipcIjpcIlwiKSsocz9cIisrXCI6XCJcIikrSnQodCl9fWZ1bmN0aW9uIEp0KGUpe3JldHVyblwic3RyaW5nXCI9PXR5cGVvZiBlP2U6ZT9cIltcIitbXS5qb2luLmNhbGwoZSxcIitcIikrXCJdXCI6XCJcIn1mdW5jdGlvbiBadChlLHQsbil7cmV0dXJue25hbWU6ZSxwcmltS2V5OnQsaW5kZXhlczpuLG1hcHBlZENsYXNzOm51bGwsaWR4QnlOYW1lOmcobiwoZT0+W2UubmFtZSxlXSkpfX1sZXQgZW49ZT0+e3RyeXtyZXR1cm4gZS5vbmx5KFtbXV0pLGVuPSgpPT5bW11dLFtbXV19Y2F0Y2goZSl7cmV0dXJuIGVuPSgpPT5mdCxmdH19O2Z1bmN0aW9uIHRuKGUpe3JldHVybiBudWxsPT1lPygpPT57fTpcInN0cmluZ1wiPT10eXBlb2YgZT9mdW5jdGlvbihlKXtyZXR1cm4gMT09PWUuc3BsaXQoXCIuXCIpLmxlbmd0aD90PT50W2VdOnQ9PmIodCxlKX0oZSk6dD0+Yih0LGUpfWZ1bmN0aW9uIG5uKGUpe3JldHVybltdLnNsaWNlLmNhbGwoZSl9bGV0IHJuPTA7ZnVuY3Rpb24gc24oZSl7cmV0dXJuIG51bGw9PWU/XCI6aWRcIjpcInN0cmluZ1wiPT10eXBlb2YgZT9lOmBbJHtlLmpvaW4oXCIrXCIpfV1gfWZ1bmN0aW9uIG9uKGUsdCxyKXtmdW5jdGlvbiBzKGUpe2lmKDM9PT1lLnR5cGUpcmV0dXJuIG51bGw7aWYoND09PWUudHlwZSl0aHJvdyBuZXcgRXJyb3IoXCJDYW5ub3QgY29udmVydCBuZXZlciB0eXBlIHRvIElEQktleVJhbmdlXCIpO2NvbnN0e2xvd2VyOm4sdXBwZXI6cixsb3dlck9wZW46cyx1cHBlck9wZW46aX09ZTtyZXR1cm4gdm9pZCAwPT09bj92b2lkIDA9PT1yP251bGw6dC51cHBlckJvdW5kKHIsISFpKTp2b2lkIDA9PT1yP3QubG93ZXJCb3VuZChuLCEhcyk6dC5ib3VuZChuLHIsISFzLCEhaSl9Y29uc3R7c2NoZW1hOmksaGFzR2V0QWxsOm99PWZ1bmN0aW9uKGUsdCl7Y29uc3Qgcj1ubihlLm9iamVjdFN0b3JlTmFtZXMpO3JldHVybntzY2hlbWE6e25hbWU6ZS5uYW1lLHRhYmxlczpyLm1hcCgoZT0+dC5vYmplY3RTdG9yZShlKSkpLm1hcCgoZT0+e2NvbnN0e2tleVBhdGg6dCxhdXRvSW5jcmVtZW50OnJ9PWUscz1uKHQpLGk9bnVsbD09dCxvPXt9LGE9e25hbWU6ZS5uYW1lLHByaW1hcnlLZXk6e25hbWU6bnVsbCxpc1ByaW1hcnlLZXk6ITAsb3V0Ym91bmQ6aSxjb21wb3VuZDpzLGtleVBhdGg6dCxhdXRvSW5jcmVtZW50OnIsdW5pcXVlOiEwLGV4dHJhY3RLZXk6dG4odCl9LGluZGV4ZXM6bm4oZS5pbmRleE5hbWVzKS5tYXAoKHQ9PmUuaW5kZXgodCkpKS5tYXAoKGU9Pntjb25zdHtuYW1lOnQsdW5pcXVlOnIsbXVsdGlFbnRyeTpzLGtleVBhdGg6aX09ZSxhPXtuYW1lOnQsY29tcG91bmQ6bihpKSxrZXlQYXRoOmksdW5pcXVlOnIsbXVsdGlFbnRyeTpzLGV4dHJhY3RLZXk6dG4oaSl9O3JldHVybiBvW3NuKGkpXT1hLGF9KSksZ2V0SW5kZXhCeUtleVBhdGg6ZT0+b1tzbihlKV19O3JldHVybiBvW1wiOmlkXCJdPWEucHJpbWFyeUtleSxudWxsIT10JiYob1tzbih0KV09YS5wcmltYXJ5S2V5KSxhfSkpfSxoYXNHZXRBbGw6ci5sZW5ndGg+MCYmXCJnZXRBbGxcImluIHQub2JqZWN0U3RvcmUoclswXSkmJiEoXCJ1bmRlZmluZWRcIiE9dHlwZW9mIG5hdmlnYXRvciYmL1NhZmFyaS8udGVzdChuYXZpZ2F0b3IudXNlckFnZW50KSYmIS8oQ2hyb21lXFwvfEVkZ2VcXC8pLy50ZXN0KG5hdmlnYXRvci51c2VyQWdlbnQpJiZbXS5jb25jYXQobmF2aWdhdG9yLnVzZXJBZ2VudC5tYXRjaCgvU2FmYXJpXFwvKFxcZCopLykpWzFdPDYwNCl9fShlLHIpLGE9aS50YWJsZXMubWFwKChlPT5mdW5jdGlvbihlKXtjb25zdCB0PWUubmFtZTtyZXR1cm57bmFtZTp0LHNjaGVtYTplLG11dGF0ZTpmdW5jdGlvbih7dHJhbnM6ZSx0eXBlOm4sa2V5czpyLHZhbHVlczppLHJhbmdlOm99KXtyZXR1cm4gbmV3IFByb21pc2UoKChhLHUpPT57YT1XZShhKTtjb25zdCBsPWUub2JqZWN0U3RvcmUodCksYz1udWxsPT1sLmtleVBhdGgsaD1cInB1dFwiPT09bnx8XCJhZGRcIj09PW47aWYoIWgmJlwiZGVsZXRlXCIhPT1uJiZcImRlbGV0ZVJhbmdlXCIhPT1uKXRocm93IG5ldyBFcnJvcihcIkludmFsaWQgb3BlcmF0aW9uIHR5cGU6IFwiK24pO2NvbnN0e2xlbmd0aDpkfT1yfHxpfHx7bGVuZ3RoOjF9O2lmKHImJmkmJnIubGVuZ3RoIT09aS5sZW5ndGgpdGhyb3cgbmV3IEVycm9yKFwiR2l2ZW4ga2V5cyBhcnJheSBtdXN0IGhhdmUgc2FtZSBsZW5ndGggYXMgZ2l2ZW4gdmFsdWVzIGFycmF5LlwiKTtpZigwPT09ZClyZXR1cm4gYSh7bnVtRmFpbHVyZXM6MCxmYWlsdXJlczp7fSxyZXN1bHRzOltdLGxhc3RSZXN1bHQ6dm9pZCAwfSk7bGV0IGY7Y29uc3QgcD1bXSx5PVtdO2xldCBtPTA7Y29uc3Qgdj1lPT57KyttLEd0KGUpfTtpZihcImRlbGV0ZVJhbmdlXCI9PT1uKXtpZig0PT09by50eXBlKXJldHVybiBhKHtudW1GYWlsdXJlczptLGZhaWx1cmVzOnkscmVzdWx0czpbXSxsYXN0UmVzdWx0OnZvaWQgMH0pOzM9PT1vLnR5cGU/cC5wdXNoKGY9bC5jbGVhcigpKTpwLnB1c2goZj1sLmRlbGV0ZShzKG8pKSl9ZWxzZXtjb25zdFtlLHRdPWg/Yz9baSxyXTpbaSxudWxsXTpbcixudWxsXTtpZihoKWZvcihsZXQgcj0wO3I8ZDsrK3IpcC5wdXNoKGY9dCYmdm9pZCAwIT09dFtyXT9sW25dKGVbcl0sdFtyXSk6bFtuXShlW3JdKSksZi5vbmVycm9yPXY7ZWxzZSBmb3IobGV0IHQ9MDt0PGQ7Kyt0KXAucHVzaChmPWxbbl0oZVt0XSkpLGYub25lcnJvcj12fWNvbnN0IGc9ZT0+e2NvbnN0IHQ9ZS50YXJnZXQucmVzdWx0O3AuZm9yRWFjaCgoKGUsdCk9Pm51bGwhPWUuZXJyb3ImJih5W3RdPWUuZXJyb3IpKSksYSh7bnVtRmFpbHVyZXM6bSxmYWlsdXJlczp5LHJlc3VsdHM6XCJkZWxldGVcIj09PW4/cjpwLm1hcCgoZT0+ZS5yZXN1bHQpKSxsYXN0UmVzdWx0OnR9KX07Zi5vbmVycm9yPWU9Pnt2KGUpLGcoZSl9LGYub25zdWNjZXNzPWd9KSl9LGdldE1hbnk6KHt0cmFuczplLGtleXM6bn0pPT5uZXcgUHJvbWlzZSgoKHIscyk9PntyPVdlKHIpO2NvbnN0IGk9ZS5vYmplY3RTdG9yZSh0KSxvPW4ubGVuZ3RoLGE9bmV3IEFycmF5KG8pO2xldCB1LGw9MCxjPTA7Y29uc3QgaD1lPT57Y29uc3QgdD1lLnRhcmdldDthW3QuX3Bvc109dC5yZXN1bHQsKytjPT09bCYmcihhKX0sZD16dChzKTtmb3IobGV0IGU9MDtlPG87KytlKW51bGwhPW5bZV0mJih1PWkuZ2V0KG5bZV0pLHUuX3Bvcz1lLHUub25zdWNjZXNzPWgsdS5vbmVycm9yPWQsKytsKTswPT09bCYmcihhKX0pKSxnZXQ6KHt0cmFuczplLGtleTpufSk9Pm5ldyBQcm9taXNlKCgocixzKT0+e3I9V2Uocik7Y29uc3QgaT1lLm9iamVjdFN0b3JlKHQpLmdldChuKTtpLm9uc3VjY2Vzcz1lPT5yKGUudGFyZ2V0LnJlc3VsdCksaS5vbmVycm9yPXp0KHMpfSkpLHF1ZXJ5OmZ1bmN0aW9uKGUpe3JldHVybiBuPT5uZXcgUHJvbWlzZSgoKHIsaSk9PntyPVdlKHIpO2NvbnN0e3RyYW5zOm8sdmFsdWVzOmEsbGltaXQ6dSxxdWVyeTpsfT1uLGM9dT09PTEvMD92b2lkIDA6dSx7aW5kZXg6aCxyYW5nZTpkfT1sLGY9by5vYmplY3RTdG9yZSh0KSxwPWguaXNQcmltYXJ5S2V5P2Y6Zi5pbmRleChoLm5hbWUpLHk9cyhkKTtpZigwPT09dSlyZXR1cm4gcih7cmVzdWx0OltdfSk7aWYoZSl7Y29uc3QgZT1hP3AuZ2V0QWxsKHksYyk6cC5nZXRBbGxLZXlzKHksYyk7ZS5vbnN1Y2Nlc3M9ZT0+cih7cmVzdWx0OmUudGFyZ2V0LnJlc3VsdH0pLGUub25lcnJvcj16dChpKX1lbHNle2xldCBlPTA7Y29uc3QgdD1hfHwhKFwib3BlbktleUN1cnNvclwiaW4gcCk/cC5vcGVuQ3Vyc29yKHkpOnAub3BlbktleUN1cnNvcih5KSxuPVtdO3Qub25zdWNjZXNzPXM9Pntjb25zdCBpPXQucmVzdWx0O3JldHVybiBpPyhuLnB1c2goYT9pLnZhbHVlOmkucHJpbWFyeUtleSksKytlPT09dT9yKHtyZXN1bHQ6bn0pOnZvaWQgaS5jb250aW51ZSgpKTpyKHtyZXN1bHQ6bn0pfSx0Lm9uZXJyb3I9enQoaSl9fSkpfShvKSxvcGVuQ3Vyc29yOmZ1bmN0aW9uKHt0cmFuczplLHZhbHVlczpuLHF1ZXJ5OnIscmV2ZXJzZTppLHVuaXF1ZTpvfSl7cmV0dXJuIG5ldyBQcm9taXNlKCgoYSx1KT0+e2E9V2UoYSk7Y29uc3R7aW5kZXg6bCxyYW5nZTpjfT1yLGg9ZS5vYmplY3RTdG9yZSh0KSxkPWwuaXNQcmltYXJ5S2V5P2g6aC5pbmRleChsLm5hbWUpLGY9aT9vP1wicHJldnVuaXF1ZVwiOlwicHJldlwiOm8/XCJuZXh0dW5pcXVlXCI6XCJuZXh0XCIscD1ufHwhKFwib3BlbktleUN1cnNvclwiaW4gZCk/ZC5vcGVuQ3Vyc29yKHMoYyksZik6ZC5vcGVuS2V5Q3Vyc29yKHMoYyksZik7cC5vbmVycm9yPXp0KHUpLHAub25zdWNjZXNzPVdlKCh0PT57Y29uc3Qgbj1wLnJlc3VsdDtpZighbilyZXR1cm4gdm9pZCBhKG51bGwpO24uX19faWQ9KytybixuLmRvbmU9ITE7Y29uc3Qgcj1uLmNvbnRpbnVlLmJpbmQobik7bGV0IHM9bi5jb250aW51ZVByaW1hcnlLZXk7cyYmKHM9cy5iaW5kKG4pKTtjb25zdCBpPW4uYWR2YW5jZS5iaW5kKG4pLG89KCk9Pnt0aHJvdyBuZXcgRXJyb3IoXCJDdXJzb3Igbm90IHN0b3BwZWRcIil9O24udHJhbnM9ZSxuLnN0b3A9bi5jb250aW51ZT1uLmNvbnRpbnVlUHJpbWFyeUtleT1uLmFkdmFuY2U9KCk9Pnt0aHJvdyBuZXcgRXJyb3IoXCJDdXJzb3Igbm90IHN0YXJ0ZWRcIil9LG4uZmFpbD1XZSh1KSxuLm5leHQ9ZnVuY3Rpb24oKXtsZXQgZT0xO3JldHVybiB0aGlzLnN0YXJ0KCgoKT0+ZS0tP3RoaXMuY29udGludWUoKTp0aGlzLnN0b3AoKSkpLnRoZW4oKCgpPT50aGlzKSl9LG4uc3RhcnQ9ZT0+e2NvbnN0IHQ9bmV3IFByb21pc2UoKChlLHQpPT57ZT1XZShlKSxwLm9uZXJyb3I9enQodCksbi5mYWlsPXQsbi5zdG9wPXQ9PntuLnN0b3A9bi5jb250aW51ZT1uLmNvbnRpbnVlUHJpbWFyeUtleT1uLmFkdmFuY2U9byxlKHQpfX0pKSxhPSgpPT57aWYocC5yZXN1bHQpdHJ5e2UoKX1jYXRjaChlKXtuLmZhaWwoZSl9ZWxzZSBuLmRvbmU9ITAsbi5zdGFydD0oKT0+e3Rocm93IG5ldyBFcnJvcihcIkN1cnNvciBiZWhpbmQgbGFzdCBlbnRyeVwiKX0sbi5zdG9wKCl9O3JldHVybiBwLm9uc3VjY2Vzcz1XZSgoZT0+e3Aub25zdWNjZXNzPWEsYSgpfSkpLG4uY29udGludWU9cixuLmNvbnRpbnVlUHJpbWFyeUtleT1zLG4uYWR2YW5jZT1pLGEoKSx0fSxhKG4pfSksdSl9KSl9LGNvdW50KHtxdWVyeTplLHRyYW5zOm59KXtjb25zdHtpbmRleDpyLHJhbmdlOml9PWU7cmV0dXJuIG5ldyBQcm9taXNlKCgoZSxvKT0+e2NvbnN0IGE9bi5vYmplY3RTdG9yZSh0KSx1PXIuaXNQcmltYXJ5S2V5P2E6YS5pbmRleChyLm5hbWUpLGw9cyhpKSxjPWw/dS5jb3VudChsKTp1LmNvdW50KCk7Yy5vbnN1Y2Nlc3M9V2UoKHQ9PmUodC50YXJnZXQucmVzdWx0KSkpLGMub25lcnJvcj16dChvKX0pKX19fShlKSkpLHU9e307cmV0dXJuIGEuZm9yRWFjaCgoZT0+dVtlLm5hbWVdPWUpKSx7c3RhY2s6XCJkYmNvcmVcIix0cmFuc2FjdGlvbjplLnRyYW5zYWN0aW9uLmJpbmQoZSksdGFibGUoZSl7aWYoIXVbZV0pdGhyb3cgbmV3IEVycm9yKGBUYWJsZSAnJHtlfScgbm90IGZvdW5kYCk7cmV0dXJuIHVbZV19LE1JTl9LRVk6LTEvMCxNQVhfS0VZOmVuKHQpLHNjaGVtYTppfX1mdW5jdGlvbiBhbih7X25vdmlwOmV9LHQpe2NvbnN0IG49dC5kYixyPWZ1bmN0aW9uKGUsdCx7SURCS2V5UmFuZ2U6bixpbmRleGVkREI6cn0scyl7Y29uc3QgaT1mdW5jdGlvbihlLHQpe3JldHVybiB0LnJlZHVjZSgoKGUse2NyZWF0ZTp0fSk9Pih7Li4uZSwuLi50KGUpfSkpLGUpfShvbih0LG4scyksZS5kYmNvcmUpO3JldHVybntkYmNvcmU6aX19KGUuX21pZGRsZXdhcmVzLG4sZS5fZGVwcyx0KTtlLmNvcmU9ci5kYmNvcmUsZS50YWJsZXMuZm9yRWFjaCgodD0+e2NvbnN0IG49dC5uYW1lO2UuY29yZS5zY2hlbWEudGFibGVzLnNvbWUoKGU9PmUubmFtZT09PW4pKSYmKHQuY29yZT1lLmNvcmUudGFibGUobiksZVtuXWluc3RhbmNlb2YgZS5UYWJsZSYmKGVbbl0uY29yZT10LmNvcmUpKX0pKX1mdW5jdGlvbiB1bih7X25vdmlwOmV9LHQsbixyKXtuLmZvckVhY2goKG49Pntjb25zdCBzPXJbbl07dC5mb3JFYWNoKCh0PT57Y29uc3Qgcj1kKHQsbik7KCFyfHxcInZhbHVlXCJpbiByJiZ2b2lkIDA9PT1yLnZhbHVlKSYmKHQ9PT1lLlRyYW5zYWN0aW9uLnByb3RvdHlwZXx8dCBpbnN0YW5jZW9mIGUuVHJhbnNhY3Rpb24/bCh0LG4se2dldCgpe3JldHVybiB0aGlzLnRhYmxlKG4pfSxzZXQoZSl7dSh0aGlzLG4se3ZhbHVlOmUsd3JpdGFibGU6ITAsY29uZmlndXJhYmxlOiEwLGVudW1lcmFibGU6ITB9KX19KTp0W25dPW5ldyBlLlRhYmxlKG4scykpfSkpfSkpfWZ1bmN0aW9uIGxuKHtfbm92aXA6ZX0sdCl7dC5mb3JFYWNoKCh0PT57Zm9yKGxldCBuIGluIHQpdFtuXWluc3RhbmNlb2YgZS5UYWJsZSYmZGVsZXRlIHRbbl19KSl9ZnVuY3Rpb24gY24oZSx0KXtyZXR1cm4gZS5fY2ZnLnZlcnNpb24tdC5fY2ZnLnZlcnNpb259ZnVuY3Rpb24gaG4oZSxuLHIscyl7Y29uc3QgaT1lLl9kYlNjaGVtYSxvPWUuX2NyZWF0ZVRyYW5zYWN0aW9uKFwicmVhZHdyaXRlXCIsZS5fc3RvcmVOYW1lcyxpKTtvLmNyZWF0ZShyKSxvLl9jb21wbGV0aW9uLmNhdGNoKHMpO2NvbnN0IGE9by5fcmVqZWN0LmJpbmQobyksdT1LZS50cmFuc2xlc3N8fEtlO0plKCgoKT0+e0tlLnRyYW5zPW8sS2UudHJhbnNsZXNzPXUsMD09PW4/KHQoaSkuZm9yRWFjaCgoZT0+e2ZuKHIsZSxpW2VdLnByaW1LZXksaVtlXS5pbmRleGVzKX0pKSxhbihlLHIpLENlLmZvbGxvdygoKCk9PmUub24ucG9wdWxhdGUuZmlyZShvKSkpLmNhdGNoKGEpKTpmdW5jdGlvbih7X25vdmlwOmV9LG4scixzKXtjb25zdCBpPVtdLG89ZS5fdmVyc2lvbnM7bGV0IGE9ZS5fZGJTY2hlbWE9eW4oZSxlLmlkYmRiLHMpLHU9ITE7ZnVuY3Rpb24gbCgpe3JldHVybiBpLmxlbmd0aD9DZS5yZXNvbHZlKGkuc2hpZnQoKShyLmlkYnRyYW5zKSkudGhlbihsKTpDZS5yZXNvbHZlKCl9cmV0dXJuIG8uZmlsdGVyKChlPT5lLl9jZmcudmVyc2lvbj49bikpLmZvckVhY2goKG89PntpLnB1c2goKCgpPT57Y29uc3QgaT1hLGw9by5fY2ZnLmRic2NoZW1hO21uKGUsaSxzKSxtbihlLGwscyksYT1lLl9kYlNjaGVtYT1sO2NvbnN0IGM9ZG4oaSxsKTtjLmFkZC5mb3JFYWNoKChlPT57Zm4ocyxlWzBdLGVbMV0ucHJpbUtleSxlWzFdLmluZGV4ZXMpfSkpLGMuY2hhbmdlLmZvckVhY2goKGU9PntpZihlLnJlY3JlYXRlKXRocm93IG5ldyBYLlVwZ3JhZGUoXCJOb3QgeWV0IHN1cHBvcnQgZm9yIGNoYW5naW5nIHByaW1hcnkga2V5XCIpO3tjb25zdCB0PXMub2JqZWN0U3RvcmUoZS5uYW1lKTtlLmFkZC5mb3JFYWNoKChlPT5wbih0LGUpKSksZS5jaGFuZ2UuZm9yRWFjaCgoZT0+e3QuZGVsZXRlSW5kZXgoZS5uYW1lKSxwbih0LGUpfSkpLGUuZGVsLmZvckVhY2goKGU9PnQuZGVsZXRlSW5kZXgoZSkpKX19KSk7Y29uc3QgaD1vLl9jZmcuY29udGVudFVwZ3JhZGU7aWYoaCYmby5fY2ZnLnZlcnNpb24+bil7YW4oZSxzKSxyLl9tZW1vaXplZFRhYmxlcz17fSx1PSEwO2xldCBuPXcobCk7Yy5kZWwuZm9yRWFjaCgoZT0+e25bZV09aVtlXX0pKSxsbihlLFtlLlRyYW5zYWN0aW9uLnByb3RvdHlwZV0pLHVuKGUsW2UuVHJhbnNhY3Rpb24ucHJvdG90eXBlXSx0KG4pLG4pLHIuc2NoZW1hPW47Y29uc3Qgbz1UKGgpO2xldCBhO28mJlplKCk7Y29uc3QgZD1DZS5mb2xsb3coKCgpPT57aWYoYT1oKHIpLGEmJm8pe3ZhciBlPWV0LmJpbmQobnVsbCxudWxsKTthLnRoZW4oZSxlKX19KSk7cmV0dXJuIGEmJlwiZnVuY3Rpb25cIj09dHlwZW9mIGEudGhlbj9DZS5yZXNvbHZlKGEpOmQudGhlbigoKCk9PmEpKX19KSksaS5wdXNoKCh0PT57aWYoIXV8fCF2dCl7IWZ1bmN0aW9uKGUsdCl7W10uc2xpY2UuY2FsbCh0LmRiLm9iamVjdFN0b3JlTmFtZXMpLmZvckVhY2goKG49Pm51bGw9PWVbbl0mJnQuZGIuZGVsZXRlT2JqZWN0U3RvcmUobikpKX0oby5fY2ZnLmRic2NoZW1hLHQpfWxuKGUsW2UuVHJhbnNhY3Rpb24ucHJvdG90eXBlXSksdW4oZSxbZS5UcmFuc2FjdGlvbi5wcm90b3R5cGVdLGUuX3N0b3JlTmFtZXMsZS5fZGJTY2hlbWEpLHIuc2NoZW1hPWUuX2RiU2NoZW1hfSkpfSkpLGwoKS50aGVuKCgoKT0+e3ZhciBlLG47bj1zLHQoZT1hKS5mb3JFYWNoKCh0PT57bi5kYi5vYmplY3RTdG9yZU5hbWVzLmNvbnRhaW5zKHQpfHxmbihuLHQsZVt0XS5wcmltS2V5LGVbdF0uaW5kZXhlcyl9KSl9KSl9KGUsbixvLHIpLmNhdGNoKGEpfSkpfWZ1bmN0aW9uIGRuKGUsdCl7Y29uc3Qgbj17ZGVsOltdLGFkZDpbXSxjaGFuZ2U6W119O2xldCByO2ZvcihyIGluIGUpdFtyXXx8bi5kZWwucHVzaChyKTtmb3IociBpbiB0KXtjb25zdCBzPWVbcl0saT10W3JdO2lmKHMpe2NvbnN0IGU9e25hbWU6cixkZWY6aSxyZWNyZWF0ZTohMSxkZWw6W10sYWRkOltdLGNoYW5nZTpbXX07aWYoXCJcIisocy5wcmltS2V5LmtleVBhdGh8fFwiXCIpIT1cIlwiKyhpLnByaW1LZXkua2V5UGF0aHx8XCJcIil8fHMucHJpbUtleS5hdXRvIT09aS5wcmltS2V5LmF1dG8mJiFtdCllLnJlY3JlYXRlPSEwLG4uY2hhbmdlLnB1c2goZSk7ZWxzZXtjb25zdCB0PXMuaWR4QnlOYW1lLHI9aS5pZHhCeU5hbWU7bGV0IG87Zm9yKG8gaW4gdClyW29dfHxlLmRlbC5wdXNoKG8pO2ZvcihvIGluIHIpe2NvbnN0IG49dFtvXSxzPXJbb107bj9uLnNyYyE9PXMuc3JjJiZlLmNoYW5nZS5wdXNoKHMpOmUuYWRkLnB1c2gocyl9KGUuZGVsLmxlbmd0aD4wfHxlLmFkZC5sZW5ndGg+MHx8ZS5jaGFuZ2UubGVuZ3RoPjApJiZuLmNoYW5nZS5wdXNoKGUpfX1lbHNlIG4uYWRkLnB1c2goW3IsaV0pfXJldHVybiBufWZ1bmN0aW9uIGZuKGUsdCxuLHIpe2NvbnN0IHM9ZS5kYi5jcmVhdGVPYmplY3RTdG9yZSh0LG4ua2V5UGF0aD97a2V5UGF0aDpuLmtleVBhdGgsYXV0b0luY3JlbWVudDpuLmF1dG99OnthdXRvSW5jcmVtZW50Om4uYXV0b30pO3JldHVybiByLmZvckVhY2goKGU9PnBuKHMsZSkpKSxzfWZ1bmN0aW9uIHBuKGUsdCl7ZS5jcmVhdGVJbmRleCh0Lm5hbWUsdC5rZXlQYXRoLHt1bmlxdWU6dC51bmlxdWUsbXVsdGlFbnRyeTp0Lm11bHRpfSl9ZnVuY3Rpb24geW4oZSx0LG4pe2NvbnN0IHI9e307cmV0dXJuIHAodC5vYmplY3RTdG9yZU5hbWVzLDApLmZvckVhY2goKGU9Pntjb25zdCB0PW4ub2JqZWN0U3RvcmUoZSk7bGV0IHM9dC5rZXlQYXRoO2NvbnN0IGk9WHQoSnQocyksc3x8XCJcIiwhMSwhMSwhIXQuYXV0b0luY3JlbWVudCxzJiZcInN0cmluZ1wiIT10eXBlb2YgcywhMCksbz1bXTtmb3IobGV0IGU9MDtlPHQuaW5kZXhOYW1lcy5sZW5ndGg7KytlKXtjb25zdCBuPXQuaW5kZXgodC5pbmRleE5hbWVzW2VdKTtzPW4ua2V5UGF0aDt2YXIgYT1YdChuLm5hbWUscywhIW4udW5pcXVlLCEhbi5tdWx0aUVudHJ5LCExLHMmJlwic3RyaW5nXCIhPXR5cGVvZiBzLCExKTtvLnB1c2goYSl9cltlXT1adChlLGksbyl9KSkscn1mdW5jdGlvbiBtbih7X25vdmlwOnR9LG4scil7Y29uc3Qgcz1yLmRiLm9iamVjdFN0b3JlTmFtZXM7Zm9yKGxldCBlPTA7ZTxzLmxlbmd0aDsrK2Upe2NvbnN0IGk9c1tlXSxvPXIub2JqZWN0U3RvcmUoaSk7dC5faGFzR2V0QWxsPVwiZ2V0QWxsXCJpbiBvO2ZvcihsZXQgZT0wO2U8by5pbmRleE5hbWVzLmxlbmd0aDsrK2Upe2NvbnN0IHQ9by5pbmRleE5hbWVzW2VdLHI9by5pbmRleCh0KS5rZXlQYXRoLHM9XCJzdHJpbmdcIj09dHlwZW9mIHI/cjpcIltcIitwKHIpLmpvaW4oXCIrXCIpK1wiXVwiO2lmKG5baV0pe2NvbnN0IGU9bltpXS5pZHhCeU5hbWVbc107ZSYmKGUubmFtZT10LGRlbGV0ZSBuW2ldLmlkeEJ5TmFtZVtzXSxuW2ldLmlkeEJ5TmFtZVt0XT1lKX19fVwidW5kZWZpbmVkXCIhPXR5cGVvZiBuYXZpZ2F0b3ImJi9TYWZhcmkvLnRlc3QobmF2aWdhdG9yLnVzZXJBZ2VudCkmJiEvKENocm9tZVxcL3xFZGdlXFwvKS8udGVzdChuYXZpZ2F0b3IudXNlckFnZW50KSYmZS5Xb3JrZXJHbG9iYWxTY29wZSYmZSBpbnN0YW5jZW9mIGUuV29ya2VyR2xvYmFsU2NvcGUmJltdLmNvbmNhdChuYXZpZ2F0b3IudXNlckFnZW50Lm1hdGNoKC9TYWZhcmlcXC8oXFxkKikvKSlbMV08NjA0JiYodC5faGFzR2V0QWxsPSExKX1jbGFzcyB2bntfcGFyc2VTdG9yZXNTcGVjKGUscil7dChlKS5mb3JFYWNoKCh0PT57aWYobnVsbCE9PWVbdF0pe3ZhciBzPWVbdF0uc3BsaXQoXCIsXCIpLm1hcCgoKGUsdCk9Pntjb25zdCByPShlPWUudHJpbSgpKS5yZXBsYWNlKC8oWyYqXXxcXCtcXCspL2csXCJcIikscz0vXlxcWy8udGVzdChyKT9yLm1hdGNoKC9eXFxbKC4qKVxcXSQvKVsxXS5zcGxpdChcIitcIik6cjtyZXR1cm4gWHQocixzfHxudWxsLC9cXCYvLnRlc3QoZSksL1xcKi8udGVzdChlKSwvXFwrXFwrLy50ZXN0KGUpLG4ocyksMD09PXQpfSkpLGk9cy5zaGlmdCgpO2lmKGkubXVsdGkpdGhyb3cgbmV3IFguU2NoZW1hKFwiUHJpbWFyeSBrZXkgY2Fubm90IGJlIG11bHRpLXZhbHVlZFwiKTtzLmZvckVhY2goKGU9PntpZihlLmF1dG8pdGhyb3cgbmV3IFguU2NoZW1hKFwiT25seSBwcmltYXJ5IGtleSBjYW4gYmUgbWFya2VkIGFzIGF1dG9JbmNyZW1lbnQgKCsrKVwiKTtpZighZS5rZXlQYXRoKXRocm93IG5ldyBYLlNjaGVtYShcIkluZGV4IG11c3QgaGF2ZSBhIG5hbWUgYW5kIGNhbm5vdCBiZSBhbiBlbXB0eSBzdHJpbmdcIil9KSksclt0XT1adCh0LGkscyl9fSkpfXN0b3JlcyhlKXtjb25zdCBuPXRoaXMuZGI7dGhpcy5fY2ZnLnN0b3Jlc1NvdXJjZT10aGlzLl9jZmcuc3RvcmVzU291cmNlP3IodGhpcy5fY2ZnLnN0b3Jlc1NvdXJjZSxlKTplO2NvbnN0IHM9bi5fdmVyc2lvbnMsaT17fTtsZXQgbz17fTtyZXR1cm4gcy5mb3JFYWNoKChlPT57cihpLGUuX2NmZy5zdG9yZXNTb3VyY2UpLG89ZS5fY2ZnLmRic2NoZW1hPXt9LGUuX3BhcnNlU3RvcmVzU3BlYyhpLG8pfSkpLG4uX2RiU2NoZW1hPW8sbG4obixbbi5fYWxsVGFibGVzLG4sbi5UcmFuc2FjdGlvbi5wcm90b3R5cGVdKSx1bihuLFtuLl9hbGxUYWJsZXMsbixuLlRyYW5zYWN0aW9uLnByb3RvdHlwZSx0aGlzLl9jZmcudGFibGVzXSx0KG8pLG8pLG4uX3N0b3JlTmFtZXM9dChvKSx0aGlzfXVwZ3JhZGUoZSl7cmV0dXJuIHRoaXMuX2NmZy5jb250ZW50VXBncmFkZT11ZSh0aGlzLl9jZmcuY29udGVudFVwZ3JhZGV8fGVlLGUpLHRoaXN9fWZ1bmN0aW9uIGduKGUsdCl7bGV0IG49ZS5fZGJOYW1lc0RCO3JldHVybiBufHwobj1lLl9kYk5hbWVzREI9bmV3ICRuKFwiX19kYm5hbWVzXCIse2FkZG9uczpbXSxpbmRleGVkREI6ZSxJREJLZXlSYW5nZTp0fSksbi52ZXJzaW9uKDEpLnN0b3Jlcyh7ZGJuYW1lczpcIm5hbWVcIn0pKSxuLnRhYmxlKFwiZGJuYW1lc1wiKX1mdW5jdGlvbiBibihlKXtyZXR1cm4gZSYmXCJmdW5jdGlvblwiPT10eXBlb2YgZS5kYXRhYmFzZXN9ZnVuY3Rpb24gX24oZSl7cmV0dXJuIEplKChmdW5jdGlvbigpe3JldHVybiBLZS5sZXRUaHJvdWdoPSEwLGUoKX0pKX1mdW5jdGlvbiB3bigpe3ZhciBlO3JldHVybiFuYXZpZ2F0b3IudXNlckFnZW50RGF0YSYmL1NhZmFyaVxcLy8udGVzdChuYXZpZ2F0b3IudXNlckFnZW50KSYmIS9DaHJvbShlfGl1bSlcXC8vLnRlc3QobmF2aWdhdG9yLnVzZXJBZ2VudCkmJmluZGV4ZWREQi5kYXRhYmFzZXM/bmV3IFByb21pc2UoKGZ1bmN0aW9uKHQpe3ZhciBuPWZ1bmN0aW9uKCl7cmV0dXJuIGluZGV4ZWREQi5kYXRhYmFzZXMoKS5maW5hbGx5KHQpfTtlPXNldEludGVydmFsKG4sMTAwKSxuKCl9KSkuZmluYWxseSgoZnVuY3Rpb24oKXtyZXR1cm4gY2xlYXJJbnRlcnZhbChlKX0pKTpQcm9taXNlLnJlc29sdmUoKX1mdW5jdGlvbiB4bihlKXtjb25zdCBuPWUuX3N0YXRlLHtpbmRleGVkREI6cn09ZS5fZGVwcztpZihuLmlzQmVpbmdPcGVuZWR8fGUuaWRiZGIpcmV0dXJuIG4uZGJSZWFkeVByb21pc2UudGhlbigoKCk9Pm4uZGJPcGVuRXJyb3I/aHQobi5kYk9wZW5FcnJvcik6ZSkpO1ImJihuLm9wZW5DYW5jZWxsZXIuX3N0YWNrSG9sZGVyPXEoKSksbi5pc0JlaW5nT3BlbmVkPSEwLG4uZGJPcGVuRXJyb3I9bnVsbCxuLm9wZW5Db21wbGV0ZT0hMTtjb25zdCBzPW4ub3BlbkNhbmNlbGxlcjtmdW5jdGlvbiBpKCl7aWYobi5vcGVuQ2FuY2VsbGVyIT09cyl0aHJvdyBuZXcgWC5EYXRhYmFzZUNsb3NlZChcImRiLm9wZW4oKSB3YXMgY2FuY2VsbGVkXCIpfWxldCBvPW4uZGJSZWFkeVJlc29sdmUsYT1udWxsLHU9ITE7cmV0dXJuIENlLnJhY2UoW3MsKFwidW5kZWZpbmVkXCI9PXR5cGVvZiBuYXZpZ2F0b3I/Q2UucmVzb2x2ZSgpOnduKCkpLnRoZW4oKCgpPT5uZXcgQ2UoKChzLG8pPT57aWYoaSgpLCFyKXRocm93IG5ldyBYLk1pc3NpbmdBUEk7Y29uc3QgbD1lLm5hbWUsYz1uLmF1dG9TY2hlbWE/ci5vcGVuKGwpOnIub3BlbihsLE1hdGgucm91bmQoMTAqZS52ZXJubykpO2lmKCFjKXRocm93IG5ldyBYLk1pc3NpbmdBUEk7Yy5vbmVycm9yPXp0KG8pLGMub25ibG9ja2VkPVdlKGUuX2ZpcmVPbkJsb2NrZWQpLGMub251cGdyYWRlbmVlZGVkPVdlKCh0PT57aWYoYT1jLnRyYW5zYWN0aW9uLG4uYXV0b1NjaGVtYSYmIWUuX29wdGlvbnMuYWxsb3dFbXB0eURCKXtjLm9uZXJyb3I9R3QsYS5hYm9ydCgpLGMucmVzdWx0LmNsb3NlKCk7Y29uc3QgZT1yLmRlbGV0ZURhdGFiYXNlKGwpO2Uub25zdWNjZXNzPWUub25lcnJvcj1XZSgoKCk9PntvKG5ldyBYLk5vU3VjaERhdGFiYXNlKGBEYXRhYmFzZSAke2x9IGRvZXNudCBleGlzdGApKX0pKX1lbHNle2Eub25lcnJvcj16dChvKTt2YXIgcz10Lm9sZFZlcnNpb24+TWF0aC5wb3coMiw2Mik/MDp0Lm9sZFZlcnNpb247dT1zPDEsZS5fbm92aXAuaWRiZGI9Yy5yZXN1bHQsaG4oZSxzLzEwLGEsbyl9fSksbyksYy5vbnN1Y2Nlc3M9V2UoKCgpPT57YT1udWxsO2NvbnN0IHI9ZS5fbm92aXAuaWRiZGI9Yy5yZXN1bHQsaT1wKHIub2JqZWN0U3RvcmVOYW1lcyk7aWYoaS5sZW5ndGg+MCl0cnl7Y29uc3Qgcz1yLnRyYW5zYWN0aW9uKDE9PT0obz1pKS5sZW5ndGg/b1swXTpvLFwicmVhZG9ubHlcIik7bi5hdXRvU2NoZW1hP2Z1bmN0aW9uKHtfbm92aXA6ZX0sbixyKXtlLnZlcm5vPW4udmVyc2lvbi8xMDtjb25zdCBzPWUuX2RiU2NoZW1hPXluKDAsbixyKTtlLl9zdG9yZU5hbWVzPXAobi5vYmplY3RTdG9yZU5hbWVzLDApLHVuKGUsW2UuX2FsbFRhYmxlc10sdChzKSxzKX0oZSxyLHMpOihtbihlLGUuX2RiU2NoZW1hLHMpLGZ1bmN0aW9uKGUsdCl7Y29uc3Qgbj1kbih5bigwLGUuaWRiZGIsdCksZS5fZGJTY2hlbWEpO3JldHVybiEobi5hZGQubGVuZ3RofHxuLmNoYW5nZS5zb21lKChlPT5lLmFkZC5sZW5ndGh8fGUuY2hhbmdlLmxlbmd0aCkpKX0oZSxzKXx8Y29uc29sZS53YXJuKFwiRGV4aWUgU2NoZW1hRGlmZjogU2NoZW1hIHdhcyBleHRlbmRlZCB3aXRob3V0IGluY3JlYXNpbmcgdGhlIG51bWJlciBwYXNzZWQgdG8gZGIudmVyc2lvbigpLiBTb21lIHF1ZXJpZXMgbWF5IGZhaWwuXCIpKSxhbihlLHMpfWNhdGNoKGUpe312YXIgbzt5dC5wdXNoKGUpLHIub252ZXJzaW9uY2hhbmdlPVdlKCh0PT57bi52Y0ZpcmVkPSEwLGUub24oXCJ2ZXJzaW9uY2hhbmdlXCIpLmZpcmUodCl9KSksci5vbmNsb3NlPVdlKCh0PT57ZS5vbihcImNsb3NlXCIpLmZpcmUodCl9KSksdSYmZnVuY3Rpb24oe2luZGV4ZWREQjplLElEQktleVJhbmdlOnR9LG4peyFibihlKSYmXCJfX2RibmFtZXNcIiE9PW4mJmduKGUsdCkucHV0KHtuYW1lOm59KS5jYXRjaChlZSl9KGUuX2RlcHMsbCkscygpfSksbyl9KSkpKV0pLnRoZW4oKCgpPT4oaSgpLG4ub25SZWFkeUJlaW5nRmlyZWQ9W10sQ2UucmVzb2x2ZShfbigoKCk9PmUub24ucmVhZHkuZmlyZShlLnZpcCkpKSkudGhlbigoZnVuY3Rpb24gdCgpe2lmKG4ub25SZWFkeUJlaW5nRmlyZWQubGVuZ3RoPjApe2xldCByPW4ub25SZWFkeUJlaW5nRmlyZWQucmVkdWNlKHVlLGVlKTtyZXR1cm4gbi5vblJlYWR5QmVpbmdGaXJlZD1bXSxDZS5yZXNvbHZlKF9uKCgoKT0+cihlLnZpcCkpKSkudGhlbih0KX19KSkpKSkuZmluYWxseSgoKCk9PntuLm9uUmVhZHlCZWluZ0ZpcmVkPW51bGwsbi5pc0JlaW5nT3BlbmVkPSExfSkpLnRoZW4oKCgpPT5lKSkuY2F0Y2goKHQ9PntuLmRiT3BlbkVycm9yPXQ7dHJ5e2EmJmEuYWJvcnQoKX1jYXRjaChlKXt9cmV0dXJuIHM9PT1uLm9wZW5DYW5jZWxsZXImJmUuX2Nsb3NlKCksaHQodCl9KSkuZmluYWxseSgoKCk9PntuLm9wZW5Db21wbGV0ZT0hMCxvKCl9KSl9ZnVuY3Rpb24ga24oZSl7dmFyIHQ9dD0+ZS5uZXh0KHQpLHI9aSh0KSxzPWkoKHQ9PmUudGhyb3codCkpKTtmdW5jdGlvbiBpKGUpe3JldHVybiB0PT57dmFyIGk9ZSh0KSxvPWkudmFsdWU7cmV0dXJuIGkuZG9uZT9vOm8mJlwiZnVuY3Rpb25cIj09dHlwZW9mIG8udGhlbj9vLnRoZW4ocixzKTpuKG8pP1Byb21pc2UuYWxsKG8pLnRoZW4ocixzKTpyKG8pfX1yZXR1cm4gaSh0KSgpfWZ1bmN0aW9uIEVuKGUsdCxuKXt2YXIgcj1hcmd1bWVudHMubGVuZ3RoO2lmKHI8Mil0aHJvdyBuZXcgWC5JbnZhbGlkQXJndW1lbnQoXCJUb28gZmV3IGFyZ3VtZW50c1wiKTtmb3IodmFyIHM9bmV3IEFycmF5KHItMSk7LS1yOylzW3ItMV09YXJndW1lbnRzW3JdO249cy5wb3AoKTt2YXIgaT1rKHMpO3JldHVybltlLGksbl19ZnVuY3Rpb24gUG4oZSx0LG4scixzKXtyZXR1cm4gQ2UucmVzb2x2ZSgpLnRoZW4oKCgpPT57Y29uc3QgaT1LZS50cmFuc2xlc3N8fEtlLG89ZS5fY3JlYXRlVHJhbnNhY3Rpb24odCxuLGUuX2RiU2NoZW1hLHIpLGE9e3RyYW5zOm8sdHJhbnNsZXNzOml9O2lmKHIpby5pZGJ0cmFucz1yLmlkYnRyYW5zO2Vsc2UgdHJ5e28uY3JlYXRlKCksZS5fc3RhdGUuUFIxMzk4X21heExvb3A9M31jYXRjaChyKXtyZXR1cm4gci5uYW1lPT09SC5JbnZhbGlkU3RhdGUmJmUuaXNPcGVuKCkmJi0tZS5fc3RhdGUuUFIxMzk4X21heExvb3A+MD8oY29uc29sZS53YXJuKFwiRGV4aWU6IE5lZWQgdG8gcmVvcGVuIGRiXCIpLGUuX2Nsb3NlKCksZS5vcGVuKCkudGhlbigoKCk9PlBuKGUsdCxuLG51bGwscykpKSk6aHQocil9Y29uc3QgdT1UKHMpO2xldCBsO3UmJlplKCk7Y29uc3QgYz1DZS5mb2xsb3coKCgpPT57aWYobD1zLmNhbGwobyxvKSxsKWlmKHUpe3ZhciBlPWV0LmJpbmQobnVsbCxudWxsKTtsLnRoZW4oZSxlKX1lbHNlXCJmdW5jdGlvblwiPT10eXBlb2YgbC5uZXh0JiZcImZ1bmN0aW9uXCI9PXR5cGVvZiBsLnRocm93JiYobD1rbihsKSl9KSxhKTtyZXR1cm4obCYmXCJmdW5jdGlvblwiPT10eXBlb2YgbC50aGVuP0NlLnJlc29sdmUobCkudGhlbigoZT0+by5hY3RpdmU/ZTpodChuZXcgWC5QcmVtYXR1cmVDb21taXQoXCJUcmFuc2FjdGlvbiBjb21taXR0ZWQgdG9vIGVhcmx5LiBTZWUgaHR0cDovL2JpdC5seS8ya2Rja01uXCIpKSkpOmMudGhlbigoKCk9PmwpKSkudGhlbigoZT0+KHImJm8uX3Jlc29sdmUoKSxvLl9jb21wbGV0aW9uLnRoZW4oKCgpPT5lKSkpKSkuY2F0Y2goKGU9PihvLl9yZWplY3QoZSksaHQoZSkpKSl9KSl9ZnVuY3Rpb24gS24oZSx0LHIpe2NvbnN0IHM9bihlKT9lLnNsaWNlKCk6W2VdO2ZvcihsZXQgZT0wO2U8cjsrK2Upcy5wdXNoKHQpO3JldHVybiBzfWNvbnN0IE9uPXtzdGFjazpcImRiY29yZVwiLG5hbWU6XCJWaXJ0dWFsSW5kZXhNaWRkbGV3YXJlXCIsbGV2ZWw6MSxjcmVhdGU6ZnVuY3Rpb24oZSl7cmV0dXJuey4uLmUsdGFibGUodCl7Y29uc3Qgbj1lLnRhYmxlKHQpLHtzY2hlbWE6cn09bixzPXt9LGk9W107ZnVuY3Rpb24gbyhlLHQsbil7Y29uc3Qgcj1zbihlKSxhPXNbcl09c1tyXXx8W10sdT1udWxsPT1lPzA6XCJzdHJpbmdcIj09dHlwZW9mIGU/MTplLmxlbmd0aCxsPXQ+MCxjPXsuLi5uLGlzVmlydHVhbDpsLGtleVRhaWw6dCxrZXlMZW5ndGg6dSxleHRyYWN0S2V5OnRuKGUpLHVuaXF1ZTohbCYmbi51bmlxdWV9O2lmKGEucHVzaChjKSxjLmlzUHJpbWFyeUtleXx8aS5wdXNoKGMpLHU+MSl7bygyPT09dT9lWzBdOmUuc2xpY2UoMCx1LTEpLHQrMSxuKX1yZXR1cm4gYS5zb3J0KCgoZSx0KT0+ZS5rZXlUYWlsLXQua2V5VGFpbCkpLGN9Y29uc3QgYT1vKHIucHJpbWFyeUtleS5rZXlQYXRoLDAsci5wcmltYXJ5S2V5KTtzW1wiOmlkXCJdPVthXTtmb3IoY29uc3QgZSBvZiByLmluZGV4ZXMpbyhlLmtleVBhdGgsMCxlKTtmdW5jdGlvbiB1KHQpe2NvbnN0IG49dC5xdWVyeS5pbmRleDtyZXR1cm4gbi5pc1ZpcnR1YWw/ey4uLnQscXVlcnk6e2luZGV4Om4scmFuZ2U6KHI9dC5xdWVyeS5yYW5nZSxzPW4ua2V5VGFpbCx7dHlwZToxPT09ci50eXBlPzI6ci50eXBlLGxvd2VyOktuKHIubG93ZXIsci5sb3dlck9wZW4/ZS5NQVhfS0VZOmUuTUlOX0tFWSxzKSxsb3dlck9wZW46ITAsdXBwZXI6S24oci51cHBlcixyLnVwcGVyT3Blbj9lLk1JTl9LRVk6ZS5NQVhfS0VZLHMpLHVwcGVyT3BlbjohMH0pfX06dDt2YXIgcixzfWNvbnN0IGw9ey4uLm4sc2NoZW1hOnsuLi5yLHByaW1hcnlLZXk6YSxpbmRleGVzOmksZ2V0SW5kZXhCeUtleVBhdGg6ZnVuY3Rpb24oZSl7Y29uc3QgdD1zW3NuKGUpXTtyZXR1cm4gdCYmdFswXX19LGNvdW50OmU9Pm4uY291bnQodShlKSkscXVlcnk6ZT0+bi5xdWVyeSh1KGUpKSxvcGVuQ3Vyc29yKHQpe2NvbnN0e2tleVRhaWw6cixpc1ZpcnR1YWw6cyxrZXlMZW5ndGg6aX09dC5xdWVyeS5pbmRleDtpZighcylyZXR1cm4gbi5vcGVuQ3Vyc29yKHQpO3JldHVybiBuLm9wZW5DdXJzb3IodSh0KSkudGhlbigobj0+biYmZnVuY3Rpb24obil7Y29uc3Qgcz1PYmplY3QuY3JlYXRlKG4se2NvbnRpbnVlOnt2YWx1ZTpmdW5jdGlvbihzKXtudWxsIT1zP24uY29udGludWUoS24ocyx0LnJldmVyc2U/ZS5NQVhfS0VZOmUuTUlOX0tFWSxyKSk6dC51bmlxdWU/bi5jb250aW51ZShuLmtleS5zbGljZSgwLGkpLmNvbmNhdCh0LnJldmVyc2U/ZS5NSU5fS0VZOmUuTUFYX0tFWSxyKSk6bi5jb250aW51ZSgpfX0sY29udGludWVQcmltYXJ5S2V5Ont2YWx1ZSh0LHMpe24uY29udGludWVQcmltYXJ5S2V5KEtuKHQsZS5NQVhfS0VZLHIpLHMpfX0scHJpbWFyeUtleTp7Z2V0OigpPT5uLnByaW1hcnlLZXl9LGtleTp7Z2V0KCl7Y29uc3QgZT1uLmtleTtyZXR1cm4gMT09PWk/ZVswXTplLnNsaWNlKDAsaSl9fSx2YWx1ZTp7Z2V0OigpPT5uLnZhbHVlfX0pO3JldHVybiBzfShuKSkpfX07cmV0dXJuIGx9fX19O2Z1bmN0aW9uIFNuKGUsbixyLHMpe3JldHVybiByPXJ8fHt9LHM9c3x8XCJcIix0KGUpLmZvckVhY2goKHQ9PntpZihvKG4sdCkpe3ZhciBpPWVbdF0sYT1uW3RdO2lmKFwib2JqZWN0XCI9PXR5cGVvZiBpJiZcIm9iamVjdFwiPT10eXBlb2YgYSYmaSYmYSl7Y29uc3QgZT1DKGkpO2UhPT1DKGEpP3Jbcyt0XT1uW3RdOlwiT2JqZWN0XCI9PT1lP1NuKGksYSxyLHMrdCtcIi5cIik6aSE9PWEmJihyW3MrdF09blt0XSl9ZWxzZSBpIT09YSYmKHJbcyt0XT1uW3RdKX1lbHNlIHJbcyt0XT12b2lkIDB9KSksdChuKS5mb3JFYWNoKCh0PT57byhlLHQpfHwocltzK3RdPW5bdF0pfSkpLHJ9Y29uc3QgQW49e3N0YWNrOlwiZGJjb3JlXCIsbmFtZTpcIkhvb2tzTWlkZGxld2FyZVwiLGxldmVsOjIsY3JlYXRlOmU9Pih7Li4uZSx0YWJsZSh0KXtjb25zdCBuPWUudGFibGUodCkse3ByaW1hcnlLZXk6cn09bi5zY2hlbWEscz17Li4ubixtdXRhdGUoZSl7Y29uc3Qgcz1LZS50cmFucyx7ZGVsZXRpbmc6aSxjcmVhdGluZzphLHVwZGF0aW5nOnV9PXMudGFibGUodCkuaG9vaztzd2l0Y2goZS50eXBlKXtjYXNlXCJhZGRcIjppZihhLmZpcmU9PT1lZSlicmVhaztyZXR1cm4gcy5fcHJvbWlzZShcInJlYWR3cml0ZVwiLCgoKT0+bChlKSksITApO2Nhc2VcInB1dFwiOmlmKGEuZmlyZT09PWVlJiZ1LmZpcmU9PT1lZSlicmVhaztyZXR1cm4gcy5fcHJvbWlzZShcInJlYWR3cml0ZVwiLCgoKT0+bChlKSksITApO2Nhc2VcImRlbGV0ZVwiOmlmKGkuZmlyZT09PWVlKWJyZWFrO3JldHVybiBzLl9wcm9taXNlKFwicmVhZHdyaXRlXCIsKCgpPT5sKGUpKSwhMCk7Y2FzZVwiZGVsZXRlUmFuZ2VcIjppZihpLmZpcmU9PT1lZSlicmVhaztyZXR1cm4gcy5fcHJvbWlzZShcInJlYWR3cml0ZVwiLCgoKT0+ZnVuY3Rpb24oZSl7cmV0dXJuIGMoZS50cmFucyxlLnJhbmdlLDFlNCl9KGUpKSwhMCl9cmV0dXJuIG4ubXV0YXRlKGUpO2Z1bmN0aW9uIGwoZSl7Y29uc3QgdD1LZS50cmFucyxzPWUua2V5c3x8ZnVuY3Rpb24oZSx0KXtyZXR1cm5cImRlbGV0ZVwiPT09dC50eXBlP3Qua2V5czp0LmtleXN8fHQudmFsdWVzLm1hcChlLmV4dHJhY3RLZXkpfShyLGUpO2lmKCFzKXRocm93IG5ldyBFcnJvcihcIktleXMgbWlzc2luZ1wiKTtyZXR1cm5cImRlbGV0ZVwiIT09KGU9XCJhZGRcIj09PWUudHlwZXx8XCJwdXRcIj09PWUudHlwZT97Li4uZSxrZXlzOnN9OnsuLi5lfSkudHlwZSYmKGUudmFsdWVzPVsuLi5lLnZhbHVlc10pLGUua2V5cyYmKGUua2V5cz1bLi4uZS5rZXlzXSksZnVuY3Rpb24oZSx0LG4pe3JldHVyblwiYWRkXCI9PT10LnR5cGU/UHJvbWlzZS5yZXNvbHZlKFtdKTplLmdldE1hbnkoe3RyYW5zOnQudHJhbnMsa2V5czpuLGNhY2hlOlwiaW1tdXRhYmxlXCJ9KX0obixlLHMpLnRoZW4oKGw9Pntjb25zdCBjPXMubWFwKCgobixzKT0+e2NvbnN0IGM9bFtzXSxoPXtvbmVycm9yOm51bGwsb25zdWNjZXNzOm51bGx9O2lmKFwiZGVsZXRlXCI9PT1lLnR5cGUpaS5maXJlLmNhbGwoaCxuLGMsdCk7ZWxzZSBpZihcImFkZFwiPT09ZS50eXBlfHx2b2lkIDA9PT1jKXtjb25zdCBpPWEuZmlyZS5jYWxsKGgsbixlLnZhbHVlc1tzXSx0KTtudWxsPT1uJiZudWxsIT1pJiYobj1pLGUua2V5c1tzXT1uLHIub3V0Ym91bmR8fF8oZS52YWx1ZXNbc10sci5rZXlQYXRoLG4pKX1lbHNle2NvbnN0IHI9U24oYyxlLnZhbHVlc1tzXSksaT11LmZpcmUuY2FsbChoLHIsbixjLHQpO2lmKGkpe2NvbnN0IHQ9ZS52YWx1ZXNbc107T2JqZWN0LmtleXMoaSkuZm9yRWFjaCgoZT0+e28odCxlKT90W2VdPWlbZV06Xyh0LGUsaVtlXSl9KSl9fXJldHVybiBofSkpO3JldHVybiBuLm11dGF0ZShlKS50aGVuKCgoe2ZhaWx1cmVzOnQscmVzdWx0czpuLG51bUZhaWx1cmVzOnIsbGFzdFJlc3VsdDppfSk9Pntmb3IobGV0IHI9MDtyPHMubGVuZ3RoOysrcil7Y29uc3QgaT1uP25bcl06c1tyXSxvPWNbcl07bnVsbD09aT9vLm9uZXJyb3ImJm8ub25lcnJvcih0W3JdKTpvLm9uc3VjY2VzcyYmby5vbnN1Y2Nlc3MoXCJwdXRcIj09PWUudHlwZSYmbFtyXT9lLnZhbHVlc1tyXTppKX1yZXR1cm57ZmFpbHVyZXM6dCxyZXN1bHRzOm4sbnVtRmFpbHVyZXM6cixsYXN0UmVzdWx0Oml9fSkpLmNhdGNoKChlPT4oYy5mb3JFYWNoKCh0PT50Lm9uZXJyb3ImJnQub25lcnJvcihlKSkpLFByb21pc2UucmVqZWN0KGUpKSkpfSkpfWZ1bmN0aW9uIGMoZSx0LHMpe3JldHVybiBuLnF1ZXJ5KHt0cmFuczplLHZhbHVlczohMSxxdWVyeTp7aW5kZXg6cixyYW5nZTp0fSxsaW1pdDpzfSkudGhlbigoKHtyZXN1bHQ6bn0pPT5sKHt0eXBlOlwiZGVsZXRlXCIsa2V5czpuLHRyYW5zOmV9KS50aGVuKChyPT5yLm51bUZhaWx1cmVzPjA/UHJvbWlzZS5yZWplY3Qoci5mYWlsdXJlc1swXSk6bi5sZW5ndGg8cz97ZmFpbHVyZXM6W10sbnVtRmFpbHVyZXM6MCxsYXN0UmVzdWx0OnZvaWQgMH06YyhlLHsuLi50LGxvd2VyOm5bbi5sZW5ndGgtMV0sbG93ZXJPcGVuOiEwfSxzKSkpKSl9fX07cmV0dXJuIHN9fSl9O2Z1bmN0aW9uIENuKGUsdCxuKXt0cnl7aWYoIXQpcmV0dXJuIG51bGw7aWYodC5rZXlzLmxlbmd0aDxlLmxlbmd0aClyZXR1cm4gbnVsbDtjb25zdCByPVtdO2ZvcihsZXQgcz0wLGk9MDtzPHQua2V5cy5sZW5ndGgmJmk8ZS5sZW5ndGg7KytzKTA9PT1JdCh0LmtleXNbc10sZVtpXSkmJihyLnB1c2gobj9PKHQudmFsdWVzW3NdKTp0LnZhbHVlc1tzXSksKytpKTtyZXR1cm4gci5sZW5ndGg9PT1lLmxlbmd0aD9yOm51bGx9Y2F0Y2goZSl7cmV0dXJuIG51bGx9fWNvbnN0IGpuPXtzdGFjazpcImRiY29yZVwiLGxldmVsOi0xLGNyZWF0ZTplPT4oe3RhYmxlOnQ9Pntjb25zdCBuPWUudGFibGUodCk7cmV0dXJuey4uLm4sZ2V0TWFueTplPT57aWYoIWUuY2FjaGUpcmV0dXJuIG4uZ2V0TWFueShlKTtjb25zdCB0PUNuKGUua2V5cyxlLnRyYW5zLl9jYWNoZSxcImNsb25lXCI9PT1lLmNhY2hlKTtyZXR1cm4gdD9DZS5yZXNvbHZlKHQpOm4uZ2V0TWFueShlKS50aGVuKCh0PT4oZS50cmFucy5fY2FjaGU9e2tleXM6ZS5rZXlzLHZhbHVlczpcImNsb25lXCI9PT1lLmNhY2hlP08odCk6dH0sdCkpKX0sbXV0YXRlOmU9PihcImFkZFwiIT09ZS50eXBlJiYoZS50cmFucy5fY2FjaGU9bnVsbCksbi5tdXRhdGUoZSkpfX19KX07ZnVuY3Rpb24gRG4oZSl7cmV0dXJuIShcImZyb21cImluIGUpfWNvbnN0IEluPWZ1bmN0aW9uKGUsdCl7aWYoIXRoaXMpe2NvbnN0IHQ9bmV3IEluO3JldHVybiBlJiZcImRcImluIGUmJnIodCxlKSx0fXIodGhpcyxhcmd1bWVudHMubGVuZ3RoP3tkOjEsZnJvbTplLHRvOmFyZ3VtZW50cy5sZW5ndGg+MT90OmV9OntkOjB9KX07ZnVuY3Rpb24gQm4oZSx0LG4pe2NvbnN0IHM9SXQodCxuKTtpZihpc05hTihzKSlyZXR1cm47aWYocz4wKXRocm93IFJhbmdlRXJyb3IoKTtpZihEbihlKSlyZXR1cm4gcihlLHtmcm9tOnQsdG86bixkOjF9KTtjb25zdCBpPWUubCxvPWUucjtpZihJdChuLGUuZnJvbSk8MClyZXR1cm4gaT9CbihpLHQsbik6ZS5sPXtmcm9tOnQsdG86bixkOjEsbDpudWxsLHI6bnVsbH0sTW4oZSk7aWYoSXQodCxlLnRvKT4wKXJldHVybiBvP0JuKG8sdCxuKTplLnI9e2Zyb206dCx0bzpuLGQ6MSxsOm51bGwscjpudWxsfSxNbihlKTtJdCh0LGUuZnJvbSk8MCYmKGUuZnJvbT10LGUubD1udWxsLGUuZD1vP28uZCsxOjEpLEl0KG4sZS50byk+MCYmKGUudG89bixlLnI9bnVsbCxlLmQ9ZS5sP2UubC5kKzE6MSk7Y29uc3QgYT0hZS5yO2kmJiFlLmwmJlRuKGUsaSksbyYmYSYmVG4oZSxvKX1mdW5jdGlvbiBUbihlLHQpe0RuKHQpfHxmdW5jdGlvbiBlKHQse2Zyb206bix0bzpyLGw6cyxyOml9KXtCbih0LG4scikscyYmZSh0LHMpLGkmJmUodCxpKX0oZSx0KX1mdW5jdGlvbiBSbihlLHQpe2NvbnN0IG49Rm4odCk7bGV0IHI9bi5uZXh0KCk7aWYoci5kb25lKXJldHVybiExO2xldCBzPXIudmFsdWU7Y29uc3QgaT1GbihlKTtsZXQgbz1pLm5leHQocy5mcm9tKSxhPW8udmFsdWU7Zm9yKDshci5kb25lJiYhby5kb25lOyl7aWYoSXQoYS5mcm9tLHMudG8pPD0wJiZJdChhLnRvLHMuZnJvbSk+PTApcmV0dXJuITA7SXQocy5mcm9tLGEuZnJvbSk8MD9zPShyPW4ubmV4dChhLmZyb20pKS52YWx1ZTphPShvPWkubmV4dChzLmZyb20pKS52YWx1ZX1yZXR1cm4hMX1mdW5jdGlvbiBGbihlKXtsZXQgdD1EbihlKT9udWxsOntzOjAsbjplfTtyZXR1cm57bmV4dChlKXtjb25zdCBuPWFyZ3VtZW50cy5sZW5ndGg+MDtmb3IoO3Q7KXN3aXRjaCh0LnMpe2Nhc2UgMDppZih0LnM9MSxuKWZvcig7dC5uLmwmJkl0KGUsdC5uLmZyb20pPDA7KXQ9e3VwOnQsbjp0Lm4ubCxzOjF9O2Vsc2UgZm9yKDt0Lm4ubDspdD17dXA6dCxuOnQubi5sLHM6MX07Y2FzZSAxOmlmKHQucz0yLCFufHxJdChlLHQubi50byk8PTApcmV0dXJue3ZhbHVlOnQubixkb25lOiExfTtjYXNlIDI6aWYodC5uLnIpe3Qucz0zLHQ9e3VwOnQsbjp0Lm4ucixzOjB9O2NvbnRpbnVlfWNhc2UgMzp0PXQudXB9cmV0dXJue2RvbmU6ITB9fX19ZnVuY3Rpb24gTW4oZSl7dmFyIHQsbjtjb25zdCByPSgobnVsbD09PSh0PWUucil8fHZvaWQgMD09PXQ/dm9pZCAwOnQuZCl8fDApLSgobnVsbD09PShuPWUubCl8fHZvaWQgMD09PW4/dm9pZCAwOm4uZCl8fDApLHM9cj4xP1wiclwiOnI8LTE/XCJsXCI6XCJcIjtpZihzKXtjb25zdCB0PVwiclwiPT09cz9cImxcIjpcInJcIixuPXsuLi5lfSxyPWVbc107ZS5mcm9tPXIuZnJvbSxlLnRvPXIudG8sZVtzXT1yW3NdLG5bc109clt0XSxlW3RdPW4sbi5kPU5uKG4pfWUuZD1ObihlKX1mdW5jdGlvbiBObih7cjplLGw6dH0pe3JldHVybihlP3Q/TWF0aC5tYXgoZS5kLHQuZCk6ZS5kOnQ/dC5kOjApKzF9YShJbi5wcm90b3R5cGUse2FkZChlKXtyZXR1cm4gVG4odGhpcyxlKSx0aGlzfSxhZGRLZXkoZSl7cmV0dXJuIEJuKHRoaXMsZSxlKSx0aGlzfSxhZGRLZXlzKGUpe3JldHVybiBlLmZvckVhY2goKGU9PkJuKHRoaXMsZSxlKSkpLHRoaXN9LFtqXSgpe3JldHVybiBGbih0aGlzKX19KTtjb25zdCBxbj17c3RhY2s6XCJkYmNvcmVcIixsZXZlbDowLGNyZWF0ZTplPT57Y29uc3Qgcj1lLnNjaGVtYS5uYW1lLHM9bmV3IEluKGUuTUlOX0tFWSxlLk1BWF9LRVkpO3JldHVybnsuLi5lLHRhYmxlOmk9Pntjb25zdCBvPWUudGFibGUoaSkse3NjaGVtYTphfT1vLHtwcmltYXJ5S2V5OnV9PWEse2V4dHJhY3RLZXk6bCxvdXRib3VuZDpjfT11LGg9ey4uLm8sbXV0YXRlOmU9Pntjb25zdCB0PWUudHJhbnMsdT10Lm11dGF0ZWRQYXJ0c3x8KHQubXV0YXRlZFBhcnRzPXt9KSxsPWU9Pntjb25zdCB0PWBpZGI6Ly8ke3J9LyR7aX0vJHtlfWA7cmV0dXJuIHVbdF18fCh1W3RdPW5ldyBJbil9LGM9bChcIlwiKSxoPWwoXCI6ZGVsc1wiKSx7dHlwZTpkfT1lO2xldFtmLHBdPVwiZGVsZXRlUmFuZ2VcIj09PWUudHlwZT9bZS5yYW5nZV06XCJkZWxldGVcIj09PWUudHlwZT9bZS5rZXlzXTplLnZhbHVlcy5sZW5ndGg8NTA/W1tdLGUudmFsdWVzXTpbXTtjb25zdCB5PWUudHJhbnMuX2NhY2hlO3JldHVybiBvLm11dGF0ZShlKS50aGVuKChlPT57aWYobihmKSl7XCJkZWxldGVcIiE9PWQmJihmPWUucmVzdWx0cyksYy5hZGRLZXlzKGYpO2NvbnN0IHQ9Q24oZix5KTt0fHxcImFkZFwiPT09ZHx8aC5hZGRLZXlzKGYpLCh0fHxwKSYmZnVuY3Rpb24oZSx0LHIscyl7ZnVuY3Rpb24gaSh0KXtjb25zdCBpPWUodC5uYW1lfHxcIlwiKTtmdW5jdGlvbiBvKGUpe3JldHVybiBudWxsIT1lP3QuZXh0cmFjdEtleShlKTpudWxsfWNvbnN0IGE9ZT0+dC5tdWx0aUVudHJ5JiZuKGUpP2UuZm9yRWFjaCgoZT0+aS5hZGRLZXkoZSkpKTppLmFkZEtleShlKTsocnx8cykuZm9yRWFjaCgoKGUsdCk9Pntjb25zdCBuPXImJm8oclt0XSksaT1zJiZvKHNbdF0pOzAhPT1JdChuLGkpJiYobnVsbCE9biYmYShuKSxudWxsIT1pJiZhKGkpKX0pKX10LmluZGV4ZXMuZm9yRWFjaChpKX0obCxhLHQscCl9ZWxzZSBpZihmKXtjb25zdCBlPXtmcm9tOmYubG93ZXIsdG86Zi51cHBlcn07aC5hZGQoZSksYy5hZGQoZSl9ZWxzZSBjLmFkZChzKSxoLmFkZChzKSxhLmluZGV4ZXMuZm9yRWFjaCgoZT0+bChlLm5hbWUpLmFkZChzKSkpO3JldHVybiBlfSkpfX0sZD0oe3F1ZXJ5OntpbmRleDp0LHJhbmdlOm59fSk9Pnt2YXIgcixzO3JldHVyblt0LG5ldyBJbihudWxsIT09KHI9bi5sb3dlcikmJnZvaWQgMCE9PXI/cjplLk1JTl9LRVksbnVsbCE9PShzPW4udXBwZXIpJiZ2b2lkIDAhPT1zP3M6ZS5NQVhfS0VZKV19LGY9e2dldDplPT5bdSxuZXcgSW4oZS5rZXkpXSxnZXRNYW55OmU9Plt1LChuZXcgSW4pLmFkZEtleXMoZS5rZXlzKV0sY291bnQ6ZCxxdWVyeTpkLG9wZW5DdXJzb3I6ZH07cmV0dXJuIHQoZikuZm9yRWFjaCgoZT0+e2hbZV09ZnVuY3Rpb24odCl7Y29uc3R7c3Vic2NyOm59PUtlO2lmKG4pe2NvbnN0IGE9ZT0+e2NvbnN0IHQ9YGlkYjovLyR7cn0vJHtpfS8ke2V9YDtyZXR1cm4gblt0XXx8KG5bdF09bmV3IEluKX0sdT1hKFwiXCIpLGg9YShcIjpkZWxzXCIpLFtkLHBdPWZbZV0odCk7aWYoYShkLm5hbWV8fFwiXCIpLmFkZChwKSwhZC5pc1ByaW1hcnlLZXkpe2lmKFwiY291bnRcIiE9PWUpe2NvbnN0IG49XCJxdWVyeVwiPT09ZSYmYyYmdC52YWx1ZXMmJm8ucXVlcnkoey4uLnQsdmFsdWVzOiExfSk7cmV0dXJuIG9bZV0uYXBwbHkodGhpcyxhcmd1bWVudHMpLnRoZW4oKHI9PntpZihcInF1ZXJ5XCI9PT1lKXtpZihjJiZ0LnZhbHVlcylyZXR1cm4gbi50aGVuKCgoe3Jlc3VsdDplfSk9Pih1LmFkZEtleXMoZSkscikpKTtjb25zdCBlPXQudmFsdWVzP3IucmVzdWx0Lm1hcChsKTpyLnJlc3VsdDt0LnZhbHVlcz91LmFkZEtleXMoZSk6aC5hZGRLZXlzKGUpfWVsc2UgaWYoXCJvcGVuQ3Vyc29yXCI9PT1lKXtjb25zdCBlPXIsbj10LnZhbHVlcztyZXR1cm4gZSYmT2JqZWN0LmNyZWF0ZShlLHtrZXk6e2dldDooKT0+KGguYWRkS2V5KGUucHJpbWFyeUtleSksZS5rZXkpfSxwcmltYXJ5S2V5OntnZXQoKXtjb25zdCB0PWUucHJpbWFyeUtleTtyZXR1cm4gaC5hZGRLZXkodCksdH19LHZhbHVlOntnZXQ6KCk9PihuJiZ1LmFkZEtleShlLnByaW1hcnlLZXkpLGUudmFsdWUpfX0pfXJldHVybiByfSkpfWguYWRkKHMpfX1yZXR1cm4gb1tlXS5hcHBseSh0aGlzLGFyZ3VtZW50cyl9fSkpLGh9fX19O2NsYXNzICRue2NvbnN0cnVjdG9yKGUsdCl7dGhpcy5fbWlkZGxld2FyZXM9e30sdGhpcy52ZXJubz0wO2NvbnN0IG49JG4uZGVwZW5kZW5jaWVzO3RoaXMuX29wdGlvbnM9dD17YWRkb25zOiRuLmFkZG9ucyxhdXRvT3BlbjohMCxpbmRleGVkREI6bi5pbmRleGVkREIsSURCS2V5UmFuZ2U6bi5JREJLZXlSYW5nZSwuLi50fSx0aGlzLl9kZXBzPXtpbmRleGVkREI6dC5pbmRleGVkREIsSURCS2V5UmFuZ2U6dC5JREJLZXlSYW5nZX07Y29uc3R7YWRkb25zOnJ9PXQ7dGhpcy5fZGJTY2hlbWE9e30sdGhpcy5fdmVyc2lvbnM9W10sdGhpcy5fc3RvcmVOYW1lcz1bXSx0aGlzLl9hbGxUYWJsZXM9e30sdGhpcy5pZGJkYj1udWxsLHRoaXMuX25vdmlwPXRoaXM7Y29uc3Qgcz17ZGJPcGVuRXJyb3I6bnVsbCxpc0JlaW5nT3BlbmVkOiExLG9uUmVhZHlCZWluZ0ZpcmVkOm51bGwsb3BlbkNvbXBsZXRlOiExLGRiUmVhZHlSZXNvbHZlOmVlLGRiUmVhZHlQcm9taXNlOm51bGwsY2FuY2VsT3BlbjplZSxvcGVuQ2FuY2VsbGVyOm51bGwsYXV0b1NjaGVtYTohMCxQUjEzOThfbWF4TG9vcDozfTt2YXIgaTtzLmRiUmVhZHlQcm9taXNlPW5ldyBDZSgoZT0+e3MuZGJSZWFkeVJlc29sdmU9ZX0pKSxzLm9wZW5DYW5jZWxsZXI9bmV3IENlKCgoZSx0KT0+e3MuY2FuY2VsT3Blbj10fSkpLHRoaXMuX3N0YXRlPXMsdGhpcy5uYW1lPWUsdGhpcy5vbj1FdCh0aGlzLFwicG9wdWxhdGVcIixcImJsb2NrZWRcIixcInZlcnNpb25jaGFuZ2VcIixcImNsb3NlXCIse3JlYWR5Olt1ZSxlZV19KSx0aGlzLm9uLnJlYWR5LnN1YnNjcmliZT15KHRoaXMub24ucmVhZHkuc3Vic2NyaWJlLChlPT4odCxuKT0+eyRuLnZpcCgoKCk9Pntjb25zdCByPXRoaXMuX3N0YXRlO2lmKHIub3BlbkNvbXBsZXRlKXIuZGJPcGVuRXJyb3J8fENlLnJlc29sdmUoKS50aGVuKHQpLG4mJmUodCk7ZWxzZSBpZihyLm9uUmVhZHlCZWluZ0ZpcmVkKXIub25SZWFkeUJlaW5nRmlyZWQucHVzaCh0KSxuJiZlKHQpO2Vsc2V7ZSh0KTtjb25zdCByPXRoaXM7bnx8ZSgoZnVuY3Rpb24gZSgpe3Iub24ucmVhZHkudW5zdWJzY3JpYmUodCksci5vbi5yZWFkeS51bnN1YnNjcmliZShlKX0pKX19KSl9KSksdGhpcy5Db2xsZWN0aW9uPShpPXRoaXMsUHQoUnQucHJvdG90eXBlLChmdW5jdGlvbihlLHQpe3RoaXMuZGI9aTtsZXQgbj13dCxyPW51bGw7aWYodCl0cnl7bj10KCl9Y2F0Y2goZSl7cj1lfWNvbnN0IHM9ZS5fY3R4LG89cy50YWJsZSxhPW8uaG9vay5yZWFkaW5nLmZpcmU7dGhpcy5fY3R4PXt0YWJsZTpvLGluZGV4OnMuaW5kZXgsaXNQcmltS2V5OiFzLmluZGV4fHxvLnNjaGVtYS5wcmltS2V5LmtleVBhdGgmJnMuaW5kZXg9PT1vLnNjaGVtYS5wcmltS2V5Lm5hbWUscmFuZ2U6bixrZXlzT25seTohMSxkaXI6XCJuZXh0XCIsdW5pcXVlOlwiXCIsYWxnb3JpdGhtOm51bGwsZmlsdGVyOm51bGwscmVwbGF5RmlsdGVyOm51bGwsanVzdExpbWl0OiEwLGlzTWF0Y2g6bnVsbCxvZmZzZXQ6MCxsaW1pdDoxLzAsZXJyb3I6cixvcjpzLm9yLHZhbHVlTWFwcGVyOmEhPT10ZT9hOm51bGx9fSkpKSx0aGlzLlRhYmxlPWZ1bmN0aW9uKGUpe3JldHVybiBQdChrdC5wcm90b3R5cGUsKGZ1bmN0aW9uKHQsbixyKXt0aGlzLmRiPWUsdGhpcy5fdHg9cix0aGlzLm5hbWU9dCx0aGlzLnNjaGVtYT1uLHRoaXMuaG9vaz1lLl9hbGxUYWJsZXNbdF0/ZS5fYWxsVGFibGVzW3RdLmhvb2s6RXQobnVsbCx7Y3JlYXRpbmc6W3NlLGVlXSxyZWFkaW5nOltuZSx0ZV0sdXBkYXRpbmc6W29lLGVlXSxkZWxldGluZzpbaWUsZWVdfSl9KSl9KHRoaXMpLHRoaXMuVHJhbnNhY3Rpb249ZnVuY3Rpb24oZSl7cmV0dXJuIFB0KFF0LnByb3RvdHlwZSwoZnVuY3Rpb24odCxuLHIscyxpKXt0aGlzLmRiPWUsdGhpcy5tb2RlPXQsdGhpcy5zdG9yZU5hbWVzPW4sdGhpcy5zY2hlbWE9cix0aGlzLmNocm9tZVRyYW5zYWN0aW9uRHVyYWJpbGl0eT1zLHRoaXMuaWRidHJhbnM9bnVsbCx0aGlzLm9uPUV0KHRoaXMsXCJjb21wbGV0ZVwiLFwiZXJyb3JcIixcImFib3J0XCIpLHRoaXMucGFyZW50PWl8fG51bGwsdGhpcy5hY3RpdmU9ITAsdGhpcy5fcmVjdWxvY2s9MCx0aGlzLl9ibG9ja2VkRnVuY3M9W10sdGhpcy5fcmVzb2x2ZT1udWxsLHRoaXMuX3JlamVjdD1udWxsLHRoaXMuX3dhaXRpbmdGb3I9bnVsbCx0aGlzLl93YWl0aW5nUXVldWU9bnVsbCx0aGlzLl9zcGluQ291bnQ9MCx0aGlzLl9jb21wbGV0aW9uPW5ldyBDZSgoKGUsdCk9Pnt0aGlzLl9yZXNvbHZlPWUsdGhpcy5fcmVqZWN0PXR9KSksdGhpcy5fY29tcGxldGlvbi50aGVuKCgoKT0+e3RoaXMuYWN0aXZlPSExLHRoaXMub24uY29tcGxldGUuZmlyZSgpfSksKGU9Pnt2YXIgdD10aGlzLmFjdGl2ZTtyZXR1cm4gdGhpcy5hY3RpdmU9ITEsdGhpcy5vbi5lcnJvci5maXJlKGUpLHRoaXMucGFyZW50P3RoaXMucGFyZW50Ll9yZWplY3QoZSk6dCYmdGhpcy5pZGJ0cmFucyYmdGhpcy5pZGJ0cmFucy5hYm9ydCgpLGh0KGUpfSkpfSkpfSh0aGlzKSx0aGlzLlZlcnNpb249ZnVuY3Rpb24oZSl7cmV0dXJuIFB0KHZuLnByb3RvdHlwZSwoZnVuY3Rpb24odCl7dGhpcy5kYj1lLHRoaXMuX2NmZz17dmVyc2lvbjp0LHN0b3Jlc1NvdXJjZTpudWxsLGRic2NoZW1hOnt9LHRhYmxlczp7fSxjb250ZW50VXBncmFkZTpudWxsfX0pKX0odGhpcyksdGhpcy5XaGVyZUNsYXVzZT1mdW5jdGlvbihlKXtyZXR1cm4gUHQoWXQucHJvdG90eXBlLChmdW5jdGlvbih0LG4scil7dGhpcy5kYj1lLHRoaXMuX2N0eD17dGFibGU6dCxpbmRleDpcIjppZFwiPT09bj9udWxsOm4sb3I6cn07Y29uc3Qgcz1lLl9kZXBzLmluZGV4ZWREQjtpZighcyl0aHJvdyBuZXcgWC5NaXNzaW5nQVBJO3RoaXMuX2NtcD10aGlzLl9hc2NlbmRpbmc9cy5jbXAuYmluZChzKSx0aGlzLl9kZXNjZW5kaW5nPShlLHQpPT5zLmNtcCh0LGUpLHRoaXMuX21heD0oZSx0KT0+cy5jbXAoZSx0KT4wP2U6dCx0aGlzLl9taW49KGUsdCk9PnMuY21wKGUsdCk8MD9lOnQsdGhpcy5fSURCS2V5UmFuZ2U9ZS5fZGVwcy5JREJLZXlSYW5nZX0pKX0odGhpcyksdGhpcy5vbihcInZlcnNpb25jaGFuZ2VcIiwoZT0+e2UubmV3VmVyc2lvbj4wP2NvbnNvbGUud2FybihgQW5vdGhlciBjb25uZWN0aW9uIHdhbnRzIHRvIHVwZ3JhZGUgZGF0YWJhc2UgJyR7dGhpcy5uYW1lfScuIENsb3NpbmcgZGIgbm93IHRvIHJlc3VtZSB0aGUgdXBncmFkZS5gKTpjb25zb2xlLndhcm4oYEFub3RoZXIgY29ubmVjdGlvbiB3YW50cyB0byBkZWxldGUgZGF0YWJhc2UgJyR7dGhpcy5uYW1lfScuIENsb3NpbmcgZGIgbm93IHRvIHJlc3VtZSB0aGUgZGVsZXRlIHJlcXVlc3QuYCksdGhpcy5jbG9zZSgpfSkpLHRoaXMub24oXCJibG9ja2VkXCIsKGU9PnshZS5uZXdWZXJzaW9ufHxlLm5ld1ZlcnNpb248ZS5vbGRWZXJzaW9uP2NvbnNvbGUud2FybihgRGV4aWUuZGVsZXRlKCcke3RoaXMubmFtZX0nKSB3YXMgYmxvY2tlZGApOmNvbnNvbGUud2FybihgVXBncmFkZSAnJHt0aGlzLm5hbWV9JyBibG9ja2VkIGJ5IG90aGVyIGNvbm5lY3Rpb24gaG9sZGluZyB2ZXJzaW9uICR7ZS5vbGRWZXJzaW9uLzEwfWApfSkpLHRoaXMuX21heEtleT1lbih0LklEQktleVJhbmdlKSx0aGlzLl9jcmVhdGVUcmFuc2FjdGlvbj0oZSx0LG4scik9Pm5ldyB0aGlzLlRyYW5zYWN0aW9uKGUsdCxuLHRoaXMuX29wdGlvbnMuY2hyb21lVHJhbnNhY3Rpb25EdXJhYmlsaXR5LHIpLHRoaXMuX2ZpcmVPbkJsb2NrZWQ9ZT0+e3RoaXMub24oXCJibG9ja2VkXCIpLmZpcmUoZSkseXQuZmlsdGVyKChlPT5lLm5hbWU9PT10aGlzLm5hbWUmJmUhPT10aGlzJiYhZS5fc3RhdGUudmNGaXJlZCkpLm1hcCgodD0+dC5vbihcInZlcnNpb25jaGFuZ2VcIikuZmlyZShlKSkpfSx0aGlzLnVzZShPbiksdGhpcy51c2UoQW4pLHRoaXMudXNlKHFuKSx0aGlzLnVzZShqbiksdGhpcy52aXA9T2JqZWN0LmNyZWF0ZSh0aGlzLHtfdmlwOnt2YWx1ZTohMH19KSxyLmZvckVhY2goKGU9PmUodGhpcykpKX12ZXJzaW9uKGUpe2lmKGlzTmFOKGUpfHxlPC4xKXRocm93IG5ldyBYLlR5cGUoXCJHaXZlbiB2ZXJzaW9uIGlzIG5vdCBhIHBvc2l0aXZlIG51bWJlclwiKTtpZihlPU1hdGgucm91bmQoMTAqZSkvMTAsdGhpcy5pZGJkYnx8dGhpcy5fc3RhdGUuaXNCZWluZ09wZW5lZCl0aHJvdyBuZXcgWC5TY2hlbWEoXCJDYW5ub3QgYWRkIHZlcnNpb24gd2hlbiBkYXRhYmFzZSBpcyBvcGVuXCIpO3RoaXMudmVybm89TWF0aC5tYXgodGhpcy52ZXJubyxlKTtjb25zdCB0PXRoaXMuX3ZlcnNpb25zO3ZhciBuPXQuZmlsdGVyKCh0PT50Ll9jZmcudmVyc2lvbj09PWUpKVswXTtyZXR1cm4gbnx8KG49bmV3IHRoaXMuVmVyc2lvbihlKSx0LnB1c2gobiksdC5zb3J0KGNuKSxuLnN0b3Jlcyh7fSksdGhpcy5fc3RhdGUuYXV0b1NjaGVtYT0hMSxuKX1fd2hlblJlYWR5KGUpe3JldHVybiB0aGlzLmlkYmRiJiYodGhpcy5fc3RhdGUub3BlbkNvbXBsZXRlfHxLZS5sZXRUaHJvdWdofHx0aGlzLl92aXApP2UoKTpuZXcgQ2UoKChlLHQpPT57aWYodGhpcy5fc3RhdGUub3BlbkNvbXBsZXRlKXJldHVybiB0KG5ldyBYLkRhdGFiYXNlQ2xvc2VkKHRoaXMuX3N0YXRlLmRiT3BlbkVycm9yKSk7aWYoIXRoaXMuX3N0YXRlLmlzQmVpbmdPcGVuZWQpe2lmKCF0aGlzLl9vcHRpb25zLmF1dG9PcGVuKXJldHVybiB2b2lkIHQobmV3IFguRGF0YWJhc2VDbG9zZWQpO3RoaXMub3BlbigpLmNhdGNoKGVlKX10aGlzLl9zdGF0ZS5kYlJlYWR5UHJvbWlzZS50aGVuKGUsdCl9KSkudGhlbihlKX11c2Uoe3N0YWNrOmUsY3JlYXRlOnQsbGV2ZWw6bixuYW1lOnJ9KXtyJiZ0aGlzLnVudXNlKHtzdGFjazplLG5hbWU6cn0pO2NvbnN0IHM9dGhpcy5fbWlkZGxld2FyZXNbZV18fCh0aGlzLl9taWRkbGV3YXJlc1tlXT1bXSk7cmV0dXJuIHMucHVzaCh7c3RhY2s6ZSxjcmVhdGU6dCxsZXZlbDpudWxsPT1uPzEwOm4sbmFtZTpyfSkscy5zb3J0KCgoZSx0KT0+ZS5sZXZlbC10LmxldmVsKSksdGhpc311bnVzZSh7c3RhY2s6ZSxuYW1lOnQsY3JlYXRlOm59KXtyZXR1cm4gZSYmdGhpcy5fbWlkZGxld2FyZXNbZV0mJih0aGlzLl9taWRkbGV3YXJlc1tlXT10aGlzLl9taWRkbGV3YXJlc1tlXS5maWx0ZXIoKGU9Pm4/ZS5jcmVhdGUhPT1uOiEhdCYmZS5uYW1lIT09dCkpKSx0aGlzfW9wZW4oKXtyZXR1cm4geG4odGhpcyl9X2Nsb3NlKCl7Y29uc3QgZT10aGlzLl9zdGF0ZSx0PXl0LmluZGV4T2YodGhpcyk7aWYodD49MCYmeXQuc3BsaWNlKHQsMSksdGhpcy5pZGJkYil7dHJ5e3RoaXMuaWRiZGIuY2xvc2UoKX1jYXRjaChlKXt9dGhpcy5fbm92aXAuaWRiZGI9bnVsbH1lLmRiUmVhZHlQcm9taXNlPW5ldyBDZSgodD0+e2UuZGJSZWFkeVJlc29sdmU9dH0pKSxlLm9wZW5DYW5jZWxsZXI9bmV3IENlKCgodCxuKT0+e2UuY2FuY2VsT3Blbj1ufSkpfWNsb3NlKCl7dGhpcy5fY2xvc2UoKTtjb25zdCBlPXRoaXMuX3N0YXRlO3RoaXMuX29wdGlvbnMuYXV0b09wZW49ITEsZS5kYk9wZW5FcnJvcj1uZXcgWC5EYXRhYmFzZUNsb3NlZCxlLmlzQmVpbmdPcGVuZWQmJmUuY2FuY2VsT3BlbihlLmRiT3BlbkVycm9yKX1kZWxldGUoKXtjb25zdCBlPWFyZ3VtZW50cy5sZW5ndGg+MCx0PXRoaXMuX3N0YXRlO3JldHVybiBuZXcgQ2UoKChuLHIpPT57Y29uc3Qgcz0oKT0+e3RoaXMuY2xvc2UoKTt2YXIgZT10aGlzLl9kZXBzLmluZGV4ZWREQi5kZWxldGVEYXRhYmFzZSh0aGlzLm5hbWUpO2Uub25zdWNjZXNzPVdlKCgoKT0+eyFmdW5jdGlvbih7aW5kZXhlZERCOmUsSURCS2V5UmFuZ2U6dH0sbil7IWJuKGUpJiZcIl9fZGJuYW1lc1wiIT09biYmZ24oZSx0KS5kZWxldGUobikuY2F0Y2goZWUpfSh0aGlzLl9kZXBzLHRoaXMubmFtZSksbigpfSkpLGUub25lcnJvcj16dChyKSxlLm9uYmxvY2tlZD10aGlzLl9maXJlT25CbG9ja2VkfTtpZihlKXRocm93IG5ldyBYLkludmFsaWRBcmd1bWVudChcIkFyZ3VtZW50cyBub3QgYWxsb3dlZCBpbiBkYi5kZWxldGUoKVwiKTt0LmlzQmVpbmdPcGVuZWQ/dC5kYlJlYWR5UHJvbWlzZS50aGVuKHMpOnMoKX0pKX1iYWNrZW5kREIoKXtyZXR1cm4gdGhpcy5pZGJkYn1pc09wZW4oKXtyZXR1cm4gbnVsbCE9PXRoaXMuaWRiZGJ9aGFzQmVlbkNsb3NlZCgpe2NvbnN0IGU9dGhpcy5fc3RhdGUuZGJPcGVuRXJyb3I7cmV0dXJuIGUmJlwiRGF0YWJhc2VDbG9zZWRcIj09PWUubmFtZX1oYXNGYWlsZWQoKXtyZXR1cm4gbnVsbCE9PXRoaXMuX3N0YXRlLmRiT3BlbkVycm9yfWR5bmFtaWNhbGx5T3BlbmVkKCl7cmV0dXJuIHRoaXMuX3N0YXRlLmF1dG9TY2hlbWF9Z2V0IHRhYmxlcygpe3JldHVybiB0KHRoaXMuX2FsbFRhYmxlcykubWFwKChlPT50aGlzLl9hbGxUYWJsZXNbZV0pKX10cmFuc2FjdGlvbigpe2NvbnN0IGU9RW4uYXBwbHkodGhpcyxhcmd1bWVudHMpO3JldHVybiB0aGlzLl90cmFuc2FjdGlvbi5hcHBseSh0aGlzLGUpfV90cmFuc2FjdGlvbihlLHQsbil7bGV0IHI9S2UudHJhbnM7ciYmci5kYj09PXRoaXMmJi0xPT09ZS5pbmRleE9mKFwiIVwiKXx8KHI9bnVsbCk7Y29uc3Qgcz0tMSE9PWUuaW5kZXhPZihcIj9cIik7bGV0IGksbztlPWUucmVwbGFjZShcIiFcIixcIlwiKS5yZXBsYWNlKFwiP1wiLFwiXCIpO3RyeXtpZihvPXQubWFwKChlPT57dmFyIHQ9ZSBpbnN0YW5jZW9mIHRoaXMuVGFibGU/ZS5uYW1lOmU7aWYoXCJzdHJpbmdcIiE9dHlwZW9mIHQpdGhyb3cgbmV3IFR5cGVFcnJvcihcIkludmFsaWQgdGFibGUgYXJndW1lbnQgdG8gRGV4aWUudHJhbnNhY3Rpb24oKS4gT25seSBUYWJsZSBvciBTdHJpbmcgYXJlIGFsbG93ZWRcIik7cmV0dXJuIHR9KSksXCJyXCI9PWV8fFwicmVhZG9ubHlcIj09PWUpaT1cInJlYWRvbmx5XCI7ZWxzZXtpZihcInJ3XCIhPWUmJlwicmVhZHdyaXRlXCIhPWUpdGhyb3cgbmV3IFguSW52YWxpZEFyZ3VtZW50KFwiSW52YWxpZCB0cmFuc2FjdGlvbiBtb2RlOiBcIitlKTtpPVwicmVhZHdyaXRlXCJ9aWYocil7aWYoXCJyZWFkb25seVwiPT09ci5tb2RlJiZcInJlYWR3cml0ZVwiPT09aSl7aWYoIXMpdGhyb3cgbmV3IFguU3ViVHJhbnNhY3Rpb24oXCJDYW5ub3QgZW50ZXIgYSBzdWItdHJhbnNhY3Rpb24gd2l0aCBSRUFEV1JJVEUgbW9kZSB3aGVuIHBhcmVudCB0cmFuc2FjdGlvbiBpcyBSRUFET05MWVwiKTtyPW51bGx9ciYmby5mb3JFYWNoKChlPT57aWYociYmLTE9PT1yLnN0b3JlTmFtZXMuaW5kZXhPZihlKSl7aWYoIXMpdGhyb3cgbmV3IFguU3ViVHJhbnNhY3Rpb24oXCJUYWJsZSBcIitlK1wiIG5vdCBpbmNsdWRlZCBpbiBwYXJlbnQgdHJhbnNhY3Rpb24uXCIpO3I9bnVsbH19KSkscyYmciYmIXIuYWN0aXZlJiYocj1udWxsKX19Y2F0Y2goZSl7cmV0dXJuIHI/ci5fcHJvbWlzZShudWxsLCgodCxuKT0+e24oZSl9KSk6aHQoZSl9Y29uc3QgYT1Qbi5iaW5kKG51bGwsdGhpcyxpLG8scixuKTtyZXR1cm4gcj9yLl9wcm9taXNlKGksYSxcImxvY2tcIik6S2UudHJhbnM/b3QoS2UudHJhbnNsZXNzLCgoKT0+dGhpcy5fd2hlblJlYWR5KGEpKSk6dGhpcy5fd2hlblJlYWR5KGEpfXRhYmxlKGUpe2lmKCFvKHRoaXMuX2FsbFRhYmxlcyxlKSl0aHJvdyBuZXcgWC5JbnZhbGlkVGFibGUoYFRhYmxlICR7ZX0gZG9lcyBub3QgZXhpc3RgKTtyZXR1cm4gdGhpcy5fYWxsVGFibGVzW2VdfX1jb25zdCBVbj1cInVuZGVmaW5lZFwiIT10eXBlb2YgU3ltYm9sJiZcIm9ic2VydmFibGVcImluIFN5bWJvbD9TeW1ib2wub2JzZXJ2YWJsZTpcIkBAb2JzZXJ2YWJsZVwiO2NsYXNzIExue2NvbnN0cnVjdG9yKGUpe3RoaXMuX3N1YnNjcmliZT1lfXN1YnNjcmliZShlLHQsbil7cmV0dXJuIHRoaXMuX3N1YnNjcmliZShlJiZcImZ1bmN0aW9uXCIhPXR5cGVvZiBlP2U6e25leHQ6ZSxlcnJvcjp0LGNvbXBsZXRlOm59KX1bVW5dKCl7cmV0dXJuIHRoaXN9fWZ1bmN0aW9uIFZuKGUsbil7cmV0dXJuIHQobikuZm9yRWFjaCgodD0+e1RuKGVbdF18fChlW3RdPW5ldyBJbiksblt0XSl9KSksZX1mdW5jdGlvbiBXbihlKXtyZXR1cm4gbmV3IExuKChuPT57Y29uc3Qgcj1UKGUpO2xldCBzPSExLGk9e30sbz17fTtjb25zdCBhPXtnZXQgY2xvc2VkKCl7cmV0dXJuIHN9LHVuc3Vic2NyaWJlOigpPT57cz0hMCxIdC5zdG9yYWdlbXV0YXRlZC51bnN1YnNjcmliZShoKX19O24uc3RhcnQmJm4uc3RhcnQoYSk7bGV0IHU9ITEsbD0hMTtmdW5jdGlvbiBjKCl7cmV0dXJuIHQobykuc29tZSgoZT0+aVtlXSYmUm4oaVtlXSxvW2VdKSkpfWNvbnN0IGg9ZT0+e1ZuKGksZSksYygpJiZkKCl9LGQ9KCk9PntpZih1fHxzKXJldHVybjtpPXt9O2NvbnN0IHQ9e30sZj1mdW5jdGlvbih0KXtyJiZaZSgpO2NvbnN0IG49KCk9PkplKGUse3N1YnNjcjp0LHRyYW5zOm51bGx9KSxzPUtlLnRyYW5zP290KEtlLnRyYW5zbGVzcyxuKTpuKCk7cmV0dXJuIHImJnMudGhlbihldCxldCksc30odCk7bHx8KEh0KFwic3RvcmFnZW11dGF0ZWRcIixoKSxsPSEwKSx1PSEwLFByb21pc2UucmVzb2x2ZShmKS50aGVuKChlPT57dT0hMSxzfHwoYygpP2QoKTooaT17fSxvPXQsbi5uZXh0JiZuLm5leHQoZSkpKX0pLChlPT57dT0hMSxuLmVycm9yJiZuLmVycm9yKGUpLGEudW5zdWJzY3JpYmUoKX0pKX07cmV0dXJuIGQoKSxhfSkpfWxldCBZbjt0cnl7WW49e2luZGV4ZWREQjplLmluZGV4ZWREQnx8ZS5tb3pJbmRleGVkREJ8fGUud2Via2l0SW5kZXhlZERCfHxlLm1zSW5kZXhlZERCLElEQktleVJhbmdlOmUuSURCS2V5UmFuZ2V8fGUud2Via2l0SURCS2V5UmFuZ2V9fWNhdGNoKGUpe1luPXtpbmRleGVkREI6bnVsbCxJREJLZXlSYW5nZTpudWxsfX1jb25zdCB6bj0kbjtmdW5jdGlvbiBHbihlKXtsZXQgdD1Ibjt0cnl7SG49ITAsSHQuc3RvcmFnZW11dGF0ZWQuZmlyZShlKX1maW5hbGx5e0huPXR9fWEoem4sey4uLlosZGVsZXRlOmU9Pm5ldyB6bihlLHthZGRvbnM6W119KS5kZWxldGUoKSxleGlzdHM6ZT0+bmV3IHpuKGUse2FkZG9uczpbXX0pLm9wZW4oKS50aGVuKChlPT4oZS5jbG9zZSgpLCEwKSkpLmNhdGNoKFwiTm9TdWNoRGF0YWJhc2VFcnJvclwiLCgoKT0+ITEpKSxnZXREYXRhYmFzZU5hbWVzKGUpe3RyeXtyZXR1cm4gZnVuY3Rpb24oe2luZGV4ZWREQjplLElEQktleVJhbmdlOnR9KXtyZXR1cm4gYm4oZSk/UHJvbWlzZS5yZXNvbHZlKGUuZGF0YWJhc2VzKCkpLnRoZW4oKGU9PmUubWFwKChlPT5lLm5hbWUpKS5maWx0ZXIoKGU9PlwiX19kYm5hbWVzXCIhPT1lKSkpKTpnbihlLHQpLnRvQ29sbGVjdGlvbigpLnByaW1hcnlLZXlzKCl9KHpuLmRlcGVuZGVuY2llcykudGhlbihlKX1jYXRjaChlKXtyZXR1cm4gaHQobmV3IFguTWlzc2luZ0FQSSl9fSxkZWZpbmVDbGFzczooKT0+ZnVuY3Rpb24oZSl7cih0aGlzLGUpfSxpZ25vcmVUcmFuc2FjdGlvbjplPT5LZS50cmFucz9vdChLZS50cmFuc2xlc3MsZSk6ZSgpLHZpcDpfbixhc3luYzpmdW5jdGlvbihlKXtyZXR1cm4gZnVuY3Rpb24oKXt0cnl7dmFyIHQ9a24oZS5hcHBseSh0aGlzLGFyZ3VtZW50cykpO3JldHVybiB0JiZcImZ1bmN0aW9uXCI9PXR5cGVvZiB0LnRoZW4/dDpDZS5yZXNvbHZlKHQpfWNhdGNoKGUpe3JldHVybiBodChlKX19fSxzcGF3bjpmdW5jdGlvbihlLHQsbil7dHJ5e3ZhciByPWtuKGUuYXBwbHkobix0fHxbXSkpO3JldHVybiByJiZcImZ1bmN0aW9uXCI9PXR5cGVvZiByLnRoZW4/cjpDZS5yZXNvbHZlKHIpfWNhdGNoKGUpe3JldHVybiBodChlKX19LGN1cnJlbnRUcmFuc2FjdGlvbjp7Z2V0OigpPT5LZS50cmFuc3x8bnVsbH0sd2FpdEZvcjpmdW5jdGlvbihlLHQpe2NvbnN0IG49Q2UucmVzb2x2ZShcImZ1bmN0aW9uXCI9PXR5cGVvZiBlP3puLmlnbm9yZVRyYW5zYWN0aW9uKGUpOmUpLnRpbWVvdXQodHx8NmU0KTtyZXR1cm4gS2UudHJhbnM/S2UudHJhbnMud2FpdEZvcihuKTpufSxQcm9taXNlOkNlLGRlYnVnOntnZXQ6KCk9PlIsc2V0OmU9PntGKGUsXCJkZXhpZVwiPT09ZT8oKT0+ITA6YnQpfX0sZGVyaXZlOmMsZXh0ZW5kOnIscHJvcHM6YSxvdmVycmlkZTp5LEV2ZW50czpFdCxvbjpIdCxsaXZlUXVlcnk6V24sZXh0ZW5kT2JzZXJ2YWJpbGl0eVNldDpWbixnZXRCeUtleVBhdGg6YixzZXRCeUtleVBhdGg6XyxkZWxCeUtleVBhdGg6ZnVuY3Rpb24oZSx0KXtcInN0cmluZ1wiPT10eXBlb2YgdD9fKGUsdCx2b2lkIDApOlwibGVuZ3RoXCJpbiB0JiZbXS5tYXAuY2FsbCh0LChmdW5jdGlvbih0KXtfKGUsdCx2b2lkIDApfSkpfSxzaGFsbG93Q2xvbmU6dyxkZWVwQ2xvbmU6TyxnZXRPYmplY3REaWZmOlNuLGNtcDpJdCxhc2FwOnYsbWluS2V5Oi0oMS8wKSxhZGRvbnM6W10sY29ubmVjdGlvbnM6eXQsZXJybmFtZXM6SCxkZXBlbmRlbmNpZXM6WW4sc2VtVmVyOlwiMy4yLjFcIix2ZXJzaW9uOlwiMy4yLjFcIi5zcGxpdChcIi5cIikubWFwKChlPT5wYXJzZUludChlKSkpLnJlZHVjZSgoKGUsdCxuKT0+ZSt0L01hdGgucG93KDEwLDIqbikpKX0pLHpuLm1heEtleT1lbih6bi5kZXBlbmRlbmNpZXMuSURCS2V5UmFuZ2UpLFwidW5kZWZpbmVkXCIhPXR5cGVvZiBkaXNwYXRjaEV2ZW50JiZcInVuZGVmaW5lZFwiIT10eXBlb2YgYWRkRXZlbnRMaXN0ZW5lciYmKEh0KFwic3RvcmFnZW11dGF0ZWRcIiwoZT0+e2lmKCFIbil7bGV0IHQ7bXQ/KHQ9ZG9jdW1lbnQuY3JlYXRlRXZlbnQoXCJDdXN0b21FdmVudFwiKSx0LmluaXRDdXN0b21FdmVudChcIngtc3RvcmFnZW11dGF0ZWQtMVwiLCEwLCEwLGUpKTp0PW5ldyBDdXN0b21FdmVudChcIngtc3RvcmFnZW11dGF0ZWQtMVwiLHtkZXRhaWw6ZX0pLEhuPSEwLGRpc3BhdGNoRXZlbnQodCksSG49ITF9fSkpLGFkZEV2ZW50TGlzdGVuZXIoXCJ4LXN0b3JhZ2VtdXRhdGVkLTFcIiwoKHtkZXRhaWw6ZX0pPT57SG58fEduKGUpfSkpKTtsZXQgSG49ITE7aWYoXCJ1bmRlZmluZWRcIiE9dHlwZW9mIEJyb2FkY2FzdENoYW5uZWwpe2NvbnN0IGU9bmV3IEJyb2FkY2FzdENoYW5uZWwoXCJ4LXN0b3JhZ2VtdXRhdGVkLTFcIik7SHQoXCJzdG9yYWdlbXV0YXRlZFwiLCh0PT57SG58fGUucG9zdE1lc3NhZ2UodCl9KSksZS5vbm1lc3NhZ2U9ZT0+e2UuZGF0YSYmR24oZS5kYXRhKX19ZWxzZSBpZihcInVuZGVmaW5lZFwiIT10eXBlb2Ygc2VsZiYmXCJ1bmRlZmluZWRcIiE9dHlwZW9mIG5hdmlnYXRvcil7SHQoXCJzdG9yYWdlbXV0YXRlZFwiLChlPT57dHJ5e0hufHwoXCJ1bmRlZmluZWRcIiE9dHlwZW9mIGxvY2FsU3RvcmFnZSYmbG9jYWxTdG9yYWdlLnNldEl0ZW0oXCJ4LXN0b3JhZ2VtdXRhdGVkLTFcIixKU09OLnN0cmluZ2lmeSh7dHJpZzpNYXRoLnJhbmRvbSgpLGNoYW5nZWRQYXJ0czplfSkpLFwib2JqZWN0XCI9PXR5cGVvZiBzZWxmLmNsaWVudHMmJlsuLi5zZWxmLmNsaWVudHMubWF0Y2hBbGwoe2luY2x1ZGVVbmNvbnRyb2xsZWQ6ITB9KV0uZm9yRWFjaCgodD0+dC5wb3N0TWVzc2FnZSh7dHlwZTpcIngtc3RvcmFnZW11dGF0ZWQtMVwiLGNoYW5nZWRQYXJ0czplfSkpKSl9Y2F0Y2goZSl7fX0pKSxhZGRFdmVudExpc3RlbmVyKFwic3RvcmFnZVwiLChlPT57aWYoXCJ4LXN0b3JhZ2VtdXRhdGVkLTFcIj09PWUua2V5KXtjb25zdCB0PUpTT04ucGFyc2UoZS5uZXdWYWx1ZSk7dCYmR24odC5jaGFuZ2VkUGFydHMpfX0pKTtjb25zdCBlPXNlbGYuZG9jdW1lbnQmJm5hdmlnYXRvci5zZXJ2aWNlV29ya2VyO2UmJmUuYWRkRXZlbnRMaXN0ZW5lcihcIm1lc3NhZ2VcIiwoZnVuY3Rpb24oe2RhdGE6ZX0pe2UmJlwieC1zdG9yYWdlbXV0YXRlZC0xXCI9PT1lLnR5cGUmJkduKGUuY2hhbmdlZFBhcnRzKX0pKX1DZS5yZWplY3Rpb25NYXBwZXI9ZnVuY3Rpb24oZSx0KXtpZighZXx8ZSBpbnN0YW5jZW9mIFd8fGUgaW5zdGFuY2VvZiBUeXBlRXJyb3J8fGUgaW5zdGFuY2VvZiBTeW50YXhFcnJvcnx8IWUubmFtZXx8IUpbZS5uYW1lXSlyZXR1cm4gZTt2YXIgbj1uZXcgSltlLm5hbWVdKHR8fGUubWVzc2FnZSxlKTtyZXR1cm5cInN0YWNrXCJpbiBlJiZsKG4sXCJzdGFja1wiLHtnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5pbm5lci5zdGFja319KSxufSxGKFIsYnQpO2V4cG9ydHskbiBhcyBEZXhpZSxJbiBhcyBSYW5nZVNldCwkbiBhcyBkZWZhdWx0LFduIGFzIGxpdmVRdWVyeSxUbiBhcyBtZXJnZVJhbmdlcyxSbiBhcyByYW5nZXNPdmVybGFwfTsiLCJpbXBvcnQgRGV4aWUgZnJvbSAnZGV4aWUnXG5pbXBvcnQgUmVxdWVzdEhvbGRlciBmcm9tICcuL1V0aWxpdGllcy9SZXF1ZXN0SG9sZGVyJ1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBEYXRhYmFzZSBleHRlbmRzIERleGllIHtcbiAgcmVxdWVzdHMhOiBEZXhpZS5UYWJsZTxSZXF1ZXN0SG9sZGVyLCBzdHJpbmc+XG5cbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoXCJtcy5qc1wiKVxuXG4gICAgdGhpcy52ZXJzaW9uKDEpLnN0b3Jlcyh7XG4gICAgICBcInJlcXVlc3RzXCI6ICcmcGF0aCdcbiAgICB9KVxuICB9XG59IiwiaW1wb3J0IHsgSVR5cGVJbmZvIH0gZnJvbSBcIi4vSVR5cGVJbmZvXCI7XG5cbmV4cG9ydCBpbnRlcmZhY2UgSUl0ZW1FbnRyeSB7XG4gIGZyYW1lPzogbnVtYmVyXG4gIGFjdGlvbj86IHN0cmluZ1xuICBuYW1lOiBzdHJpbmdcbiAgbm9JY29uPzogYm9vbGVhblxuICBpZDogbnVtYmVyXG4gIHJlZ2lvbjogc3RyaW5nXG4gIHZlcnNpb246IHN0cmluZ1xuICB0eXBlSW5mbzogSVR5cGVJbmZvXG4gIGFscGhhPzogbnVtYmVyXG4gIGh1ZT86IG51bWJlclxuXG4gIHNhdHVyYXRpb24/OiBudW1iZXJcbiAgY29udHJhc3Q/OiBudW1iZXJcbiAgYnJpZ2h0bmVzcz86IG51bWJlclxuICBpc2xvdD86IHN0cmluZ1xuICB2c2xvdD86IHN0cmluZ1xuICBkaXNhYmxlRWZmZWN0PzogYm9vbGVhblxuICBlcXVpcEZyYW1lPzogbnVtYmVyXG4gIGdsb3c/OiBib29sZWFuXG4gIGdyYXlzY2FsZT86IGJvb2xlYW5cbiAgaW52ZXJ0PzogYm9vbGVhblxuICBvaWxQYWludD86IGJvb2xlYW5cbiAgc2VwaWE/OiBib29sZWFuXG4gIHZpc2libGU/OiBib29sZWFuXG5cbiAgaW50ZXJuYWw/OiBJbnRlcm5hbFR5cGVcbn1cblxuZXhwb3J0IGVudW0gSW50ZXJuYWxUeXBlIHtcbiAgTm9uZSxcbiAgSGFpckR5ZVxufSIsImltcG9ydCB7IElQcm9wZXJ0eSB9IGZyb20gXCIuLi9QS0cxL0lQcm9wZXJ0eVwiO1xuaW1wb3J0IHsgSUl0ZW1FbnRyeSB9IGZyb20gXCIuL0lJdGVtRW50cnlcIjtcblxuZXhwb3J0IGNsYXNzIE5vZGVJdGVtUGFpciB7XG4gIGl0ZW06IElJdGVtRW50cnk7XG4gIG5vZGU6IElQcm9wZXJ0eTtcbiAgaW5mbzogUmVjb3JkPHN0cmluZywgSVByb3BlcnR5PlxuICBpc2xvdDogQXJyYXk8c3RyaW5nPlxuICB2c2xvdDogQXJyYXk8c3RyaW5nPlxuICB6bWFwOiBBcnJheTxzdHJpbmc+XG4gIHNtYXA6IFJlY29yZDxzdHJpbmcsIHN0cmluZ1tdPlxuICBhbGxvd0NvbmZsaWN0aW5nTG9ja3NXaXRoOiBOb2RlSXRlbVBhaXJcblxuICBjb25zdHJ1Y3RvcihpdGVtOiBJSXRlbUVudHJ5LCBub2RlOiBJUHJvcGVydHksIGluZm9Ob2RlOiBJUHJvcGVydHksIHptYXA6IEFycmF5PHN0cmluZz4sIHNtYXA6IFJlY29yZDxzdHJpbmcsIEFycmF5PHN0cmluZz4+KSB7XG4gICAgdGhpcy5pdGVtID0gaXRlbTtcbiAgICB0aGlzLm5vZGUgPSBub2RlO1xuXG4gICAgdGhpcy5pbmZvID0gaW5mb05vZGUuY2hpbGRyZW4ucmVkdWNlKCh0b3RhbCwgY3VycmVudCkgPT4ge1xuICAgICAgdG90YWxbY3VycmVudC5uYW1lXSA9IGN1cnJlbnRcbiAgICAgIHJldHVybiB0b3RhbFxuICAgIH0sIHt9IGFzIFJlY29yZDxzdHJpbmcsIElQcm9wZXJ0eT4pXG5cbiAgICB0aGlzLmlzbG90ID0gdGhpcy5pbmZvPy5pc2xvdD8udmFsdWUubWF0Y2goLy57MSwyfS9nKVxuICAgIHRoaXMudnNsb3QgPSB0aGlzLmluZm8/LnZzbG90Py52YWx1ZS5tYXRjaCgvLnsxLDJ9L2cpXG4gICAgdGhpcy56bWFwID0gem1hcFxuICAgIHRoaXMuc21hcCA9IHNtYXBcbiAgfVxufVxuIiwiaW1wb3J0IHsgSVByb3BlcnR5IH0gZnJvbSBcIi4uL1BLRzEvSVByb3BlcnR5XCI7XG5pbXBvcnQgSVZlY3RvciBmcm9tIFwiLi4vUEtHMS9JVmVjdG9yXCI7XG5pbXBvcnQgeyBJUGllY2VJbmZvIH0gZnJvbSBcIi4vSVBpZWNlSW5mb1wiO1xuXG5leHBvcnQgY2xhc3MgUmVuZGVyUGllY2VJbmZvIGltcGxlbWVudHMgSVBpZWNlSW5mbyB7XG4gIHo6IHN0cmluZztcbiAgb3JpZ2luOiBJVmVjdG9yO1xuICBtYXA6IFJlY29yZDxzdHJpbmcsIElWZWN0b3I+O1xuICBncm91cDogc3RyaW5nO1xuICBzbG90OiBzdHJpbmdcbiAgcHVibGljIGdldCB2aXNpYmxlKCk6IGJvb2xlYW4ge1xuICAgIC8vIFRPRE86IGlzIGl0IHBvc3NpYmxlIHRvIG92ZXJyaWRlIHRoaXMgZnJvbSBXWj9cbiAgICByZXR1cm4gdHJ1ZVxuICB9XG5cbiAgY29uc3RydWN0b3IocGllY2U6IElQcm9wZXJ0eSkge1xuICAgIHRoaXMuc2xvdCA9IHBpZWNlLnBhcmVudC5uYW1lIC8vIFRPRE86IEltcHJvdmUgdGhpcy5cblxuICAgIGNvbnN0IGluZm9Db21wdXRlZCA9IHBpZWNlLmNoaWxkcmVuLnJlZHVjZSgodG90YWwsIGN1cnJlbnQpID0+IHtcbiAgICAgIHRvdGFsW2N1cnJlbnQubmFtZV0gPSBjdXJyZW50O1xuICAgICAgcmV0dXJuIHRvdGFsO1xuICAgIH0sIHt9IGFzIFJlY29yZDxzdHJpbmcsIElQcm9wZXJ0eT4pO1xuXG4gICAgdGhpcy56ID0gaW5mb0NvbXB1dGVkLno/LnZhbHVlO1xuICAgIHRoaXMub3JpZ2luID0gaW5mb0NvbXB1dGVkLm9yaWdpbj8udmFsdWU7XG4gICAgdGhpcy5ncm91cCA9IGluZm9Db21wdXRlZC5ncm91cD8udmFsdWU7XG5cbiAgICBpZiAoaW5mb0NvbXB1dGVkLm1hcCkge1xuICAgICAgdGhpcy5tYXAgPSBpbmZvQ29tcHV0ZWQubWFwLmNoaWxkcmVuLnJlZHVjZSgodG90YWwsIGN1cnJlbnQpID0+IHtcbiAgICAgICAgdG90YWxbY3VycmVudC5uYW1lXSA9IGN1cnJlbnQudmFsdWU7XG4gICAgICAgIHJldHVybiB0b3RhbDtcbiAgICAgIH0sIHt9IGFzIFJlY29yZDxzdHJpbmcsIElWZWN0b3I+KTtcbiAgICB9XG4gIH1cbn1cbiIsImltcG9ydCB7IElQcm9wZXJ0eSB9IGZyb20gXCIuLi9QS0cxL0lQcm9wZXJ0eVwiO1xuaW1wb3J0IElWZWN0b3IgZnJvbSBcIi4uL1BLRzEvSVZlY3RvclwiO1xuaW1wb3J0IHsgQ2FudmFzUHJvcGVydHkgfSBmcm9tIFwiLi4vUEtHMS9Qcm9wZXJ0aWVzL1Byb3BlcnR5TGlzdFwiO1xuaW1wb3J0IHsgSVBpZWNlSW5mbyB9IGZyb20gXCIuL0lQaWVjZUluZm9cIjtcbmltcG9ydCB7IE5vZGVJdGVtUGFpciB9IGZyb20gXCIuL05vZGVJdGVtUGFpclwiO1xuaW1wb3J0IHsgUmVuZGVyUGllY2VJbmZvIH0gZnJvbSBcIi4vUmVuZGVyUGllY2VJbmZvXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFJlbmRlclBpZWNlIGltcGxlbWVudHMgSVBpZWNlSW5mbyB7XG4gIGNhbnZhczogQ2FudmFzUHJvcGVydHlcbiAgc2xvdDogc3RyaW5nXG4gIG9yaWdpbmFsUGllY2U6IFJlbmRlclBpZWNlSW5mb1xuICByZXNvbHZlZFBpZWNlOiBSZW5kZXJQaWVjZUluZm9cbiAgaXRlbTogTm9kZUl0ZW1QYWlyXG4gIHByaXZhdGUgX2NhbnZhczogSFRNTENhbnZhc0VsZW1lbnQ7XG4gIHByaXZhdGUgX3RleHR1cmVJZDogV2ViR0xUZXh0dXJlO1xuICB2aXNpYmxlOiBib29sZWFuO1xuICBoYXNMb2NrOiBib29sZWFuO1xuICAvLyBTcGVjaWZpZXMgd2hpY2ggaXRlbXMgYXJlIHRha2luZyBwcmlvcml0eSBvdmVyIHRoaXMgaXRlbSdzIHJlcXVpcmVkIGxvY2tzXG4gIGxvY2tCbGFtZTogTm9kZUl0ZW1QYWlyW107XG5cbiAgcHVibGljIGdldCBvcmlnaW4oKTogSVZlY3RvciB7XG4gICAgcmV0dXJuIHRoaXMub3JpZ2luYWxQaWVjZS5vcmlnaW4gfHwgdGhpcy5yZXNvbHZlZFBpZWNlLm9yaWdpbjtcbiAgfVxuICBwdWJsaWMgZ2V0IHooKTogc3RyaW5nIHtcbiAgICByZXR1cm4gdGhpcy5vcmlnaW5hbFBpZWNlLnogfHwgdGhpcy5yZXNvbHZlZFBpZWNlLno7XG4gIH1cbiAgcHVibGljIGdldCBtYXAoKTogUmVjb3JkPHN0cmluZywgSVZlY3Rvcj4ge1xuICAgIC8vIFRoZXNlIHNob3VsZCBiYXNpY2FsbHkgYWx3YXlzIGhhdmUgYSBtYXAsIGJ1dCBvY2Nhc3Npb25hbGx5IGRvbid0LlxuICAgIC8vIFRoZW9yeSBpcyB0aGF0IHRoZXkgZG9uJ3Qgd2hlbiB0aGV5IG1hcCB0byBhbiBlZmZlY3QgaW5zdGVhZCBvZiBhIHJlYWwgaXRlbVxuICAgIHJldHVybiB0aGlzLm9yaWdpbmFsUGllY2UubWFwIHx8IHRoaXMucmVzb2x2ZWRQaWVjZS5tYXAgfHwgeyBuYXZlbDoge3g6IDAseTogMH0gfTtcbiAgfVxuICBwdWJsaWMgZ2V0IGdyb3VwKCk6IHN0cmluZyB7XG4gICAgcmV0dXJuIHRoaXMub3JpZ2luYWxQaWVjZS5ncm91cCB8fCB0aGlzLnJlc29sdmVkUGllY2UuZ3JvdXA7XG4gIH1cblxuICBjb25zdHJ1Y3RvcihpdGVtOiBOb2RlSXRlbVBhaXIsIHBpZWNlTm9kZTogSVByb3BlcnR5LCByZXNvbHZlZFBpZWNlOiBJUHJvcGVydHkpIHtcbiAgICB0aGlzLnZpc2libGUgPSB0cnVlXG5cbiAgICB0aGlzLml0ZW0gPSBpdGVtXG4gICAgaWYocmVzb2x2ZWRQaWVjZS50eXBlID09PSAnY2FudmFzJylcbiAgICAgIHRoaXMuY2FudmFzID0gcmVzb2x2ZWRQaWVjZSBhcyBDYW52YXNQcm9wZXJ0eVxuICAgIGVsc2UgaWYgKHBpZWNlTm9kZS50eXBlID09PSAnY2FudmFzJylcbiAgICAgIHRoaXMuY2FudmFzID0gcGllY2VOb2RlIGFzIENhbnZhc1Byb3BlcnR5XG4gICAgZWxzZSB0aHJvdyBuZXcgRXJyb3IoJ05vIHJlbmRlcmFibGUgY2FudmFzIGZvdW5kIScpO1xuXG4gICAgdGhpcy5zbG90ID0gcGllY2VOb2RlLm5hbWVcblxuICAgIGlmIChwaWVjZU5vZGUuY2hpbGRyZW4pIHtcbiAgICAgIHRoaXMub3JpZ2luYWxQaWVjZSA9IG5ldyBSZW5kZXJQaWVjZUluZm8ocGllY2VOb2RlKVxuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLm9yaWdpbmFsUGllY2UgPSBuZXcgUmVuZGVyUGllY2VJbmZvKHJlc29sdmVkUGllY2UpXG4gICAgICB0aGlzLnJlc29sdmVkUGllY2UgPSB0aGlzLm9yaWdpbmFsUGllY2VcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIGlmIChwaWVjZU5vZGUgPT09IHJlc29sdmVkUGllY2UgfHwgIXJlc29sdmVkUGllY2UpIHtcbiAgICAgIHRoaXMucmVzb2x2ZWRQaWVjZSA9IHRoaXMub3JpZ2luYWxQaWVjZVxuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnJlc29sdmVkUGllY2UgPSBuZXcgUmVuZGVyUGllY2VJbmZvKHJlc29sdmVkUGllY2UpXG4gICAgfVxuICB9XG5cbiAgYXN5bmMgR2V0V2ViR0xUZXh0dXJlKGdsOiBXZWJHTFJlbmRlcmluZ0NvbnRleHQpIHtcbiAgICBpZiAodGhpcy5fdGV4dHVyZUlkICE9PSB1bmRlZmluZWQpIHJldHVybiB0aGlzLl90ZXh0dXJlSWRcblxuICAgIGNvbnN0IGRhdGEgPSBhd2FpdCB0aGlzLmNhbnZhcy5HZXRWYWx1ZSgpXG5cbiAgICBjb25zdCB0ZXh0dXJlSWQgPSBnbC5jcmVhdGVUZXh0dXJlKClcbiAgICBnbC5iaW5kVGV4dHVyZShnbC5URVhUVVJFXzJELCB0ZXh0dXJlSWQpXG4gICAgZ2wucGl4ZWxTdG9yZWkoZ2wuVU5QQUNLX1BSRU1VTFRJUExZX0FMUEhBX1dFQkdMLCB0cnVlKTtcbiAgICBnbC50ZXhJbWFnZTJEKFxuICAgICAgZ2wuVEVYVFVSRV8yRCxcbiAgICAgIDAsXG4gICAgICBnbC5SR0JBLFxuICAgICAgdGhpcy5jYW52YXMud2lkdGgsXG4gICAgICB0aGlzLmNhbnZhcy5oZWlnaHQsXG4gICAgICAwLFxuICAgICAgZ2wuUkdCQSxcbiAgICAgIGdsLlVOU0lHTkVEX0JZVEUsXG4gICAgICBuZXcgVWludDhBcnJheShkYXRhLmRhdGEpXG4gICAgKVxuXG4gICAgZ2wudGV4UGFyYW1ldGVyaShnbC5URVhUVVJFXzJELCBnbC5URVhUVVJFX1dSQVBfUywgZ2wuQ0xBTVBfVE9fRURHRSlcbiAgICBnbC50ZXhQYXJhbWV0ZXJpKGdsLlRFWFRVUkVfMkQsIGdsLlRFWFRVUkVfV1JBUF9ULCBnbC5DTEFNUF9UT19FREdFKVxuICAgIGdsLnRleFBhcmFtZXRlcmkoZ2wuVEVYVFVSRV8yRCwgZ2wuVEVYVFVSRV9NSU5fRklMVEVSLCBnbC5MSU5FQVIpXG5cbiAgICB0aGlzLl90ZXh0dXJlSWQgPSB0ZXh0dXJlSWRcbiAgICByZXR1cm4gdGV4dHVyZUlkXG4gIH1cblxuICBhc3luYyBHZXRDYW52YXNUZXh0dXJlKCkge1xuICAgIGlmICh0aGlzLl9jYW52YXMgIT09IHVuZGVmaW5lZCkgcmV0dXJuIHRoaXMuX2NhbnZhc1xuXG4gICAgY29uc3QgZGF0YSA9IGF3YWl0IHRoaXMuY2FudmFzLkdldFZhbHVlKClcblxuICAgIGNvbnN0IGNhbnZhc1RhcmdldCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2NhbnZhcycpXG4gICAgY2FudmFzVGFyZ2V0LnN0eWxlLmRpc3BsYXkgPSAnbm9uZSdcbiAgICBjYW52YXNUYXJnZXQud2lkdGggPSB0aGlzLmNhbnZhcy53aWR0aFxuICAgIGNhbnZhc1RhcmdldC5oZWlnaHQgPSB0aGlzLmNhbnZhcy5oZWlnaHRcbiAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKGNhbnZhc1RhcmdldClcbiAgICBjb25zdCBjdHggPSBjYW52YXNUYXJnZXQuZ2V0Q29udGV4dCgnMmQnKVxuICAgIGN0eC5wdXRJbWFnZURhdGEoZGF0YSwgMCwgMClcblxuICAgIHRoaXMuX2NhbnZhcyA9IGNhbnZhc1RhcmdldFxuICAgIGNhbnZhc1RhcmdldC5yZW1vdmUoKVxuICAgIHJldHVybiBjYW52YXNUYXJnZXRcbiAgfVxufVxuIiwiaW1wb3J0IHsgSUl0ZW1FbnRyeSB9IGZyb20gXCIuLi9DaGFyYWN0ZXIvSUl0ZW1FbnRyeVwiO1xuaW1wb3J0IFBLRzFGYWN0b3J5IGZyb20gXCIuLi9QS0cxL0ZhY3RvcnlcIjtcblxuZnVuY3Rpb24gUmV0dXJuSWZFeGlzdHMoaW1hZ2VzOiBSZWNvcmQ8c3RyaW5nLCBzdHJpbmc+LCBwYXRoOiBzdHJpbmcpIHtcbiAgY29uc3QgaW1hZ2VTcGxpdCA9IHBhdGguc3BsaXQoXCIuaW1nXCIsIDIpIC8vIC5pbWcgaXMgdGhlIGFjdHVhbCBzZXJ2ZXItc3RvcmVkIGZpbGVcbiAgaW1hZ2VTcGxpdFswXSA9IGltYWdlU3BsaXRbMF0gKyBcIi5pbWdcIiAvLyBGaXggdGhlIGZpbGUgcGF0aFxuICBjb25zdCBbaW1hZ2VOYW1lLCBub2RlUGF0aF0gPSBpbWFnZVNwbGl0XG5cbiAgLy8gV2UgZG9uJ3Qgd2FudCB0byByZXR1cm4gdGhlIGltZyBuYW1lLCBidXQgcmF0aGVyLCB0aGUgb3JpZ2luYWwgcGF0aFxuICBpZiAoaW1hZ2VzW2ltYWdlTmFtZV0pIHJldHVybiBwYXRoXG59XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEl0ZW1VdGlsaXRpZXMge1xuICBwcml2YXRlIGZhY3Rvcnk6IFBLRzFGYWN0b3J5O1xuXG4gIGNvbnN0cnVjdG9yKGZhY3Rvcnk6IFBLRzFGYWN0b3J5KSB7XG4gICAgdGhpcy5mYWN0b3J5ID0gZmFjdG9yeVxuICB9XG5cbiAgcHVibGljIElzRmFjZUlkKGlkOiBudW1iZXIpIDogYm9vbGVhbiB7XG4gICAgcmV0dXJuIChpZCA+PSAyMDAwMCAmJiBpZCA8IDMwMDAwKSB8fCAoaWQgPj0gNTAwMDAgJiYgaWQgPCA2MDAwMClcbiAgfVxuXG4gIHB1YmxpYyBJc0ZhY2VPckFjY2Vzc29yeUlkKGlkOiBudW1iZXIpIDogYm9vbGVhbiB7XG4gICAgbGV0IGlzRmFjZUFjYyA9IGlkID49IDEwMTAwMDAgJiYgaWQgPCAxMDIwMDAwXG4gICAgbGV0IGlzRmFjZSA9IChpZCA+PSAyMDAwMCAmJiBpZCA8IDMwMDAwKSB8fCAoaWQgPj0gNTAwMDAgJiYgaWQgPCA2MDAwMClcbiAgICByZXR1cm4gaXNGYWNlQWNjIHx8IGlzRmFjZTtcbiAgfVxuXG4gIHB1YmxpYyBhc3luYyBHZXRJdGVtSW1nKHJlZ2lvbjogc3RyaW5nLCB2ZXJzaW9uOiBzdHJpbmcsIGlkOiBudW1iZXIpIHtcbiAgICBjb25zdCBpbWdQYXRoID0gYXdhaXQgdGhpcy5HZXRJdGVtSW1nUGF0aChyZWdpb24sIHZlcnNpb24sIGlkKVxuICAgIHJldHVybiB0aGlzLmZhY3RvcnkucmVzb2x2ZShyZWdpb24sIHZlcnNpb24sIGltZ1BhdGgpXG4gIH1cblxuICBwdWJsaWMgR2V0Rm9sZGVyRm9ySXRlbShpdGVtOiBJSXRlbUVudHJ5KSA6IFByb21pc2U8c3RyaW5nPlxuICB7XG4gICAgcmV0dXJuIHRoaXMuR2V0Rm9sZGVyRm9ySXRlbUlkKGl0ZW0ucmVnaW9uLCBpdGVtLnZlcnNpb24sIGl0ZW0uaWQpXG4gIH1cblxuICBwdWJsaWMgYXN5bmMgR2V0Rm9sZGVyRm9ySXRlbUlkKHJlZ2lvbjogc3RyaW5nLCB2ZXJzaW9uOiBzdHJpbmcsIGlkOiBudW1iZXIpIDogUHJvbWlzZTxzdHJpbmc+IHtcbiAgICBjb25zdCBmb2xkZXIgPSBNYXRoLmZsb29yKGlkIC8gMTAwKTtcbiAgICB2YXIgZm9sZGVycyA9IGF3YWl0IHRoaXMuZmFjdG9yeS5nZXRGb2xkZXJzKHJlZ2lvbiwgdmVyc2lvbilcbiAgICByZXR1cm4gZm9sZGVyc1tmb2xkZXIudG9TdHJpbmcoKV1cbiAgfVxuXG4gIHB1YmxpYyBhc3luYyBHZXRJdGVtSW1nUGF0aChyZWdpb246IHN0cmluZywgdmVyc2lvbjogc3RyaW5nLCBpZDogbnVtYmVyKSB7XG4gICAgY29uc3QgZm9sZGVyID0gTWF0aC5mbG9vcihpZCAvIDEwMCk7XG4gICAgY29uc3QgZGl2MTAwMDAgPSBNYXRoLmZsb29yKGlkIC8gMTAwMDApLnRvU3RyaW5nKCkucGFkU3RhcnQoNCwgXCIwXCIpXG4gICAgY29uc3QgZGl2MTAwMCA9IE1hdGguZmxvb3IoaWQgLyAxMDAwKS50b1N0cmluZygpLnBhZFN0YXJ0KDUsIFwiMFwiKVxuICAgIGNvbnN0IHRvOERpZ2l0ID0gaWQudG9TdHJpbmcoKS5wYWRTdGFydCg4LCBcIjBcIilcbiAgICBjb25zdCBmb2xkZXI2ID0gZm9sZGVyLnRvU3RyaW5nKCkucGFkU3RhcnQoNiwgXCIwXCIpXG4gICAgbGV0IGltZ1BhdGggPSBudWxsO1xuICAgIGNvbnN0IGltYWdlcyA9IGF3YWl0IHRoaXMuZmFjdG9yeS5nZXRJbWFnZXMocmVnaW9uLCB2ZXJzaW9uKVxuXG4gICAgLy8gSXRlbS9Db25zdW1lXG4gICAgaWYgKGZvbGRlciA+PSAyMDAwMCAmJiBmb2xkZXIgPCAzMDAwMClcbiAgICAgIGltZ1BhdGggPSBSZXR1cm5JZkV4aXN0cyhpbWFnZXMsIGBJdGVtL0NvbnN1bWUvJHtkaXYxMDAwMH0uaW1nLyR7dG84RGlnaXR9YClcblxuICAgIC8vIEl0ZW0vSW5zdGFsbFxuICAgIGlmIChmb2xkZXIgPj0gMzAxMDAgJiYgZm9sZGVyIDwgNDAwMDApXG4gICAge1xuICAgICAgLy8gSXRlbS9JbnN0YWxsL3szMDEtMzk5fVxuICAgICAgaWYgKGZvbGRlciA+PSAzMDE1MCAmJiBmb2xkZXIgPD0gMzAxNTkpXG4gICAgICAgIGltZ1BhdGggPSBSZXR1cm5JZkV4aXN0cyhpbWFnZXMsIGBJdGVtL0luc3RhbGwvJHtmb2xkZXI2fS5pbWcvJHt0bzhEaWdpdH1gKVxuXG4gICAgICBpZiAoKGZvbGRlciA+PSAzMDE2MCAmJiBmb2xkZXIgPD0gMzA0MDApIHx8ICFpbWdQYXRoKVxuICAgICAgICBpbWdQYXRoID0gUmV0dXJuSWZFeGlzdHMoaW1hZ2VzLCBgSXRlbS9JbnN0YWxsLyR7ZGl2MTAwMH0uaW1nLyR7dG84RGlnaXR9YClcblxuICAgICAgaWYgKGZvbGRlciA+PSAzMDQwMCB8fCAhaW1nUGF0aClcbiAgICAgICAgaW1nUGF0aCA9IFJldHVybklmRXhpc3RzKGltYWdlcywgYEl0ZW0vSW5zdGFsbC8ke2RpdjEwMDAwfS5pbWcvJHt0bzhEaWdpdH1gKVxuICAgIH1cblxuICAgIC8vIEl0ZW0vRXRjXG4gICAgaWYgKGZvbGRlciA+PSA0MDAwMCAmJiBmb2xkZXIgPCA1MDAwMClcbiAgICAgIGltZ1BhdGggPSBSZXR1cm5JZkV4aXN0cyhpbWFnZXMsIGBJdGVtL0V0Yy8ke2RpdjEwMDAwfS5pbWcvJHt0bzhEaWdpdH1gKVxuXG4gICAgaWYgKGZvbGRlciA+PSA1MDAwMCAmJiBmb2xkZXIgPCA1MDEwMClcbiAgICAgIGltZ1BhdGggPSBSZXR1cm5JZkV4aXN0cyhpbWFnZXMsIGBJdGVtL1BldC8ke2lkfS5pbWdgKVxuXG4gICAgLy8gSXRlbS9DYXNoXG4gICAgaWYgKGZvbGRlciA+PSA1MDEwMCAmJiBmb2xkZXIgPCA2MDAwMClcbiAgICAgIGltZ1BhdGggPSBSZXR1cm5JZkV4aXN0cyhpbWFnZXMsIGBJdGVtL0Nhc2gvJHtkaXYxMDAwMH0uaW1nLyR7dG84RGlnaXR9YClcblxuICAgIC8vIEl0ZW0vU3BlY2lhbFxuICAgIGlmIChmb2xkZXIgPj0gOTAwMDAgJiYgZm9sZGVyIDwgOTAyMDApXG4gICAgICBpbWdQYXRoID0gUmV0dXJuSWZFeGlzdHMoaW1hZ2VzLCBgSXRlbS9TcGVjaWFsLyR7ZGl2MTAwMDB9LmltZy8ke3RvOERpZ2l0fWApXG5cbiAgICAvLyBFcXVpcHNcbiAgICBpZiAoKGZvbGRlciA+PSAyMDAgJiYgZm9sZGVyIDwgMjAwMDApIHx8ICFpbWdQYXRoKVxuICAgIHtcbiAgICAgIHZhciBmb2xkZXJzID0gYXdhaXQgdGhpcy5mYWN0b3J5LmdldEZvbGRlcnMocmVnaW9uLCB2ZXJzaW9uKVxuICAgICAgdmFyIGZvbGRlck5hbWUgPSBmb2xkZXJzW2ZvbGRlci50b1N0cmluZygpXVxuXG4gICAgICBpZiAoZm9sZGVyTmFtZSlcbiAgICAgICAgaW1nUGF0aCA9IFJldHVybklmRXhpc3RzKGltYWdlcywgYENoYXJhY3Rlci8ke2ZvbGRlck5hbWV9LyR7dG84RGlnaXR9LmltZ2ApXG5cbiAgICAgIGlmICghaW1nUGF0aCkge1xuICAgICAgICAvLyBUcnkgdGhlIGZvbGRlciBuYW1lIGluIHRoZSBuZXh0IElEIGdyb3VwP1xuICAgICAgICAvLyBUaGFua3MgTmV4b24sIGZvciBmdWNraW5nIHVwIElEcy5cbiAgICAgICAgdmFyIGZvbGRlck5hbWUgPSBmb2xkZXJzWyhmb2xkZXIgKyAxKS50b1N0cmluZygpXVxuXG4gICAgICAgIGlmIChmb2xkZXJOYW1lKVxuICAgICAgICAgIGltZ1BhdGggPSBSZXR1cm5JZkV4aXN0cyhpbWFnZXMsIGBDaGFyYWN0ZXIvJHtmb2xkZXJOYW1lfS8ke3RvOERpZ2l0fS5pbWdgKVxuICAgICAgfVxuXG4gICAgICBpZiAoIWltZ1BhdGgpIHtcbiAgICAgICAgLy8gVHJ5IHRoZSBmb2xkZXIgbmFtZSBpbiB0aGUgcHJldmlvdXMgSUQgZ3JvdXA/XG4gICAgICAgIC8vIFRoYW5rcyBOZXhvbiwgZm9yIGZ1Y2tpbmcgdXAgSURzLlxuICAgICAgICB2YXIgZm9sZGVyTmFtZSA9IGZvbGRlcnNbKGZvbGRlciAtIDEpLnRvU3RyaW5nKCldXG5cbiAgICAgICAgaWYgKGZvbGRlck5hbWUpXG4gICAgICAgICAgaW1nUGF0aCA9IFJldHVybklmRXhpc3RzKGltYWdlcywgYENoYXJhY3Rlci8ke2ZvbGRlck5hbWV9LyR7dG84RGlnaXR9LmltZ2ApXG4gICAgICB9XG5cbiAgICB9XG5cbiAgICAvLyBCb2R5IC8gRmFjZVxuICAgIGlmICgoaWQgPj0gMjAwMCAmJiBpZCA8IDIwMDAwKSB8fCAhaW1nUGF0aClcbiAgICAgIGltZ1BhdGggPSBSZXR1cm5JZkV4aXN0cyhpbWFnZXMsIGBDaGFyYWN0ZXIvJHt0bzhEaWdpdH0uaW1nYClcblxuICAgIHJldHVybiBpbWdQYXRoO1xuICB9XG59XG4iLCJpbXBvcnQgSVZlY3RvciBmcm9tIFwiLi4vUEtHMS9JVmVjdG9yXCI7XG5cbmV4cG9ydCBjbGFzcyBSZW5kZXJhYmxlQm91bmRzIHtcbiAgbGVmdDogbnVtYmVyO1xuICByaWdodDogbnVtYmVyO1xuICB0b3A6IG51bWJlcjtcbiAgYm90dG9tOiBudW1iZXI7XG5cbiAgb2Zmc2V0OiBJVmVjdG9yO1xuICBzaXplOiBJVmVjdG9yXG5cbiAgem9vbTogbnVtYmVyO1xuXG4gIGNvbnN0cnVjdG9yKGxlZnRzOiBBcnJheTxudW1iZXI+LCByaWdodHM6IEFycmF5PG51bWJlcj4sIHRvcHM6IEFycmF5PG51bWJlcj4sIGJvdHRvbXM6IEFycmF5PG51bWJlcj4sIHpvb20/OiBudW1iZXIpIHtcbiAgICB0aGlzLmxlZnQgPSBNYXRoLm1pbi5hcHBseShudWxsLCBsZWZ0cylcbiAgICB0aGlzLnJpZ2h0ID0gTWF0aC5tYXguYXBwbHkobnVsbCwgcmlnaHRzKVxuICAgIHRoaXMudG9wID0gTWF0aC5taW4uYXBwbHkobnVsbCwgdG9wcylcbiAgICB0aGlzLmJvdHRvbSA9IE1hdGgubWF4LmFwcGx5KG51bGwsIGJvdHRvbXMpXG5cbiAgICB0aGlzLnpvb20gPSB6b29tIHx8IDFcblxuICAgIHRoaXMub2Zmc2V0ID0ge1xuICAgICAgeDogLXRoaXMubGVmdCwgLy8gVE9ETzogVmFsaWRhdGUgaWYgdGhlc2UgYXJlIGV2ZXIgbm9uLW5lZ2F0aXZlXG4gICAgICB5OiAtdGhpcy50b3BcbiAgICB9LFxuXG4gICAgdGhpcy5zaXplID0ge1xuICAgICAgeDogKHRoaXMucmlnaHQgLSB0aGlzLmxlZnQpICogdGhpcy56b29tLFxuICAgICAgeTogKHRoaXMuYm90dG9tIC0gdGhpcy50b3ApICogdGhpcy56b29tXG4gICAgfVxuXG4gIH1cbn1cbiIsImltcG9ydCBJVmVjdG9yIGZyb20gXCIuLi9QS0cxL0lWZWN0b3JcIlxuaW1wb3J0IHsgUmVuZGVyYWJsZUJvdW5kcyB9IGZyb20gXCIuLi9VdGlsaXRpZXMvUmVuZGVyYWJsZUJvdW5kc1wiXG5pbXBvcnQgeyBBbmNob3JSZXN1bHRzIH0gZnJvbSBcIi4vQW5jaG9yTWFwQnVpbGRlclwiXG5pbXBvcnQgeyBJUmVuZGVyUmVxdWVzdCB9IGZyb20gXCIuL0lSZW5kZXJSZXF1ZXN0XCJcbmltcG9ydCB7IExvY2tSZXN1bHRzIH0gZnJvbSBcIi4vTG9ja1Jlc29sdmVyXCJcblxuZXhwb3J0IGZ1bmN0aW9uIENhbGNGZWV0Q2VudGVyUG9zaXRpb24ocmVxdWVzdDogSVJlbmRlclJlcXVlc3QsIGJvdW5kczogUmVuZGVyYWJsZUJvdW5kcywgYW5jaG9yczogQW5jaG9yUmVzdWx0cykgOiBJVmVjdG9yIHtcbiAgY29uc3QgY2FsY3VsYXRlZE9mZnNldCA9IGFuY2hvcnMuY2FsY3VsYXRlZE9mZnNldHMuYm9keSB8fCBhbmNob3JzLmNhbGN1bGF0ZWRPZmZzZXRzLmJhY2tCb2R5XG5cbiAgaWYgKCFjYWxjdWxhdGVkT2Zmc2V0KSB7XG4gICAgY29uc29sZS53YXJuKFwiQ291bGRuJ3QgZmluZCB0aGUgYm9keT8/P1wiKVxuICB9XG5cbiAgY29uc3QgcG9zaXRpb24gPSB7XG4gICAgeDogKGNhbGN1bGF0ZWRPZmZzZXQueCAtIGJvdW5kcy5sZWZ0KSxcbiAgICB5OiAoY2FsY3VsYXRlZE9mZnNldC55IC0gYm91bmRzLnRvcClcbiAgfSBhcyBJVmVjdG9yXG5cbiAgcG9zaXRpb24ueCAqPSByZXF1ZXN0Lnpvb21cbiAgcG9zaXRpb24ueSAqPSByZXF1ZXN0Lnpvb21cblxuICBpZiAocmVxdWVzdC5mbGlwWClcbiAgICBwb3NpdGlvbi54ID0gYm91bmRzLnNpemUueCAtIHBvc2l0aW9uLnhcblxuICByZXR1cm4gcG9zaXRpb25cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIENhbGNCb3VuZHMocmVxdWVzdDogSVJlbmRlclJlcXVlc3QsIGFuY2hvcnM6IEFuY2hvclJlc3VsdHMsIGxvY2tzOiBMb2NrUmVzdWx0cykgOiBSZW5kZXJhYmxlQm91bmRzIHtcbiAgY29uc3QgbGVmdHMgPSBbXSBhcyBBcnJheTxudW1iZXI+XG4gIGNvbnN0IHJpZ2h0cyA9IFtdIGFzIEFycmF5PG51bWJlcj5cbiAgY29uc3QgdG9wcyA9IFtdIGFzIEFycmF5PG51bWJlcj5cbiAgY29uc3QgYm90dG9tcyA9IFtdIGFzIEFycmF5PG51bWJlcj5cblxuICBPYmplY3Qua2V5cyhsb2Nrcy5sb2NrZWRQaWVjZXMpLmZvckVhY2gobG9ja05hbWUgPT4ge1xuICAgIGNvbnN0IGxvY2tlZFBpZWNlcyA9IGxvY2tzLmxvY2tlZFBpZWNlc1tsb2NrTmFtZV1cbiAgICBsb2NrZWRQaWVjZXMuZm9yRWFjaChwaWVjZSA9PiB7XG4gICAgICBjb25zdCBvZmZzZXQgPSBhbmNob3JzLmNhbGN1bGF0ZWRPZmZzZXRzW3BpZWNlLnNsb3QgfHwgcGllY2Uuel1cblxuICAgICAgY29uc3QgbGVmdCA9IG9mZnNldC54IC0gKHBpZWNlLm9yaWdpbiB8fCB7eDogMH0pLnhcbiAgICAgIGNvbnN0IHJpZ2h0ID0gbGVmdCArIHBpZWNlLmNhbnZhcy53aWR0aFxuICAgICAgY29uc3QgdG9wID0gb2Zmc2V0LnkgLSAocGllY2Uub3JpZ2luIHx8IHt5OiAwfSkueVxuICAgICAgY29uc3QgYm90dG9tID0gdG9wICsgcGllY2UuY2FudmFzLmhlaWdodFxuXG4gICAgICBsZWZ0cy5wdXNoKGxlZnQpXG4gICAgICByaWdodHMucHVzaChyaWdodClcbiAgICAgIHRvcHMucHVzaCh0b3ApXG4gICAgICBib3R0b21zLnB1c2goYm90dG9tKVxuICAgIH0pXG4gIH0pXG5cbiAgY29uc3QgYm91bmRzID0gbmV3IFJlbmRlcmFibGVCb3VuZHMobGVmdHMsIHJpZ2h0cywgdG9wcywgYm90dG9tcywgcmVxdWVzdC56b29tKVxuICByZXR1cm4gYm91bmRzXG59IiwiLy8gaW1wb3J0IHsgTWF0cml4IH0gZnJvbSBcInRzLW1hdHJpeFwiO1xuaW1wb3J0IHsgSVByb3BlcnR5IH0gZnJvbSBcIi4uL1BLRzEvSVByb3BlcnR5XCI7XG5pbXBvcnQgSVZlY3RvciBmcm9tIFwiLi4vUEtHMS9JVmVjdG9yXCI7XG5pbXBvcnQgeyBSZW5kZXJhYmxlQm91bmRzIH0gZnJvbSBcIi4uL1V0aWxpdGllcy9SZW5kZXJhYmxlQm91bmRzXCI7XG5pbXBvcnQgeyBJUmVuZGVyUGxhbk92ZXJyaWRlcyB9IGZyb20gXCIuL0lSZW5kZXJQbGFuT3ZlcnJpZGVzXCI7XG5pbXBvcnQgeyBJUmVuZGVyUmVxdWVzdCB9IGZyb20gXCIuL0lSZW5kZXJSZXF1ZXN0XCI7XG5pbXBvcnQgeyBOb2RlSXRlbVBhaXIgfSBmcm9tIFwiLi9Ob2RlSXRlbVBhaXJcIjtcbmltcG9ydCBSZW5kZXJQaWVjZSBmcm9tIFwiLi9SZW5kZXJQaWVjZVwiO1xuaW1wb3J0IEl0ZW1VdGlsaXRpZXMgZnJvbSBcIi4uL0l0ZW0vVXRpbGl0aWVzXCI7XG5pbXBvcnQgeyBJTG9hZGVkUGllY2VzLCBMb2FkUGllY2VzIH0gZnJvbSBcIi4vUGllY2VzTG9hZGVyXCI7XG5pbXBvcnQgeyBBbmNob3JSZXN1bHRzLCBCdWlsZEFuY2hvcnMgfSBmcm9tIFwiLi9BbmNob3JNYXBCdWlsZGVyXCI7XG5pbXBvcnQgeyBDb21wdXRlTG9ja3MsIExvY2tSZXN1bHRzIH0gZnJvbSBcIi4vTG9ja1Jlc29sdmVyXCI7XG5pbXBvcnQgeyBDYWxjQm91bmRzLCBDYWxjRmVldENlbnRlclBvc2l0aW9uIH0gZnJvbSBcIi4vUG9zaXRpb25DYWxjdWxhdG9yXCI7XG5pbXBvcnQgeyBJbnRlcm5hbFR5cGUgfSBmcm9tIFwiLi9JSXRlbUVudHJ5XCI7XG5cbmV4cG9ydCBjbGFzcyBSZW5kZXJQbGFuIHtcbiAgZnJhbWVQYWlyczogTm9kZUl0ZW1QYWlyW11cbiAgcmVxdWVzdDogSVJlbmRlclJlcXVlc3RcbiAgcmVuZGVyZWRDYW52YXM6IEhUTUxDYW52YXNFbGVtZW50XG4gIGxvYWRlZFBpZWNlczogSUxvYWRlZFBpZWNlcztcbiAgbG9ja3M6IExvY2tSZXN1bHRzO1xuICBhbmNob3JzOiBBbmNob3JSZXN1bHRzO1xuICBib3VuZHM6IFJlbmRlcmFibGVCb3VuZHM7XG4gIGZlZXRDZW50ZXI6IElWZWN0b3I7XG4gIG1pbmltdW1EZWxheTogbnVtYmVyO1xuXG4gIGNvbnN0cnVjdG9yKHJlcXVlc3Q6IElSZW5kZXJSZXF1ZXN0LCBmcmFtZVBhaXJzPzogQXJyYXk8Tm9kZUl0ZW1QYWlyPiwgY29weUZyb21QbGFuPzogUmVuZGVyUGxhbikge1xuICAgIGlmIChjb3B5RnJvbVBsYW4pIHtcbiAgICAgIHRoaXMuZnJhbWVQYWlycyA9IGNvcHlGcm9tUGxhbi5mcmFtZVBhaXJzXG4gICAgICB0aGlzLmxvYWRlZFBpZWNlcyA9IGNvcHlGcm9tUGxhbi5sb2FkZWRQaWVjZXNcbiAgICAgIHRoaXMubG9ja3MgPSBjb3B5RnJvbVBsYW4ubG9ja3NcbiAgICAgIHRoaXMuYW5jaG9ycyA9IGNvcHlGcm9tUGxhbi5hbmNob3JzXG4gICAgICB0aGlzLm1pbmltdW1EZWxheSA9IGNvcHlGcm9tUGxhbi5taW5pbXVtRGVsYXlcbiAgICAgIHRoaXMucmVxdWVzdCA9IHJlcXVlc3RcblxuICAgICAgdGhpcy5ib3VuZHMgPSBDYWxjQm91bmRzKHRoaXMucmVxdWVzdCwgdGhpcy5hbmNob3JzLCB0aGlzLmxvY2tzKVxuICAgICAgdGhpcy5mZWV0Q2VudGVyID0gQ2FsY0ZlZXRDZW50ZXJQb3NpdGlvbih0aGlzLnJlcXVlc3QsIHRoaXMuYm91bmRzLCB0aGlzLmFuY2hvcnMpXG4gICAgfSBlbHNlIGlmIChmcmFtZVBhaXJzKSB7XG4gICAgICB0aGlzLmZyYW1lUGFpcnMgPSBmcmFtZVBhaXJzXG4gICAgICB0aGlzLnJlcXVlc3QgPSByZXF1ZXN0XG4gICAgfSBlbHNlIHRocm93IG5ldyBFcnJvcihcIk5lZWQgZWl0aGVyIGEgcmVuZGVyIHBsYW4gdG8gY29weSBmcm9tIG9yIGEgc2V0IG9mIGZyYW1lUGFpcnMgdG8gYnVpbGQgb2ZmIG9mXCIpXG4gIH1cblxuICBhc3luYyBJbml0aWFsaXplKHBpZWNlT3ZlcnJpZGVzOiBJUmVuZGVyUGxhbk92ZXJyaWRlcykge1xuICAgIGNvbnN0IHsgem1hcCwgc21hcCB9ID0gdGhpcy5HZXRNYXBwaW5ncygpXG5cbiAgICB0aGlzLmxvYWRlZFBpZWNlcyA9IGF3YWl0IExvYWRQaWVjZXModGhpcy5mcmFtZVBhaXJzLCBwaWVjZU92ZXJyaWRlcylcbiAgICB0aGlzLmxvY2tzID0gYXdhaXQgQ29tcHV0ZUxvY2tzKHRoaXMubG9hZGVkUGllY2VzLnBpZWNlcywgem1hcCwgc21hcClcbiAgICB0aGlzLmFuY2hvcnMgPSBCdWlsZEFuY2hvcnModGhpcy5yZXF1ZXN0LCB0aGlzLmxvY2tzLmxvY2tlZFBpZWNlcylcbiAgICB0aGlzLmJvdW5kcyA9IENhbGNCb3VuZHModGhpcy5yZXF1ZXN0LCB0aGlzLmFuY2hvcnMsIHRoaXMubG9ja3MpXG4gICAgdGhpcy5mZWV0Q2VudGVyID0gQ2FsY0ZlZXRDZW50ZXJQb3NpdGlvbih0aGlzLnJlcXVlc3QsIHRoaXMuYm91bmRzLCB0aGlzLmFuY2hvcnMpXG4gICAgdGhpcy5taW5pbXVtRGVsYXkgPSBNYXRoLm1pbiguLi5PYmplY3QudmFsdWVzKHRoaXMubG9hZGVkUGllY2VzLmRlbGF5cykpXG4gIH1cblxuICBHZXRNYXBwaW5ncygpIHtcbiAgICAvLyBUaGVyZSBpc24ndCBhIHJlYWwgd2F5IHRvIHJlY29uY2lsZSBkaWZmZXJlbmNlcyBiZXR3ZWVuIHptYXBzLCBzbyB3ZSBsb2FkIGFsbCBhbmQgdXNlIHRoZSBsb3dlc3QgaXRlbSBJRFxuICAgIC8vIFRPRE86IFBvdGVudGlhbGx5IG9ubHkgbG9hZCBmb3IgPjAgYW5kIDwyMDAwMD9cbiAgICBjb25zdCBmaXJzdEl0ZW0gPSB0aGlzLmZyYW1lUGFpcnMuc29ydCgoYSwgYikgPT4gYS5pdGVtLmlkIC0gYi5pdGVtLmlkKVswXVxuICAgIGNvbnN0IHsgem1hcCwgc21hcCB9ID0gZmlyc3RJdGVtXG5cbiAgICByZXR1cm4geyB6bWFwLCBzbWFwIH1cbiAgfVxuXG4gIC8vIFJlbmRlcmluZzpcblxuICBSZW5kZXIoY2FudmFzPzogSFRNTENhbnZhc0VsZW1lbnQpIHtcbiAgICByZXR1cm4gdGhpcy5HZW5lcmF0ZUltYWdlVG9DYW52YXMoY2FudmFzKVxuICB9XG5cbiAgYXN5bmMgR2VuZXJhdGVJbWFnZVRvQ2FudmFzKGNhbnZhcz86IEhUTUxDYW52YXNFbGVtZW50KSA6IFByb21pc2U8SFRNTENhbnZhc0VsZW1lbnQ+IHtcbiAgICBpZiAodGhpcy5yZW5kZXJlZENhbnZhcykgcmV0dXJuIHRoaXMucmVuZGVyZWRDYW52YXNcblxuICAgIC8vIGNvbnNvbGUubG9nKFwiUmVuZGVyaW5nIHdpdGggYm91bmRzLi4uXCIsIHsuLi50aGlzLkJvdW5kc30pXG5cbiAgICBsZXQgY2FudmFzVGFyZ2V0ID0gY2FudmFzXG4gICAgaWYgKCFjYW52YXMpIHtcbiAgICAgIGNhbnZhc1RhcmdldCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2NhbnZhcycpXG4gICAgICBjYW52YXNUYXJnZXQuc3R5bGUuZGlzcGxheSA9ICdub25lJ1xuICAgIH1cblxuICAgIGNhbnZhc1RhcmdldC53aWR0aCA9IHRoaXMuYm91bmRzLnNpemUueFxuICAgIGNhbnZhc1RhcmdldC5oZWlnaHQgPSB0aGlzLmJvdW5kcy5zaXplLnlcbiAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKGNhbnZhc1RhcmdldClcblxuICAgIGNvbnN0IGN0eCA9IGNhbnZhc1RhcmdldC5nZXRDb250ZXh0KCcyZCcpXG4gICAgY3R4Lmdsb2JhbENvbXBvc2l0ZU9wZXJhdGlvbiA9IFwic291cmNlLW92ZXJcIlxuXG4gICAgY29uc3QgeyB6bWFwIH0gPSB0aGlzLkdldE1hcHBpbmdzKClcblxuICAgIGlmICh0aGlzLnJlcXVlc3QuZmxpcFgpIHtcbiAgICAgIGN0eC50cmFuc2xhdGUodGhpcy5ib3VuZHMuc2l6ZS54LCAwKVxuICAgICAgY3R4LnNjYWxlKC0xLCAxKVxuICAgIH1cbiAgICBjdHguc2NhbGUodGhpcy5yZXF1ZXN0Lnpvb20sIHRoaXMucmVxdWVzdC56b29tKVxuXG4gICAgY3R4LnRyYW5zbGF0ZSh0aGlzLmJvdW5kcy5vZmZzZXQueCwgdGhpcy5ib3VuZHMub2Zmc2V0LnkpXG5cbiAgICBhd2FpdCB6bWFwLnJlZHVjZShhc3luYyAodG90YWwsIG5hbWUpID0+IHtcbiAgICAgIGF3YWl0IHRvdGFsXG5cbiAgICAgIGNvbnN0IHBpZWNlcyA9IHRoaXMubG9ja3MubG9ja2VkUGllY2VzW25hbWVdXG4gICAgICBpZiAoIXBpZWNlcyB8fCAhcGllY2VzLmxlbmd0aCkgcmV0dXJuIHRvdGFsXG5cbiAgICAgIGlmIChwaWVjZXMubGVuZ3RoID4gMSkge1xuICAgICAgICBwaWVjZXMuc29ydCgoYSwgYikgPT4gKGEuaXRlbS5pdGVtLmludGVybmFsIHx8IDApIC0gKGIuaXRlbS5pdGVtLmludGVybmFsIHx8IDApKVxuICAgICAgfVxuXG4gICAgICBhd2FpdCBQcm9taXNlLmFsbChwaWVjZXMubWFwKGFzeW5jIHBpZWNlID0+IHtcbiAgICAgICAgY29uc3Qgb2Zmc2V0ID0gdGhpcy5hbmNob3JzLmNhbGN1bGF0ZWRPZmZzZXRzW3BpZWNlLnNsb3QgfHwgcGllY2Uuel1cblxuICAgICAgICBsZXQgcmVhbFJlbmRlckxvY2F0aW9uID0ge30gYXMgSVZlY3RvclxuICAgICAgICBpZiAocGllY2Uub3JpZ2luICYmIG9mZnNldClcbiAgICAgICAgICByZWFsUmVuZGVyTG9jYXRpb24gPSB7XG4gICAgICAgICAgICB4OiBvZmZzZXQueCAtIChwaWVjZS5vcmlnaW4ueCB8fCAwKSxcbiAgICAgICAgICAgIHk6IG9mZnNldC55IC0gKHBpZWNlLm9yaWdpbi55IHx8IDApXG4gICAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChvZmZzZXQpXG4gICAgICAgICAgcmVhbFJlbmRlckxvY2F0aW9uID0gb2Zmc2V0XG4gICAgICAgIGVsc2UgaWYgKHBpZWNlLm9yaWdpbilcbiAgICAgICAgICByZWFsUmVuZGVyTG9jYXRpb24gPSBwaWVjZS5vcmlnaW5cblxuICAgICAgICBjb25zdCBwaWVjZVRleHR1cmUgPSBhd2FpdCBwaWVjZS5HZXRDYW52YXNUZXh0dXJlKClcblxuICAgICAgICBjdHguc2F2ZSgpXG4gICAgICAgIGNvbnN0IG9yaWdpbmFsT3B0aW9ucyA9IHBpZWNlLml0ZW0uaXRlbVxuXG4gICAgICAgIGlmIChwaWVjZS5pdGVtLml0ZW0uaW50ZXJuYWwgPT0gSW50ZXJuYWxUeXBlLkhhaXJEeWUpIHtcbiAgICAgICAgICBjb25zdCBvZmZzZXRBbHBoYSA9IHRoaXMucmVxdWVzdC5zZWxlY3RlZEl0ZW1zLkhhaXIuYWxwaGEgPT0gbnVsbCA/IDEgOiB0aGlzLnJlcXVlc3Quc2VsZWN0ZWRJdGVtcy5IYWlyLmFscGhhXG4gICAgICAgICAgY3R4Lmdsb2JhbEFscGhhID0gKHRoaXMucmVxdWVzdC5oYWlyRHllLnBlcmNlbnRpbGUpICogb2Zmc2V0QWxwaGFcbiAgICAgICAgfSBlbHNlIGlmIChvcmlnaW5hbE9wdGlvbnMuYWxwaGEgIT0gbnVsbClcbiAgICAgICAgICBjdHguZ2xvYmFsQWxwaGEgPSBvcmlnaW5hbE9wdGlvbnMuYWxwaGFcblxuICAgICAgICBjdHguZHJhd0ltYWdlKHBpZWNlVGV4dHVyZSwgcmVhbFJlbmRlckxvY2F0aW9uLngsIHJlYWxSZW5kZXJMb2NhdGlvbi55KVxuXG4gICAgICAgIGN0eC5yZXN0b3JlKClcbiAgICAgIH0pKVxuICAgIH0sIFByb21pc2UucmVzb2x2ZSgpKVxuXG4gICAgaWYgKCFjYW52YXMpIHtcbiAgICAgIGNhbnZhc1RhcmdldC5yZW1vdmUoKVxuICAgICAgY2FudmFzVGFyZ2V0LnN0eWxlLmRpc3BsYXkgPSBcImJsb2NrXCJcbiAgICB9XG5cbiAgICB0aGlzLnJlbmRlcmVkQ2FudmFzID0gY2FudmFzVGFyZ2V0XG4gICAgcmV0dXJuIGNhbnZhc1RhcmdldFxuICB9XG59XG4iLCJpbXBvcnQgeyBJUHJvcGVydHkgfSBmcm9tIFwiLi4vUEtHMS9JUHJvcGVydHlcIjtcbmltcG9ydCB7IElSZW5kZXJQbGFuT3ZlcnJpZGVzIH0gZnJvbSBcIi4vSVJlbmRlclBsYW5PdmVycmlkZXNcIjtcbmltcG9ydCB7IE5vZGVJdGVtUGFpciB9IGZyb20gXCIuL05vZGVJdGVtUGFpclwiO1xuaW1wb3J0IFJlbmRlclBpZWNlIGZyb20gXCIuL1JlbmRlclBpZWNlXCI7XG5cbmV4cG9ydCBpbnRlcmZhY2UgSUxvYWRlZFBpZWNlcyB7XG4gIHBpZWNlczogUmVjb3JkPHN0cmluZywgUmVuZGVyUGllY2VbXT5cbiAgZGVsYXlzOiBSZWNvcmQ8c3RyaW5nLCBudW1iZXI+XG4gIG1pbkRlbGF5OiBudW1iZXJcbn1cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBMb2FkUGllY2VzKGZyYW1lUGFpcnM6IE5vZGVJdGVtUGFpcltdLCBwaWVjZU92ZXJyaWRlczogSVJlbmRlclBsYW5PdmVycmlkZXMpIDogUHJvbWlzZTxJTG9hZGVkUGllY2VzPiB7XG4gIC8vIFJlZHVjZSBkb3duIHRvIHRoZSBpbmRpdmlkdWFsIGZyYW1lIGNvbXBvbmVudHMgKEJvZHkgZnJhbWUgLT4gYEJvZHlgLCBgQXJtYClcbiAgY29uc3QgY2FudmFzUGllY2VzID0gZnJhbWVQYWlycy5yZWR1Y2UoKHRvdGFsLCBjdXJyZW50KSA9PiB7XG4gICAgdG90YWwucHVzaC5hcHBseSh0b3RhbCwgY3VycmVudC5ub2RlLmNoaWxkcmVuLm1hcChjaGlsZCA9PiAoe2NoaWxkLCBpdGVtOiBjdXJyZW50fSkpKVxuXG4gICAgcmV0dXJuIHRvdGFsXG4gIH0sIFtdKSBhcyBBcnJheTx7Y2hpbGQ6IElQcm9wZXJ0eSwgaXRlbTogTm9kZUl0ZW1QYWlyfT5cblxuICAvLyBIYW5kbGUgYW55IFVPTHMgLyBJbkxpbmtzIC8gT3V0TGlua3MgYW5kIHBhaXIgd2l0aCB0aGUgb3JpZ2luYWxcbiAgY29uc3QgcmVzb2x2ZWRDYW52YXNQaWVjZXMgPSBhd2FpdCBQcm9taXNlLmFsbChjYW52YXNQaWVjZXMubWFwKGFzeW5jIGNhbnZhc1BpZWNlID0+IHtcbiAgICBsZXQgcmVzb2x2ZWQgPSBudWxsXG4gICAgbGV0IG5leHRSZXNvbHZlZCA9IGF3YWl0IGNhbnZhc1BpZWNlLmNoaWxkLnJlc29sdmUoKVxuXG4gICAgZG8ge1xuICAgICAgcmVzb2x2ZWQgPSBuZXh0UmVzb2x2ZWRcbiAgICAgIG5leHRSZXNvbHZlZCA9IGF3YWl0IHJlc29sdmVkLnJlc29sdmUoKVxuICAgIH0gd2hpbGUgKG5leHRSZXNvbHZlZCAhPSByZXNvbHZlZClcblxuICAgIHJldHVybiB7XG4gICAgICAuLi5jYW52YXNQaWVjZSxcbiAgICAgIHJlc29sdmVkXG4gICAgfVxuICB9KSkgYXMgQXJyYXk8e2NoaWxkOiBJUHJvcGVydHksIHJlc29sdmVkOiBJUHJvcGVydHksIGl0ZW06IE5vZGVJdGVtUGFpcn0+XG5cbiAgbGV0IGRlbGF5cyA9IHt9IGFzIFJlY29yZDxzdHJpbmcsIG51bWJlcj5cblxuICAvLyBNYWtlIG91ciByZW5kZXIgcGllY2UgbWV0YSBvYmplY3RzIGFuZCBidWlsZCBhIGRpY3Rpb25hcnlcbiAgY29uc3QgcGllY2VzID0gcmVzb2x2ZWRDYW52YXNQaWVjZXNcbiAgICAuZmlsdGVyKHJlc29sdmVkUGllY2UgPT4ge1xuICAgICAgaWYgKHJlc29sdmVkUGllY2UuY2hpbGQubmFtZSA9PT0gJ2RlbGF5JykgZGVsYXlzW3Jlc29sdmVkUGllY2UuaXRlbS5pdGVtLmlkXSA9IHJlc29sdmVkUGllY2UuY2hpbGQudmFsdWVcbiAgICAgIHJldHVybiByZXNvbHZlZFBpZWNlLmNoaWxkLnR5cGUgPT09ICdjYW52YXMnIHx8IHJlc29sdmVkUGllY2UucmVzb2x2ZWQudHlwZSA9PT0gJ2NhbnZhcydcbiAgICB9KVxuICAgIC5tYXAocmVzb2x2ZWRQaWVjZSA9PiBuZXcgUmVuZGVyUGllY2UocmVzb2x2ZWRQaWVjZS5pdGVtLCByZXNvbHZlZFBpZWNlLmNoaWxkLCByZXNvbHZlZFBpZWNlLnJlc29sdmVkKSlcbiAgICAucmVkdWNlKCh0b3RhbCwgY3VycmVudCkgPT4ge1xuICAgICAgbGV0IHBpZWNlID0gY3VycmVudFxuXG4gICAgICBpZiAocGllY2VPdmVycmlkZXMgJiYgcGllY2VPdmVycmlkZXMuc2xvdHMpIHtcbiAgICAgICAgY29uc3Qgb3ZlcnJpZGVzID0gcGllY2VPdmVycmlkZXMuc2xvdHNbY3VycmVudC5zbG90XVxuICAgICAgICBpZiAob3ZlcnJpZGVzKSB7XG4gICAgICAgICAgcGllY2UgPSBPYmplY3QuYXNzaWduKGN1cnJlbnQsIG92ZXJyaWRlcylcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAoIWN1cnJlbnQudmlzaWJsZSkgcmV0dXJuIHRvdGFsXG5cbiAgICAgIC8vIFRPRE86IFNob3VsZCB0aGlzIGJlIC56IG9yIC5zbG90P1xuICAgICAgLy8gU2VlbXMgbGlrZSAueiwgYnV0IEkgZmVlbCBsaWtlIC5zbG90IGZhY3RvcnMgaW4gaGVyZSBzb21lLWhvdy5cbiAgICAgIGNvbnN0IG5hbWUgPSBjdXJyZW50LnogfHwgY3VycmVudC5zbG90XG4gICAgICBpZiAodG90YWxbbmFtZV0pXG4gICAgICAgIHRvdGFsW25hbWVdLnB1c2gocGllY2UpXG4gICAgICBlbHNlXG4gICAgICAgIHRvdGFsW25hbWVdID0gW3BpZWNlXVxuICAgICAgcmV0dXJuIHRvdGFsXG4gICAgfSwge30gYXMgUmVjb3JkPHN0cmluZywgUmVuZGVyUGllY2VbXT4pXG5cbiAgcmV0dXJuIHtcbiAgICBwaWVjZXMsXG4gICAgZGVsYXlzLFxuICAgIG1pbkRlbGF5OiBNYXRoLm1pbiguLi5PYmplY3QudmFsdWVzKGRlbGF5cykpXG4gIH1cbn1cbiIsImltcG9ydCBJdGVtVXRpbGl0aWVzIGZyb20gXCIuLi9JdGVtL1V0aWxpdGllc1wiO1xuaW1wb3J0IHsgTm9kZUl0ZW1QYWlyIH0gZnJvbSBcIi4vTm9kZUl0ZW1QYWlyXCI7XG5pbXBvcnQgUmVuZGVyUGllY2UgZnJvbSBcIi4vUmVuZGVyUGllY2VcIjtcblxuZXhwb3J0IGludGVyZmFjZSBMb2NrUmVzdWx0cyB7XG4gIGxvY2tzOiBSZWNvcmQ8c3RyaW5nLCBOb2RlSXRlbVBhaXI+O1xuICBsb2NrZWRQaWVjZXM6IFJlY29yZDxzdHJpbmcsIFJlbmRlclBpZWNlW10+O1xufVxuXG5mdW5jdGlvbiBCdWlsZEVxdWlwRXhjbHVzaXZlTG9ja3Moem1hcDogc3RyaW5nW10sIGFsbFBpZWNlczogUmVjb3JkPHN0cmluZywgUmVuZGVyUGllY2VbXT4pIDogUmVjb3JkPHN0cmluZywgTm9kZUl0ZW1QYWlyPiB7XG4gIC8vIFByaW9yaXR5IG9mZiBvZiB0aGUgem1hcCBhbmQgYnVpbGQgYSBkaWN0aW9uYXJ5IG9mIHdoaWNoIGl0ZW1zIGhhdmUgd2hpY2ggbG9ja3NcbiAgY29uc3QgbG9ja3MgPSB6bWFwLnJlZHVjZSgodG90YWwsIGN1cnJlbnQpID0+IHtcbiAgICBjb25zdCBwaWVjZXMgPSBhbGxQaWVjZXNbY3VycmVudF07XG4gICAgaWYgKCFwaWVjZXMgfHwgIXBpZWNlcy5sZW5ndGgpXG4gICAgICByZXR1cm4gdG90YWw7XG5cbiAgICBwaWVjZXMuZm9yRWFjaChwaWVjZSAgPT4gcGllY2UuaXRlbS5pc2xvdC5mb3JFYWNoKGRlbWFuZExvY2sgPT4gdG90YWxbZGVtYW5kTG9ja10gPSBwaWVjZS5pdGVtKSk7XG4gICAgcmV0dXJuIHRvdGFsO1xuICB9LCB7fSBhcyBSZWNvcmQ8c3RyaW5nLCBOb2RlSXRlbVBhaXI+KTtcblxuICAvLyBJZiBhbnkgaXRlbSBkaWRuJ3QgZ2V0IGFsbCBvZiBpdHMgZGVtYW5kZWQgbG9ja3MsIHJlbW92ZSBleHRyYW5lb3VzIC8gZmFpbGVkIGxvY2tzXG4gIHptYXAuZm9yRWFjaCh6bWFwTGluZSA9PiB7XG4gICAgY29uc3QgcGllY2VzID0gYWxsUGllY2VzW3ptYXBMaW5lXVxuICAgIGlmICghcGllY2VzIHx8ICFwaWVjZXMubGVuZ3RoKSByZXR1cm5cblxuICAgIHBpZWNlcy5mb3JFYWNoKHBpZWNlID0+IHtcbiAgICAgIGNvbnN0IHJlcXVpcmVkTG9ja3MgPSBwaWVjZS5pdGVtLmlzbG90XG4gICAgICBjb25zdCBoYXNBbGxMb2NrcyA9IHJlcXVpcmVkTG9ja3MuZXZlcnkoZXhjbHVzaXZlTG9jayA9PiBsb2Nrc1tleGNsdXNpdmVMb2NrXSA9PSBwaWVjZS5pdGVtKVxuXG4gICAgICAvLyBJdGVtIGNhbid0IGJlIHJlbmRlcmVkIGFzIGl0IGRvZXNuJ3QgaGF2ZSBpdHMgcmVxdWlyZWQgbG9ja3NcbiAgICAgIGlmICghaGFzQWxsTG9ja3MpIHtcbiAgICAgICAgcmVxdWlyZWRMb2Nrcy5mb3JFYWNoKGV4Y2x1c2l2ZUxvY2sgPT4ge1xuICAgICAgICAgIGlmIChsb2Nrc1tleGNsdXNpdmVMb2NrXSA9PSBwaWVjZS5pdGVtKVxuICAgICAgICAgIGRlbGV0ZSBsb2Nrc1tleGNsdXNpdmVMb2NrXVxuICAgICAgICB9KVxuICAgICAgfVxuICAgIH0pXG4gIH0pXG5cbiAgcmV0dXJuIGxvY2tzXG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBDb21wdXRlTG9ja3MoYWxsUGllY2VzOiBSZWNvcmQ8c3RyaW5nLCBSZW5kZXJQaWVjZVtdPiwgem1hcDogc3RyaW5nW10sIHNtYXA6IFJlY29yZDxzdHJpbmcsIHN0cmluZ1tdPikgOiBQcm9taXNlPExvY2tSZXN1bHRzPiB7XG4gIGNvbnN0IGJvZHkgPSBhbGxQaWVjZXMuYm9keSB8fCBhbGxQaWVjZXMuYmFja0JvZHlcbiAgY29uc3QgZmFjZVByb3BlcnR5ID0gYXdhaXQgYm9keVswXS5pdGVtLm5vZGUucmVzb2x2ZShcImZhY2VcIikgLy8gVGhlcmUgc2hvdWxkIHJlYWxseSBvbmx5IGV2ZXIgYmUgb25lIGJvZHkgdGJoXG4gIC8vIENhbiBoYXZlIGEgZmFjZSBpZiB3ZSBkb24ndCBoYXZlIGEgZmFjZSBwcm9wZXJ0eSwgb3IgdGhlIHZhbHVlIGlzbid0IDBcbiAgY29uc3QgaGFzRmFjZSA9IGZhY2VQcm9wZXJ0eSAhPSBudWxsICYmIGZhY2VQcm9wZXJ0eS52YWx1ZSAhPSAwXG5cbiAgbGV0IGFsbG93ZWRQaWVjZXMgPSB7IC4uLmFsbFBpZWNlcyB9XG5cbiAgLy8gSWYgdGhlIGJvZHkgZXhwbGljaXRseSByZW1vdmVzIHRoZSBmYWNlLCByZW1vdmUgZmFjZSArIGFueSBhY2Nlc3Nvcmllc1xuICBpZiAoIWhhc0ZhY2UpIHtcbiAgICBPYmplY3Qua2V5cyhhbGxvd2VkUGllY2VzKS5mb3JFYWNoKHBpZWNlTmFtZSA9PiB7XG4gICAgICBjb25zdCBwaWVjZXMgPSBhbGxvd2VkUGllY2VzW3BpZWNlTmFtZV1cbiAgICAgIHJldHVybiBwaWVjZXMuZmlsdGVyKHBpZWNlID0+IHtcbiAgICAgICAgY29uc3QgaXNGYWNlUmVsYXRlZCA9IEl0ZW1VdGlsaXRpZXMucHJvdG90eXBlLklzRmFjZU9yQWNjZXNzb3J5SWQocGllY2UuaXRlbS5pdGVtLmlkKVxuICAgICAgICAhaXNGYWNlUmVsYXRlZFxuICAgICAgfSlcbiAgICB9KVxuICAgIGFsbG93ZWRQaWVjZXMgPSBhbGxvd2VkUGllY2VzXG4gIH1cblxuICAvLyBTdGFnZSAxOiBEZXRlcm1pbmUgbG9ja2VkIGluIGhpZ2gtbGV2ZWwgZXF1aXBzXG4gIC8vIFRoaXMgaXMgc28gRXF1aXBBIGNhbiBjb21wbGV0ZWx5IGxvY2sgb3V0IEVxdWlwQiAocHJvYmFibHkgZm9yIENhc2ggaXRlbXM/KVxuICBjb25zdCBsb2NrZWRJbkl0ZW1zID0gQnVpbGRFcXVpcEV4Y2x1c2l2ZUxvY2tzKHptYXAsIGFsbG93ZWRQaWVjZXMpXG5cbiAgY29uc3QgbG9ja3MgPSB6bWFwLnJlZHVjZSgodG90YWwsIHptYXBMaW5lKSA9PiB7XG4gICAgY29uc3QgcGllY2UgPSBsb2NrZWRJbkl0ZW1zW3ptYXBMaW5lXVxuICAgIGlmICghcGllY2UpIHJldHVybiB0b3RhbFxuXG4gICAgcGllY2UudnNsb3QuZm9yRWFjaChzbG90ID0+IHRvdGFsW3Nsb3RdID0gcGllY2UpXG4gICAgcmV0dXJuIHRvdGFsXG4gIH0sIHt9IGFzIFJlY29yZDxzdHJpbmcsIE5vZGVJdGVtUGFpcj4pXG5cbiAgY29uc3QgbG9ja2VkUGllY2VzID0ge30gYXMgUmVjb3JkPHN0cmluZywgUmVuZGVyUGllY2VbXT5cbiAgLy8gRGV0ZXJtaW5lIGlmIHRoZSBpbmRpdmlkdWFsIHBpZWNlcyBoYXZlIHJlcXVpcmVkIGxvY2tzXG4gIE9iamVjdC5rZXlzKGFsbG93ZWRQaWVjZXMpLmZvckVhY2gocGllY2VOYW1lID0+IHtcbiAgICBjb25zdCBwaWVjZXMgPSBhbGxvd2VkUGllY2VzW3BpZWNlTmFtZV1cbiAgICBsb2NrZWRQaWVjZXNbcGllY2VOYW1lXSA9IHBpZWNlcy5maWx0ZXIocGllY2UgPT4ge1xuICAgICAgLy8gQ2hlY2sgUGFudHMvU2hvZXMgaWYgdGhpcyBnZXRzIGNoYW5nZWQsIGFzIHRoZSBvcHBvc2l0ZSBjb2FsZXNjYW5jZSBjYXVzZXMgcGFudHMgdG8gZGlzYXBwZWFyIHdpdGggc2hvZXMuLi5cbiAgICAgIGxldCBwaWVjZVJlcXVpcmVkTG9jayA9IHNtYXBbcGllY2Uuc2xvdF0gfHwgcGllY2UuaXRlbS52c2xvdFxuXG4gICAgICAvLyBTaG91bGQgd2UganVzdCBjaGVjayB0aGUgcGllY2VOYW1lP1xuICAgICAgaWYgKHBpZWNlLnNsb3QgPT09IFwicGFudHNcIikgLy8gVGhhbmtzIE5leG9uXG4gICAgICAgIHBpZWNlUmVxdWlyZWRMb2NrID0gW1wiUG5cIl1cbiAgICAgIGlmIChwaWVjZS5zbG90ID09PSBcIm1haWxBcm1cIilcbiAgICAgICAgcGllY2VSZXF1aXJlZExvY2sgPSBbXCJNYVwiXVxuXG4gICAgICBjb25zdCBwaWVjZUhhc0xvY2tzID0gcGllY2VSZXF1aXJlZExvY2s/LmV2ZXJ5KHJlcXVpcmVkTG9jayA9PiB7XG4gICAgICBjb25zdCBoYXNMb2NrID0gbG9ja3NbcmVxdWlyZWRMb2NrXSA9PT0gcGllY2UuaXRlbSB8fCAhbG9ja3NbcmVxdWlyZWRMb2NrXVxuXG4gICAgICBpZiAoIWhhc0xvY2sgJiYgcGllY2UuaXRlbS5hbGxvd0NvbmZsaWN0aW5nTG9ja3NXaXRoICYmIGxvY2tzW3JlcXVpcmVkTG9ja10gPT09IHBpZWNlLml0ZW0uYWxsb3dDb25mbGljdGluZ0xvY2tzV2l0aCkge1xuICAgICAgICAvLyBPdmVycmlkZSwgdG8gYWxsb3cgZm9yIGR5ZWQgaGFpclxuICAgICAgICByZXR1cm4gdHJ1ZVxuICAgICAgfSBlbHNlIGlmICghaGFzTG9jayAmJiBsb2Nrc1tyZXF1aXJlZExvY2tdLmFsbG93Q29uZmxpY3RpbmdMb2Nrc1dpdGggPT09IHBpZWNlLml0ZW0pIHtcbiAgICAgICAgLy8gSW52ZXJzZSByZWxhdGlvbnNoaXAgYmVjYXVzZSB3ZSBjYW4ndCBndWFyYW50ZWUgb3JkZXJpbmdcbiAgICAgICAgcmV0dXJuIHRydWVcbiAgICAgIH1cblxuICAgICAgICByZXR1cm4gaGFzTG9ja1xuICAgICAgfSlcbiAgICAgIC8vIEl0ZW0gcGllY2UgaGFzIG5vIGxvY2tzLCBjYW4ganVzdCBjb250aW51ZVxuXG4gICAgICBwaWVjZS5sb2NrQmxhbWUgPSBwaWVjZVJlcXVpcmVkTG9jaz8ubWFwKHJlcXVpcmVkTG9jayA9PiBsb2Nrc1tyZXF1aXJlZExvY2tdKVxuICAgICAgcGllY2UuaGFzTG9jayA9ICFwaWVjZVJlcXVpcmVkTG9jayB8fCBwaWVjZUhhc0xvY2tzXG5cbiAgICAgIHJldHVybiAoIXBpZWNlUmVxdWlyZWRMb2NrIHx8IHBpZWNlSGFzTG9ja3MpXG4gICAgfSlcbiAgfSlcblxuICByZXR1cm4ge1xuICAgIGxvY2tzLFxuICAgIGxvY2tlZFBpZWNlc1xuICB9XG59IiwiaW1wb3J0IElWZWN0b3IgZnJvbSBcIi4uL1BLRzEvSVZlY3RvclwiO1xuaW1wb3J0IHsgSVJlbmRlclJlcXVlc3QgfSBmcm9tIFwiLi9JUmVuZGVyUmVxdWVzdFwiO1xuaW1wb3J0IFJlbmRlclBpZWNlIGZyb20gXCIuL1JlbmRlclBpZWNlXCI7XG5cbmV4cG9ydCBpbnRlcmZhY2UgQW5jaG9yUmVzdWx0cyB7XG4gIGFuY2hvcnM6IFJlY29yZDxzdHJpbmcsIElWZWN0b3I+O1xuICBjYWxjdWxhdGVkT2Zmc2V0czogUmVjb3JkPHN0cmluZywgSVZlY3Rvcj5cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIEJ1aWxkQW5jaG9ycyhyZXF1ZXN0OiBJUmVuZGVyUmVxdWVzdCwgbG9ja2VkUGllY2VzOiBSZWNvcmQ8c3RyaW5nLCBSZW5kZXJQaWVjZVtdPikgOiBBbmNob3JSZXN1bHRzIHtcbiAgbGV0IGFsbFBpZWNlcyA9IE9iamVjdC52YWx1ZXMobG9ja2VkUGllY2VzKVxuICAgIC5yZWR1Y2UoKHRvdGFsLCBjdXJyZW50KSA9PiB7IHRvdGFsLnB1c2goLi4uY3VycmVudCk7IHJldHVybiB0b3RhbCB9LCBbXSlcbiAgICAuZmlsdGVyKHBpZWNlID0+IE9iamVjdC5rZXlzKHBpZWNlLm1hcCkubGVuZ3RoID4gMClcbiAgICAucmV2ZXJzZSgpXG5cbiAgY29uc3QgYW5jaG9ycyA9IHtcbiAgICBuYXZlbDogeyB4OiAwLCB5OiAwIH1cbiAgfSBhcyBSZWNvcmQ8c3RyaW5nLCBJVmVjdG9yPlxuXG4gIGlmIChyZXF1ZXN0LmFjdGlvbi5zdGFydHNXaXRoKCdhbGVydCcpIHx8IHJlcXVlc3QuYWN0aW9uLnN0YXJ0c1dpdGgoJ2hlYWwnKSkge1xuICAgIHN3aXRjaCAoTnVtYmVyKHJlcXVlc3QuZnJhbWUpKSB7XG4gICAgICBjYXNlIDA6XG4gICAgICAgIGFuY2hvcnNbJ2hhbmRNb3ZlJ10gPSB7IHg6IC04LCB5OiAtMiB9XG4gICAgICBicmVhaztcbiAgICAgIGNhc2UgMTpcbiAgICAgICAgYW5jaG9yc1snaGFuZE1vdmUnXSA9IHsgeDogLTEwLCB5OiAwIH1cbiAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAyOlxuICAgICAgICBhbmNob3JzWydoYW5kTW92ZSddID0geyB4OiAtMTIsIHk6IDMgfVxuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG5cbiAgLy8gS2VlcCBpdGVyYXRpbmcgdW50aWwgdGhlcmUncyBubyBtb3JlIG1pc3Npbmcgb2Zmc2V0c1xuICBsZXQgYWR2YW5jZWQgPSB0cnVlO1xuICBjb25zdCBjYWxjdWxhdGVkT2Zmc2V0cyA9IHt9IGFzIFJlY29yZDxzdHJpbmcsIElWZWN0b3I+XG4gIHdoaWxlIChhbGxQaWVjZXMubGVuZ3RoID4gMCkge1xuICAgIGlmICghYWR2YW5jZWQpIGJyZWFrXG5cbiAgICBhZHZhbmNlZCA9IGZhbHNlXG4gICAgLy8gU2VhcmNoIGZvciBhbiBvZmZzZXQgdGhhdCB3b3Jrc1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYWxsUGllY2VzLmxlbmd0aDsgKytpKSB7XG4gICAgICBjb25zdCBwaWVjZSA9IGFsbFBpZWNlc1tpXVxuICAgICAgY29uc3QgeyBtYXAgfSA9IHBpZWNlXG4gICAgICBjb25zdCBhbmNob3JlZE9mZnNldE5hbWUgPSBPYmplY3Qua2V5cyhtYXApLmZpbmQoYW5jaG9yTmFtZSA9PiBhbmNob3JzW2FuY2hvck5hbWVdKVxuICAgICAgY29uc3QgYW5jaG9yZWRPZmZzZXQgPSBtYXBbYW5jaG9yZWRPZmZzZXROYW1lXVxuXG4gICAgICAvLyBJZiB0aGlzIG9mZnNldCBkb2Vzbid0IGhhdmUgYW4gYW5jaG9yLCBjb250aW51ZSBzZWFyY2hpbmdcbiAgICAgIGlmICghYW5jaG9yZWRPZmZzZXQpIGNvbnRpbnVlXG5cbiAgICAgIGNvbnN0IGFuY2hvcmVkVG8gPSBhbmNob3JzW2FuY2hvcmVkT2Zmc2V0TmFtZV1cbiAgICAgIGNvbnN0IGNvbXB1dGVkT2Zmc2V0ID0ge1xuICAgICAgICB4OiAoYW5jaG9yZWRUby54IC0gYW5jaG9yZWRPZmZzZXQueCksXG4gICAgICAgIHk6IChhbmNob3JlZFRvLnkgLSBhbmNob3JlZE9mZnNldC55KSxcbiAgICAgICAgYmFzZWRPZmZBbmNob3I6IGFuY2hvcmVkVG8sXG4gICAgICAgIGFuY2hvckRpc3RhbmNlOiBhbmNob3JlZE9mZnNldCxcbiAgICAgICAgYW5jaG9yTmFtZTogYW5jaG9yZWRPZmZzZXROYW1lXG4gICAgICB9XG5cbiAgICAgIGNhbGN1bGF0ZWRPZmZzZXRzW3BpZWNlLnNsb3QgfHwgcGllY2Uuel0gPSBjb21wdXRlZE9mZnNldFxuXG4gICAgICAvLyBQdXNoIGFueSBuZXcgb2Zmc2V0cyB0byB0aGUgZXN0YWJsaXNoZWQgYW5jaG9yc1xuICAgICAgT2JqZWN0LmtleXMobWFwKVxuICAgICAgLmZpbHRlcihvZmZzZXQgPT4gb2Zmc2V0ICE9IGFuY2hvcmVkT2Zmc2V0TmFtZSlcbiAgICAgIC5mb3JFYWNoKGNoaWxkT2Zmc2V0TmFtZSA9PiB7XG4gICAgICAgIGNvbnN0IGNoaWxkT2Zmc2V0ID0gbWFwW2NoaWxkT2Zmc2V0TmFtZV1cbiAgICAgICAgY29uc3QgY29tcHV0ZWROZXdBbmNob3IgPSB7XG4gICAgICAgICAgeDogY29tcHV0ZWRPZmZzZXQueCArIGNoaWxkT2Zmc2V0LngsXG4gICAgICAgICAgeTogY29tcHV0ZWRPZmZzZXQueSArIGNoaWxkT2Zmc2V0LnlcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IGV4aXN0aW5nQW5jaG9yID0gYW5jaG9yc1tjaGlsZE9mZnNldE5hbWVdXG4gICAgICBpZiAoIWV4aXN0aW5nQW5jaG9yKVxuICAgICAgICAgIGFuY2hvcnNbY2hpbGRPZmZzZXROYW1lXSA9IGNvbXB1dGVkTmV3QW5jaG9yXG4gICAgICAgIGVsc2VcbiAgICAgICAgICBjb25zb2xlLndhcm4oXCJBbmNob3Igb2Zmc2V0IGNoYWluIGRvZXNuJ3Qgc2VlbSB2YWxpZFwiKVxuICAgICAgfSlcblxuICAgICAgYWxsUGllY2VzID0gYWxsUGllY2VzLmZpbHRlcihjID0+IGMgIT0gcGllY2UpXG4gICAgICBhZHZhbmNlZCA9IHRydWVcbiAgICB9XG4gIH1cblxuICByZXR1cm4ge1xuICAgIGNhbGN1bGF0ZWRPZmZzZXRzLFxuICAgIGFuY2hvcnNcbiAgfVxufSIsImltcG9ydCBJdGVtVXRpbGl0aWVzIGZyb20gXCIuLi9JdGVtL1V0aWxpdGllc1wiO1xuaW1wb3J0IElWZWN0b3IgZnJvbSBcIi4uL1BLRzEvSVZlY3RvclwiO1xuaW1wb3J0IHsgSUdlbmVyYXRlTWF4RnJhbWVzIH0gZnJvbSBcIi4vSUNhbGN1bGF0ZU1heEZyYW1lc1wiO1xuaW1wb3J0IHsgSVJlbmRlclJlcXVlc3QgfSBmcm9tIFwiLi9JUmVuZGVyUmVxdWVzdFwiO1xuaW1wb3J0IElHZW5lcmF0ZVJlbmRlclBsYW5zIGZyb20gXCIuL1JlbmRlcmVyXCI7XG5pbXBvcnQgUmVuZGVyUGllY2UgZnJvbSBcIi4vUmVuZGVyUGllY2VcIjtcbmltcG9ydCB7IFJlbmRlclBsYW4gfSBmcm9tIFwiLi9SZW5kZXJQbGFuXCI7XG5cbmV4cG9ydCBjbGFzcyBBbmltYXRlZFJlbmRlclBsYW4ge1xuICBPcmlnaW5hbFJlbmRlclJlcXVlc3Q6IElSZW5kZXJSZXF1ZXN0XG4gIENhbnZhczogSFRNTENhbnZhc0VsZW1lbnQ7XG4gIGNvbnRleHQ6IENhbnZhc1JlbmRlcmluZ0NvbnRleHQyRDtcbiAgbWF4RnJhbWU6IG51bWJlcjtcbiAgZnJhbWVJbmRleDogbnVtYmVyO1xuICBmcmFtZXM6IFJlbmRlclBsYW5bXTtcbiAgZXF1aXBPdmVycmlkZXM6IFJlY29yZDxzdHJpbmcsIFJlbmRlclBpZWNlPjtcbiAgbWF4RnJhbWVzQ2FsY3VsYXRvcjogSUdlbmVyYXRlTWF4RnJhbWVzO1xuICByZW5kZXJlcjogSUdlbmVyYXRlUmVuZGVyUGxhbnM7XG4gIE1heEZlZXRQb3NpdGlvbjogSVZlY3RvcjtcbiAgd2lkdGg6IG51bWJlcjtcbiAgaGVpZ2h0OiBudW1iZXI7XG4gIG5leHRGcmFtZVRpbWVvdXQ6IE5vZGVKUy5UaW1lb3V0O1xuXG4gIHB1YmxpYyBnZXQgZnJhbWUoKTogUmVuZGVyUGxhbiB7XG4gICAgcmV0dXJuIHRoaXMuZnJhbWVzW3RoaXMuZnJhbWVJbmRleF07XG4gIH1cbiAgcHVibGljIHNldCBmcmFtZSh2YWx1ZTogUmVuZGVyUGxhbikge1xuICAgIGNvbnN0IGluZGV4ID0gIHRoaXMuZnJhbWVzLmluZGV4T2YodmFsdWUpXG4gICAgaWYgKGluZGV4ID09PSAtMSlcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIkludmFsaWQgZnJhbWUgc3BlY2lmaWVkLCBtdXN0IGJlIGJhc2VkIG9mZiBvZiB0aGUgZXhpc3RpbmcgZnJhbWVzLlwiKVxuXG4gICAgdGhpcy5mcmFtZUluZGV4ID0gaW5kZXhcbiAgfVxuXG4gIGNvbnN0cnVjdG9yKHJlbmRlcmVyOiBJR2VuZXJhdGVSZW5kZXJQbGFucywgbWF4RnJhbWVzQ2FsY3VsYXRvcjogSUdlbmVyYXRlTWF4RnJhbWVzLCByZXF1ZXN0OiBJUmVuZGVyUmVxdWVzdCwgZXF1aXBPdmVycmlkZXM/OiBSZWNvcmQ8c3RyaW5nLCBSZW5kZXJQaWVjZT4pIHtcbiAgICB0aGlzLk9yaWdpbmFsUmVuZGVyUmVxdWVzdCA9IHJlcXVlc3RcblxuICAgIHRoaXMuQ2FudmFzID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnY2FudmFzJylcbiAgICB0aGlzLkNhbnZhcy5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnXG4gICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZCh0aGlzLkNhbnZhcylcbiAgICB0aGlzLmNvbnRleHQgPSB0aGlzLkNhbnZhcy5nZXRDb250ZXh0KCcyZCcpXG4gICAgdGhpcy5yZW5kZXJlciA9IHJlbmRlcmVyXG4gICAgdGhpcy5lcXVpcE92ZXJyaWRlcyA9IGVxdWlwT3ZlcnJpZGVzXG4gICAgdGhpcy5tYXhGcmFtZXNDYWxjdWxhdG9yID0gbWF4RnJhbWVzQ2FsY3VsYXRvclxuICB9XG5cbiAgYXN5bmMgUHJlcGFyZSgpIHtcbiAgICBjb25zdCBzZWxlY3RlZEl0ZW1Qb3NpdGlvbkJ5SWQgPSBPYmplY3Qua2V5cyh0aGlzLk9yaWdpbmFsUmVuZGVyUmVxdWVzdC5zZWxlY3RlZEl0ZW1zKS5yZWR1Y2UoKHRvdGFsLCBwb3NpdGlvbikgPT4ge1xuICAgICAgY29uc3QgaXRlbUlkID0gdGhpcy5PcmlnaW5hbFJlbmRlclJlcXVlc3Quc2VsZWN0ZWRJdGVtc1twb3NpdGlvbl0uaWRcbiAgICAgIHRvdGFsW2l0ZW1JZC50b1N0cmluZygpXSA9IHBvc2l0aW9uXG5cbiAgICAgIHJldHVybiB0b3RhbFxuICAgIH0sIHt9IGFzIFJlY29yZDxzdHJpbmcsIHN0cmluZz4pXG5cbiAgICBjb25zdCBbbWF4RmFjZUZyYW1lcywgbWF4RnJhbWVzXSA9IGF3YWl0IFByb21pc2UuYWxsKFtcbiAgICAgIHRoaXMubWF4RnJhbWVzQ2FsY3VsYXRvci5HZXRNYXhGYWNlRnJhbWVzKHRoaXMuT3JpZ2luYWxSZW5kZXJSZXF1ZXN0KSxcbiAgICAgIHRoaXMubWF4RnJhbWVzQ2FsY3VsYXRvci5HZXRNYXhGcmFtZXModGhpcy5PcmlnaW5hbFJlbmRlclJlcXVlc3QpXG4gICAgXSlcblxuICAgIC8vIFRPRE86IEhhbmRsZSBlZmZlY3RzXG4gICAgdGhpcy5tYXhGcmFtZSA9IChtYXhGYWNlRnJhbWVzICsgMSkgKiAobWF4RnJhbWVzICsgMSlcblxuICAgIGxldCB0aW1lT2Zmc2V0ID0gdGhpcy5PcmlnaW5hbFJlbmRlclJlcXVlc3QudGltZU9mZnNldCB8fCAwXG4gICAgY29uc3QgcmVtYWluaW5nVGltZURlbGF5cyA9IHt9IGFzIFJlY29yZDxzdHJpbmcsIG51bWJlcj5cbiAgICBsZXQgcHJldmlvdXNGcmFtZSA9IG51bGwgYXMgUmVuZGVyUGxhblxuXG4gICAgY29uc3QgZnJhbWVOdW1iZXJUcmFja2VyID0ge30gYXMgUmVjb3JkPHN0cmluZywgbnVtYmVyPlxuXG4gICAgdGhpcy5mcmFtZXMgPSBbXVxuXG4gICAgZm9yKGxldCBpID0gMDsgaSA8IHRoaXMubWF4RnJhbWU7ICsraSkge1xuICAgICAgY29uc3QgZnJhbWVSZW5kZXJSZXF1ZXN0ID0ge1xuICAgICAgICAuLi50aGlzLk9yaWdpbmFsUmVuZGVyUmVxdWVzdFxuICAgICAgfSBhcyBJUmVuZGVyUmVxdWVzdFxuICAgICAgZnJhbWVSZW5kZXJSZXF1ZXN0LmZyYW1lID0gMFxuICAgICAgZnJhbWVSZW5kZXJSZXF1ZXN0LnRpbWVPZmZzZXQgPSB0aW1lT2Zmc2V0XG5cbiAgICAgIC8vIFByb2dyZXNzIGFueSB0aW1lcnMgYW5kIGluY3JlbWVudCBhbnkgZnJhbWVzXG4gICAgICBpZiAocHJldmlvdXNGcmFtZSkge1xuICAgICAgICBjb25zdCBlbGFwc2VkVGltZSA9IHByZXZpb3VzRnJhbWUubWluaW11bURlbGF5XG5cbiAgICAgICAgT2JqZWN0LmtleXMocmVtYWluaW5nVGltZURlbGF5cykuZm9yRWFjaChpdGVtSWQgPT4ge1xuICAgICAgICAgIGNvbnN0IHJlbWFpbmluZ0RlbGF5ID0gcmVtYWluaW5nVGltZURlbGF5c1tpdGVtSWRdIC09IGVsYXBzZWRUaW1lXG4gICAgICAgICAgaWYgKHJlbWFpbmluZ0RlbGF5IDw9IDApIHtcblxuICAgICAgICAgICAgaWYgKCFmcmFtZU51bWJlclRyYWNrZXJbaXRlbUlkXSlcbiAgICAgICAgICAgICAgZnJhbWVOdW1iZXJUcmFja2VyW2l0ZW1JZF0gPSAxXG4gICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgIGZyYW1lTnVtYmVyVHJhY2tlcltpdGVtSWRdKytcbiAgICAgICAgICB9XG5cbiAgICAgICAgICAvLyBJZiBpdCdzIHRoZSBib2R5LCBpbmNyZW1lbnQgdGhlIGVudGlyZSBwbGFuLCBvdGhlcndpc2UgaW5jcmVtZW50IHRoZSBpdGVtJ3MgZnJhbWVcbiAgICAgICAgICBpZiAoTnVtYmVyKGl0ZW1JZCkgPD0gMTAwMDApIHtcbiAgICAgICAgICAgIGZyYW1lUmVuZGVyUmVxdWVzdC5mcmFtZSA9IGZyYW1lTnVtYmVyVHJhY2tlcltpdGVtSWRdXG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNvbnN0IHBvc2l0aW9uID0gc2VsZWN0ZWRJdGVtUG9zaXRpb25CeUlkW2l0ZW1JZF1cbiAgICAgICAgICAgIGZyYW1lUmVuZGVyUmVxdWVzdC5zZWxlY3RlZEl0ZW1zW3Bvc2l0aW9uXSA9IHtcbiAgICAgICAgICAgICAgLi4uZnJhbWVSZW5kZXJSZXF1ZXN0LnNlbGVjdGVkSXRlbXNbcG9zaXRpb25dLFxuICAgICAgICAgICAgICBmcmFtZTogZnJhbWVOdW1iZXJUcmFja2VyW2l0ZW1JZF1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH0pXG5cbiAgICAgICAgLy8gY29uc29sZS5sb2coYEVsYXBzZWQ6ICR7ZWxhcHNlZFRpbWV9LCByZXN1bHRpbmcgZnJhbWVzOiBgLCBmcmFtZU51bWJlclRyYWNrZXIpXG4gICAgICB9XG5cbiAgICAgIGNvbnN0IGZyYW1lUmVuZGVyUGxhbiA9IGF3YWl0IHRoaXMucmVuZGVyZXIuR2VuZXJhdGVSZW5kZXJQbGFuKGZyYW1lUmVuZGVyUmVxdWVzdCwgdGhpcy5lcXVpcE92ZXJyaWRlcylcblxuICAgICAgdGltZU9mZnNldCArPSBmcmFtZVJlbmRlclBsYW4ubWluaW11bURlbGF5XG4gICAgICBwcmV2aW91c0ZyYW1lID0gZnJhbWVSZW5kZXJQbGFuXG5cbiAgICAgIC8vIFJlc2V0IGFueSB0aW1lcnNcbiAgICAgIE9iamVjdC5rZXlzKGZyYW1lUmVuZGVyUGxhbi5sb2FkZWRQaWVjZXMuZGVsYXlzKS5mb3JFYWNoKGl0ZW1JZCA9PiB7XG4gICAgICAgIGxldCBkZWxheSA9IGZyYW1lUmVuZGVyUGxhbi5sb2FkZWRQaWVjZXMuZGVsYXlzW2l0ZW1JZF1cbiAgICAgICAgY29uc3QgcmVtYWluaW5nRGVsYXkgPSByZW1haW5pbmdUaW1lRGVsYXlzW2l0ZW1JZF1cbiAgICAgICAgaWYgKHJlbWFpbmluZ0RlbGF5IDw9IDAgfHwgIXJlbWFpbmluZ0RlbGF5KSB7XG4gICAgICAgICAgLy8gVE9ETzogRG8gd2UgaGFuZGxlIGJsaW5rIGhlcmU/IE9yIHNvbWV3aGVyZSBlbHNlPyBJIGZlZWwgbGlrZSBzb21ld2hlcmUgZWxzZS5cbiAgICAgICAgICAvLyBpZiAoSXRlbVV0aWxpdGllcy5wcm90b3R5cGUuSXNGYWNlSWQoTnVtYmVyKGl0ZW1JZCkpKSB7XG4gICAgICAgICAgLy8gICBjb25zdCBwb3NpdGlvbiA9IHNlbGVjdGVkSXRlbVBvc2l0aW9uQnlJZFtpdGVtSWRdXG4gICAgICAgICAgLy8gICBjb25zdCBjdXJyZW50RnJhbWUgPSBmcmFtZVJlbmRlclJlcXVlc3Quc2VsZWN0ZWRJdGVtc1twb3NpdGlvbl0uZnJhbWVcbiAgICAgICAgICAvLyB9XG5cbiAgICAgICAgICByZW1haW5pbmdUaW1lRGVsYXlzW2l0ZW1JZF0gPSBkZWxheVxuICAgICAgICAgIGlmICghZnJhbWVOdW1iZXJUcmFja2VyW2l0ZW1JZF0pXG4gICAgICAgICAgICBmcmFtZU51bWJlclRyYWNrZXJbaXRlbUlkXSA9IDBcbiAgICAgICAgfVxuICAgICAgfSlcblxuICAgICAgLy8gY29uc29sZS5sb2coYEZyYW1lICR7aX0gPSAke2ZyYW1lUmVuZGVyUGxhbi5yZXF1ZXN0LmZyYW1lfWApXG4gICAgICB0aGlzLmZyYW1lc1tpXSA9IGZyYW1lUmVuZGVyUGxhblxuICAgIH1cblxuICAgIC8vIEFsZXJ0IGFuZCBTdGFuZCBwb3NlcyBwbGF5IHRoZSBhbmltYXRpb24gZm9yd2FyZCBhbmQgdGhlbiBiYWNrd2FyZFxuICAgIC8vIFdlIHJldmVyc2UgdGhlIGFuaW1hdGlvbnMsIGFuZCBza2lwIHRoZSBmaXJzdCBhbmQgbGFzdCwgYW5kIHRoZW4gY29tYmluZSB0byBhY2hpZXZlIHRoaXNcbiAgICAvLyBXZSBza2lwIGZpcnN0IGFuZCBsYXN0IHRvIHByZXZlbnQgZHVwbGljYXRlIGZyYW1lcywgc2ltaWxhciB0byBvZmZpY2lhbFxuICAgIGNvbnN0IG9yaWdpbmFsQWN0aW9uID0gdGhpcy5PcmlnaW5hbFJlbmRlclJlcXVlc3QuYWN0aW9uXG4gICAgaWYgKG9yaWdpbmFsQWN0aW9uLnN0YXJ0c1dpdGgoXCJzdGFuZFwiKSB8fCBvcmlnaW5hbEFjdGlvbi5zdGFydHNXaXRoKFwiYWxlcnRcIikpIHtcbiAgICAgIGNvbnN0IGZyYW1lQ29weSA9IFsgLi4udGhpcy5mcmFtZXMgXS5yZXZlcnNlKClcbiAgICAgIGZyYW1lQ29weS5zaGlmdCgpXG4gICAgICBmcmFtZUNvcHkucG9wKClcbiAgICAgIHRoaXMuZnJhbWVzLnB1c2guYXBwbHkodGhpcy5mcmFtZXMsIGZyYW1lQ29weSlcbiAgICAgIHRoaXMubWF4RnJhbWUgPSB0aGlzLmZyYW1lcy5sZW5ndGhcbiAgICB9XG5cbiAgICAvLyBDYWxjdWxhdGUgYSBjb21tb24gc2l6ZSB0aGF0IHdvcmtzIGZvciBhbGwgZnJhbWVzXG5cbiAgICBjb25zdCBmZWV0UG9zaXRpb25zID0gdGhpcy5mcmFtZXMubWFwKGZyYW1lUGxhbiA9PiBmcmFtZVBsYW4uZmVldENlbnRlcilcblxuICAgIHRoaXMuTWF4RmVldFBvc2l0aW9uID0ge1xuICAgICAgeDogTWF0aC5tYXguYXBwbHkobnVsbCwgZmVldFBvc2l0aW9ucy5tYXAocG9zaXRpb24gPT4gcG9zaXRpb24ueCkpLFxuICAgICAgeTogIE1hdGgubWF4LmFwcGx5KG51bGwsIGZlZXRQb3NpdGlvbnMubWFwKHBvc2l0aW9uID0+IHBvc2l0aW9uLnkpKVxuICAgIH0gYXMgSVZlY3RvclxuXG4gICAgY29uc3QgbWF4RmVldERpZmZlcmVuY2UgPSB7XG4gICAgICB4OiB0aGlzLk1heEZlZXRQb3NpdGlvbi54IC0gTWF0aC5taW4uYXBwbHkobnVsbCwgZmVldFBvc2l0aW9ucy5tYXAocG9zaXRpb24gPT4gcG9zaXRpb24ueCkpLFxuICAgICAgeTogdGhpcy5NYXhGZWV0UG9zaXRpb24ueSAtIE1hdGgubWluLmFwcGx5KG51bGwsIGZlZXRQb3NpdGlvbnMubWFwKHBvc2l0aW9uID0+IHBvc2l0aW9uLnkpKVxuICAgIH0gYXMgSVZlY3RvclxuXG4gICAgLy8gRGV0ZXJtaW5lIGFuZCB1cGRhdGUgY29ycmVjdCB3aWR0aCBvZiB0aGUgYW5pbWF0ZWQgY2FudmFzXG4gICAgY29uc3Qgd2lkdGhzID0gW10gYXMgQXJyYXk8bnVtYmVyPlxuICAgIGNvbnN0IGhlaWdodHMgPSBbXSBhcyBBcnJheTxudW1iZXI+XG4gICAgdGhpcy5mcmFtZXNcbiAgICAgIC5mb3JFYWNoKGZyYW1lID0+IHtcbiAgICAgICAgd2lkdGhzLnB1c2goZnJhbWUuYm91bmRzLnNpemUueClcbiAgICAgICAgaGVpZ2h0cy5wdXNoKGZyYW1lLmJvdW5kcy5zaXplLnkpXG4gICAgICB9KVxuXG4gICAgLy8gU2V0IHRoZSBjb3JyZWN0IHdpZHRoLCBpbmNsdWRpbmcgdGhlIGRpZmZlcmVuY2UgaW4gZmVldCwgYXMgdGhhdCdsbCBiZSBhZGp1c3RlZCBmdXJ0aGVyIGRvd24gdGhlIHJlbmRlcmluZyBwYXRoXG4gICAgdGhpcy53aWR0aCA9IE1hdGgubWF4LmFwcGx5KG51bGwsIHdpZHRocykgKyBtYXhGZWV0RGlmZmVyZW5jZS54XG4gICAgdGhpcy5oZWlnaHQgPSBNYXRoLm1heC5hcHBseShudWxsLCBoZWlnaHRzKSArIG1heEZlZXREaWZmZXJlbmNlLnlcblxuICAgIHRoaXMuUmVwbGFjZUNhbnZhcyh0aGlzLkNhbnZhcywgdGhpcy5jb250ZXh0KVxuXG4gICAgLy8gU2V0IGRlZmF1bHQgZnJhbWUgYW5kIGFueSBmaW5hbCBwcmVwYXJhdGlvbnNcbiAgICB0aGlzLmZyYW1lSW5kZXggPSAwXG5cbiAgICB0aGlzLkNhbnZhcy5yZW1vdmUoKVxuICAgIHRoaXMuQ2FudmFzLnN0eWxlLmRpc3BsYXkgPSBcImJsb2NrXCJcbiAgfVxuXG4gIFJlcGxhY2VDYW52YXModGFyZ2V0OiBIVE1MQ2FudmFzRWxlbWVudCwgY29udGV4dD86IENhbnZhc1JlbmRlcmluZ0NvbnRleHQyRCkge1xuICAgIHRoaXMuQ2FudmFzID0gdGFyZ2V0XG4gICAgdGFyZ2V0LndpZHRoID0gdGhpcy53aWR0aFxuICAgIHRhcmdldC5oZWlnaHQgPSB0aGlzLmhlaWdodFxuXG4gICAgaWYgKCFjb250ZXh0KVxuICAgICAgdGhpcy5jb250ZXh0ID0gdGhpcy5DYW52YXMuZ2V0Q29udGV4dCgnMmQnKVxuICAgIGVsc2VcbiAgICAgIHRoaXMuY29udGV4dCA9IGNvbnRleHRcbiAgfVxuXG4gIC8vIE5vdGU6IEFkdmFuY2VzIHRoZSBjdXJyZW50IGZyYW1lIGFzIGEgc2lkZS1lZmZlY3RcbiAgYXN5bmMgUmVuZGVyU2luZ2xlRnJhbWUoKSB7XG4gICAgY29uc3QgcmVuZGVyZWQgPSBhd2FpdCB0aGlzLmZyYW1lLlJlbmRlcigpXG5cbiAgICBjb25zdCBjZW50ZXIgPSB0aGlzLmZyYW1lLmZlZXRDZW50ZXJcbiAgICBjb25zdCBkZXN0aW5hdGlvbk9mZnNldCA9IHtcbiAgICAgIC4uLmNlbnRlclxuICAgIH0gYXMgSVZlY3RvclxuICAgIGRlc3RpbmF0aW9uT2Zmc2V0LnggLT0gdGhpcy5NYXhGZWV0UG9zaXRpb24ueFxuICAgIGRlc3RpbmF0aW9uT2Zmc2V0LnkgLT0gdGhpcy5NYXhGZWV0UG9zaXRpb24ueVxuXG4gICAgLy8gY29uc29sZS5sb2coYCgke3RoaXMuZnJhbWVJbmRleH0pYCwgXCJDZW50ZXI6XCIsIGNlbnRlci54LCBjZW50ZXIueSwgXCJPZmZzZXQ6IFwiLCBkZXN0aW5hdGlvbk9mZnNldC54LCBkZXN0aW5hdGlvbk9mZnNldC55LCBgKFdpZHRoOiAke3RoaXMuZnJhbWUubG9ja2VkUGllY2VzLmJvZHkuY2FudmFzLndpZHRofSwgT3JpZ2luOiAke3RoaXMuZnJhbWUubG9ja2VkUGllY2VzLmJvZHkub3JpZ2luLnh9KWApXG5cbiAgICB0aGlzLmNvbnRleHQuY2xlYXJSZWN0KDAsIDAsIHRoaXMuQ2FudmFzLndpZHRoLCB0aGlzLkNhbnZhcy5oZWlnaHQpXG5cbiAgICB0aGlzLmNvbnRleHQuZHJhd0ltYWdlKHJlbmRlcmVkLCAtZGVzdGluYXRpb25PZmZzZXQueCwgLWRlc3RpbmF0aW9uT2Zmc2V0LnkpXG5cbiAgICB0aGlzLmZyYW1lSW5kZXgrK1xuICAgIGlmICh0aGlzLmZyYW1lSW5kZXggPj0gdGhpcy5tYXhGcmFtZSlcbiAgICAgIHRoaXMuZnJhbWVJbmRleCA9IDBcbiAgfVxuXG4gIGFzeW5jIFJlbmRlckxvb3AoKSB7XG4gICAgYXdhaXQgdGhpcy5SZW5kZXJTaW5nbGVGcmFtZSgpXG5cbiAgICB0aGlzLm5leHRGcmFtZVRpbWVvdXQgPSBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgIHRoaXMuUmVuZGVyTG9vcCgpXG4gICAgfSwgdGhpcy5mcmFtZS5taW5pbXVtRGVsYXkpXG5cbiAgICByZXR1cm4gdGhpcy5DYW52YXNcbiAgfVxuXG4gIGFzeW5jIFN0b3AoKSB7XG4gICAgY2xlYXJUaW1lb3V0KHRoaXMubmV4dEZyYW1lVGltZW91dClcbiAgfVxufVxuIiwiaW1wb3J0IEl0ZW1VdGlsaXRpZXMgZnJvbSBcIi4uL0l0ZW0vVXRpbGl0aWVzXCI7XG5pbXBvcnQgUEtHMUZhY3RvcnkgZnJvbSBcIi4uL1BLRzEvRmFjdG9yeVwiO1xuaW1wb3J0IHsgSVByb3BlcnR5IH0gZnJvbSBcIi4uL1BLRzEvSVByb3BlcnR5XCI7XG5pbXBvcnQgeyBJSXRlbUVudHJ5LCBJbnRlcm5hbFR5cGUgfSBmcm9tIFwiLi9JSXRlbUVudHJ5XCI7XG5pbXBvcnQgeyBJUmVuZGVyUmVxdWVzdCB9IGZyb20gXCIuL0lSZW5kZXJSZXF1ZXN0XCI7XG5pbXBvcnQgUmVuZGVyUGllY2UgZnJvbSBcIi4vUmVuZGVyUGllY2VcIjtcbmltcG9ydCB7IE5vZGVJdGVtUGFpciB9IGZyb20gXCIuL05vZGVJdGVtUGFpclwiO1xuaW1wb3J0IHsgUmVuZGVyUGxhbiB9IGZyb20gXCIuL1JlbmRlclBsYW5cIjtcbmltcG9ydCB7IG1lcmdlRGVlcCB9IGZyb20gXCIuLi9VdGlsaXRpZXMvRGVlcE1lcmdlXCI7XG5pbXBvcnQgeyBJUmVuZGVyUGxhbk92ZXJyaWRlcyB9IGZyb20gXCIuL0lSZW5kZXJQbGFuT3ZlcnJpZGVzXCI7XG5pbXBvcnQgeyBBbmltYXRlZFJlbmRlclBsYW4gfSBmcm9tIFwiLi9BbmltYXRlZFJlbmRlclBsYW5cIjtcbmltcG9ydCB7IElHZW5lcmF0ZVJlbmRlclBsYW5zIH0gZnJvbSBcIi4vSUdlbmVyYXRlUmVuZGVyUGxhbnNcIjtcbmltcG9ydCB7IElHZW5lcmF0ZU1heEZyYW1lcyB9IGZyb20gXCIuL0lDYWxjdWxhdGVNYXhGcmFtZXNcIjtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQ2hhcmFjdGVyUmVuZGVyZXIgaW1wbGVtZW50cyBJR2VuZXJhdGVSZW5kZXJQbGFucywgSUdlbmVyYXRlTWF4RnJhbWVzIHtcbiAgcHJpdmF0ZSBpdGVtVXRpbGl0eTogSXRlbVV0aWxpdGllcztcbiAgZGF0YUZhY3Rvcnk6IFBLRzFGYWN0b3J5O1xuICBjYWNoZWRQbGFuczogUmVjb3JkPHN0cmluZywgUmVuZGVyUGxhbj5cblxuICBjb25zdHJ1Y3RvcihpdGVtVXRpbGl0eTogSXRlbVV0aWxpdGllcywgZGF0YUZhY3Rvcnk6IFBLRzFGYWN0b3J5KSB7XG4gICAgdGhpcy5pdGVtVXRpbGl0eSA9IGl0ZW1VdGlsaXR5XG4gICAgdGhpcy5kYXRhRmFjdG9yeSA9IGRhdGFGYWN0b3J5XG4gICAgdGhpcy5jYWNoZWRQbGFucyA9IHt9XG4gIH1cblxuICBIYXNoUmVuZGVyUGxhblJlcXVlc3QocmVxdWVzdDogSVJlbmRlclJlcXVlc3QpIHtcbiAgICBjb25zdCBoYXNoUGllY2VzID0gW1xuICAgICAgcmVxdWVzdC50eXBlLFxuICAgICAgcmVxdWVzdC5hY3Rpb24sXG4gICAgICByZXF1ZXN0LmVtb3Rpb24sXG4gICAgICByZXF1ZXN0LnNraW4sXG4gICAgICByZXF1ZXN0LmZyYW1lLFxuICAgICAgcmVxdWVzdC5tZXJjRWFycyxcbiAgICAgIHJlcXVlc3QuaWxsaXVtRWFycyxcbiAgICBdXG5cbiAgICBpZiAocmVxdWVzdC5oYWlyRHllKSB7XG4gICAgICBoYXNoUGllY2VzLnB1c2goXG4gICAgICAgIHJlcXVlc3QuaGFpckR5ZS5jb2xvcklkXG4gICAgICApXG4gICAgfVxuXG4gICAgaGFzaFBpZWNlcy5wdXNoLmFwcGx5KFxuICAgICAgaGFzaFBpZWNlcyxcbiAgICAgIE9iamVjdC5rZXlzKHJlcXVlc3Quc2VsZWN0ZWRJdGVtcykubWFwKGl0ZW1OYW1lID0+IHtcbiAgICAgICAgY29uc3QgaXRlbSA9IHJlcXVlc3Quc2VsZWN0ZWRJdGVtc1tpdGVtTmFtZV1cbiAgICAgICAgcmV0dXJuIFtpdGVtLmlkLCBpdGVtLmZyYW1lLCBpdGVtLmFjdGlvbiwgaXRlbS52ZXJzaW9uLCBpdGVtLnJlZ2lvbl0uam9pbignLCcpXG4gICAgICB9KVxuICAgIClcblxuICAgIHJldHVybiBoYXNoUGllY2VzLmpvaW4oJywnKVxuICB9XG5cbiAgYXN5bmMgR2VuZXJhdGVBbmltYXRlZFJlbmRlclBsYW4ocmVxdWVzdDogSVJlbmRlclJlcXVlc3QsIGVxdWlwT3ZlcnJpZGVzPzogUmVjb3JkPHN0cmluZywgUmVuZGVyUGllY2U+KSA6IFByb21pc2U8QW5pbWF0ZWRSZW5kZXJQbGFuPiB7XG4gICAgY29uc3QgcGxhbiA9IG5ldyBBbmltYXRlZFJlbmRlclBsYW4odGhpcywgdGhpcywgcmVxdWVzdCwgZXF1aXBPdmVycmlkZXMpXG4gICAgYXdhaXQgcGxhbi5QcmVwYXJlKClcbiAgICByZXR1cm4gcGxhblxuICB9XG5cbiAgYXN5bmMgR2VuZXJhdGVSZW5kZXJQbGFuKHJlcXVlc3Q6IElSZW5kZXJSZXF1ZXN0LCBlcXVpcE92ZXJyaWRlcz86IFJlY29yZDxzdHJpbmcsIFJlbmRlclBpZWNlPik6IFByb21pc2U8UmVuZGVyUGxhbj4ge1xuICAgIGNvbnN0IGhhc2ggPSB0aGlzLkhhc2hSZW5kZXJQbGFuUmVxdWVzdChyZXF1ZXN0KVxuXG4gICAgaWYgKHRoaXMuY2FjaGVkUGxhbnNbaGFzaF0pIHtcbiAgICAgIGNvbnN0IGNhY2hlZCA9IHRoaXMuY2FjaGVkUGxhbnNbaGFzaF1cblxuICAgICAgcmV0dXJuIG5ldyBSZW5kZXJQbGFuKHJlcXVlc3QsIG51bGwsIGNhY2hlZClcbiAgICB9XG5cbiAgICBjb25zdCBtYXhCb2R5RnJhbWUgPSBhd2FpdCB0aGlzLkdldE1heEZyYW1lcyhyZXF1ZXN0KVxuICAgIGNvbnN0IG1heEZhY2VGcmFtZSA9IGF3YWl0IHRoaXMuR2V0TWF4RmFjZUZyYW1lcyhyZXF1ZXN0KVxuXG4gICAgY29uc3QgZnJhbWVQYWlycyA9IGF3YWl0IHRoaXMuR2V0RnJhbWVOb2RlcyhyZXF1ZXN0LCBtYXhCb2R5RnJhbWUsIG1heEZhY2VGcmFtZSlcblxuICAgIGNvbnN0IHJlbmRlclBsYW4gPSBuZXcgUmVuZGVyUGxhbihyZXF1ZXN0LCBmcmFtZVBhaXJzKVxuICAgIGF3YWl0IHJlbmRlclBsYW4uSW5pdGlhbGl6ZSh7XG4gICAgICBzbG90czoge1xuICAgICAgICBcImxlZkVhclwiOiB7IHZpc2libGU6IGZhbHNlIH0gYXMgUmVuZGVyUGllY2UsXG4gICAgICAgIFwiaGlnaGxlZkVhclwiOiB7IHZpc2libGU6IGZhbHNlIH0gYXMgUmVuZGVyUGllY2UsXG4gICAgICAgIFwiZWFyXCI6IHsgdmlzaWJsZTogZmFsc2UgfSBhcyBSZW5kZXJQaWVjZSxcbiAgICAgIH1cbiAgICB9IGFzIElSZW5kZXJQbGFuT3ZlcnJpZGVzKVxuXG4gICAgdGhpcy5jYWNoZWRQbGFuc1toYXNoXSA9IHJlbmRlclBsYW5cbiAgICByZXR1cm4gcmVuZGVyUGxhblxuICB9XG5cbiAgYXN5bmMgR2V0TWF4RmFjZUZyYW1lcyhyZXF1ZXN0OiBJUmVuZGVyUmVxdWVzdCwgYWN0aW9uPzogc3RyaW5nKTogUHJvbWlzZTxudW1iZXI+IHtcbiAgICByZXR1cm4gdGhpcy5HZXRNYXhGcmFtZXMocmVxdWVzdCwgcmVxdWVzdC5lbW90aW9uLCB0cnVlKVxuICB9XG5cbiAgYXN5bmMgR2V0TWF4RnJhbWVzKHJlcXVlc3Q6IElSZW5kZXJSZXF1ZXN0LCBhY3Rpb24/OiBzdHJpbmcsIGZhY2VGcmFtZXM/OiBib29sZWFuKTogUHJvbWlzZTxudW1iZXI+IHtcbiAgICBjb25zdCBtYXhGcmFtZXMgPSBhd2FpdCBQcm9taXNlLmFsbChPYmplY3QudmFsdWVzKHJlcXVlc3Quc2VsZWN0ZWRJdGVtcylcbiAgICAubWFwKGFzeW5jIChpdGVtKSA9PiB7XG4gICAgICBjb25zdCBpc0ZhY2UgPSB0aGlzLml0ZW1VdGlsaXR5LklzRmFjZU9yQWNjZXNzb3J5SWQoaXRlbS5pZClcbiAgICAgIGlmICgoaXNGYWNlICYmICFmYWNlRnJhbWVzKSB8fCAoIWlzRmFjZSAmJiBmYWNlRnJhbWVzKSkgcmV0dXJuIDBcblxuICAgICAgY29uc3QgYW5pbWF0aW9uTm9kZSA9IGF3YWl0IHRoaXMuR2V0QW5pbWF0aW9uTm9kZShyZXF1ZXN0LCBpdGVtLCBhY3Rpb24pXG4gICAgICBpZiAoIWFuaW1hdGlvbk5vZGUpIHJldHVybiAwXG4gICAgICBpZiAoYW5pbWF0aW9uTm9kZS5jaGlsZHJlbi5maW5kKGNoaWxkID0+IGNoaWxkLnR5cGUgPT09ICdjYW52YXMnKSlcbiAgICAgICAgcmV0dXJuIDBcblxuICAgICAgY29uc3QgZnJhbWVJbmRleGVzID0gYW5pbWF0aW9uTm9kZS5jaGlsZHJlblxuICAgICAgICAubWFwKGNoaWxkID0+IE51bWJlcihjaGlsZC5uYW1lKSlcbiAgICAgICAgLmZpbHRlcihmcmFtZU51bWJlciA9PiAhTnVtYmVyLmlzTmFOKGZyYW1lTnVtYmVyKSlcblxuICAgICAgcmV0dXJuIE1hdGgubWF4LmFwcGx5KG51bGwsIGZyYW1lSW5kZXhlcylcbiAgICB9KSlcblxuICAgIHJldHVybiBNYXRoLm1heC5hcHBseShudWxsLCBtYXhGcmFtZXMpXG4gIH1cblxuICBwcml2YXRlIGFzeW5jIEdldEFuaW1hdGlvbk5vZGUocmVxdWVzdDogSVJlbmRlclJlcXVlc3QsIGl0ZW06IElJdGVtRW50cnksIGFjdGlvbjogc3RyaW5nKSA6IFByb21pc2U8SVByb3BlcnR5PiB7XG4gICAgY29uc3QgaW1nUGF0aCA9IGF3YWl0IHRoaXMuaXRlbVV0aWxpdHkuR2V0SXRlbUltZ1BhdGgoaXRlbS5yZWdpb24sIGl0ZW0udmVyc2lvbiwgaXRlbS5pZClcbiAgICBpZiAoIWltZ1BhdGgpIHJldHVybiBudWxsXG5cbiAgICBjb25zdCBpbWcgPSBhd2FpdCB0aGlzLmRhdGFGYWN0b3J5LnJlc29sdmUoaXRlbS5yZWdpb24sIGl0ZW0udmVyc2lvbiwgaW1nUGF0aCk7XG4gICAgY29uc3QgaXNGYWNlID0gdGhpcy5pdGVtVXRpbGl0eS5Jc0ZhY2VPckFjY2Vzc29yeUlkKGl0ZW0uaWQpXG4gICAgY29uc3QgYW5pbWF0aW9uID0gaXNGYWNlID8gKGFjdGlvbiB8fCByZXF1ZXN0LmVtb3Rpb24gfHwgJ2RlZmF1bHQnKSA6IChhY3Rpb24gfHwgaXRlbS5hY3Rpb24gfHwgcmVxdWVzdC5hY3Rpb24pO1xuICAgIGxldCBhbmltYXRpb25Ob2RlID0gYXdhaXQgaW1nLnJlc29sdmUoYW5pbWF0aW9uKVxuXG4gICAgaWYgKCFhbmltYXRpb25Ob2RlKSB7XG4gICAgICAvLyBJcyB0aGlzIGEgY2FzaCBpdGVtIHdlYXBvbj9cbiAgICAgIGlmIChNYXRoLmZsb29yKChpdGVtLmlkIC0gMTAwMDAwMCkgLyAxMDAwMCkgPT09IDcwKSB7XG4gICAgICAgIC8vIFNvbWUgY2FzaCBpdGVtcyByZXF1aXJlIGEgd2VhcG9uIHR5cGUgdG8gYmUgZGVmaW5lZCwgd2l0aG91dCBpdCB3ZSBjYW4ndCBwcm9wZXJseSByZXNvbHZlIHRvIHRoZSBjb3JyZWN0IGNvcHkgb2YgdGhlIHdlYXBvblxuICAgICAgICBsZXQgd2VhcG9uVHlwZSA9IDMwXG5cbiAgICAgICAgLy8gV2UgbmVlZCB0byBmaW5kIHdlYXBvbnMsIHRoaXMgaXMgYSBiaXQgY29tcGxpY2F0ZWQgYXMgdGhlIHR5cGUgaW5mbyBpc24ndCBjb25zaXN0ZW50IGFjcm9zcyB0aGUgYm9hcmQgYW5kIHNob3VsZG4ndCBiZSB0cnVzdGVkIGhlcmUuXG4gICAgICAgIC8vIFNvIHdlIG5lZWQgdG8gcmVzb2x2ZSB0byB0aGUgQ2hhcmFjdGVyLnd6IGZvbGRlcnMgdG8gZGV0ZXJtaW5lIGlmIGFuIGl0ZW0gaXMgdHJ1bHkgYSB3ZWFwb24gb3Igbm90XG4gICAgICAgIGNvbnN0IGZvbGRlclBhaXJzID0gYXdhaXQgUHJvbWlzZS5hbGwoT2JqZWN0LnZhbHVlcyhyZXF1ZXN0LnNlbGVjdGVkSXRlbXMpXG4gICAgICAgICAgLmZpbHRlcihpdGVtID0+IGl0ZW0gIT0gaXRlbSkgLy8gU2tpcCB0aGUgY3VycmVudCBpdGVtLCBiZWNhdXNlIHdlIG9idmlvdXNseSBkb24ndCBuZWVkIHRvIGNoZWNrIG91cnNlbHZlc1xuICAgICAgICAgIC5tYXAoYXN5bmMgaXRlbSA9PiB7XG4gICAgICAgICAgICBjb25zdCBmb2xkZXIgPSBhd2FpdCB0aGlzLml0ZW1VdGlsaXR5LkdldEZvbGRlckZvckl0ZW0oaXRlbSlcbiAgICAgICAgICAgIHJldHVybiB7aXRlbSwgZm9sZGVyfVxuICAgICAgICAgIH0pKVxuICAgICAgICBjb25zdCBwYWlyID0gZm9sZGVyUGFpcnMuZmluZChwYWlyID0+IHBhaXIuZm9sZGVyID09PSBcIldlYXBvblwiKVxuICAgICAgICBpZiAocGFpcikge1xuICAgICAgICAgIGNvbnN0IG1hdGNoZWRJdGVtSWQgPSBwYWlyLml0ZW0uaWRcbiAgICAgICAgICB3ZWFwb25UeXBlID0gTWF0aC5mbG9vcigobWF0Y2hlZEl0ZW1JZCAtIDEwMDAwMDApIC8gMTAwMDApXG4gICAgICAgICAgaWYgKHdlYXBvblR5cGUgPT09IDcwKSB3ZWFwb25UeXBlID0gMzBcbiAgICAgICAgfSAvLyBGYWxsLXRocm91Z2ggYmFjayB0byB3ZWFwb25UeXBlID0gMzBcblxuICAgICAgICBhbmltYXRpb25Ob2RlID0gYXdhaXQgaW1nLnJlc29sdmUoYCR7d2VhcG9uVHlwZX0vJHthbmltYXRpb259YClcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIE5vdCBzdXJlIHdoYXQgZWxzZSBjb3VsZCBiZSBoYXBwZW5pbmcgaGVyZSwgYmV0dGVyIHRocm93IGFuIGVycm9yIGFuZCBmYWlsIGVhcmx5Li4uXG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIkNvdWxkbid0IHJlc29sdmUgdG8gYW5pbWF0aW9uIG5vZGUgZm9yIGl0ZW1cIilcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoIWFuaW1hdGlvbk5vZGUpXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgZW1vdGlvbi9hbmltYXRpb24gc3VwcGxpZWQnKVxuXG4gICAgcmV0dXJuIGFuaW1hdGlvbk5vZGVcbiAgfVxuXG4gIHByaXZhdGUgYXN5bmMgR2V0RnJhbWVOb2RlcyhyZXF1ZXN0OiBJUmVuZGVyUmVxdWVzdCwgbWF4Qm9keUZyYW1lOiBudW1iZXIsIG1heEZhY2VGcmFtZTogbnVtYmVyKTogUHJvbWlzZTxBcnJheTxOb2RlSXRlbVBhaXI+PiB7XG4gICAgY29uc3Qgbm9kZXMgPSBhd2FpdCBQcm9taXNlLmFsbChPYmplY3QudmFsdWVzKHJlcXVlc3Quc2VsZWN0ZWRJdGVtcylcbiAgICAgIC5tYXAoaXRlbSA9PiB0aGlzLk1hcEl0ZW1Ub0ZyYW1lTm9kZShyZXF1ZXN0LCBtYXhCb2R5RnJhbWUsIG1heEZhY2VGcmFtZSwgaXRlbSkpKTtcblxuICAgIGlmIChyZXF1ZXN0LmhhaXJEeWUgJiYgcmVxdWVzdC5oYWlyRHllLnBlcmNlbnRpbGUpIHtcbiAgICAgIGNvbnN0IGhhaXIgPSByZXF1ZXN0LnNlbGVjdGVkSXRlbXMuSGFpclxuICAgICAgY29uc3QgaGFpck5vZGUgPSBub2Rlcy5maW5kKG5vZGUgPT4gbm9kZS5pdGVtID09IGhhaXIpXG4gICAgICBjb25zdCBoYWlySWQgPSBoYWlyLmlkXG4gICAgICBjb25zdCBiYXNlSGFpcklkID0gTWF0aC5mbG9vcihoYWlySWQgLyAxMCkgKiAxMFxuICAgICAgY29uc3QgbWFwcGVkSGFpcklkID0gKGJhc2VIYWlySWQpICsgKHJlcXVlc3QuaGFpckR5ZS5jb2xvcklkKVxuXG4gICAgICBjb25zdCBtYXBwZWQgPSBhd2FpdCB0aGlzLk1hcEl0ZW1Ub0ZyYW1lTm9kZShyZXF1ZXN0LCBtYXhCb2R5RnJhbWUsIG1heEZhY2VGcmFtZSwge1xuICAgICAgICAuLi5oYWlyLFxuICAgICAgICBpZDogbWFwcGVkSGFpcklkLFxuICAgICAgICBpbnRlcm5hbDogSW50ZXJuYWxUeXBlLkhhaXJEeWVcbiAgICAgIH0pXG5cbiAgICAgIG1hcHBlZC5hbGxvd0NvbmZsaWN0aW5nTG9ja3NXaXRoID0gaGFpck5vZGVcblxuICAgICAgbm9kZXMucHVzaChtYXBwZWQpXG4gICAgfVxuXG4gICAgLy8gRmlsdGVyIG91dCBhbnkgYnJva2VuIGl0ZW1zIC8gbm9kZXNcbiAgICByZXR1cm4gbm9kZXMuZmlsdGVyKG5vZGUgPT4gbm9kZSlcbiAgfVxuXG4gIHByaXZhdGUgYXN5bmMgTWFwSXRlbVRvRnJhbWVOb2RlKHJlcXVlc3Q6IElSZW5kZXJSZXF1ZXN0LCBtYXhCb2R5RnJhbWU6IG51bWJlciwgbWF4RmFjZUZyYW1lOiBudW1iZXIsIGl0ZW06IElJdGVtRW50cnkpIDogUHJvbWlzZTxOb2RlSXRlbVBhaXI+IHtcbiAgICBjb25zdCBpc0ZhY2UgPSB0aGlzLml0ZW1VdGlsaXR5LklzRmFjZU9yQWNjZXNzb3J5SWQoaXRlbS5pZClcbiAgICBjb25zdCBhbmltYXRpb25Ob2RlID0gYXdhaXQgdGhpcy5HZXRBbmltYXRpb25Ob2RlKHJlcXVlc3QsIGl0ZW0sIG51bGwpXG4gICAgaWYgKCFhbmltYXRpb25Ob2RlKVxuICAgICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIGFjdGlvbi9hbmltYXRpb24gc2VsZWN0ZWQnKVxuXG4gICAgY29uc3QgaW1nUGF0aCA9IGF3YWl0IHRoaXMuaXRlbVV0aWxpdHkuR2V0SXRlbUltZ1BhdGgoaXRlbS5yZWdpb24sIGl0ZW0udmVyc2lvbiwgaXRlbS5pZClcbiAgICBjb25zdCBpbmZvTm9kZSA9IGF3YWl0IHRoaXMuZGF0YUZhY3RvcnkucmVzb2x2ZShpdGVtLnJlZ2lvbiwgaXRlbS52ZXJzaW9uLCBgJHtpbWdQYXRofS9pbmZvYCk7XG5cbiAgICBjb25zdCB6bWFwID0gYXdhaXQgdGhpcy5kYXRhRmFjdG9yeS5nZXRabWFwKGl0ZW0ucmVnaW9uLCBpdGVtLnZlcnNpb24pXG4gICAgY29uc3Qgc21hcCA9IGF3YWl0IHRoaXMuZGF0YUZhY3RvcnkuZ2V0U21hcChpdGVtLnJlZ2lvbiwgaXRlbS52ZXJzaW9uKVxuXG4gICAgaWYgKGFuaW1hdGlvbk5vZGUuY2hpbGRyZW4uZmluZChjaGlsZCA9PiBjaGlsZC50eXBlID09PSAnY2FudmFzJykpXG4gICAgICByZXR1cm4gbmV3IE5vZGVJdGVtUGFpcihpdGVtLCBhbmltYXRpb25Ob2RlLCBpbmZvTm9kZSwgem1hcCwgc21hcClcblxuICAgIGxldCBmcmFtZSA9IGl0ZW0uZnJhbWUgIT09IHVuZGVmaW5lZCA/IGl0ZW0uZnJhbWUgOiByZXF1ZXN0LmZyYW1lO1xuXG4gICAgLy8gSGFuZGxlIGFueSBmcmFtZSBvdmVyZmxvd1xuICAgIGlmIChpc0ZhY2UpXG4gICAgICBmcmFtZSA9IGZyYW1lICUgKG1heEZhY2VGcmFtZSArIDEpXG4gICAgZWxzZVxuICAgICAgZnJhbWUgPSBmcmFtZSAlIChtYXhCb2R5RnJhbWUgKyAxKVxuXG4gICAgY29uc3QgZnJhbWVOb2RlID0gYXdhaXQgYW5pbWF0aW9uTm9kZS5yZXNvbHZlKGZyYW1lLnRvU3RyaW5nKCkpO1xuXG4gICAgaWYgKCFmcmFtZU5vZGUpIHtcbiAgICAgIHJldHVybiBudWxsIC8vIFNvbWUgaXRlbXMganVzdCBkb24ndCBoYXZlIGFsbCBmcmFtZXMgYXZhaWxhYmxlIHNvbWV0aW1lc1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIGZyYW1lIHNlbGVjdGVkJylcbiAgICB9XG4gICAgcmV0dXJuIG5ldyBOb2RlSXRlbVBhaXIoaXRlbSwgZnJhbWVOb2RlLCBpbmZvTm9kZSwgem1hcCwgc21hcClcbiAgfVxufVxuIiwiZXhwb3J0IGNvbnN0IFBvc3NpYmxlUGF0aFByZWZpeGVzID0gW1wiTWFwXCIsIFwiRGF0YS9NYXBcIiwgXCJNYXAwMDFcIiwgXCJNYXAwMDJcIiwgXCJNYXAyXCIsIFwiTWFwMVwiXSIsImltcG9ydCB7IElQcm9wZXJ0eSB9IGZyb20gXCIuLi9QS0cxL0lQcm9wZXJ0eVwiO1xuXG5leHBvcnQgY2xhc3MgQmFja2dyb3VuZCB7XG4gIGJhY2tncm91bmRTZXRJZDogYW55O1xuICBiYWNrZ3JvdW5kU2V0TmFtZTogc3RyaW5nO1xuICBmcm9udDogYW55O1xuICBhbHBoYTogbnVtYmVyO1xuICBmbGlwWDogYW55O1xuICB0eXBlOiBhbnk7XG4gIHg6IG51bWJlcjtcbiAgeTogbnVtYmVyO1xuICByeDogbnVtYmVyO1xuICByeTogbnVtYmVyO1xuICBjeDogbnVtYmVyO1xuICBjeTogbnVtYmVyO1xuICBhbmltYXRlZDogYW55O1xuICBiYWNrZ3JvdW5kTm9kZTogSVByb3BlcnR5O1xuICBQYXRoOiBzdHJpbmc7XG4gIGltZ1BhdGg6IHN0cmluZztcbn1cbiIsImV4cG9ydCBjbGFzcyBGb290aG9sZCB7XG4gIGlkOiBudW1iZXI7XG4gIGdyb3VwOiBudW1iZXI7XG4gIGxheWVyOiBudW1iZXI7XG4gIG5leHQ6IG51bWJlcjtcbiAgcHJldjogbnVtYmVyO1xuICBwaWVjZTogbnVtYmVyO1xuICB4MTogbnVtYmVyO1xuICB4MjogbnVtYmVyO1xuICB5MTogbnVtYmVyO1xuICB5MjogbnVtYmVyO1xuICBjYW50X3Rocm91Z2g6IGJvb2xlYW47XG59XG4iLCJleHBvcnQgY2xhc3MgTGFkZGVyUm9wZSB7XG4gIElzTGFkZGVyOiBib29sZWFuO1xuICB4OiBudW1iZXI7XG4gIHkxOiBudW1iZXI7XG4gIHkyOiBudW1iZXI7XG59XG4iLCJleHBvcnQgY2xhc3MgTGlmZSB7XG4gIHg6IG51bWJlcjtcbiAgeTogbnVtYmVyO1xuICB3YWxrTGVmdDogbnVtYmVyO1xuICB3YWxrUmlnaHQ6IG51bWJlcjtcbiAgaWQ6IG51bWJlcjtcbiAgZmg6IG51bWJlcjtcbiAgZmxpcFg6IGJvb2xlYW47XG4gIGhpZGRlbjogYm9vbGVhbjtcbiAgdHlwZTogYW55O1xufVxuIiwiZXhwb3J0IGNsYXNzIE1hcEluZm8ge1xuICBMaW5rc1RvOiBudW1iZXI7XG4gIEJhY2tncm91bmRNdXNpYzogc3RyaW5nO1xuICBSZXR1cm5NYXA6IG51bWJlcjtcbiAgSXNSZXR1cm5NYXA6IGJvb2xlYW47XG4gIElzVG93bjogYm9vbGVhbjtcbiAgSXNTd2ltOiBib29sZWFuO1xuICBNb2JSYXRlOiBudW1iZXI7XG4gIE1hcE1hcms6IHN0cmluZztcbiAgTWluaW11bVN0YXJGb3JjZTogbnVtYmVyO1xuICBNaW5pbXVtQXJjYW5lRm9yY2U6IG51bWJlcjtcbiAgTWluaW11bUxldmVsOiBudW1iZXI7XG4gIHRvcDogbnVtYmVyO1xuICByaWdodDogbnVtYmVyO1xuICBib3R0b206IG51bWJlcjtcbiAgbGVmdDogbnVtYmVyO1xufVxuIiwiZXhwb3J0IGNsYXNzIE1hcExheWVySW5mbyB7XG4gIHRpbGVTZXQ6IHN0cmluZztcbiAgdGlsZVNldE1hZ2F6aW5lOiBzdHJpbmc7XG59XG4iLCJpbXBvcnQgeyBJUHJvcGVydHkgfSBmcm9tIFwiLi4vUEtHMS9JUHJvcGVydHlcIjtcblxuZXhwb3J0IGNsYXNzIE1hcE9iamVjdCB7XG4gIE9iamVjdFNldE5hbWU6IHN0cmluZztcbiAgTGlzdFplcm86IHN0cmluZztcbiAgTGlzdE9uZTogc3RyaW5nO1xuICBMaXN0VHdvOiBzdHJpbmc7XG4gIHF1ZXN0SWRzOiBudW1iZXJbXTtcbiAgZnJvbnQ6IGJvb2xlYW47XG4gIHg6IG51bWJlcjtcbiAgeTogbnVtYmVyO1xuICB6OiBudW1iZXI7XG4gIHJvdGF0aW9uOiBudW1iZXI7XG4gIGZsaXBYOiBib29sZWFuO1xuICBwYXRoOiBzdHJpbmc7XG4gIHoyOiBudW1iZXI7XG4gIHZpc2libGU6IGJvb2xlYW47XG4gIHRhZ3M6IHN0cmluZztcbiAgZ3JvdXBOYW1lOiBzdHJpbmc7XG5cbiAgT2JqZWN0U2V0OiBJUHJvcGVydHk7XG4gIGltZ1BhdGg6IHN0cmluZztcbn1cbiIsImltcG9ydCB7IElQcm9wZXJ0eSB9IGZyb20gXCIuLi9QS0cxL0lQcm9wZXJ0eVwiO1xuXG5leHBvcnQgY2xhc3MgTWFwVGlsZSB7XG4gIHRpbGVJZDogc3RyaW5nO1xuICBncm91cDogc3RyaW5nO1xuICBwYXRoOiBzdHJpbmc7XG4gIGZsaXBYOiBib29sZWFuO1xuICB2aXNpYmxlOiBib29sZWFuO1xuICBUaWxlTm9kZTogSVByb3BlcnR5O1xufVxuIiwiaW1wb3J0IFBLRzFGYWN0b3J5IGZyb20gXCIuLi9QS0cxL0ZhY3RvcnlcIjtcbmltcG9ydCB7IElQcm9wZXJ0eSB9IGZyb20gXCIuLi9QS0cxL0lQcm9wZXJ0eVwiO1xuaW1wb3J0IHsgUG9zc2libGVQYXRoUHJlZml4ZXMgfSBmcm9tIFwiLi9Db25zdGFudHNcIjtcbmltcG9ydCB7IE1hcExheWVySW5mbyB9IGZyb20gXCIuL01hcExheWVySW5mb1wiO1xuaW1wb3J0IHsgTWFwT2JqZWN0IH0gZnJvbSBcIi4vTWFwT2JqZWN0XCI7XG5pbXBvcnQgeyBNYXBUaWxlIH0gZnJvbSBcIi4vTWFwVGlsZVwiO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBNYXBMYXllciB7XG4gIG5vZGU6IElQcm9wZXJ0eTtcbiAgSW5mbzogTWFwTGF5ZXJJbmZvO1xuICByZWdpb246IHN0cmluZztcbiAgdmVyc2lvbjogc3RyaW5nO1xuXG4gIFRpbGVTZXROb2RlOiBJUHJvcGVydHk7XG5cbiAgVGlsZXM6IE1hcFRpbGVbXTtcbiAgT2JqZWN0czogTWFwT2JqZWN0W107XG5cbiAgY29uc3RydWN0b3IocmVnaW9uOiBzdHJpbmcsIHZlcnNpb246IHN0cmluZywgbGF5ZXJOb2RlOiBJUHJvcGVydHkpIHtcbiAgICB0aGlzLm5vZGUgPSBsYXllck5vZGVcblxuICAgIHRoaXMucmVnaW9uID0gcmVnaW9uXG4gICAgdGhpcy52ZXJzaW9uID0gdmVyc2lvblxuICB9XG5cbiAgYXN5bmMgTG9hZChkYXRhRmFjdG9yeTogUEtHMUZhY3RvcnkpIHtcbiAgICBhd2FpdCB0aGlzLkxvYWRJbmZvKGRhdGFGYWN0b3J5KVxuICAgIGlmICh0aGlzLkluZm8udGlsZVNldClcbiAgICAgIGF3YWl0IHRoaXMuTG9hZFRpbGVzKClcbiAgICBhd2FpdCB0aGlzLkxvYWRPYmplY3RzKGRhdGFGYWN0b3J5KVxuICB9XG5cbiAgYXN5bmMgTG9hZE9iamVjdHMoZGF0YUZhY3Rvcnk6IFBLRzFGYWN0b3J5KSB7XG4gICAgY29uc3Qgb2JqZWN0c05vZGUgPSBhd2FpdCB0aGlzLm5vZGUucmVzb2x2ZShcIm9ialwiKVxuXG4gICAgdGhpcy5PYmplY3RzID0gYXdhaXQgUHJvbWlzZS5hbGwob2JqZWN0c05vZGUuY2hpbGRyZW4ubWFwKGFzeW5jIG9iamVjdE5vZGUgPT4ge1xuICAgICAgY29uc3Qgb2JqID0gbmV3IE1hcE9iamVjdCgpXG5cbiAgICAgIG9iamVjdE5vZGUuY2hpbGRyZW4uZm9yRWFjaChwcm9wID0+IHtcbiAgICAgICAgc3dpdGNoIChwcm9wLm5hbWUpIHtcbiAgICAgICAgICBjYXNlIFwib1NcIjpcbiAgICAgICAgICAgIG9iai5PYmplY3RTZXROYW1lID0gcHJvcC52YWx1ZSBhcyBzdHJpbmdcbiAgICAgICAgICAgIGJyZWFrXG4gICAgICAgICAgY2FzZSBcImwwXCI6XG4gICAgICAgICAgICBvYmouTGlzdFplcm8gPSBwcm9wLnZhbHVlIGFzIHN0cmluZ1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgY2FzZSBcImwxXCI6XG4gICAgICAgICAgICBvYmouTGlzdE9uZSA9IHByb3AudmFsdWUgYXMgc3RyaW5nXG4gICAgICAgICAgICBicmVha1xuICAgICAgICAgIGNhc2UgXCJsMlwiOlxuICAgICAgICAgICAgb2JqLkxpc3RUd28gPSBwcm9wLnZhbHVlIGFzIHN0cmluZ1xuICAgICAgICAgICAgYnJlYWtcbiAgICAgICAgICBjYXNlIFwicXVlc3RcIjpcbiAgICAgICAgICAgIG9iai5xdWVzdElkcyA9IHByb3AuY2hpbGRyZW4ubWFwKGNoaWxkID0+IE51bWJlcihjaGlsZC5uYW1lKSlcbiAgICAgICAgICAgIGJyZWFrXG4gICAgICAgICAgY2FzZSBcInRhZ3NcIjpcbiAgICAgICAgICAgIG9iai50YWdzID0gcHJvcC52YWx1ZSBhcyBzdHJpbmdcbiAgICAgICAgICAgIGJyZWFrXG4gICAgICAgICAgY2FzZSBcImZyb250XCI6XG4gICAgICAgICAgICBvYmouZnJvbnQgPSBwcm9wLnZhbHVlIGFzIGJvb2xlYW5cbiAgICAgICAgICAgIGJyZWFrXG4gICAgICAgICAgY2FzZSBcInhcIjpcbiAgICAgICAgICAgIG9iai54ID0gcHJvcC52YWx1ZSBhcyBudW1iZXJcbiAgICAgICAgICAgIGJyZWFrXG4gICAgICAgICAgY2FzZSBcInlcIjpcbiAgICAgICAgICAgIG9iai55ID0gcHJvcC52YWx1ZSBhcyBudW1iZXJcbiAgICAgICAgICAgIGJyZWFrXG4gICAgICAgICAgY2FzZSBcInpcIjpcbiAgICAgICAgICAgIG9iai56ID0gcHJvcC52YWx1ZSBhcyBudW1iZXJcbiAgICAgICAgICAgIGJyZWFrXG4gICAgICAgICAgY2FzZSBcInJcIjpcbiAgICAgICAgICAgIG9iai5yb3RhdGlvbiA9IHByb3AudmFsdWUgYXMgbnVtYmVyXG4gICAgICAgICAgICBicmVha1xuICAgICAgICAgIGNhc2UgXCJmXCI6XG4gICAgICAgICAgICBvYmouZmxpcFggPSBwcm9wLnZhbHVlIGFzIGJvb2xlYW5cbiAgICAgICAgICAgIGJyZWFrXG4gICAgICAgICAgY2FzZSBcInpNXCI6XG4gICAgICAgICAgICBvYmouejIgPSBwcm9wLnZhbHVlIGFzIG51bWJlclxuICAgICAgICAgICAgYnJlYWtcbiAgICAgICAgICBjYXNlIFwiZ3JvdXBOYW1lXCI6IC8vIFRPRE86IFZhbGlkYXRlIHRoaXMgaXMgdGhlIGNvcnJlY3QgcHJvcGVydHkgbmFtZVxuICAgICAgICAgICAgb2JqLmdyb3VwTmFtZSA9IHByb3AudmFsdWUgYXMgc3RyaW5nXG4gICAgICAgICAgICBicmVha1xuICAgICAgICB9XG4gICAgICB9KVxuXG4gICAgICBvYmouaW1nUGF0aCA9IG9iai5PYmplY3RTZXROYW1lICsgXCIuaW1nXCJcbiAgICAgIG9iai5wYXRoID0gYCR7b2JqLkxpc3RaZXJvfS8ke29iai5MaXN0T25lfS8ke29iai5MaXN0VHdvfWAucmVwbGFjZSgnICcsICcnKVxuICAgICAgb2JqLnZpc2libGUgPSAoIW9iai5xdWVzdElkcyB8fCAhb2JqLnF1ZXN0SWRzLmxlbmd0aCkgJiYgIW9iai50YWdzICYmICFvYmouZ3JvdXBOYW1lXG5cbiAgICAgIGNvbnN0IGFic0ltZ1BhdGggPSBgT2JqLyR7b2JqLk9iamVjdFNldE5hbWV9LmltZ2A7XG4gICAgICBjb25zdCBvYmpTZXQgPSBhd2FpdCBkYXRhRmFjdG9yeS5nZXRJbWFnZVdpdGhQb3NzaWJsZVByZWZpeGVzKHRoaXMucmVnaW9uLCB0aGlzLnZlcnNpb24sIFBvc3NpYmxlUGF0aFByZWZpeGVzLCBhYnNJbWdQYXRoKVxuICAgICAgb2JqLk9iamVjdFNldCA9IGF3YWl0IG9ialNldC5yZXNvbHZlKG9iai5wYXRoKVxuXG4gICAgICByZXR1cm4gb2JqXG4gICAgfSkpXG5cbiAgICAvLyBTb3J0IHRoZSBvYmplY3RzIGlmIHRoZXkncmUgZnJvbnQgb3Igbm90XG4gICAgdGhpcy5PYmplY3RzLnNvcnQoKGEsIGIpID0+IHtcbiAgICAgIGlmIChhLmZyb250ICYmICFiLmZyb250KSB7XG4gICAgICAgIHJldHVybiAxMDAwMCAtIGIuelxuICAgICAgfSBlbHNlIGlmIChiLmZyb250ICYmICFhLmZyb250KSB7XG4gICAgICAgIHJldHVybiBhLnogLSAxMDAwMFxuICAgICAgfSBlbHNlIGlmIChhLmZyb250ICYmIGIuZnJvbnQpIHtcbiAgICAgICAgcmV0dXJuIDBcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBhLnogLSBiLnpcbiAgICAgIH1cbiAgICB9KVxuICB9XG5cbiAgYXN5bmMgTG9hZEluZm8oZGF0YUZhY3Rvcnk6IFBLRzFGYWN0b3J5KSB7XG4gICAgY29uc3QgaW5mb05vZGUgPSBhd2FpdCB0aGlzLm5vZGUucmVzb2x2ZShcImluZm9cIilcblxuICAgIGNvbnN0IHJlc3VsdHMgPSBuZXcgTWFwTGF5ZXJJbmZvKClcblxuICAgIGluZm9Ob2RlLmNoaWxkcmVuLmZvckVhY2goY2hpbGQgPT4ge1xuICAgICAgc3dpdGNoKGNoaWxkLm5hbWUpIHtcbiAgICAgICAgY2FzZSBcInRTXCI6XG4gICAgICAgICAgcmVzdWx0cy50aWxlU2V0ID0gY2hpbGQudmFsdWUgYXMgc3RyaW5nXG4gICAgICAgICAgYnJlYWtcbiAgICAgICAgY2FzZSBcInRTTWFnXCI6XG4gICAgICAgICAgcmVzdWx0cy50aWxlU2V0TWFnYXppbmUgPSBjaGlsZC52YWx1ZSBhcyBzdHJpbmdcbiAgICAgICAgICBicmVha1xuXG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgY29uc29sZS53YXJuKCdVbmtub3duIGJhY2tncm91bmQgcHJvcGVydHk6ICcsIGNoaWxkLm5hbWUsIGNoaWxkKVxuICAgICAgfVxuICAgIH0pXG5cbiAgICB0aGlzLkluZm8gPSByZXN1bHRzXG5cbiAgICBpZiAocmVzdWx0cy50aWxlU2V0KSB7XG4gICAgICBjb25zdCBwYXRoID0gYFRpbGUvJHtyZXN1bHRzLnRpbGVTZXR9LmltZ2BcbiAgICAgIHRoaXMuVGlsZVNldE5vZGUgPSBhd2FpdCBkYXRhRmFjdG9yeS5nZXRJbWFnZVdpdGhQb3NzaWJsZVByZWZpeGVzKHRoaXMucmVnaW9uLCB0aGlzLnZlcnNpb24sIFBvc3NpYmxlUGF0aFByZWZpeGVzLCBwYXRoKVxuICAgIH1cbiAgfVxuXG4gIGFzeW5jIExvYWRUaWxlcygpIHtcbiAgICBjb25zdCB0aWxlc05vZGUgPSBhd2FpdCB0aGlzLm5vZGUucmVzb2x2ZShcInRpbGVcIilcbiAgICB0aGlzLlRpbGVzID0gYXdhaXQgUHJvbWlzZS5hbGwodGlsZXNOb2RlLmNoaWxkcmVuLm1hcChhc3luYyB0aWxlTm9kZSA9PiB7XG4gICAgICBjb25zdCB0aWxlID0gbmV3IE1hcFRpbGUoKVxuICAgICAgdGlsZU5vZGUuY2hpbGRyZW4uZm9yRWFjaChwcm9wID0+IHtcbiAgICAgICAgc3dpdGNoIChwcm9wLm5hbWUpIHtcbiAgICAgICAgICBjYXNlIFwidVwiOlxuICAgICAgICAgICAgdGlsZS5ncm91cCA9IHByb3AudmFsdWUgYXMgc3RyaW5nXG4gICAgICAgICAgICBicmVha1xuXG4gICAgICAgICAgY2FzZSBcIm5vXCI6XG4gICAgICAgICAgICB0aWxlLnRpbGVJZCA9IHByb3AudmFsdWUgYXMgc3RyaW5nXG4gICAgICAgICAgICBicmVha1xuXG4gICAgICAgICAgY2FzZSBcImZcIjpcbiAgICAgICAgICAgIHRpbGUuZmxpcFggPSBwcm9wLnZhbHVlIGFzIGJvb2xlYW5cbiAgICAgICAgfVxuICAgICAgfSlcblxuICAgICAgdGlsZS5wYXRoID0gYCR7dGlsZS5ncm91cH0vJHt0aWxlLnRpbGVJZH1gLnJlcGxhY2UoJyAnLCAnJylcbiAgICAgIHRpbGUudmlzaWJsZSA9IHRydWVcblxuICAgICAgdGlsZS5UaWxlTm9kZSA9IGF3YWl0IHRoaXMuVGlsZVNldE5vZGUucmVzb2x2ZSh0aWxlLnBhdGgpXG5cbiAgICAgIHJldHVybiB0aWxlXG4gICAgfSkpXG4gIH1cbn1cbiIsImV4cG9ydCBjbGFzcyBQb3J0YWwge1xuICBuYW1lOiBzdHJpbmc7XG4gIHRhcmdldE1hcElkOiBudW1iZXI7XG4gIHRhcmdldE5hbWU6IHN0cmluZztcbiAgeDogbnVtYmVyO1xuICB5OiBudW1iZXI7XG4gIG9ubHlPbmNlOiBib29sZWFuO1xuICBpbWFnZTogc3RyaW5nO1xufVxuIiwiaW1wb3J0IFBLRzFGYWN0b3J5IGZyb20gXCIuLi9QS0cxL0ZhY3RvcnlcIjtcbmltcG9ydCB7IElQcm9wZXJ0eSB9IGZyb20gXCIuLi9QS0cxL0lQcm9wZXJ0eVwiO1xuaW1wb3J0IElWZWN0b3IgZnJvbSBcIi4uL1BLRzEvSVZlY3RvclwiO1xuaW1wb3J0IHsgQmFja2dyb3VuZCB9IGZyb20gXCIuL0JhY2tncm91bmRcIjtcbmltcG9ydCB7IFBvc3NpYmxlUGF0aFByZWZpeGVzIH0gZnJvbSBcIi4vQ29uc3RhbnRzXCI7XG5pbXBvcnQgeyBGb290aG9sZCB9IGZyb20gXCIuL0Zvb3Rob2xkXCI7XG5pbXBvcnQgeyBMYWRkZXJSb3BlIH0gZnJvbSBcIi4vTGFkZGVyUm9wZVwiO1xuaW1wb3J0IHsgTGlmZSB9IGZyb20gXCIuL0xpZmVcIjtcbmltcG9ydCB7IE1hcEluZm8gfSBmcm9tIFwiLi9NYXBJbmZvXCI7XG5pbXBvcnQgTWFwTGF5ZXIgZnJvbSBcIi4vTWFwTGF5ZXJcIjtcbmltcG9ydCB7IFBvcnRhbCB9IGZyb20gXCIuL1BvcnRhbFwiO1xuXG5leHBvcnQgY2xhc3MgTWFwIHtcbiAgbm9kZTogSVByb3BlcnR5O1xuICBpZDogbnVtYmVyO1xuICByZWdpb246IHN0cmluZztcbiAgdmVyc2lvbjogc3RyaW5nO1xuXG4gIEluZm86IE1hcEluZm87XG5cbiAgTGF5ZXJzOiBNYXBMYXllcltdO1xuICBQb3J0YWxzOiBQb3J0YWxbXTtcbiAgbGlmZVRlbXBsYXRlczogTGlmZVtdO1xuICBTZWF0czogSVZlY3RvcltdO1xuICBMYWRkZXJSb3BlczogTGFkZGVyUm9wZVtdO1xuICBCYWNrZ3JvdW5kczogQmFja2dyb3VuZFtdO1xuXG4gIGNvbnN0cnVjdG9yKGlkOiBudW1iZXIsIHJlZ2lvbjogc3RyaW5nLCB2ZXJzaW9uOiBzdHJpbmcsIG1hcE5vZGU6IElQcm9wZXJ0eSkge1xuICAgIHRoaXMubm9kZSA9IG1hcE5vZGVcbiAgICB0aGlzLmlkID0gaWRcbiAgICB0aGlzLnJlZ2lvbiA9IHJlZ2lvblxuICAgIHRoaXMudmVyc2lvbiA9IHZlcnNpb25cbiAgfVxuXG4gIGFzeW5jIExvYWQoZGF0YUZhY3Rvcnk6IFBLRzFGYWN0b3J5KSB7XG4gICAgYXdhaXQgdGhpcy5Mb2FkSW5mbygpXG4gICAgYXdhaXQgdGhpcy5Mb2FkUG9ydGFscygpXG4gICAgYXdhaXQgdGhpcy5Mb2FkTGlmZSgpXG4gICAgYXdhaXQgdGhpcy5Mb2FkRm9vdGhvbGRzKClcbiAgICBhd2FpdCB0aGlzLkxvYWRMYWRkZXJSb3BlKClcbiAgICBhd2FpdCB0aGlzLkxvYWRTZWF0cygpXG4gICAgYXdhaXQgdGhpcy5Mb2FkQmFja2dyb3VuZHMoZGF0YUZhY3RvcnkpXG5cbiAgICB0aGlzLkxheWVycyA9IGF3YWl0IFByb21pc2UuYWxsKHRoaXMubm9kZS5jaGlsZHJlbi5tYXAoY2hpbGQgPT4ge1xuICAgICAgY29uc3QgbGF5ZXJJbmRleCA9IE51bWJlcihjaGlsZC5uYW1lKVxuICAgICAgaWYgKE51bWJlci5pc05hTihsYXllckluZGV4KSkgcmV0dXJuIG51bGxcbiAgICAgIHJldHVybiBjaGlsZFxuICAgIH0pLmZpbHRlcihjaGlsZCA9PiBjaGlsZClcbiAgICAubWFwKGNoaWxkID0+IHRoaXMuTG9hZExheWVyKGRhdGFGYWN0b3J5LCBjaGlsZCkpKVxuICB9XG5cbiAgYXN5bmMgTG9hZEluZm8oKSB7XG4gICAgY29uc3QgaW5mb05vZGUgPSBhd2FpdCB0aGlzLm5vZGUucmVzb2x2ZSgnaW5mbycpXG4gICAgY29uc3QgcmVzdWx0cyA9IG5ldyBNYXBJbmZvKClcblxuICAgIGluZm9Ob2RlLmNoaWxkcmVuLmZvckVhY2goY2hpbGQgPT4ge1xuICAgICAgc3dpdGNoIChjaGlsZC5uYW1lKSB7XG4gICAgICAgIGNhc2UgXCJsaW5rXCI6XG4gICAgICAgICAgcmVzdWx0cy5MaW5rc1RvID0gY2hpbGQudmFsdWUgYXMgbnVtYmVyO1xuICAgICAgICAgIGJyZWFrXG4gICAgICAgIGNhc2UgXCJiZ21cIjpcbiAgICAgICAgICByZXN1bHRzLkJhY2tncm91bmRNdXNpYyA9IGNoaWxkLnZhbHVlIGFzIHN0cmluZztcbiAgICAgICAgICBicmVha1xuICAgICAgICBjYXNlIFwicmV0dXJuTWFwXCI6XG4gICAgICAgICAgICByZXN1bHRzLlJldHVybk1hcCA9IGNoaWxkLnZhbHVlIGFzIG51bWJlcjtcbiAgICAgICAgICAgIHJlc3VsdHMuSXNSZXR1cm5NYXAgPSByZXN1bHRzLlJldHVybk1hcCA9PSA5OTk5OTk5OTk7XG4gICAgICAgICAgICBicmVha1xuICAgICAgICBjYXNlIFwidG93blwiOlxuICAgICAgICAgIHJlc3VsdHMuSXNUb3duID0gY2hpbGQudmFsdWUgYXMgYm9vbGVhblxuICAgICAgICAgIGJyZWFrXG4gICAgICAgIGNhc2UgXCJzd2ltXCI6XG4gICAgICAgICAgcmVzdWx0cy5Jc1N3aW0gPSBjaGlsZC52YWx1ZSBhcyBib29sZWFuXG4gICAgICAgICAgYnJlYWtcbiAgICAgICAgY2FzZSBcIm1vYlJhdGVcIjpcbiAgICAgICAgICByZXN1bHRzLk1vYlJhdGUgPSBjaGlsZC52YWx1ZSBhcyBudW1iZXJcbiAgICAgICAgICBicmVha1xuICAgICAgICBjYXNlIFwibWFwTWFya1wiOlxuICAgICAgICAgIHJlc3VsdHMuTWFwTWFyayA9IGNoaWxkLnZhbHVlO1xuICAgICAgICAgIGJyZWFrXG4gICAgICAgIGNhc2UgXCJiYXJyaWVyXCI6XG4gICAgICAgICAgcmVzdWx0cy5NaW5pbXVtU3RhckZvcmNlID0gY2hpbGQudmFsdWUgYXMgbnVtYmVyXG4gICAgICAgICAgYnJlYWtcbiAgICAgICAgY2FzZSBcImJhcnJpZXJBcmNcIjpcbiAgICAgICAgICByZXN1bHRzLk1pbmltdW1BcmNhbmVGb3JjZSA9IGNoaWxkLnZhbHVlIGFzIG51bWJlclxuICAgICAgICAgIGJyZWFrXG4gICAgICAgIGNhc2UgXCJsdkxpbWl0XCI6XG4gICAgICAgICAgcmVzdWx0cy5NaW5pbXVtTGV2ZWwgPSBjaGlsZC52YWx1ZSBhcyBudW1iZXJcbiAgICAgICAgICBicmVha1xuICAgICAgICBjYXNlIFwiVlJUb3BcIjpcbiAgICAgICAgICByZXN1bHRzLnRvcCA9IGNoaWxkLnZhbHVlIGFzIG51bWJlclxuICAgICAgICAgIGJyZWFrXG4gICAgICAgIGNhc2UgXCJWUlJpZ2h0XCI6XG4gICAgICAgICAgcmVzdWx0cy5yaWdodCA9IGNoaWxkLnZhbHVlIGFzIG51bWJlclxuICAgICAgICAgIGJyZWFrXG4gICAgICAgIGNhc2UgXCJWUkJvdHRvbVwiOlxuICAgICAgICAgIHJlc3VsdHMuYm90dG9tID0gY2hpbGQudmFsdWUgYXMgbnVtYmVyXG4gICAgICAgICAgYnJlYWtcbiAgICAgICAgY2FzZSBcIlZSTGVmdFwiOlxuICAgICAgICAgIHJlc3VsdHMubGVmdCA9IGNoaWxkLnZhbHVlIGFzIG51bWJlclxuICAgICAgICAgIGJyZWFrXG4gICAgICB9XG4gICAgfSlcblxuICAgIHRoaXMuSW5mbyA9IHJlc3VsdHNcbiAgfVxuXG4gIGFzeW5jIExvYWRQb3J0YWxzKCkge1xuICAgIGNvbnN0IHBvcnRhbHMgPSBhd2FpdCB0aGlzLm5vZGUucmVzb2x2ZSgncG9ydGFsJylcblxuICAgIHRoaXMuUG9ydGFscyA9IHBvcnRhbHMuY2hpbGRyZW4ubWFwKHBvcnRhbE5vZGUgPT4ge1xuICAgICAgY29uc3QgcG9ydGFsUmVzdWx0ID0gbmV3IFBvcnRhbCgpXG5cbiAgICAgIHBvcnRhbE5vZGUuY2hpbGRyZW4uZm9yRWFjaChwcm9wID0+IHtcbiAgICAgICAgc3dpdGNoKHByb3AubmFtZSkge1xuICAgICAgICBjYXNlICdwbic6XG4gICAgICAgICAgcG9ydGFsUmVzdWx0Lm5hbWUgPSBwcm9wLnZhbHVlXG4gICAgICAgICAgYnJlYWtcblxuICAgICAgICBjYXNlICd0bSc6XG4gICAgICAgICAgcG9ydGFsUmVzdWx0LnRhcmdldE1hcElkID0gcHJvcC52YWx1ZVxuICAgICAgICAgIGJyZWFrXG5cbiAgICAgICAgY2FzZSAndG4nOlxuICAgICAgICAgIHBvcnRhbFJlc3VsdC50YXJnZXROYW1lID0gcHJvcC52YWx1ZVxuICAgICAgICAgIGJyZWFrXG5cbiAgICAgICAgY2FzZSAneCc6XG4gICAgICAgICAgcG9ydGFsUmVzdWx0LnggPSBwcm9wLnZhbHVlXG4gICAgICAgICAgYnJlYWtcblxuICAgICAgICBjYXNlICd5JzpcbiAgICAgICAgICBwb3J0YWxSZXN1bHQueSA9IHByb3AudmFsdWVcbiAgICAgICAgICBicmVha1xuXG4gICAgICAgIGNhc2UgJ2ltYWdlJzpcbiAgICAgICAgICBwb3J0YWxSZXN1bHQuaW1hZ2UgPSBwcm9wLnZhbHVlIC8vIFRPRE86IFZlcmlmeSB0aGlzXG4gICAgICAgICAgYnJlYWtcblxuICAgICAgICBjYXNlICdvbmx5T25jZSc6XG4gICAgICAgICAgcG9ydGFsUmVzdWx0Lm9ubHlPbmNlID0gcHJvcC52YWx1ZVxuICAgICAgICAgIGJyZWFrXG4gICAgICAgIH1cbiAgICAgIH0pXG5cbiAgICAgIHJldHVybiBwb3J0YWxSZXN1bHRcbiAgICB9KVxuICB9XG5cbiAgYXN5bmMgTG9hZExpZmUoKSB7XG4gICAgY29uc3QgbGlmZXMgPSBhd2FpdCB0aGlzLm5vZGUucmVzb2x2ZSgnbGlmZScpXG5cbiAgICB0aGlzLmxpZmVUZW1wbGF0ZXMgPSBsaWZlcy5jaGlsZHJlbi5tYXAobGlmZU5vZGUgPT4ge1xuICAgICAgY29uc3QgbGlmZVJlc3VsdCA9IG5ldyBMaWZlKClcblxuICAgICAgbGlmZU5vZGUuY2hpbGRyZW4uZm9yRWFjaChwcm9wID0+IHtcbiAgICAgICAgc3dpdGNoIChwcm9wLm5hbWUpIHtcbiAgICAgICAgICBjYXNlICd4JzpcbiAgICAgICAgICAgIGxpZmVSZXN1bHQueCA9IHByb3AudmFsdWVcbiAgICAgICAgICAgIGJyZWFrXG5cbiAgICAgICAgICBjYXNlICd5JzpcbiAgICAgICAgICAgIGxpZmVSZXN1bHQueSA9IHByb3AudmFsdWVcbiAgICAgICAgICAgIGJyZWFrXG5cbiAgICAgICAgICBjYXNlICdyeDAnOlxuICAgICAgICAgICAgbGlmZVJlc3VsdC53YWxrTGVmdCA9IHByb3AudmFsdWVcbiAgICAgICAgICAgIGJyZWFrXG5cbiAgICAgICAgICBjYXNlICdyeDEnOlxuICAgICAgICAgICAgbGlmZVJlc3VsdC53YWxrUmlnaHQgPSBwcm9wLnZhbHVlXG4gICAgICAgICAgICBicmVha1xuXG4gICAgICAgICAgY2FzZSAnaWQnOlxuICAgICAgICAgICAgbGlmZVJlc3VsdC5pZCA9IHByb3AudmFsdWVcbiAgICAgICAgICAgIGJyZWFrXG5cbiAgICAgICAgICBjYXNlICdmaCc6XG4gICAgICAgICAgICBsaWZlUmVzdWx0LmZoID0gcHJvcC52YWx1ZVxuICAgICAgICAgICAgYnJlYWtcblxuICAgICAgICAgIGNhc2UgJ2YnOlxuICAgICAgICAgICAgbGlmZVJlc3VsdC5mbGlwWCA9IHByb3AudmFsdWVcbiAgICAgICAgICAgIGJyZWFrXG5cbiAgICAgICAgICBjYXNlICdoaWRlJzpcbiAgICAgICAgICAgIGxpZmVSZXN1bHQuaGlkZGVuID0gcHJvcC52YWx1ZVxuICAgICAgICAgICAgYnJlYWtcblxuICAgICAgICAgIGNhc2UgJ3R5cGUnOlxuICAgICAgICAgICAgbGlmZVJlc3VsdC50eXBlID0gcHJvcC52YWx1ZVxuICAgICAgICAgICAgYnJlYWtcbiAgICAgICAgfVxuICAgICAgfSlcblxuICAgICAgcmV0dXJuIGxpZmVSZXN1bHRcbiAgICB9KVxuICB9XG5cbiAgYXN5bmMgTG9hZEZvb3Rob2xkcygpIHtcbiAgICBjb25zdCBmb290SG9sZHMgPSBhd2FpdCB0aGlzLm5vZGUucmVzb2x2ZSgnZm9vdGhvbGQnKVxuXG4gICAgY29uc3QgZm9vdEhvbGRSZXN1bHRzID0gW10gYXMgUmVjb3JkPG51bWJlciwgRm9vdGhvbGQ+XG5cbiAgICBmb290SG9sZHMuY2hpbGRyZW4uZm9yRWFjaChsYXllciA9PiB7XG4gICAgICBsYXllci5jaGlsZHJlbi5mb3JFYWNoKGdyb3VwID0+IHtcbiAgICAgICAgZ3JvdXAuY2hpbGRyZW4uZm9yRWFjaChmaFByb3AgPT4ge1xuICAgICAgICAgIGNvbnN0IGZoID0gZm9vdEhvbGRSZXN1bHRzW051bWJlcihmaFByb3AubmFtZSldID0gbmV3IEZvb3Rob2xkKClcbiAgICAgICAgICBmaC5pZCA9IE51bWJlcihmaFByb3AubmFtZSlcbiAgICAgICAgICBmaC5ncm91cCA9IE51bWJlcihncm91cC5uYW1lKVxuICAgICAgICAgIGZoLmxheWVyID0gTnVtYmVyKGxheWVyLm5hbWUpXG5cbiAgICAgICAgICBmaFByb3AuY2hpbGRyZW4uZm9yRWFjaChwcm9wID0+IHtcbiAgICAgICAgICAgIHN3aXRjaChwcm9wLm5hbWUpIHtcbiAgICAgICAgICAgICAgY2FzZSAnbmV4dCc6XG4gICAgICAgICAgICAgICAgZmgubmV4dCA9IE51bWJlcihwcm9wLnZhbHVlKVxuICAgICAgICAgICAgICAgIGJyZWFrXG5cbiAgICAgICAgICAgICAgY2FzZSAncHJldic6XG4gICAgICAgICAgICAgICAgZmgucHJldiA9IE51bWJlcihwcm9wLnZhbHVlKVxuICAgICAgICAgICAgICAgIGJyZWFrXG5cbiAgICAgICAgICAgICAgY2FzZSAncGllY2UnOlxuICAgICAgICAgICAgICAgIGZoLnBpZWNlID0gTnVtYmVyKHByb3AudmFsdWUpXG4gICAgICAgICAgICAgICAgYnJlYWtcblxuICAgICAgICAgICAgICBjYXNlICd4MSc6XG4gICAgICAgICAgICAgICAgZmgueDEgPSBOdW1iZXIocHJvcC52YWx1ZSlcbiAgICAgICAgICAgICAgICBicmVha1xuXG4gICAgICAgICAgICAgIGNhc2UgJ3gyJzpcbiAgICAgICAgICAgICAgICBmaC54MiA9IE51bWJlcihwcm9wLnZhbHVlKVxuICAgICAgICAgICAgICAgIGJyZWFrXG5cbiAgICAgICAgICAgICAgY2FzZSAneTEnOlxuICAgICAgICAgICAgICAgIGZoLnkxID0gTnVtYmVyKHByb3AudmFsdWUpXG4gICAgICAgICAgICAgICAgYnJlYWtcblxuICAgICAgICAgICAgICBjYXNlICd5Mic6XG4gICAgICAgICAgICAgICAgZmgueTIgPSBOdW1iZXIocHJvcC52YWx1ZSlcbiAgICAgICAgICAgICAgICBicmVha1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pXG4gICAgICAgIH0pXG4gICAgICB9KVxuICAgIH0pXG4gIH1cblxuICBhc3luYyBMb2FkTGFkZGVyUm9wZSgpIHtcbiAgICBjb25zdCBsYWRkZXJSb3BlcyA9IGF3YWl0IHRoaXMubm9kZS5yZXNvbHZlKCdsYWRkZXJSb3BlJylcblxuICAgIHRoaXMuTGFkZGVyUm9wZXMgPSBsYWRkZXJSb3Blcy5jaGlsZHJlbi5tYXAobGFkZGVyUm9wZSA9PiB7XG4gICAgICBjb25zdCBsYWRkZXJSb3BlUmVzdWx0ID0gbmV3IExhZGRlclJvcGUoKVxuICAgICAgbGFkZGVyUm9wZS5jaGlsZHJlbi5mb3JFYWNoKGNoaWxkID0+IHtcbiAgICAgICAgc3dpdGNoKGNoaWxkLm5hbWUpIHtcbiAgICAgICAgICBjYXNlIFwieFwiOlxuICAgICAgICAgICAgbGFkZGVyUm9wZVJlc3VsdC54ID0gY2hpbGQudmFsdWUgYXMgbnVtYmVyXG4gICAgICAgICAgICBicmVha1xuXG4gICAgICAgICAgY2FzZSBcInkxXCI6XG4gICAgICAgICAgICBsYWRkZXJSb3BlUmVzdWx0LnkxID0gY2hpbGQudmFsdWUgYXMgbnVtYmVyXG4gICAgICAgICAgICBicmVha1xuXG4gICAgICAgICAgY2FzZSBcInkyXCI6XG4gICAgICAgICAgICBsYWRkZXJSb3BlUmVzdWx0LnkyID0gY2hpbGQudmFsdWUgYXMgbnVtYmVyXG4gICAgICAgICAgICBicmVha1xuXG4gICAgICAgICAgY2FzZSBcImxcIjpcbiAgICAgICAgICAgIGxhZGRlclJvcGVSZXN1bHQuSXNMYWRkZXIgPSBjaGlsZC52YWx1ZSBhcyBib29sZWFuXG4gICAgICAgICAgICBicmVha1xuICAgICAgICB9XG4gICAgICB9KVxuXG4gICAgICByZXR1cm4gbGFkZGVyUm9wZVJlc3VsdFxuICAgIH0pXG4gIH1cblxuICBhc3luYyBMb2FkQmFja2dyb3VuZHMoZGF0YUZhY3Rvcnk6IFBLRzFGYWN0b3J5KSB7XG4gICAgY29uc3QgYmFja2dyb3VuZHMgPSBhd2FpdCB0aGlzLm5vZGUucmVzb2x2ZSgnYmFjaycpXG5cbiAgICB0aGlzLkJhY2tncm91bmRzID0gYXdhaXQgUHJvbWlzZS5hbGwoYmFja2dyb3VuZHMuY2hpbGRyZW4ubWFwKGFzeW5jIGJhY2tncm91bmROb2RlID0+IHtcbiAgICAgIC8vIFBhcnNlIHRoZSBub2RlXG5cbiAgICAgIGNvbnN0IHJlc3VsdCA9IG5ldyBCYWNrZ3JvdW5kKClcblxuICAgICAgYmFja2dyb3VuZE5vZGUuY2hpbGRyZW4uZm9yRWFjaChwcm9wID0+IHtcbiAgICAgICAgc3dpdGNoKHByb3AubmFtZSkge1xuICAgICAgICAgIGNhc2UgJ25vJzpcbiAgICAgICAgICAgIHJlc3VsdC5iYWNrZ3JvdW5kU2V0SWQgPSBwcm9wLnZhbHVlXG4gICAgICAgICAgICBicmVha1xuXG4gICAgICAgICAgY2FzZSAnYlMnOlxuICAgICAgICAgICAgcmVzdWx0LmJhY2tncm91bmRTZXROYW1lID0gcHJvcC52YWx1ZVxuICAgICAgICAgICAgYnJlYWtcblxuICAgICAgICAgIGNhc2UgJ2Zyb250JzpcbiAgICAgICAgICAgIHJlc3VsdC5mcm9udCA9IHByb3AudmFsdWVcbiAgICAgICAgICAgIGJyZWFrXG5cbiAgICAgICAgICBjYXNlICdhJzpcbiAgICAgICAgICAgIHJlc3VsdC5hbHBoYSA9IChwcm9wLnZhbHVlIHx8IDI1NSkgLyAyNTVcbiAgICAgICAgICAgIGJyZWFrXG5cbiAgICAgICAgICBjYXNlICdmJzpcbiAgICAgICAgICAgIHJlc3VsdC5mbGlwWCA9IHByb3AudmFsdWVcbiAgICAgICAgICAgIGJyZWFrXG5cbiAgICAgICAgICBjYXNlICd0eXBlJzpcbiAgICAgICAgICAgIHJlc3VsdC50eXBlID0gcHJvcC52YWx1ZVxuICAgICAgICAgICAgYnJlYWtcblxuICAgICAgICAgIGNhc2UgJ3gnOlxuICAgICAgICAgICAgcmVzdWx0LnggPSBwcm9wLnZhbHVlXG4gICAgICAgICAgICBicmVha1xuXG4gICAgICAgICAgY2FzZSAneSc6XG4gICAgICAgICAgICByZXN1bHQueSA9IHByb3AudmFsdWVcbiAgICAgICAgICAgIGJyZWFrXG5cbiAgICAgICAgICBjYXNlICdyeCc6XG4gICAgICAgICAgICByZXN1bHQucnggPSBwcm9wLnZhbHVlXG4gICAgICAgICAgICBicmVha1xuXG4gICAgICAgICAgY2FzZSAncnknOlxuICAgICAgICAgICAgcmVzdWx0LnJ5ID0gcHJvcC52YWx1ZVxuICAgICAgICAgICAgYnJlYWtcblxuICAgICAgICAgIGNhc2UgJ2N4JzpcbiAgICAgICAgICAgIHJlc3VsdC5jeCA9IHByb3AudmFsdWVcbiAgICAgICAgICAgIGJyZWFrXG5cbiAgICAgICAgICBjYXNlICdjeSc6XG4gICAgICAgICAgICByZXN1bHQuY3kgPSBwcm9wLnZhbHVlXG4gICAgICAgICAgICBicmVha1xuXG4gICAgICAgICAgY2FzZSAnYW5pJzpcbiAgICAgICAgICAgIHJlc3VsdC5hbmltYXRlZCA9IHByb3AudmFsdWVcbiAgICAgICAgICAgIGJyZWFrXG5cbiAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgY29uc29sZS53YXJuKCdVbmtub3duIGJhY2tncm91bmQgcHJvcGVydHk6ICcsIHByb3AubmFtZSwgcHJvcClcbiAgICAgICAgfVxuICAgICAgfSlcblxuICAgICAgbGV0IGJhY2tncm91bmRHcm91cCA9IFwiYmFja1wiXG4gICAgICBpZiAocmVzdWx0LmFuaW1hdGVkKSBiYWNrZ3JvdW5kR3JvdXAgPSBcImFuaVwiXG4gICAgICByZXN1bHQuUGF0aCA9IGAke2JhY2tncm91bmRHcm91cH0vJHtyZXN1bHQuYmFja2dyb3VuZFNldElkfWAucmVwbGFjZSgnICcsICcnKVxuICAgICAgcmVzdWx0LmltZ1BhdGggPSBgQmFjay8ke3Jlc3VsdC5iYWNrZ3JvdW5kU2V0TmFtZX0uaW1nYC5yZXBsYWNlKCcgJywgJycpXG5cbiAgICAgIGNvbnN0IGJhY2tncm91bmQgPSBhd2FpdCBkYXRhRmFjdG9yeS5nZXRJbWFnZVdpdGhQb3NzaWJsZVByZWZpeGVzKHRoaXMucmVnaW9uLCB0aGlzLnZlcnNpb24sIFBvc3NpYmxlUGF0aFByZWZpeGVzLCByZXN1bHQuaW1nUGF0aClcbiAgICAgIHJlc3VsdC5iYWNrZ3JvdW5kTm9kZSA9IGF3YWl0IGJhY2tncm91bmQucmVzb2x2ZShyZXN1bHQuUGF0aClcblxuICAgICAgcmV0dXJuIHJlc3VsdFxuICAgIH0pKVxuICB9XG5cbiAgYXN5bmMgTG9hZFNlYXRzKCkge1xuICAgIGNvbnN0IHNlYXRzID0gYXdhaXQgdGhpcy5ub2RlLnJlc29sdmUoJ3NlYXQnKVxuXG4gICAgaWYgKCFzZWF0cylcbiAgICAgIHRoaXMuU2VhdHMgPSBbXVxuICAgIGVsc2VcbiAgICAgIHRoaXMuU2VhdHMgPSBzZWF0cy5jaGlsZHJlbi5tYXAoY2hpbGQgPT4gY2hpbGQudmFsdWUgYXMgSVZlY3RvcilcbiAgfVxuXG4gIGFzeW5jIExvYWRMYXllcihkYXRhRmFjdG9yeTogUEtHMUZhY3RvcnksIGxheWVyTm9kZTogSVByb3BlcnR5KSB7XG4gICAgY29uc3QgbGF5ZXIgPSBuZXcgTWFwTGF5ZXIodGhpcy5yZWdpb24sIHRoaXMudmVyc2lvbiwgbGF5ZXJOb2RlKVxuICAgIGF3YWl0IGxheWVyLkxvYWQoZGF0YUZhY3RvcnkpXG5cbiAgICByZXR1cm4gbGF5ZXJcbiAgfVxufVxuIiwiaW1wb3J0IFBLRzFGYWN0b3J5IGZyb20gXCIuLi9QS0cxL0ZhY3RvcnlcIjtcbmltcG9ydCB7IElQcm9wZXJ0eSB9IGZyb20gXCIuLi9QS0cxL0lQcm9wZXJ0eVwiO1xuaW1wb3J0IHsgUG9zc2libGVQYXRoUHJlZml4ZXMgfSBmcm9tIFwiLi9Db25zdGFudHNcIjtcbmltcG9ydCB7IE1hcCB9IGZyb20gXCIuL01hcFwiO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBNYXBSZW5kZXJlciB7XG4gIGRhdGFGYWN0b3J5OiBQS0cxRmFjdG9yeTtcblxuICBjb25zdHJ1Y3RvcihkYXRhRmFjdG9yeTogUEtHMUZhY3RvcnkpIHtcbiAgICB0aGlzLmRhdGFGYWN0b3J5ID0gZGF0YUZhY3RvcnlcbiAgfVxuXG4gIGFzeW5jIFJlbmRlcihyZWdpb246IHN0cmluZywgdmVyc2lvbjogc3RyaW5nLCBtYXBJZDogbnVtYmVyKSB7XG4gICAgY29uc3QgbWFwID0gYXdhaXQgdGhpcy5Mb2FkTWFwKG1hcElkLCByZWdpb24sIHZlcnNpb24pO1xuXG4gICAgcmV0dXJuIG1hcFxuICB9XG5cbiAgcHJpdmF0ZSBhc3luYyBMb2FkTWFwKG1hcElkOiBudW1iZXIsIHJlZ2lvbjogc3RyaW5nLCB2ZXJzaW9uOiBzdHJpbmcpIHtcbiAgICBsZXQgbWFwSWRTdHIgPSBwYWRMZWZ0KG1hcElkLnRvU3RyaW5nKCksIDkpO1xuICAgIGNvbnN0IHBhdGggPSBgTWFwL01hcCR7bWFwSWRTdHIuc3Vic3RyaW5nKDAsIDEpfS8ke21hcElkU3RyfS5pbWdgO1xuXG4gICAgY29uc3QgbWFwTm9kZSA9IGF3YWl0IHRoaXMuZGF0YUZhY3RvcnkuZ2V0SW1hZ2VXaXRoUG9zc2libGVQcmVmaXhlcyhyZWdpb24sIHZlcnNpb24sIFBvc3NpYmxlUGF0aFByZWZpeGVzLCBwYXRoKVxuICAgIGNvbnN0IG1hcCA9IG5ldyBNYXAobWFwSWQsIHJlZ2lvbiwgdmVyc2lvbiwgbWFwTm9kZSlcbiAgICBhd2FpdCBtYXAuTG9hZCh0aGlzLmRhdGFGYWN0b3J5KVxuXG4gICAgcmV0dXJuIG1hcFxuICB9XG59XG5cbmZ1bmN0aW9uIHBhZExlZnQgKHN0cjogc3RyaW5nLCBuOiBudW1iZXIpIDogc3RyaW5nIHtcbiAgbGV0IHJlc3VsdCA9IHN0clxuICB3aGlsZSAocmVzdWx0Lmxlbmd0aCA8IG4pIHsgcmVzdWx0ID0gJzAnICsgcmVzdWx0IH1cbiAgcmV0dXJuIHJlc3VsdFxufVxuIiwiZXhwb3J0IGRlZmF1bHQgY2xhc3MgUHJvZ3Jlc3NNb25pdG9yIHtcbiAgTGVuZ3RoOiBudW1iZXI7XG4gIENvbXBsZXRlZExlbmd0aDogbnVtYmVyO1xuICBEb25lOiBib29sZWFuXG4gIEVycm9yOiBFcnJvclxuICBSZXRyeUluZGV4OiBudW1iZXI7XG4gIFJldHJ5U3VjY2VzczogYm9vbGVhbjtcbiAgTmFtZTogc3RyaW5nO1xuICBOb3RpZnlPbkNvbXBsZXRlOiBBcnJheTwobW9uaXRvcjogUHJvZ3Jlc3NNb25pdG9yKSA9PiBudWxsPiA9IFtdO1xuICBTdGFydGVkQXQ6IERhdGU7XG4gIFJldHJpZWRBdDogRGF0ZTtcbiAgRG9uZUF0OiBEYXRlO1xuICBGcm9tSW50ZXJuYWxDYWNoZTogYm9vbGVhbjtcblxuICBjb25zdHJ1Y3RvcihuYW1lOiBzdHJpbmcpIHtcbiAgICB0aGlzLk5hbWUgPSBuYW1lXG4gICAgdGhpcy5Db21wbGV0ZWRMZW5ndGggPSAwXG4gICAgdGhpcy5TdGFydGVkQXQgPSBuZXcgRGF0ZSgpXG4gIH1cblxuICBTZXRMZW5ndGgobGVuZ3RoOiBudW1iZXIpIHtcbiAgICB0aGlzLkxlbmd0aCA9IGxlbmd0aFxuICB9XG5cbiAgUmVwb3J0TmV3TGVuZ3RoKGxlbmd0aDogbnVtYmVyKSB7XG4gICAgdGhpcy5Db21wbGV0ZWRMZW5ndGggPSBsZW5ndGhcbiAgfVxuXG4gIFJlcG9ydERvbmUoKSB7XG4gICAgdGhpcy5Eb25lID0gdHJ1ZVxuICAgIHRoaXMuRG9uZUF0ID0gbmV3IERhdGUoKVxuXG4gICAgdGhpcy5Ob3RpZnlPbkNvbXBsZXRlLmZvckVhY2goY2FsbGJhY2sgPT4gY2FsbGJhY2sodGhpcykpXG4gIH1cblxuICBSZXBvcnRFcnJvcihlcnI6IEVycm9yKSB7XG4gICAgdGhpcy5FcnJvciA9IGVyclxuICB9XG5cbiAgUmVwb3J0UmV0cnlBdHRlbXB0KHJldHJ5SW5kZXg6IG51bWJlcikge1xuICAgIHRoaXMuUmV0cnlJbmRleCA9IHJldHJ5SW5kZXhcbiAgICB0aGlzLlJldHJpZWRBdCA9IG5ldyBEYXRlKClcbiAgICB0aGlzLlJldHJ5U3VjY2VzcyA9IGZhbHNlXG4gIH1cblxuICBSZXBvcnRSZXRyeVN1Y2Nlc3MoKSB7XG4gICAgdGhpcy5SZXRyeVN1Y2Nlc3MgPSB0cnVlXG4gICAgdGhpcy5FcnJvciA9IG51bGxcbiAgfVxuXG4gIFJlZ2lzdGVyTm90aWZ5T25Db21wbGV0ZShjYWxsYmFjazogKG1vbml0b3I6IFByb2dyZXNzTW9uaXRvcikgPT4gbnVsbCkge1xuICAgIHRoaXMuTm90aWZ5T25Db21wbGV0ZS5wdXNoKGNhbGxiYWNrKVxuICB9XG5cbiAgUmVwb3J0RnJvbUludGVybmFsQ2FjaGUoKSB7XG4gICAgdGhpcy5Gcm9tSW50ZXJuYWxDYWNoZSA9IHRydWVcbiAgfVxufVxuIiwiZXhwb3J0IGRlZmF1bHQgY2xhc3MgUmVxdWVzdEhvbGRlciB7XG4gIHBhdGg6IHN0cmluZ1xuICBkYXRhOiBVaW50OEFycmF5XG5cbiAgY29uc3RydWN0b3IocGF0aDogc3RyaW5nLCBkYXRhOiBVaW50OEFycmF5KSB7XG4gICAgdGhpcy5wYXRoID0gcGF0aFxuICAgIHRoaXMuZGF0YSA9IGRhdGFcbiAgfVxufSIsImltcG9ydCBEYXRhYmFzZSBmcm9tIFwiLi9EYXRhYmFzZVwiO1xuaW1wb3J0IFByb2dyZXNzTW9uaXRvciBmcm9tIFwiLi9QS0cxL1Byb2dyZXNzTW9uaXRvclwiO1xuaW1wb3J0IFJlcXVlc3RIb2xkZXIgZnJvbSBcIi4vVXRpbGl0aWVzL1JlcXVlc3RIb2xkZXJcIjtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgTmV0d29yayB7XG4gIFByb2dyZXNzTW9uaXRvckNhbGxiYWNrOiBBcnJheTwobW9uaXRvcjogUHJvZ3Jlc3NNb25pdG9yKSA9PiBudWxsPiA9IFtdXG4gIFJldHJpZXNBbGxvd2VkOiBudW1iZXIgPSA1XG4gIFJldHJ5RGVsYXk6IG51bWJlciA9IDEwMDBcbiAgZGF0YWJhc2U6IERhdGFiYXNlO1xuXG4gIGNvbnN0cnVjdG9yKGRhdGFiYXNlOiBEYXRhYmFzZSkge1xuICAgIHRoaXMuZGF0YWJhc2UgPSBkYXRhYmFzZVxuICB9XG5cbiAgUmVnaXN0ZXJFdmVudE1vbml0b3IoY2FsbGJhY2s6IChtb25pdG9yOiBQcm9ncmVzc01vbml0b3IpID0+IG51bGwpIHtcbiAgICB0aGlzLlByb2dyZXNzTW9uaXRvckNhbGxiYWNrLnB1c2goY2FsbGJhY2spXG4gIH1cblxuICBTZXRSZXRyeUNvdW50KHJldHJ5Q291bnQ6IG51bWJlcikge1xuICAgIHRoaXMuUmV0cmllc0FsbG93ZWQgPSByZXRyeUNvdW50XG4gIH1cblxuICBhc3luYyBkb3dubG9hZCAocGF0aDogc3RyaW5nKSA6IFByb21pc2U8VWludDhBcnJheT4ge1xuICAgIGxldCByZXNwb25zZSA9IG51bGxcbiAgICBsZXQgcmVhZGVyID0gbnVsbFxuICAgIGxldCByZXRyeUluZGV4ID0gMFxuICAgIGxldCBjb250ZW50TGVuZ3RoID0gMFxuXG4gICAgY29uc3QgbW9uaXRvciA9IG5ldyBQcm9ncmVzc01vbml0b3IocGF0aClcbiAgICB0aGlzLlByb2dyZXNzTW9uaXRvckNhbGxiYWNrLmZvckVhY2goY2FsbGJhY2sgPT4gY2FsbGJhY2sobW9uaXRvcikpXG5cbiAgICBjb25zdCBmcm9tRGF0YWJhc2UgPSBhd2FpdCB0aGlzLmRhdGFiYXNlLnJlcXVlc3RzLmdldChwYXRoKVxuICAgIGlmIChmcm9tRGF0YWJhc2UpIHtcbiAgICAgIGNvbnN0IGRhdGEgPSBmcm9tRGF0YWJhc2UuZGF0YVxuICAgICAgbW9uaXRvci5SZXBvcnRGcm9tSW50ZXJuYWxDYWNoZSgpXG4gICAgICBtb25pdG9yLlNldExlbmd0aChkYXRhLmxlbmd0aClcbiAgICAgIG1vbml0b3IuUmVwb3J0TmV3TGVuZ3RoKGRhdGEubGVuZ3RoKVxuICAgICAgbW9uaXRvci5SZXBvcnREb25lKClcbiAgICAgIHJldHVybiBkYXRhXG4gICAgfVxuXG4gICAgd2hpbGUgKHJldHJ5SW5kZXggPCB0aGlzLlJldHJpZXNBbGxvd2VkKSB7XG4gICAgICB0cnkge1xuICAgICAgICByZXNwb25zZSA9IGF3YWl0IGZldGNoKHBhdGgpXG4gICAgICAgIGlmIChyZXNwb25zZS5zdGF0dXMgPj0gNDAwKSB0aHJvdyBuZXcgRXJyb3IoXCJJbnZhbGlkIHJlc3BvbnNlIHN0YXR1cyBjb2RlXCIpXG4gICAgICAgIHJlYWRlciA9IHJlc3BvbnNlLmJvZHkuZ2V0UmVhZGVyKClcbiAgICAgICAgY29udGVudExlbmd0aCA9ICtyZXNwb25zZS5oZWFkZXJzLmdldCgnQ29udGVudC1MZW5ndGgnKTtcblxuICAgICAgICBtb25pdG9yLlNldExlbmd0aChjb250ZW50TGVuZ3RoKVxuICAgICAgICBpZiAocmV0cnlJbmRleClcbiAgICAgICAgICBtb25pdG9yLlJlcG9ydFJldHJ5U3VjY2VzcygpXG5cbiAgICAgICAgYnJlYWs7XG4gICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgbW9uaXRvci5SZXBvcnRFcnJvcihlcnIpXG4gICAgICAgIGF3YWl0IG5ldyBQcm9taXNlKHJlcyA9PiBzZXRUaW1lb3V0KCgpID0+IHJlcyhudWxsKSwgdGhpcy5SZXRyeURlbGF5KSlcblxuICAgICAgICByZXRyeUluZGV4KytcbiAgICAgICAgbW9uaXRvci5SZXBvcnRSZXRyeUF0dGVtcHQocmV0cnlJbmRleClcbiAgICAgIH1cbiAgICB9XG5cbiAgICBsZXQgcmVjZWl2ZWRMZW5ndGggPSAwXG4gICAgbGV0IGNodW5rcyA9IFtdIGFzIEFycmF5PFVpbnQ4QXJyYXk+XG5cbiAgICB3aGlsZSAodHJ1ZSkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgY29uc3QgeyBkb25lLCB2YWx1ZSB9ID0gYXdhaXQgcmVhZGVyLnJlYWQoKVxuXG4gICAgICAgIGlmIChkb25lKSBicmVha1xuXG4gICAgICAgIGNodW5rcy5wdXNoKHZhbHVlKVxuICAgICAgICByZWNlaXZlZExlbmd0aCArPSB2YWx1ZS5sZW5ndGhcbiAgICAgICAgbW9uaXRvci5SZXBvcnROZXdMZW5ndGgocmVjZWl2ZWRMZW5ndGgpXG4gICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgbW9uaXRvci5SZXBvcnRFcnJvcihlcnIpXG5cbiAgICAgICAgbGV0IHJldHJ5U3VjY2VzcyA9IGZhbHNlXG4gICAgICAgIHdoaWxlICgrK3JldHJ5SW5kZXggPCB0aGlzLlJldHJpZXNBbGxvd2VkKSB7XG4gICAgICAgICAgLy8gRGVsYXkgYSBiaXQgc28gYW55IHRyYW5zaWVudCBuZXR3b3JrIGVycm9ycyBjYW4gKmhvcGVmdWxseSogcGFzc1xuICAgICAgICAgIGF3YWl0IG5ldyBQcm9taXNlKHJlcyA9PiBzZXRUaW1lb3V0KCgpID0+IHJlcyhudWxsKSwgdGhpcy5SZXRyeURlbGF5KSlcblxuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICBtb25pdG9yLlJlcG9ydFJldHJ5QXR0ZW1wdChyZXRyeUluZGV4KVxuXG4gICAgICAgICAgICAvLyBBdHRlbXB0IHRvIHJlc3VtZSB0aGUgc3RyZWFtIGF0IHRoZSBzYW1lIHBvc2l0aW9uIG9mIHRoZSBsYXN0IHN1Y2Nlc2Z1bCBjaHVua1xuICAgICAgICAgICAgcmVzcG9uc2UgPSBhd2FpdCBmZXRjaChwYXRoLCB7XG4gICAgICAgICAgICAgIGhlYWRlcnM6IHtcbiAgICAgICAgICAgICAgICBcIlJhbmdlXCI6IGBieXRlcz0ke3JlY2VpdmVkTGVuZ3RofS0ke2NvbnRlbnRMZW5ndGh9YFxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KVxuXG4gICAgICAgICAgICBpZiAocmVzcG9uc2Uuc3RhdHVzID49IDQwMCkgdGhyb3cgbmV3IEVycm9yKFwiSW52YWxpZCByZXNwb25zZSBzdGF0dXMgY29kZVwiKVxuICAgICAgICAgICAgcmVhZGVyID0gcmVzcG9uc2UuYm9keS5nZXRSZWFkZXIoKVxuXG4gICAgICAgICAgICBtb25pdG9yLlJlcG9ydFJldHJ5U3VjY2VzcygpXG4gICAgICAgICAgICByZXRyeVN1Y2Nlc3MgPSB0cnVlXG4gICAgICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICBtb25pdG9yLlJlcG9ydEVycm9yKGVycilcbiAgICAgICAgICAgIGF3YWl0IG5ldyBQcm9taXNlKHJlcyA9PiBzZXRUaW1lb3V0KCgpID0+IHJlcyhudWxsKSwgdGhpcy5SZXRyeURlbGF5KSlcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvLyBJZiB0aGUgcmV0cnkgd2Fzbid0IGFibGUgdG8gcmUtZXN0YWJsaXNoIHRoZSBkb3dubG9hZCwganVzdCB0aHJvdyB0aGUgZXJyb3Igc28gaXQgc3RvcHMgYW55IHJlbGF0ZWQgY29kZSA6KFxuICAgICAgICBpZiAoIXJldHJ5U3VjY2Vzcykge1xuICAgICAgICAgIG1vbml0b3IuUmVwb3J0RXJyb3IoZXJyKVxuICAgICAgICAgIHRocm93IGVyclxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gQ29tcGlsZSB0b2dldGhlclxuICAgIGxldCBwYXlsb2FkID0gbmV3IFVpbnQ4QXJyYXkocmVjZWl2ZWRMZW5ndGgpXG4gICAgbGV0IHBvc2l0aW9uID0gMFxuICAgIGZvcihsZXQgY2h1bmsgb2YgY2h1bmtzKSB7XG4gICAgICBwYXlsb2FkLnNldChjaHVuaywgcG9zaXRpb24pXG4gICAgICBwb3NpdGlvbiArPSBjaHVuay5sZW5ndGhcbiAgICB9XG5cbiAgICBhd2FpdCB0aGlzLmRhdGFiYXNlLnJlcXVlc3RzLnB1dChuZXcgUmVxdWVzdEhvbGRlcihwYXRoLCBwYXlsb2FkKSwgcGF0aClcbiAgICBtb25pdG9yLlJlcG9ydERvbmUoKVxuICAgIHJldHVybiBwYXlsb2FkXG4gIH1cblxuICBhc3luYyBmZXRjaEpzb24ocGF0aDogc3RyaW5nKSA6IFByb21pc2U8YW55PiB7XG4gICAgY29uc3QgcmF3UGF5bG9hZCA9IGF3YWl0IHRoaXMuZG93bmxvYWQocGF0aClcblxuICAgIGNvbnN0IHJhd0pzb24gPSBuZXcgVGV4dERlY29kZXIoXCJ1dGYtOFwiKS5kZWNvZGUocmF3UGF5bG9hZClcbiAgICByZXR1cm4gSlNPTi5wYXJzZShyYXdKc29uKVxuICB9XG5cbiAgYXN5bmMgZmV0Y2hBYihwYXRoOiBzdHJpbmcpIDogUHJvbWlzZTxBcnJheUJ1ZmZlcj4ge1xuICAgIGNvbnN0IHJhd1BheWxvYWQgPSBhd2FpdCB0aGlzLmRvd25sb2FkKHBhdGgpXG4gICAgcmV0dXJuIHJhd1BheWxvYWQuYnVmZmVyXG4gIH1cbn0iLCJjb25zdCBpbmZsYXRlID0gcmVxdWlyZSgncGFrby9kaXN0L3Bha29faW5mbGF0ZScpXG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEJpbmFyeVJlYWRlciB7XG4gIGFiOiBBcnJheUJ1ZmZlckxpa2U7XG4gIHZpZXc6IERhdGFWaWV3O1xuICBwb3NpdGlvbjogbnVtYmVyO1xuICBzdGFydFBvc2l0aW9uOiBudW1iZXI7XG4gIGxlbmd0aDogbnVtYmVyO1xuXG4gIGNvbnN0cnVjdG9yKGFiOiBBcnJheUJ1ZmZlckxpa2UsIHN0YXJ0UG9zaXRpb24/OiBudW1iZXIsIGxlbmd0aD86IGFueSkge1xuICAgIHRoaXMuYWIgPSBhYjtcbiAgICB0aGlzLnZpZXcgPSBuZXcgRGF0YVZpZXcoYWIsIHN0YXJ0UG9zaXRpb24gfHwgMCwgbGVuZ3RoIHx8IGFiLmJ5dGVMZW5ndGgpO1xuICAgIHRoaXMucG9zaXRpb24gPSAwO1xuICAgIHRoaXMuc3RhcnRQb3NpdGlvbiA9IHN0YXJ0UG9zaXRpb24gfHwgMDtcbiAgICB0aGlzLmxlbmd0aCA9IGFiLmJ5dGVMZW5ndGg7XG4gIH1cblxuICBBZHZhbmNlKGNvdW50OiBudW1iZXIpIDogbnVtYmVyIHtcbiAgICBjb25zdCBwb3MgPSB0aGlzLnBvc2l0aW9uO1xuICAgIHRoaXMucG9zaXRpb24gKz0gY291bnQ7XG4gICAgcmV0dXJuIHBvcztcbiAgfVxuICBSZWFkQnl0ZSgpIDogbnVtYmVyIHsgcmV0dXJuIHRoaXMudmlldy5nZXRJbnQ4KHRoaXMuQWR2YW5jZSgxKSk7IH1cbiAgUmVhZFVCeXRlKCkgOiBudW1iZXIgeyByZXR1cm4gdGhpcy52aWV3LmdldFVpbnQ4KHRoaXMuQWR2YW5jZSgxKSk7IH1cbiAgUmVhZEludDE2KCkgOiBudW1iZXIgeyByZXR1cm4gdGhpcy52aWV3LmdldEludDE2KHRoaXMuQWR2YW5jZSgyKSwgdHJ1ZSk7IH1cbiAgUmVhZFVJbnQxNigpIDogbnVtYmVyIHsgcmV0dXJuIHRoaXMudmlldy5nZXRVaW50MTYodGhpcy5BZHZhbmNlKDIpLCB0cnVlKTsgfVxuICBSZWFkSW50MzIoKSA6IG51bWJlciB7IHJldHVybiB0aGlzLnZpZXcuZ2V0SW50MzIodGhpcy5BZHZhbmNlKDQpLCB0cnVlKTsgfVxuICBSZWFkVUludDMyKCkgOiBudW1iZXIgeyByZXR1cm4gdGhpcy52aWV3LmdldFVpbnQzMih0aGlzLkFkdmFuY2UoNCksIHRydWUpOyB9XG4gIFJlYWRJbnQ2NCgpIDogYmlnaW50IHsgcmV0dXJuIHRoaXMudmlldy5nZXRCaWdJbnQ2NCh0aGlzLkFkdmFuY2UoOCksIHRydWUpOyB9XG4gIFJlYWRVSW50NjQoKSA6IGJpZ2ludCB7IHJldHVybiB0aGlzLnZpZXcuZ2V0QmlnVWludDY0KHRoaXMuQWR2YW5jZSg4KSwgdHJ1ZSk7IH1cbiAgUmVhZFNpbmdsZSgpIDogbnVtYmVyIHsgcmV0dXJuIHRoaXMudmlldy5nZXRGbG9hdDMyKHRoaXMuQWR2YW5jZSg0KSwgdHJ1ZSk7IH1cbiAgUmVhZERvdWJsZSgpIDogbnVtYmVyIHsgcmV0dXJuIHRoaXMudmlldy5nZXRGbG9hdDY0KHRoaXMuQWR2YW5jZSg4KSwgdHJ1ZSk7IH1cbiAgUmVhZFdaU2luZ2xlKCkgOiBudW1iZXIge1xuICAgIGNvbnN0IHBvc3NpYmxlID0gdGhpcy5SZWFkQnl0ZSgpO1xuICAgIGlmIChwb3NzaWJsZSA9PSAweDgwKVxuICAgICAgcmV0dXJuIHRoaXMuUmVhZFNpbmdsZSgpO1xuICAgIGVsc2VcbiAgICAgIHJldHVybiBwb3NzaWJsZTtcbiAgfVxuXG4gIFJlYWRXWkludCgpIDogbnVtYmVyIHtcbiAgICBjb25zdCBwb3NzaWJsZSA9IHRoaXMuUmVhZEJ5dGUoKTtcbiAgICBpZiAocG9zc2libGUgPT0gLTEyOClcbiAgICAgIHJldHVybiB0aGlzLlJlYWRJbnQzMigpO1xuICAgIHJldHVybiBwb3NzaWJsZTtcbiAgfVxuXG4gIFJlYWRXWlN0cmluZ0Jsb2NrKCkgOiBzdHJpbmcge1xuICAgIGNvbnN0IHR5cGUgPSB0aGlzLlJlYWRCeXRlKCk7XG4gICAgc3dpdGNoICh0eXBlKSB7XG4gICAgICBjYXNlIDA6XG4gICAgICAgIHJldHVybiB0aGlzLlJlYWRXWlN0cmluZygpO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgdGhyb3cgJ05vdCBzdXBwb3J0ZWQgc3RyaW5nJztcbiAgICB9XG4gIH1cblxuICBSZWFkV1pTdHJpbmcoKSA6IHN0cmluZyB7XG4gICAgbGV0IGxlbmd0aCA9IHRoaXMuUmVhZEJ5dGUoKTtcbiAgICBjb25zdCBpc1VuaWNvZGUgPSBsZW5ndGggPiAwO1xuICAgIGlmIChpc1VuaWNvZGUpIHtcbiAgICAgIGlmIChsZW5ndGggPT0gMTI3KVxuICAgICAgICBsZW5ndGggPSB0aGlzLlJlYWRJbnQzMigpO1xuICAgICAgZWxzZVxuICAgICAgICBsZW5ndGggPSBsZW5ndGggKiAyO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgIGlmIChsZW5ndGggPT0gLTEyOClcbiAgICAgICAgbGVuZ3RoID0gdGhpcy5SZWFkSW50MzIoKTtcbiAgICAgIGVsc2VcbiAgICAgICAgbGVuZ3RoID0gbGVuZ3RoICogLTE7XG4gICAgfVxuICAgIGxldCByZXNTdHIgPSBbXTtcbiAgICBpZiAoaXNVbmljb2RlKSB7XG4gICAgICBsZW5ndGggPSBsZW5ndGggLyAyO1xuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsZW5ndGg7ICsraSkge1xuICAgICAgICBsZXQgY2hhckF0ID0gdGhpcy5SZWFkVUludDE2KCk7XG4gICAgICAgIGNoYXJBdCA9IGNoYXJBdCBeIChpc1VuaWNvZGUgPyAweEFBQUEgOiAoKDB4QUEgKyBpKSAlIDI1NSkpO1xuICAgICAgICByZXNTdHJbaV0gPSBjaGFyQXQ7XG4gICAgICB9XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsZW5ndGg7ICsraSkge1xuICAgICAgICBsZXQgY2hhckF0ID0gdGhpcy5SZWFkVUJ5dGUoKTtcbiAgICAgICAgY2hhckF0ID0gY2hhckF0IF4gKGlzVW5pY29kZSA/IDB4QUFBQSA6ICgoMHhBQSArIGkpICUgMjU1KSk7XG4gICAgICAgIHJlc1N0cltpXSA9IGNoYXJBdDtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIFN0cmluZy5mcm9tQ2hhckNvZGUuYXBwbHkobnVsbCwgcmVzU3RyKTtcbiAgfVxuXG4gIFJlYWRDYW52YXMod2lkdGg6IG51bWJlciwgaGVpZ2h0OiBudW1iZXIsIGZvcm1hdDogbnVtYmVyLCBpbWFnZUxlbmd0aDogbnVtYmVyKSA6IEltYWdlRGF0YSB7XG4gICAgaWYgKGZvcm1hdCA9PSA3KSBpbWFnZUxlbmd0aC0tXG5cbiAgICBjb25zdCBuZXdDb3B5ID0gbmV3IFVpbnQ4QXJyYXkodGhpcy5hYiwgdGhpcy5wb3NpdGlvbiArIHRoaXMuc3RhcnRQb3NpdGlvbiwgaW1hZ2VMZW5ndGgpO1xuICAgIHRyeSB7XG4gICAgICBsZXQgaW5mbGF0ZWQgPSBudWxsO1xuXG4gICAgICBpZiAoZm9ybWF0ID09IDQgfHwgZm9ybWF0ID09IDYgfHwgZm9ybWF0ID09IDcpIC8vIDQgaGFzIHpsaWIgaGVhZGVyLCA2IGhhcyBhIGd6aXAgaGVhZGVyLCBib3RoIHVzZSBERUZMQVRFIGFuZCBwYWtvIHN1cHBvcnRzIGJvdGggc2VhbWxlc3NseVxuICAgICAgICBpbmZsYXRlZCA9IGluZmxhdGUuaW5mbGF0ZShuZXdDb3B5KTtcbiAgICAgIGVsc2UgaWYgKGZvcm1hdCA9PSA1KVxuICAgICAgICBpbmZsYXRlZCA9IG5ld0NvcHk7XG4gICAgICBlbHNlXG4gICAgICAgIHRocm93ICdOb3QgYWNjZXB0ZWQgZm9ybWF0JztcblxuICAgICAgaWYgKGluZmxhdGVkLmxlbmd0aCAlIDQpIHtcbiAgICAgICAgY29uc3QgZXhwZWN0ZWRDb3VudCA9IHdpZHRoICogaGVpZ2h0ICogNDtcbiAgICAgICAgY29uc3QgZGlmZmVyZW5jZSA9IGV4cGVjdGVkQ291bnQgLSBpbmZsYXRlZC5sZW5ndGg7XG4gICAgICAgIGNvbnNvbGUud2FybignTGVuZ3RoIGlzblxcJ3QgdmFsaWQnKTtcbiAgICAgICAgaWYgKGRpZmZlcmVuY2UgPiAwKSB7XG4gICAgICAgICAgY29uc3QgbmV3SW5mbGF0ZWQgPSBuZXcgVWludDhBcnJheShleHBlY3RlZENvdW50KTtcbiAgICAgICAgICBuZXdJbmZsYXRlZC5zZXQoaW5mbGF0ZWQsIDApO1xuICAgICAgICAgIGluZmxhdGVkID0gbmV3SW5mbGF0ZWQ7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZVxuICAgICAgICAgIGluZmxhdGVkID0gaW5mbGF0ZWQuc3ViYXJyYXkoMCwgZXhwZWN0ZWRDb3VudCk7XG4gICAgICB9XG5cbiAgICAgIGlmIChpbmZsYXRlZCA9PSBudWxsKSB7XG4gICAgICAgIGNvbnNvbGUud2FybignQ2FudmFzIGhhcyBubyBpbWFnZSBkYXRhJyk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBuZXcgSW1hZ2VEYXRhKG5ldyBVaW50OENsYW1wZWRBcnJheShpbmZsYXRlZCksIHdpZHRoLCBoZWlnaHQpO1xuICAgIH1cbiAgICBjYXRjaCAoZXJyKSB7XG4gICAgICBjb25zb2xlLndhcm4oJ0Vycm9yIGxvYWRpbmcgY2FudmFzJywgZXJyKTtcbiAgICB9XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbn1cbiIsImltcG9ydCB7IElQcm9wZXJ0eSB9IGZyb20gXCIuL0lQcm9wZXJ0eVwiXG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFByb3BlcnR5IGltcGxlbWVudHMgSVByb3BlcnR5IHtcbiAgbmFtZTogc3RyaW5nXG4gIHR5cGU6IHN0cmluZ1xuICBjaGlsZHJlbjogSVByb3BlcnR5W11cbiAgcGFyZW50PzogSVByb3BlcnR5XG4gIHZhbHVlOiBhbnlcblxuICBjb25zdHJ1Y3RvcihuYW1lOiBzdHJpbmcsIHR5cGU6IHN0cmluZywgY2hpbGRyZW46IElQcm9wZXJ0eVtdLCBwYXJlbnQ6IElQcm9wZXJ0eSkge1xuICAgIHRoaXMubmFtZSA9IG5hbWU7XG4gICAgdGhpcy50eXBlID0gdHlwZVxuICAgIHRoaXMuY2hpbGRyZW4gPSBjaGlsZHJlblxuICAgIHRoaXMucGFyZW50ID0gcGFyZW50XG4gIH1cblxuICByZXNvbHZlKHBhdGg6IHN0cmluZyk6IFByb21pc2U8SVByb3BlcnR5PiB7XG4gICAgaWYgKCFwYXRoKSB7XG4gICAgICBpZiAodGhpcy50eXBlID09ICd1b2wnKSB7XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IHRoaXMucGFyZW50LnJlc29sdmUodGhpcy52YWx1ZSlcbiAgICAgICAgcmV0dXJuIHJlc3VsdFxuICAgICAgfVxuXG4gICAgICBpZiAodGhpcy50eXBlID09ICdjYW52YXMnICYmIHRoaXMuY2hpbGRyZW4pIHtcbiAgICAgICAgY29uc3QgaW5saW5rID0gdGhpcy5jaGlsZHJlbi5maW5kKChjaGlsZDogeyBuYW1lOiBzdHJpbmcgfSkgPT4gY2hpbGQubmFtZSA9PSAnX2lubGluaycpXG4gICAgICAgIGlmIChpbmxpbmspIHJldHVybiB0aGlzLkhhbmRsZUlubGluayh0aGlzLCBpbmxpbmspXG5cbiAgICAgICAgY29uc3Qgb3V0bGluayA9IHRoaXMuY2hpbGRyZW4uZmluZCgoY2hpbGQ6IHsgbmFtZTogc3RyaW5nIH0pID0+IGNoaWxkLm5hbWUgPT0gJ19vdXRsaW5rJylcbiAgICAgICAgaWYgKG91dGxpbmspIHJldHVybiB0aGlzLkhhbmRsZU91dGxpbmsodGhpcywgb3V0bGluaylcblxuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHRoaXMpXG4gICAgICB9XG5cbiAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUodGhpcylcbiAgICB9XG5cbiAgICBjb25zdCBwYXRoU3BsaXQgPSBBcnJheS5pc0FycmF5KHBhdGgpID8gcGF0aCA6IHBhdGguc3BsaXQoL1svXFxcXF0vZylcblxuICAgIGNvbnN0IHRoaXNDaGlsZCA9IHBhdGhTcGxpdC5zaGlmdCgpXG5cbiAgICBpZiAodGhpc0NoaWxkID09ICcuLicpIHJldHVybiB0aGlzLnBhcmVudC5yZXNvbHZlKHBhdGhTcGxpdC5qb2luKCcvJykpXG5cbiAgICBjb25zdCBjaGlsZHJlbiA9IHRoaXMuY2hpbGRyZW5cbiAgICBpZiAoIWNoaWxkcmVuKSByZXR1cm4gbnVsbFxuXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiByZXNvbHZlKHRoaXMuRmluZEFuZFJlc29sdmUoY2hpbGRyZW4sIHBhdGhTcGxpdCwgdGhpc0NoaWxkKSkpXG4gIH1cblxuICBHZXRWYWx1ZSgpIHtcbiAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHRoaXMudmFsdWUpXG4gIH1cblxuICBwcml2YXRlIEZpbmRBbmRSZXNvbHZlKGNoaWxkcmVuOiBhbnlbXSwgcGF0aFNwbGl0OiBzdHJpbmcgfCBhbnlbXSwgdGhpc0NoaWxkOiBhbnkpIHtcbiAgICB2YXIgY2hpbGQgPSBjaGlsZHJlbi5maW5kKChjaGlsZDogeyBuYW1lOiBzdHJpbmcgfSkgPT5cbiAgICAgIGNoaWxkICYmIChcbiAgICAgIGNoaWxkLm5hbWUgPT0gdGhpc0NoaWxkIHx8XG4gICAgICAoXG4gICAgICAgICAgY2hpbGQubmFtZS5lbmRzV2l0aCgnLmltZycpICYmXG4gICAgICAgICAgY2hpbGQubmFtZS5zdWJzdHIoMCwgY2hpbGQubmFtZS5sZW5ndGggLSA0KSA9PSB0aGlzQ2hpbGRcbiAgICAgICkpXG4gICAgKVxuICAgIGlmIChjaGlsZCAmJiBwYXRoU3BsaXQubGVuZ3RoKVxuICAgICAgcmV0dXJuIGNoaWxkLnJlc29sdmUocGF0aFNwbGl0KVxuICAgIGVsc2VcbiAgICAgIHJldHVybiBjaGlsZFxuICB9XG5cbiAgcHJpdmF0ZSBIYW5kbGVJbmxpbmsodGhhdDogSVByb3BlcnR5LCBpbmxpbms6IElQcm9wZXJ0eSkgOiBQcm9taXNlPElQcm9wZXJ0eT4ge1xuICAgIGlmICghaW5saW5rKSByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHRoYXQpXG5cbiAgICBjb25zdCBpbmxpbmtUYXJnZXQgPSBpbmxpbmsudmFsdWVcbiAgICBpZiAoIWlubGlua1RhcmdldCkgUHJvbWlzZS5yZXNvbHZlKHRoYXQpXG5cbiAgICBsZXQgaW1nQ29udGFpbmVyID0gdGhhdFxuICAgIHdoaWxlIChpbWdDb250YWluZXIgJiYgaW1nQ29udGFpbmVyLnR5cGUgIT0gJ2ltYWdlJylcbiAgICAgIGltZ0NvbnRhaW5lciA9IGltZ0NvbnRhaW5lci5wYXJlbnRcblxuICAgIGlmICghaW1nQ29udGFpbmVyKSBQcm9taXNlLnJlc29sdmUodGhhdClcblxuICAgIHJldHVybiBpbWdDb250YWluZXIucmVzb2x2ZShpbmxpbmtUYXJnZXQpLnRoZW4oZm91bmQgPT4gZm91bmQgPyBmb3VuZC5yZXNvbHZlKCkgOiBudWxsKVxuICB9XG5cbiAgcHJpdmF0ZSBIYW5kbGVPdXRsaW5rKHRoYXQ6IElQcm9wZXJ0eSwgb3V0bGluazogSVByb3BlcnR5KSA6IFByb21pc2U8SVByb3BlcnR5PiB7XG4gICAgaWYgKCFvdXRsaW5rKSByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHRoYXQpXG5cbiAgICBjb25zdCBvdXRsaW5rVGFyZ2V0ID0gb3V0bGluay52YWx1ZVxuICAgIGlmICghb3V0bGlua1RhcmdldCkgcmV0dXJuIFByb21pc2UucmVzb2x2ZSh0aGF0KVxuXG4gICAgbGV0IHd6Q29udGFpbmVyID0gdGhhdFxuICAgIHdoaWxlICh3ekNvbnRhaW5lciAmJiB3ekNvbnRhaW5lci5wYXJlbnQgIT0gbnVsbClcbiAgICAgIHd6Q29udGFpbmVyID0gd3pDb250YWluZXIucGFyZW50XG5cbiAgICByZXR1cm4gd3pDb250YWluZXIucmVzb2x2ZShvdXRsaW5rVGFyZ2V0KS50aGVuKGZvdW5kID0+IHtcbiAgICAgIGlmICghZm91bmQpIHJldHVybiB3ekNvbnRhaW5lci5yZXNvbHZlKCdEYXRhLycgKyBvdXRsaW5rVGFyZ2V0KS50aGVuKChmb3VuZERhdGE6IHsgcmVzb2x2ZTogKCkgPT4gYW55IH0pID0+IGZvdW5kRGF0YSA/IGZvdW5kRGF0YS5yZXNvbHZlKCkgOiBudWxsKVxuICAgICAgZWxzZSByZXR1cm4gZm91bmQucmVzb2x2ZSgpXG4gICAgfSlcbiAgfVxufVxuIiwiaW1wb3J0IHsgSVByb3BlcnR5IH0gZnJvbSAnLi4vSVByb3BlcnR5JztcbmltcG9ydCBQcm9wZXJ0eSBmcm9tICcuLi9Qcm9wZXJ0eSc7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFZhbHVlUHJvcGVydHkgZXh0ZW5kcyBQcm9wZXJ0eSB7XG4gIGNvbnN0cnVjdG9yKG5hbWU6IHN0cmluZywgdHlwZTogc3RyaW5nLCB2YWx1ZTogYW55LCBjaGlsZHJlbjogSVByb3BlcnR5W10sIHBhcmVudDogSVByb3BlcnR5KSB7XG4gICAgc3VwZXIobmFtZSwgdHlwZSwgY2hpbGRyZW4sIHBhcmVudCk7XG4gICAgdGhpcy52YWx1ZSA9IHZhbHVlO1xuICB9XG59XG4iLCJpbXBvcnQgQmluYXJ5UmVhZGVyIGZyb20gXCIuLi9CaW5hcnlSZWFkZXJcIjtcbmltcG9ydCB7IElQcm9wZXJ0eSB9IGZyb20gXCIuLi9JUHJvcGVydHlcIjtcbmltcG9ydCBQcm9wZXJ0eSBmcm9tIFwiLi4vUHJvcGVydHlcIjtcbmltcG9ydCB7IFByb3BlcnR5TGlzdCB9IGZyb20gXCIuL1Byb3BlcnR5TGlzdFwiO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBBdWRpb1Byb3BlcnR5IGV4dGVuZHMgUHJvcGVydHkge1xuICBsZW5ndGg6IG51bWJlcjtcbiAgZHVyYXRpb246IG51bWJlcjtcbiAgYXVkaW86IEF1ZGlvQnVmZmVyU291cmNlTm9kZVxuICBwbGF5aW5nUHJvbWlzZTogUHJvbWlzZTxBdWRpb0J1ZmZlcj5cbiAgaXNQbGF5aW5nOiBib29sZWFuXG4gIGFuYWx5c2VyOiBBbmFseXNlck5vZGU7XG5cbiAgY29uc3RydWN0b3IobmFtZTogc3RyaW5nLCByZWFkZXI6IEJpbmFyeVJlYWRlciwgcGFyZW50OiBJUHJvcGVydHkpIHtcbiAgICBzdXBlcihuYW1lLCBcInNvdW5kXCIsIG51bGwsIHBhcmVudCk7XG5cbiAgICByZWFkZXIuUmVhZEJ5dGUoKSAvLyBVbmtcbiAgICB0aGlzLmxlbmd0aCA9IHJlYWRlci5SZWFkV1pJbnQoKVxuICAgIHRoaXMuZHVyYXRpb24gPSByZWFkZXIuUmVhZFdaSW50KClcblxuICAgIHRoaXMudmFsdWUgPSByZWFkZXIuYWIuc2xpY2UoMCwgdGhpcy5sZW5ndGgpXG4gIH1cblxuICBQbGF5KGxvb3A6IGJvb2xlYW4sIG9uRW5kOiAodGhpczogQXVkaW9TY2hlZHVsZWRTb3VyY2VOb2RlLCBldjogRXZlbnQpID0+IGFueSkgOiBQcm9taXNlPEF1ZGlvQnVmZmVyPiB7XG4gICAgY29uc3QgYXVkaW9DdHggPSBuZXcgQXVkaW9Db250ZXh0KClcbiAgICBjb25zdCBhdWRpb1NyYyA9IGF1ZGlvQ3R4LmNyZWF0ZUJ1ZmZlclNvdXJjZSgpXG4gICAgY29uc3QgYXVkaW9BbmFseXNlciA9IGF1ZGlvQ3R4LmNyZWF0ZUFuYWx5c2VyKClcblxuICAgIHRoaXMucGxheWluZ1Byb21pc2UgPSBhdWRpb0N0eC5kZWNvZGVBdWRpb0RhdGEoXG4gICAgICB0aGlzLnZhbHVlLnNsaWNlKDAsIHRoaXMubGVuZ3RoKSxcbiAgICAgIChhdWRpb0J1ZmZlcikgPT4ge1xuICAgICAgICB0aGlzLmFuYWx5c2VyID0gYXVkaW9BbmFseXNlclxuICAgICAgICBhdWRpb1NyYy5jb25uZWN0KGF1ZGlvQ3R4LmRlc3RpbmF0aW9uKVxuICAgICAgICBhdWRpb1NyYy5jb25uZWN0KGF1ZGlvQW5hbHlzZXIpXG4gICAgICAgIGF1ZGlvU3JjLmJ1ZmZlciA9IGF1ZGlvQnVmZmVyXG4gICAgICAgIHRoaXMuYXVkaW8gPSBhdWRpb1NyY1xuICAgICAgICBpZiAob25FbmQpXG4gICAgICAgICAgdGhpcy5hdWRpby5vbmVuZGVkID0gb25FbmRcbiAgICAgICAgaWYgKGxvb3ApXG4gICAgICAgICAgdGhpcy5hdWRpby5sb29wID0gbG9vcFxuICAgICAgICB0aGlzLmF1ZGlvLnN0YXJ0KDApXG4gICAgICAgIHRoaXMuaXNQbGF5aW5nID0gYXVkaW9TcmMuY29udGV4dC5zdGF0ZSAhPSAnc3VzcGVuZGVkJ1xuICAgIH0pXG5cbiAgICByZXR1cm4gdGhpcy5wbGF5aW5nUHJvbWlzZVxuICB9XG5cbiAgU3RvcCgpIHtcbiAgICBpZiAodGhpcy5hdWRpbykge1xuICAgICAgdGhpcy5hdWRpby5zdG9wKDApXG4gICAgICB0aGlzLmlzUGxheWluZyA9IGZhbHNlXG4gICAgfVxuICB9XG59XG4iLCJpbXBvcnQgQmluYXJ5UmVhZGVyIGZyb20gXCIuLi9CaW5hcnlSZWFkZXJcIjtcbmltcG9ydCB7IElQcm9wZXJ0eSB9IGZyb20gXCIuLi9JUHJvcGVydHlcIjtcbmltcG9ydCBQcm9wZXJ0eSBmcm9tIFwiLi4vUHJvcGVydHlcIjtcbmltcG9ydCBWYWx1ZVByb3BlcnR5IGZyb20gXCIuL1ZhbHVlUHJvcGVydHlcIjtcbmltcG9ydCBBdWRpb1Byb3BlcnR5IGZyb20gXCIuL0F1ZGlvXCI7XG5cbmV4cG9ydCBjbGFzcyBQcm9wZXJ0eUxpc3QgZXh0ZW5kcyBQcm9wZXJ0eSB7XG4gIGNvbnN0cnVjdG9yKG5hbWU6IHN0cmluZywgcGFyZW50OiBJUHJvcGVydHksIHJlYWRlcj86IEJpbmFyeVJlYWRlcikge1xuICAgIHN1cGVyKG5hbWUsIFwicHJvcGVydHlcIiwgdW5kZWZpbmVkLCBwYXJlbnQpXG5cbiAgICBpZiAocmVhZGVyKVxuICAgICAgdGhpcy5jaGlsZHJlbiA9IHRoaXMuTG9hZENoaWxkcmVuKHJlYWRlcilcbiAgfVxuXG4gIExvYWRDaGlsZHJlbihyZWFkZXI6IEJpbmFyeVJlYWRlcikgOiBBcnJheTxJUHJvcGVydHk+IHtcbiAgICBjb25zdCBjb3VudCA9IHJlYWRlci5SZWFkV1pJbnQoKVxuXG4gICAgY29uc3QgY2hpbGRyZW4gPSBbXVxuXG4gICAgZm9yKGxldCBpID0gMDsgaSA8IGNvdW50OyArK2kpIHtcbiAgICAgIGNvbnN0IG5hbWUgPSByZWFkZXIuUmVhZFdaU3RyaW5nQmxvY2soKVxuICAgICAgY29uc3QgdHlwZSA9IHJlYWRlci5SZWFkQnl0ZSgpXG4gICAgICBsZXQgcHJvcCA9IG51bGxcbiAgICAgIHN3aXRjaCAodHlwZSkge1xuICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgcHJvcCA9IG5ldyBWYWx1ZVByb3BlcnR5KG5hbWUsICdwcm9wZXJ0eScsIG51bGwsIG51bGwsIHRoaXMpXG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgMHgxMDpcbiAgICAgICAgICBwcm9wID0gbmV3IFZhbHVlUHJvcGVydHkobmFtZSwgJ3NieXRlJywgcmVhZGVyLlJlYWRCeXRlKCksIG51bGwsIHRoaXMpXG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgMHgxMTpcbiAgICAgICAgICBwcm9wID0gbmV3IFZhbHVlUHJvcGVydHkobmFtZSwgJ2J5dGUnLCByZWFkZXIuUmVhZFVCeXRlKCksIG51bGwsIHRoaXMpXG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgMHgwQjpcbiAgICAgICAgY2FzZSAweDI6XG4gICAgICAgIGNhc2UgMHgxMjpcbiAgICAgICAgICBwcm9wID0gbmV3IFZhbHVlUHJvcGVydHkobmFtZSwgJ3VpMTYnLCByZWFkZXIuUmVhZFVJbnQxNigpLCBudWxsLCB0aGlzKVxuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIDM6XG4gICAgICAgIGNhc2UgMTk6XG4gICAgICAgICAgcHJvcCA9IG5ldyBWYWx1ZVByb3BlcnR5KG5hbWUsICdpMzInLCByZWFkZXIuUmVhZFdaSW50KCksIG51bGwsIHRoaXMpXG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgNDpcbiAgICAgICAgICBwcm9wID0gbmV3IFZhbHVlUHJvcGVydHkobmFtZSwgJ2Zsb2F0JywgcmVhZGVyLlJlYWRXWlNpbmdsZSgpLCBudWxsLCB0aGlzKVxuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIDU6XG4gICAgICAgICAgcHJvcCA9IG5ldyBWYWx1ZVByb3BlcnR5KG5hbWUsICdkb3VibGUnLCByZWFkZXIuUmVhZERvdWJsZSgpLCBudWxsLCB0aGlzKVxuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIDg6XG4gICAgICAgICAgcHJvcCA9IG5ldyBWYWx1ZVByb3BlcnR5KG5hbWUsICdzdHJpbmcnLCByZWFkZXIuUmVhZFdaU3RyaW5nQmxvY2soKSwgbnVsbCwgdGhpcylcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSA5OlxuICAgICAgICAgIGNvbnN0IGJsb2NrTGVuZ3RoID0gcmVhZGVyLlJlYWRVSW50MzIoKVxuICAgICAgICAgIGNvbnN0IG5ld1Bvc2l0aW9uID0gcmVhZGVyLnBvc2l0aW9uICsgYmxvY2tMZW5ndGhcbiAgICAgICAgICBwcm9wID0gdGhpcy5FeHRlbmRlZFByb3BlcnR5VmFsdWUodGhpcywgbmFtZSwgcmVhZGVyKVxuXG4gICAgICAgICAgcmVhZGVyLnBvc2l0aW9uID0gbmV3UG9zaXRpb25cbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAyMDpcbiAgICAgICAgICBwcm9wID0gbmV3IFZhbHVlUHJvcGVydHkobmFtZSwgJ2k2NCcsIHJlYWRlci5SZWFkSW50NjQoKSwgbnVsbCwgdGhpcylcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAyMTpcbiAgICAgICAgICBwcm9wID0gbmV3IFZhbHVlUHJvcGVydHkobmFtZSwgJ3VpNjQnLCByZWFkZXIuUmVhZFVJbnQ2NCgpLCBudWxsLCB0aGlzKVxuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgIHRocm93IGBVbmtub3duIHByb3BlcnR5IHR5cGU6ICR7dHlwZX1gXG4gICAgICB9XG5cbiAgICAgIGNoaWxkcmVuLnB1c2gocHJvcClcbiAgICB9XG5cbiAgICByZXR1cm4gY2hpbGRyZW5cbiAgfVxuXG4gIEV4dGVuZGVkUHJvcGVydHlWYWx1ZShvcmlnaW46IElQcm9wZXJ0eSwgbmFtZTogc3RyaW5nLCByZWFkZXI6IEJpbmFyeVJlYWRlcikgOiBJUHJvcGVydHkge1xuICAgIGNvbnN0IHByb3BlcnR5VHlwZSA9IHJlYWRlci5SZWFkV1pTdHJpbmdCbG9jaygpXG5cbiAgICBzd2l0Y2ggKHByb3BlcnR5VHlwZSkge1xuICAgICAgY2FzZSAnUHJvcGVydHknOlxuICAgICAgICByZWFkZXIuUmVhZFVJbnQxNigpIC8vIEJsYW5rXG4gICAgICAgIHJldHVybiBuZXcgUHJvcGVydHlMaXN0KG5hbWUsIHRoaXMsIHJlYWRlcilcblxuICAgICAgY2FzZSAnQ2FudmFzJzpcbiAgICAgICAgcmV0dXJuIG5ldyBDYW52YXNQcm9wZXJ0eShuYW1lLCByZWFkZXIsIHRoaXMpXG5cbiAgICAgIGNhc2UgJ1NoYXBlMkQjVmVjdG9yMkQnOlxuICAgICAgICByZXR1cm4gbmV3IFZhbHVlUHJvcGVydHkobmFtZSwgJ3ZlY3RvcicsIHtcbiAgICAgICAgICB4OiByZWFkZXIuUmVhZFdaSW50KCksXG4gICAgICAgICAgeTogcmVhZGVyLlJlYWRXWkludCgpXG4gICAgICAgIH0sIG51bGwsIG9yaWdpbilcblxuICAgICAgY2FzZSAnU2hhcGUyRCNDb252ZXgyRCc6XG4gICAgICAgIGNvbnN0IGNvbnZleENvdW50ID0gcmVhZGVyLlJlYWRXWkludCgpXG4gICAgICAgIGNvbnN0IGNvbnZleENoaWxkcmVuOiBhbnlbXSA9IFtdXG4gICAgICAgIGNvbnN0IGNvbnZleFByb3AgPSBuZXcgVmFsdWVQcm9wZXJ0eShuYW1lLCAnY29udmV4JywgdW5kZWZpbmVkLCBjb252ZXhDaGlsZHJlbiwgb3JpZ2luKVxuICAgICAgICBmb3IobGV0IGkgPSAwOyBpIDwgY29udmV4Q291bnQ7ICsraSlcbiAgICAgICAgICBjb252ZXhDaGlsZHJlbi5wdXNoKHRoaXMuRXh0ZW5kZWRQcm9wZXJ0eVZhbHVlKGNvbnZleFByb3AsIGkudG9TdHJpbmcoKSwgcmVhZGVyKSlcbiAgICAgICAgcmV0dXJuIGNvbnZleFByb3BcblxuICAgICAgY2FzZSAnU291bmRfRFg4JzpcbiAgICAgICAgcmV0dXJuIG5ldyBBdWRpb1Byb3BlcnR5KG5hbWUsIHJlYWRlciwgdGhpcylcblxuICAgICAgY2FzZSAnVU9MJzpcbiAgICAgICAgcmVhZGVyLlJlYWRCeXRlKCkgLy8gVW5rXG4gICAgICAgIHJldHVybiBuZXcgVmFsdWVQcm9wZXJ0eShuYW1lLCAndW9sJywgcmVhZGVyLlJlYWRXWlN0cmluZ0Jsb2NrKCksIG51bGwsIG9yaWdpbilcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHRocm93IGBVbmtub3duIGV4dGVuZGVkIHByb3BlcnR5IHR5cGU6ICR7cHJvcGVydHlUeXBlfWBcbiAgICB9XG4gIH1cbn1cblxuLy8gVGhleSBoYXZlIHRvIGJlIGluIHRoZSBzYW1lIGZpbGUgdG8gcHJldmVudCBhIGN5Y2xpY2FsIGltcG9ydFxuZXhwb3J0IGNsYXNzIENhbnZhc1Byb3BlcnR5IGV4dGVuZHMgUHJvcGVydHlMaXN0IHtcbiAgd2lkdGg6IG51bWJlcjtcbiAgaGVpZ2h0OiBudW1iZXI7XG4gIGZvcm1hdDogbnVtYmVyO1xuICBmb3JtYXQxOiBudW1iZXI7XG4gIGZvcm1hdDI6IG51bWJlcjtcbiAgYmxvY2tMZW5ndGg6IG51bWJlcjtcbiAgaGVhZGVyOiBudW1iZXI7XG4gIHJlYWRlcjogQmluYXJ5UmVhZGVyO1xuICBjYW52YXNMb2NhdGlvbjogbnVtYmVyO1xuXG4gIGNvbnN0cnVjdG9yKG5hbWU6IHN0cmluZywgcmVhZGVyOiBCaW5hcnlSZWFkZXIsIHBhcmVudDogSVByb3BlcnR5KSB7XG4gICAgc3VwZXIobmFtZSwgcGFyZW50KTtcbiAgICB0aGlzLnR5cGUgPSBcImNhbnZhc1wiXG5cbiAgICByZWFkZXIuUmVhZEJ5dGUoKSAvLyBVbmtub3duXG5cbiAgICBjb25zdCBoYXNDaGlsZHJlbiA9IHJlYWRlci5SZWFkQnl0ZSgpXG5cbiAgICBpZiAoaGFzQ2hpbGRyZW4pIHtcbiAgICAgIHJlYWRlci5SZWFkSW50MTYoKVxuICAgICAgdGhpcy5jaGlsZHJlbiA9IHRoaXMuTG9hZENoaWxkcmVuKHJlYWRlcilcbiAgICB9XG5cbiAgICB0aGlzLndpZHRoID0gcmVhZGVyLlJlYWRXWkludCgpXG4gICAgdGhpcy5oZWlnaHQgPSByZWFkZXIuUmVhZFdaSW50KClcbiAgICB0aGlzLmZvcm1hdDEgPSByZWFkZXIuUmVhZFdaSW50KClcbiAgICB0aGlzLmZvcm1hdDIgPSByZWFkZXIuUmVhZEJ5dGUoKVxuICAgIHJlYWRlci5SZWFkSW50MzIoKSAvLyBVbmtub3duXG4gICAgdGhpcy5ibG9ja0xlbmd0aCA9IHJlYWRlci5SZWFkSW50MzIoKVxuICAgIHJlYWRlci5SZWFkQnl0ZSgpIC8vIFVua25vd25cbiAgICB0aGlzLmhlYWRlciA9IHJlYWRlci5SZWFkSW50MTYoKVxuICAgIHJlYWRlci5wb3NpdGlvbiAtPSAyO1xuICAgIHRoaXMucmVhZGVyID0gcmVhZGVyXG4gICAgdGhpcy5jYW52YXNMb2NhdGlvbiA9IHJlYWRlci5wb3NpdGlvblxuICB9XG5cbiAgR2V0VmFsdWUoKSA6IFByb21pc2U8SW1hZ2VEYXRhPiB7XG4gICAgY29uc3Qgb2xkUG9zaXRpb24gPSB0aGlzLnJlYWRlci5wb3NpdGlvblxuICAgIHRoaXMucmVhZGVyLnBvc2l0aW9uID0gdGhpcy5jYW52YXNMb2NhdGlvblxuICAgIHZhciByZXN1bHQgPSB0aGlzLnJlYWRlci5SZWFkQ2FudmFzKHRoaXMud2lkdGgsIHRoaXMuaGVpZ2h0LCB0aGlzLmZvcm1hdDEgKyB0aGlzLmZvcm1hdDIsIHRoaXMuYmxvY2tMZW5ndGgpXG4gICAgdGhpcy5yZWFkZXIucG9zaXRpb24gPSBvbGRQb3NpdGlvblxuXG4gICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShyZXN1bHQpXG4gIH1cbn1cbiIsImltcG9ydCBCaW5hcnlSZWFkZXIgZnJvbSBcIi4uL0JpbmFyeVJlYWRlclwiO1xuaW1wb3J0IHsgSVByb3BlcnR5IH0gZnJvbSBcIi4uL0lQcm9wZXJ0eVwiO1xuaW1wb3J0IHsgUHJvcGVydHlMaXN0IH0gZnJvbSBcIi4vUHJvcGVydHlMaXN0XCI7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEltYWdlUHJvcGVydHkgZXh0ZW5kcyBQcm9wZXJ0eUxpc3Qge1xuICBjb25zdHJ1Y3RvcihuYW1lOiBzdHJpbmcsIHJlZ2lvbjogc3RyaW5nLCB2ZXJzaW9uOiBzdHJpbmcsIGRhdGE6IEFycmF5QnVmZmVyLCBwYXJlbnQ6IElQcm9wZXJ0eSkge1xuICAgIHN1cGVyKG5hbWUsIHBhcmVudCk7XG4gICAgdGhpcy50eXBlID0gJ2ltYWdlJ1xuXG4gICAgY29uc3QgcmVhZGVyID0gbmV3IEJpbmFyeVJlYWRlcihkYXRhKVxuICAgIGNvbnN0IGltZ1R5cGUgPSByZWFkZXIuUmVhZEJ5dGUoKVxuICAgIGlmIChpbWdUeXBlICE9IDB4NzMpIHJldHVybiBudWxsXG4gICAgY29uc3QgcHJvcGVydHkgPSByZWFkZXIuUmVhZFdaU3RyaW5nKClcblxuICAgIGlmIChwcm9wZXJ0eSAhPSAnUHJvcGVydHknKVxuICAgICAgdGhyb3cgJ0ludmFsaWQgZmlyc3QgcHJvcGVydHknXG5cbiAgICBpZiAocmVhZGVyLlJlYWRJbnQxNigpICE9IDApXG4gICAgICB0aHJvdyAnSW52YWxpZCBoZWFkZXInXG5cbiAgICB0aGlzLmNoaWxkcmVuID0gdGhpcy5Mb2FkQ2hpbGRyZW4ocmVhZGVyKVxuICB9XG59XG4iLCJpbXBvcnQgTmV0d29yayBmcm9tICcuLi9OZXR3b3JrJztcbmltcG9ydCBCaW5hcnlSZWFkZXIgZnJvbSAnLi9CaW5hcnlSZWFkZXInO1xuaW1wb3J0IHsgSVByb3BlcnR5IH0gZnJvbSAnLi9JUHJvcGVydHknXG5pbXBvcnQgUHJvZ3Jlc3NNb25pdG9yIGZyb20gJy4vUHJvZ3Jlc3NNb25pdG9yJztcbmltcG9ydCBJbWFnZVByb3BlcnR5IGZyb20gJy4vUHJvcGVydGllcy9JbWFnZSc7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFBLRzFGYWN0b3J5IHtcbiAgZW5kUG9pbnQ6IHN0cmluZztcblxuICBpbWFnZXNDYWNoZTogUmVjb3JkPHN0cmluZywgUHJvbWlzZTxSZWNvcmQ8c3RyaW5nLCBzdHJpbmc+Pj5cbiAgaW1hZ2VBQkNhY2hlOiBSZWNvcmQ8c3RyaW5nLCBQcm9taXNlPEFycmF5QnVmZmVyPj5cbiAgaW1hZ2VDYWNoZTogUmVjb3JkPHN0cmluZywgSVByb3BlcnR5PlxuICBmb2xkZXJDYWNoZTogUmVjb3JkPHN0cmluZywgUHJvbWlzZTxSZWNvcmQ8c3RyaW5nLCBzdHJpbmc+Pj5cbiAgdmVyc2lvblBzZXVkb1Jlc29sdmVyczogUmVjb3JkPHN0cmluZywgSVByb3BlcnR5PlxuICB6bWFwQ2FjaGU6IFJlY29yZDxzdHJpbmcsIFByb21pc2U8QXJyYXk8c3RyaW5nPj4+XG4gIHNtYXBDYWNoZTogUmVjb3JkPHN0cmluZywgUHJvbWlzZTxSZWNvcmQ8c3RyaW5nLCBBcnJheTxzdHJpbmc+Pj4+XG4gIG5ldHdvcms6IE5ldHdvcms7XG5cbiAgY29uc3RydWN0b3IobmV0d29yazogTmV0d29yayx3ekVuZFBvaW50OiBzdHJpbmcpIHtcbiAgICB0aGlzLmVuZFBvaW50ID0gd3pFbmRQb2ludFxuICAgIHRoaXMubmV0d29yayA9IG5ldHdvcmtcblxuICAgIHRoaXMuaW1hZ2VDYWNoZSA9IHt9XG4gICAgdGhpcy5pbWFnZUFCQ2FjaGUgPSB7fVxuICAgIHRoaXMuaW1hZ2VzQ2FjaGUgPSB7fVxuICAgIHRoaXMuZm9sZGVyQ2FjaGUgPSB7fVxuICAgIHRoaXMudmVyc2lvblBzZXVkb1Jlc29sdmVycyA9IHt9XG4gICAgdGhpcy56bWFwQ2FjaGUgPSB7fVxuICAgIHRoaXMuc21hcENhY2hlID0ge31cbiAgfVxuXG4gIHByaXZhdGUgZmV0Y2hKc29uKHBhdGg6IHN0cmluZykgOiBQcm9taXNlPGFueT4ge1xuICAgIGNvbnN0IGNvbXBpbGVkUGF0aCA9IGAke3RoaXMuZW5kUG9pbnR9L2pzb24vJHtwYXRofWBcbiAgICByZXR1cm4gdGhpcy5uZXR3b3JrLmZldGNoSnNvbihjb21waWxlZFBhdGgpXG4gIH1cblxuICBwcml2YXRlIGZldGNoQWIocGF0aDogc3RyaW5nKSA6IFByb21pc2U8QXJyYXlCdWZmZXI+IHtcbiAgICBjb25zdCBjb21waWxlZFBhdGggPSBgJHt0aGlzLmVuZFBvaW50fS9kYXRhLyR7cGF0aH1gXG4gICAgcmV0dXJuIHRoaXMubmV0d29yay5mZXRjaEFiKGNvbXBpbGVkUGF0aClcbiAgfVxuXG4gIC8vIEV4cGxpY2l0bHkgbm90IHNldCB0byBhc3luYywgd2UgdXNlIHRoZSBQcm9taXNlIGFzIGEgdG9rZW4gYW5kIHJvb3QgZm9yIGNhY2hpbmcgcHVycG9zZXNcbiAgZ2V0SW1hZ2VzKHJlZ2lvbjogc3RyaW5nLCB2ZXJzaW9uOiBzdHJpbmcpIDogUHJvbWlzZTxSZWNvcmQ8c3RyaW5nLCBzdHJpbmc+PiB7XG4gICAgY29uc3Qga2V5ID0gYCR7cmVnaW9ufS0tJHt2ZXJzaW9ufWBcbiAgICBjb25zdCBjYWNoZWQgPSB0aGlzLmltYWdlc0NhY2hlW2tleV07XG4gICAgaWYgKGNhY2hlZCkgcmV0dXJuIGNhY2hlZFxuXG4gICAgY29uc3QgY3JlYXRlZCA9IHRoaXMuZmV0Y2hKc29uKGAke3JlZ2lvbn0vJHt2ZXJzaW9ufS9pbWFnZXMuanNvbmApXG4gICAgICAudGhlbihpbWFnZXNKc29uID0+IGltYWdlc0pzb24gYXMgUmVjb3JkPHN0cmluZywgc3RyaW5nPilcbiAgICB0aGlzLmltYWdlc0NhY2hlW2tleV0gPSBjcmVhdGVkXG4gICAgcmV0dXJuIGNyZWF0ZWRcbiAgfVxuXG4gIGFzeW5jIGdldEltYWdlQUIocmVnaW9uOiBzdHJpbmcsIHZlcnNpb246IHN0cmluZywgaW1hZ2VOYW1lOiBzdHJpbmcpIDogUHJvbWlzZTxBcnJheUJ1ZmZlcj4ge1xuICAgIGNvbnN0IGltYWdlcyA9IGF3YWl0IHRoaXMuZ2V0SW1hZ2VzKHJlZ2lvbiwgdmVyc2lvbilcblxuICAgIGNvbnN0IHNoYTUxMiA9IGltYWdlc1tpbWFnZU5hbWVdXG4gICAgaWYgKCFzaGE1MTIpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgQ291bGRuJ3QgZmluZCB0aGUgaW1hZ2UgJHtpbWFnZU5hbWV9IGluICR7cmVnaW9ufS8ke3ZlcnNpb259YClcbiAgICB9XG5cbiAgICBjb25zdCBjYWNoZWQgPSB0aGlzLmltYWdlQUJDYWNoZVtzaGE1MTJdXG4gICAgaWYgKGNhY2hlZCkgcmV0dXJuIGNhY2hlZFxuXG4gICAgY29uc3QgY3JlYXRlZCA9IHRoaXMuZmV0Y2hBYihgJHtzaGE1MTJ9LmltZ2ApXG4gICAgdGhpcy5pbWFnZUFCQ2FjaGVbc2hhNTEyXSA9IGNyZWF0ZWRcblxuICAgIHJldHVybiBjcmVhdGVkXG4gIH1cblxuICBnZXRWZXJzaW9uUmVzb2x2ZXIocmVnaW9uOiBzdHJpbmcsIHZlcnNpb246IHN0cmluZykgOiBJUHJvcGVydHkge1xuICAgIGNvbnN0IGtleSA9IGAke3JlZ2lvbn0tLSR7dmVyc2lvbn1gXG4gICAgY29uc3QgY2FjaGVkID0gdGhpcy52ZXJzaW9uUHNldWRvUmVzb2x2ZXJzW2tleV1cbiAgICBpZiAoY2FjaGVkKSByZXR1cm4gY2FjaGVkXG5cbiAgICBjb25zdCBjcmVhdGVkID0ge1xuICAgICAgbmFtZToga2V5LFxuICAgICAgdHlwZTogJ1BzZXVkb1Jlc29sdmVyJyxcbiAgICAgIGNoaWxkcmVuOiBudWxsLFxuICAgICAgdmFsdWU6IG51bGwsXG4gICAgICBHZXRWYWx1ZTogKCkgPT4geyB0aHJvdyBuZXcgRXJyb3IoJ05vdCBzdXBwb3J0ZWQnKSB9LFxuICAgICAgcmVzb2x2ZTogKHBhdGgpID0+IHRoaXMucmVzb2x2ZShyZWdpb24sIHZlcnNpb24sIHBhdGgpXG4gICAgfSBhcyBJUHJvcGVydHlcblxuICAgIHRoaXMudmVyc2lvblBzZXVkb1Jlc29sdmVyc1trZXldID0gY3JlYXRlZFxuICAgIHJldHVybiBjcmVhdGVkXG4gIH1cblxuICBhc3luYyBnZXRJbWFnZVdpdGhQb3NzaWJsZVByZWZpeGVzKHJlZ2lvbjogc3RyaW5nLCB2ZXJzaW9uOiBzdHJpbmcsIHByZWZpeGVzOiBzdHJpbmdbXSwgcGF0aDogc3RyaW5nKSA6IFByb21pc2U8SVByb3BlcnR5PiB7XG4gICAgY29uc3QgcmVzdWx0cyA9IGF3YWl0IHByZWZpeGVzLnJlZHVjZShhc3luYyAocHJldmlvdXMsIGN1cnJlbnQpID0+IHtcbiAgICAgIGNvbnN0IHByZXZpb3VzVmFsdWUgPSBhd2FpdCBwcmV2aW91cztcbiAgICAgIGlmIChwcmV2aW91c1ZhbHVlKVxuICAgICAgICByZXR1cm4gcHJldmlvdXNWYWx1ZVxuXG4gICAgICBjb25zdCBjb21waWxlZFBhdGggPSBgJHtjdXJyZW50fS8ke3BhdGh9YDtcblxuICAgICAgdHJ5IHtcbiAgICAgICAgY29uc3QgaW1nID0gYXdhaXQgdGhpcy5nZXRJbWFnZShyZWdpb24sIHZlcnNpb24sIGNvbXBpbGVkUGF0aCk7XG4gICAgICAgIHJldHVybiBpbWdcbiAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICAvLyBXZSBjYW4gc3dhbGxvdyB0aGUgZXJyb3IgaGVyZSwgYXMgdGhlIGVycm9yIGlzIGxpa2VseSByZWxhdGVkIHRvIGl0IG5vdCBleGlzdGluZyAvIGNvbnRpbnVlXG4gICAgICB9XG4gICAgfSwgUHJvbWlzZS5yZXNvbHZlKG51bGwgYXMgSVByb3BlcnR5KSlcblxuICAgIGlmICghcmVzdWx0cylcbiAgICAgIHRocm93IG5ldyBFcnJvcihgQ291bGRuJ3QgZmluZCB0aGUgaW1hZ2UgJHtwYXRofSBpbiAke3JlZ2lvbn0vJHt2ZXJzaW9ufSwgdXNpbmcgcHJlZml4ZXM6IFwiJHtwcmVmaXhlcy5qb2luKCcsJyl9XCJgKVxuXG4gICAgcmV0dXJuIHJlc3VsdHNcbiAgfVxuXG4gIGFzeW5jIGdldEltYWdlKHJlZ2lvbjogc3RyaW5nLCB2ZXJzaW9uOiBzdHJpbmcsIGltYWdlTmFtZTogc3RyaW5nKSA6IFByb21pc2U8SVByb3BlcnR5PiB7XG4gICAgY29uc3Qga2V5ID0gYCR7cmVnaW9ufS8ke3ZlcnNpb259LyR7aW1hZ2VOYW1lfWBcbiAgICBjb25zdCBjYWNoZWQgPSB0aGlzLmltYWdlQ2FjaGVba2V5XVxuICAgIGlmIChjYWNoZWQpIHJldHVybiBjYWNoZWRcblxuICAgIGNvbnN0IHBzZXVkb1Jlc29sdmVyID0gdGhpcy5nZXRWZXJzaW9uUmVzb2x2ZXIocmVnaW9uLCB2ZXJzaW9uKVxuICAgIGNvbnN0IGJ1ZmZlciA9IGF3YWl0IHRoaXMuZ2V0SW1hZ2VBQihyZWdpb24sIHZlcnNpb24sIGltYWdlTmFtZSlcbiAgICBjb25zdCBjcmVhdGVkID0gbmV3IEltYWdlUHJvcGVydHkoaW1hZ2VOYW1lLCByZWdpb24sIHZlcnNpb24sIGJ1ZmZlciwgcHNldWRvUmVzb2x2ZXIpXG4gICAgdGhpcy5pbWFnZUNhY2hlW2tleV0gPSBjcmVhdGVkXG5cbiAgICByZXR1cm4gY3JlYXRlZFxuICB9XG5cbiAgYXN5bmMgcmVzb2x2ZShyZWdpb246IHN0cmluZywgdmVyc2lvbjogc3RyaW5nLCBwYXRoOiBzdHJpbmcpIDogUHJvbWlzZTxJUHJvcGVydHk+IHtcbiAgICBpZiAocGF0aC5lbmRzV2l0aChcIi5pbWdcIikpIHtcbiAgICAgIHJldHVybiB0aGlzLmdldEltYWdlKHJlZ2lvbiwgdmVyc2lvbiwgcGF0aClcbiAgICB9XG5cbiAgICBjb25zdCBpbWFnZVNwbGl0ID0gcGF0aC5zcGxpdChcIi5pbWcvXCIsIDIpIC8vIC5pbWcgaXMgdGhlIGFjdHVhbCBzZXJ2ZXItc3RvcmVkIGZpbGVcbiAgICBpbWFnZVNwbGl0WzBdID0gaW1hZ2VTcGxpdFswXSArIFwiLmltZ1wiIC8vIEZpeCB0aGUgZmlsZSBwYXRoXG4gICAgY29uc3QgW2ltYWdlTmFtZSwgbm9kZVBhdGhdID0gaW1hZ2VTcGxpdFxuXG4gICAgY29uc3QgaW1nID0gYXdhaXQgdGhpcy5nZXRJbWFnZShyZWdpb24sIHZlcnNpb24sIGltYWdlTmFtZSlcbiAgICByZXR1cm4gaW1nLnJlc29sdmUobm9kZVBhdGgpXG4gIH1cblxuICBnZXRGb2xkZXJzKHJlZ2lvbjogc3RyaW5nLCB2ZXJzaW9uOiBzdHJpbmcpIDogUHJvbWlzZTxSZWNvcmQ8c3RyaW5nLCBzdHJpbmc+PiB7XG4gICAgY29uc3Qga2V5ID0gYCR7cmVnaW9ufS0ke3ZlcnNpb259YFxuICAgIGNvbnN0IGNhY2hlZCA9IHRoaXMuZm9sZGVyQ2FjaGVba2V5XVxuICAgIGlmIChjYWNoZWQpIHJldHVybiBjYWNoZWRcblxuICAgIGNvbnN0IGNyZWF0ZWQgPSB0aGlzLmZldGNoSnNvbihgJHtyZWdpb259LyR7dmVyc2lvbn0vY2hhcmFjdGVyRm9sZGVycy5qc29uYClcbiAgICAgIC50aGVuKGltYWdlc0pzb24gPT4gaW1hZ2VzSnNvbiBhcyBSZWNvcmQ8c3RyaW5nLCBzdHJpbmc+KVxuXG4gICAgdGhpcy5mb2xkZXJDYWNoZVtrZXldID0gY3JlYXRlZFxuICAgIHJldHVybiBjcmVhdGVkXG4gIH1cblxuICBnZXRabWFwKHJlZ2lvbjogc3RyaW5nLCB2ZXJzaW9uOiBzdHJpbmcpIDogUHJvbWlzZTxBcnJheTxzdHJpbmc+PiB7XG4gICAgY29uc3Qga2V5ID0gYCR7cmVnaW9ufS0ke3ZlcnNpb259YFxuICAgIGNvbnN0IGNhY2hlZCA9IHRoaXMuem1hcENhY2hlW2tleV1cbiAgICBpZiAoY2FjaGVkKSByZXR1cm4gY2FjaGVkXG5cbiAgICBjb25zdCBjcmVhdGVkID0gdGhpcy5mZXRjaEpzb24oYCR7cmVnaW9ufS8ke3ZlcnNpb259L3ptYXAuanNvbmApXG4gICAgICAudGhlbihyZXMgPT4gcmVzLnJldmVyc2UoKSkgLy8gWk1hcCBpcyBvcmRlcmVkIGZyb20gaGlnaGVzdCB0byBsb3dlc3QsIHdlIHdhbnQgbG93ZXN0IHRvIGhpZ2hlc3QgZm9yIGVhc2llciBsb2dpY1xuICAgICAgLnRoZW4oaW1hZ2VzSnNvbiA9PiBpbWFnZXNKc29uIGFzIEFycmF5PHN0cmluZz4pXG5cbiAgICB0aGlzLnptYXBDYWNoZVtrZXldID0gY3JlYXRlZFxuICAgIHJldHVybiBjcmVhdGVkXG4gIH1cblxuICBnZXRTbWFwKHJlZ2lvbjogc3RyaW5nLCB2ZXJzaW9uOiBzdHJpbmcpIDogUHJvbWlzZTxSZWNvcmQ8c3RyaW5nLCBBcnJheTxzdHJpbmc+Pj4ge1xuICAgIGNvbnN0IGtleSA9IGAke3JlZ2lvbn0tJHt2ZXJzaW9ufWBcbiAgICBjb25zdCBjYWNoZWQgPSB0aGlzLnNtYXBDYWNoZVtrZXldXG4gICAgaWYgKGNhY2hlZCkgcmV0dXJuIGNhY2hlZFxuXG4gICAgdGhpcy5zbWFwQ2FjaGVba2V5XSA9IHRoaXMucmVzb2x2ZShyZWdpb24sIHZlcnNpb24sICdCYXNlL3NtYXAuaW1nJylcbiAgICAgIC50aGVuKHNtYXAgPT4ge1xuICAgICAgICByZXR1cm4gc21hcC5jaGlsZHJlbi5yZWR1Y2UoKHRvdGFsLCBjdXJyZW50KSA9PiB7XG4gICAgICAgICAgdG90YWxbY3VycmVudC5uYW1lXSA9IGN1cnJlbnQudmFsdWU/Lm1hdGNoKC8uezEsMn0vZykgfHwgW11cbiAgICAgICAgICByZXR1cm4gdG90YWxcbiAgICAgICAgfSwge30gYXMgUmVjb3JkPHN0cmluZywgQXJyYXk8c3RyaW5nPj4pXG4gICAgICB9KVxuXG4gICAgY29uc3Qgc21hcCA9IHRoaXMuc21hcENhY2hlW2tleV1cbiAgICByZXR1cm4gc21hcFxuICB9XG59XG4iLCJpbXBvcnQgTWFwbGVTdG9yeSBmcm9tIFwiLi9NYXBsZVN0b3J5XCI7XG5cbmV4cG9ydCBkZWZhdWx0IE1hcGxlU3RvcnlcbiIsImltcG9ydCBEYXRhYmFzZSBmcm9tIFwiLi9EYXRhYmFzZVwiO1xuaW1wb3J0IENoYXJhY3RlclJlbmRlcmVyIGZyb20gXCIuL0NoYXJhY3Rlci9SZW5kZXJlclwiO1xuaW1wb3J0IENvbmZpZyBmcm9tIFwiLi9Db25maWdcIjtcbmltcG9ydCBJdGVtVXRpbGl0aWVzIGZyb20gXCIuL0l0ZW0vVXRpbGl0aWVzXCI7XG5pbXBvcnQgTWFwUmVuZGVyZXIgZnJvbSBcIi4vTWFwL1JlbmRlcmVyXCI7XG5pbXBvcnQgTmV0d29yayBmcm9tIFwiLi9OZXR3b3JrXCI7XG5pbXBvcnQgUEtHMUZhY3RvcnkgZnJvbSBcIi4vUEtHMS9GYWN0b3J5XCI7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIE1hcGxlU3Rvcnkge1xuICBEYXRhRmFjdG9yeTogUEtHMUZhY3Rvcnk7XG4gIEl0ZW1VdGlsaXRpZXM6IEl0ZW1VdGlsaXRpZXM7XG4gIENoYXJhY3RlclJlbmRlcmVyOiBDaGFyYWN0ZXJSZW5kZXJlcjtcbiAgTmV0d29yazogTmV0d29yaztcbiAgTWFwUmVuZGVyZXI6IE1hcFJlbmRlcmVyO1xuICBEYXRhYmFzZTogRGF0YWJhc2U7XG5cbiAgY29uc3RydWN0b3IoY29uZmlnOiBDb25maWcpIHtcbiAgICB0aGlzLkRhdGFiYXNlID0gbmV3IERhdGFiYXNlKClcbiAgICB0aGlzLk5ldHdvcmsgPSBuZXcgTmV0d29yayh0aGlzLkRhdGFiYXNlKVxuICAgIHRoaXMuRGF0YUZhY3RvcnkgPSBuZXcgUEtHMUZhY3RvcnkodGhpcy5OZXR3b3JrLCBjb25maWcuRW5kcG9pbnQpXG4gICAgdGhpcy5JdGVtVXRpbGl0aWVzID0gbmV3IEl0ZW1VdGlsaXRpZXModGhpcy5EYXRhRmFjdG9yeSlcbiAgICB0aGlzLkNoYXJhY3RlclJlbmRlcmVyID0gbmV3IENoYXJhY3RlclJlbmRlcmVyKHRoaXMuSXRlbVV0aWxpdGllcywgdGhpcy5EYXRhRmFjdG9yeSlcbiAgICB0aGlzLk1hcFJlbmRlcmVyID0gbmV3IE1hcFJlbmRlcmVyKHRoaXMuRGF0YUZhY3RvcnkpXG4gIH1cbn1cbiJdLCJuYW1lcyI6WyJyb290IiwiZmFjdG9yeSIsImV4cG9ydHMiLCJtb2R1bGUiLCJkZWZpbmUiLCJhbWQiLCJzZWxmIiwiYWRsZXIzMl8xIiwiYWRsZXIiLCJidWYiLCJsZW4iLCJwb3MiLCJzMSIsInMyIiwibiIsImNyY1RhYmxlIiwiVWludDMyQXJyYXkiLCJjIiwidGFibGUiLCJrIiwibWFrZVRhYmxlIiwiY3JjMzJfMSIsImNyYyIsInQiLCJlbmQiLCJpIiwiaW5mZmFzdCIsInN0cm0iLCJzdGFydCIsIl9pbiIsImxhc3QiLCJfb3V0IiwiYmVnIiwiZG1heCIsIndzaXplIiwid2hhdmUiLCJ3bmV4dCIsInNfd2luZG93IiwiaG9sZCIsImJpdHMiLCJsY29kZSIsImRjb2RlIiwibG1hc2siLCJkbWFzayIsImhlcmUiLCJvcCIsImRpc3QiLCJmcm9tIiwiZnJvbV9zb3VyY2UiLCJpbnB1dCIsIm91dHB1dCIsInN0YXRlIiwibmV4dF9pbiIsImF2YWlsX2luIiwibmV4dF9vdXQiLCJhdmFpbF9vdXQiLCJ3aW5kb3ciLCJsZW5jb2RlIiwiZGlzdGNvZGUiLCJsZW5iaXRzIiwiZGlzdGJpdHMiLCJ0b3AiLCJkb2xlbiIsIm1vZGUiLCJtc2ciLCJkb2Rpc3QiLCJzYW5lIiwiTUFYQklUUyIsImxiYXNlIiwiVWludDE2QXJyYXkiLCJsZXh0IiwiVWludDhBcnJheSIsImRiYXNlIiwiZGV4dCIsImluZnRyZWVzIiwidHlwZSIsImxlbnMiLCJsZW5zX2luZGV4IiwiY29kZXMiLCJ0YWJsZV9pbmRleCIsIndvcmsiLCJvcHRzIiwiaW5jciIsImZpbGwiLCJsb3ciLCJtYXNrIiwibmV4dCIsInN5bSIsIm1pbiIsIm1heCIsImN1cnIiLCJkcm9wIiwibGVmdCIsInVzZWQiLCJodWZmIiwiYmFzZSIsImJhc2VfaW5kZXgiLCJjb3VudCIsIm9mZnMiLCJoZXJlX2JpdHMiLCJoZXJlX29wIiwiaGVyZV92YWwiLCJleHRyYSIsImV4dHJhX2luZGV4IiwiY29uc3RhbnRzJDEiLCJaX05PX0ZMVVNIIiwiWl9QQVJUSUFMX0ZMVVNIIiwiWl9TWU5DX0ZMVVNIIiwiWl9GVUxMX0ZMVVNIIiwiWl9GSU5JU0giLCJaX0JMT0NLIiwiWl9UUkVFUyIsIlpfT0siLCJaX1NUUkVBTV9FTkQiLCJaX05FRURfRElDVCIsIlpfRVJSTk8iLCJaX1NUUkVBTV9FUlJPUiIsIlpfREFUQV9FUlJPUiIsIlpfTUVNX0VSUk9SIiwiWl9CVUZfRVJST1IiLCJaX05PX0NPTVBSRVNTSU9OIiwiWl9CRVNUX1NQRUVEIiwiWl9CRVNUX0NPTVBSRVNTSU9OIiwiWl9ERUZBVUxUX0NPTVBSRVNTSU9OIiwiWl9GSUxURVJFRCIsIlpfSFVGRk1BTl9PTkxZIiwiWl9STEUiLCJaX0ZJWEVEIiwiWl9ERUZBVUxUX1NUUkFURUdZIiwiWl9CSU5BUlkiLCJaX1RFWFQiLCJaX1VOS05PV04iLCJaX0RFRkxBVEVEIiwiWl9GSU5JU0gkMSIsIlpfT0skMSIsIlpfU1RSRUFNX0VORCQxIiwiWl9ORUVEX0RJQ1QkMSIsIlpfU1RSRUFNX0VSUk9SJDEiLCJaX0RBVEFfRVJST1IkMSIsIlpfTUVNX0VSUk9SJDEiLCJUWVBFIiwiQkFEIiwienN3YXAzMiIsInEiLCJJbmZsYXRlU3RhdGUiLCJ0aGlzIiwid3JhcCIsImhhdmVkaWN0IiwiZmxhZ3MiLCJjaGVjayIsInRvdGFsIiwiaGVhZCIsIndiaXRzIiwibGVuZ3RoIiwib2Zmc2V0IiwibmNvZGUiLCJubGVuIiwibmRpc3QiLCJoYXZlIiwibGVuZHluIiwiZGlzdGR5biIsImJhY2siLCJ3YXMiLCJpbmZsYXRlUmVzZXRLZWVwIiwidG90YWxfaW4iLCJ0b3RhbF9vdXQiLCJJbnQzMkFycmF5IiwiaW5mbGF0ZVJlc2V0IiwiaW5mbGF0ZVJlc2V0MiIsIndpbmRvd0JpdHMiLCJpbmZsYXRlSW5pdDIiLCJyZXQiLCJsZW5maXgiLCJkaXN0Zml4IiwidmlyZ2luIiwiZml4ZWR0YWJsZXMiLCJ1cGRhdGV3aW5kb3ciLCJzcmMiLCJjb3B5Iiwic2V0Iiwic3ViYXJyYXkiLCJpbmZsYXRlXzEkMSIsImZsdXNoIiwicHV0IiwibGFzdF9iaXRzIiwibGFzdF9vcCIsImxhc3RfdmFsIiwiaGJ1ZiIsIm9yZGVyIiwiaW5mX2xlYXZlIiwiZG9uZSIsInRleHQiLCJ0aW1lIiwieGZsYWdzIiwib3MiLCJleHRyYV9sZW4iLCJuYW1lIiwiU3RyaW5nIiwiZnJvbUNoYXJDb2RlIiwiY29tbWVudCIsImhjcmMiLCJkYXRhX3R5cGUiLCJkaWN0aW9uYXJ5IiwiZGljdExlbmd0aCIsImRpY3RpZCIsIl9oYXMiLCJvYmoiLCJrZXkiLCJPYmplY3QiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsImNhbGwiLCJjb21tb24iLCJzb3VyY2VzIiwiQXJyYXkiLCJzbGljZSIsImFyZ3VtZW50cyIsInNvdXJjZSIsInNoaWZ0IiwiVHlwZUVycm9yIiwicCIsImNodW5rcyIsImwiLCJyZXN1bHQiLCJjaHVuayIsIlNUUl9BUFBMWV9VSUFfT0siLCJhcHBseSIsIl9fIiwiX3V0ZjhsZW4iLCJzdHJpbmdzIiwic3RyIiwiVGV4dEVuY29kZXIiLCJlbmNvZGUiLCJjMiIsIm1fcG9zIiwic3RyX2xlbiIsImJ1Zl9sZW4iLCJjaGFyQ29kZUF0IiwiVGV4dERlY29kZXIiLCJkZWNvZGUiLCJvdXQiLCJ1dGYxNmJ1ZiIsImNfbGVuIiwiYnVmMmJpbnN0cmluZyIsIm1lc3NhZ2VzIiwienN0cmVhbSIsImd6aGVhZGVyIiwidG9TdHJpbmciLCJJbmZsYXRlIiwib3B0aW9ucyIsImNodW5rU2l6ZSIsInRvIiwib3B0IiwicmF3IiwiZXJyIiwiZW5kZWQiLCJzdGF0dXMiLCJFcnJvciIsImhlYWRlciIsImluZmxhdGUiLCJpbmZsYXRvciIsInB1c2giLCJkYXRhIiwiZmx1c2hfbW9kZSIsIl9mbHVzaF9tb2RlIiwibGFzdF9hdmFpbF9vdXQiLCJvbkVuZCIsIm5leHRfb3V0X3V0ZjgiLCJ0YWlsIiwidXRmOHN0ciIsIm9uRGF0YSIsImpvaW4iLCJJbmZsYXRlXzEiLCJpbmZsYXRlXzIiLCJpbmZsYXRlUmF3XzEiLCJ1bmd6aXAiLCJjb25zdGFudHMiLCJpbmZsYXRlXzEiLCJpbmZsYXRlUmF3IiwiZGVmaW5lUHJvcGVydHkiLCJ2YWx1ZSIsIl9fd2VicGFja19tb2R1bGVfY2FjaGVfXyIsIl9fd2VicGFja19yZXF1aXJlX18iLCJtb2R1bGVJZCIsImNhY2hlZE1vZHVsZSIsInVuZGVmaW5lZCIsIl9fd2VicGFja19tb2R1bGVzX18iLCJkIiwiZGVmaW5pdGlvbiIsIm8iLCJlbnVtZXJhYmxlIiwiZ2V0IiwicHJvcCIsInIiLCJTeW1ib2wiLCJ0b1N0cmluZ1RhZyIsImUiLCJnbG9iYWxUaGlzIiwiZ2xvYmFsIiwia2V5cyIsImlzQXJyYXkiLCJmb3JFYWNoIiwiUHJvbWlzZSIsInMiLCJnZXRQcm90b3R5cGVPZiIsImEiLCJSZWZsZWN0Iiwib3duS2V5cyIsInUiLCJjb25maWd1cmFibGUiLCJ3cml0YWJsZSIsImNyZWF0ZSIsImV4dGVuZCIsImJpbmQiLCJoIiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwiZiIsInkiLCJtIiwidiIsInNldEltbWVkaWF0ZSIsInNldFRpbWVvdXQiLCJnIiwicmVkdWNlIiwiYiIsImluZGV4T2YiLCJzdWJzdHIiLCJfIiwiaXNGcm96ZW4iLCJpc05hTiIsInBhcnNlSW50Iiwic3BsaWNlIiwidyIsIngiLCJjb25jYXQiLCJFIiwic3BsaXQiLCJtYXAiLCJmaWx0ZXIiLCJQIiwiSyIsIk8iLCJXZWFrTWFwIiwiUyIsImNvbnN0cnVjdG9yIiwiQSIsIkMiLCJqIiwiaXRlcmF0b3IiLCJEIiwiSSIsIkIiLCJUIiwiUiIsImxvY2F0aW9uIiwidGVzdCIsImhyZWYiLCJGIiwiTSIsIk4iLCJzdGFjayIsIiQiLCJtZXNzYWdlIiwiVSIsIkwiLCJWIiwiVmVyc2lvbkNoYW5nZWQiLCJEYXRhYmFzZUNsb3NlZCIsIkFib3J0IiwiVHJhbnNhY3Rpb25JbmFjdGl2ZSIsIk1pc3NpbmdBUEkiLCJXIiwiX2UiLCJZIiwieiIsImZhaWx1cmVzIiwiZmFpbGVkS2V5cyIsInN1Y2Nlc3NDb3VudCIsIkciLCJmYWlsdXJlc0J5UG9zIiwiX3N0YWNrIiwiSCIsIlEiLCJYIiwiaW5uZXIiLCJTeW50YXgiLCJTeW50YXhFcnJvciIsIlR5cGUiLCJSYW5nZSIsIlJhbmdlRXJyb3IiLCJKIiwiWiIsImVlIiwidGUiLCJuZSIsInJlIiwic2UiLCJvbnN1Y2Nlc3MiLCJvbmVycm9yIiwiaWUiLCJvZSIsImFlIiwidWUiLCJ0aGVuIiwiTW9kaWZ5RXJyb3IiLCJEZXhpZUVycm9yIiwiQnVsa0Vycm9yIiwibGUiLCJjZSIsImhlIiwiZGUiLCJyZXNvbHZlIiwiY3J5cHRvIiwic3VidGxlIiwiZGlnZXN0IiwiZmUiLCJwZSIsInllIiwibWUiLCJ2ZSIsInFlIiwiTXV0YXRpb25PYnNlcnZlciIsImRvY3VtZW50IiwiY3JlYXRlRWxlbWVudCIsIm9ic2VydmUiLCJhdHRyaWJ1dGVzIiwic2V0QXR0cmlidXRlIiwiZ2UiLCJPZSIsImJlIiwid2UiLCJ4ZSIsImtlIiwiRWUiLCJQZSIsImlkIiwicmVmIiwidW5oYW5kbGVkcyIsIm9udW5oYW5kbGVkIiwiY3QiLCJwZ3AiLCJlbnYiLCJmaW5hbGl6ZSIsIktlIiwiU2UiLCJBZSIsIkNlIiwiX2xpc3RlbmVycyIsIm9udW5jYXRjaGVkIiwiX2xpYiIsIl9QU0QiLCJfc3RhY2tIb2xkZXIiLCJfcHJldiIsIl9udW1QcmV2IiwiX3N0YXRlIiwiX3ZhbHVlIiwiQmUiLCJJZSIsImplIiwiUWUiLCJldCIsIlJlIiwiRGUiLCJ1dCIsIk5lIiwib25GdWxmaWxsZWQiLCJvblJlamVjdGVkIiwicmVqZWN0IiwicHNkIiwiJGUiLCJfdGhlbiIsIlRlIiwiVWUiLCJfcHJvbWlzZSIsInNvbWUiLCJMZSIsIkZlIiwiTWUiLCJWZSIsIldlIiwic3QiLCJjYXRjaCIsImZpbmFsbHkiLCJ0aW1lb3V0IiwiVGltZW91dCIsImNsZWFyVGltZW91dCIsIml0IiwiYWxsIiwidHQiLCJyYWNlIiwiUFNEIiwidG90YWxFY2hvZXMiLCJuZXdQU0QiLCJKZSIsInVzZVBTRCIsIm90Iiwic2NoZWR1bGVyIiwicmVqZWN0aW9uTWFwcGVyIiwiZm9sbG93IiwiYWxsU2V0dGxlZCIsInJlYXNvbiIsImFueSIsIkFnZ3JlZ2F0ZUVycm9yIiwiWWUiLCJhd2FpdHMiLCJlY2hvZXMiLCJ6ZSIsIkdlIiwiSGUiLCJYZSIsInBhcmVudCIsIlByb21pc2VQcm9wIiwibnRoZW4iLCJsdCIsImd0aGVuIiwiWmUiLCJodCIsIm50IiwicnQiLCJwb3AiLCJhdCIsInByb21pc2UiLCJjcmVhdGVFdmVudCIsImluaXRFdmVudCIsIkN1c3RvbUV2ZW50IiwiZGV0YWlsIiwiZGlzcGF0Y2hFdmVudCIsIlByb21pc2VSZWplY3Rpb25FdmVudCIsIm9udW5oYW5kbGVkcmVqZWN0aW9uIiwiZGVmYXVsdFByZXZlbnRlZCIsImNvbnNvbGUiLCJ3YXJuIiwiZHQiLCJpZGJkYiIsIm9wZW5Db21wbGV0ZSIsImxldFRocm91Z2giLCJfdmlwIiwiX2NyZWF0ZVRyYW5zYWN0aW9uIiwiX2RiU2NoZW1hIiwiUFIxMzk4X21heExvb3AiLCJJbnZhbGlkU3RhdGUiLCJpc09wZW4iLCJfY2xvc2UiLCJvcGVuIiwidHJhbnMiLCJfY29tcGxldGlvbiIsImRiT3BlbkVycm9yIiwiaXNCZWluZ09wZW5lZCIsIl9vcHRpb25zIiwiYXV0b09wZW4iLCJkYlJlYWR5UHJvbWlzZSIsImZ0IiwicHQiLCJ5dCIsIm10IiwibmF2aWdhdG9yIiwidXNlckFnZW50IiwidnQiLCJndCIsImJ0IiwiX3QiLCJ3dCIsImxvd2VyIiwibG93ZXJPcGVuIiwidXBwZXIiLCJ1cHBlck9wZW4iLCJ4dCIsImt0IiwiX3RyYW5zIiwiX3R4Iiwic2NoZW1hIiwiTm90Rm91bmQiLCJpZGJ0cmFucyIsImRiIiwidHJhbnNsZXNzIiwid2hlcmUiLCJmaXJzdCIsImNvcmUiLCJob29rIiwicmVhZGluZyIsImZpcmUiLCJXaGVyZUNsYXVzZSIsImVxdWFscyIsImluZGV4ZXMiLCJwcmltS2V5IiwiY29tcG91bmQiLCJldmVyeSIsImtleVBhdGgiLCJfbWF4S2V5IiwiSlNPTiIsInN0cmluZ2lmeSIsImlkeEJ5TmFtZSIsIl9kZXBzIiwiaW5kZXhlZERCIiwiY21wIiwibXVsdGkiLCJ0b0NvbGxlY3Rpb24iLCJhbmQiLCJsaW1pdCIsImVhY2giLCJ0b0FycmF5IiwiQ29sbGVjdGlvbiIsIm9yZGVyQnkiLCJyZXZlcnNlIiwibWFwVG9DbGFzcyIsIm1hcHBlZENsYXNzIiwicmVhZEhvb2siLCJ1bnN1YnNjcmliZSIsImRlZmluZUNsYXNzIiwiYWRkIiwiYXV0byIsIm11dGF0ZSIsInZhbHVlcyIsIm51bUZhaWx1cmVzIiwibGFzdFJlc3VsdCIsInVwZGF0ZSIsIm1vZGlmeSIsIkludmFsaWRBcmd1bWVudCIsImRlbGV0ZSIsImNsZWFyIiwicmFuZ2UiLCJidWxrR2V0IiwiZ2V0TWFueSIsImJ1bGtBZGQiLCJhbGxLZXlzIiwid2FudFJlc3VsdHMiLCJyZXN1bHRzIiwiYnVsa1B1dCIsImJ1bGtEZWxldGUiLCJFdCIsInN1YnNjcmliZSIsImFkZEV2ZW50VHlwZSIsInN1YnNjcmliZXJzIiwiUHQiLCJLdCIsImFsZ29yaXRobSIsIm9yIiwianVzdExpbWl0IiwicmVwbGF5RmlsdGVyIiwiT3QiLCJTdCIsIkF0IiwiaXNQcmltS2V5IiwicHJpbWFyeUtleSIsImdldEluZGV4QnlLZXlQYXRoIiwiaW5kZXgiLCJTY2hlbWEiLCJDdCIsIm9wZW5DdXJzb3IiLCJrZXlzT25seSIsImRpciIsInVuaXF1ZSIsInF1ZXJ5IiwianQiLCJzdG9wIiwiZmFpbCIsIl9pdGVyYXRlIiwiRHQiLCJ2YWx1ZU1hcHBlciIsImNvbnRpbnVlIiwiSXQiLCJCdCIsIk5hTiIsIlR0IiwiQXJyYXlCdWZmZXIiLCJpc1ZpZXciLCJidWZmZXIiLCJieXRlT2Zmc2V0IiwiYnl0ZUxlbmd0aCIsIlJ0IiwiX3JlYWQiLCJfY3R4IiwiZXJyb3IiLCJfd3JpdGUiLCJfYWRkQWxnb3JpdGhtIiwiY2xvbmUiLCJNYXRoIiwic29ydEJ5Iiwic29ydCIsImFkdmFuY2UiLCJ1bnRpbCIsImlzTWF0Y2giLCJfb25kaXJlY3Rpb25jaGFuZ2UiLCJkZXNjIiwiZWFjaEtleSIsImVhY2hVbmlxdWVLZXkiLCJlYWNoUHJpbWFyeUtleSIsInByaW1hcnlLZXlzIiwidW5pcXVlS2V5cyIsImZpcnN0S2V5IiwibGFzdEtleSIsImRpc3RpbmN0Iiwib3V0Ym91bmQiLCJleHRyYWN0S2V5IiwibW9kaWZ5Q2h1bmtTaXplIiwiY2FjaGUiLCJGdCIsImNyaXRlcmlhIiwiY2hhbmdlU3BlYyIsIk10IiwiTnQiLCJxdCIsIll0IiwiJHQiLCJXdCIsIlV0IiwiTHQiLCJ0b1VwcGVyQ2FzZSIsInRvTG93ZXJDYXNlIiwiVnQiLCJiZXR3ZWVuIiwiX2NtcCIsImFib3ZlIiwiYWJvdmVPckVxdWFsIiwiYmVsb3ciLCJiZWxvd09yRXF1YWwiLCJzdGFydHNXaXRoIiwic3RhcnRzV2l0aElnbm9yZUNhc2UiLCJlcXVhbHNJZ25vcmVDYXNlIiwiYW55T2ZJZ25vcmVDYXNlIiwic3RhcnRzV2l0aEFueU9mSWdub3JlQ2FzZSIsImFueU9mIiwiX2FzY2VuZGluZyIsIl9kZXNjZW5kaW5nIiwibm90RXF1YWwiLCJpbkFueVJhbmdlIiwiaW5jbHVkZUxvd2VycyIsImluY2x1ZGVVcHBlcnMiLCJub25lT2YiLCJfbWluIiwiX21heCIsInN0YXJ0c1dpdGhBbnlPZiIsInp0IiwiR3QiLCJ0YXJnZXQiLCJzdG9wUHJvcGFnYXRpb24iLCJwcmV2ZW50RGVmYXVsdCIsIkh0IiwiUXQiLCJfbG9jayIsIl9yZWN1bG9jayIsImxvY2tPd25lckZvciIsIl91bmxvY2siLCJfYmxvY2tlZEZ1bmNzIiwiX2xvY2tlZCIsIk9wZW5GYWlsZWQiLCJhY3RpdmUiLCJ0cmFuc2FjdGlvbiIsInN0b3JlTmFtZXMiLCJkdXJhYmlsaXR5IiwiY2hyb21lVHJhbnNhY3Rpb25EdXJhYmlsaXR5IiwiX3JlamVjdCIsIm9uYWJvcnQiLCJvbiIsIm9uY29tcGxldGUiLCJfcmVzb2x2ZSIsInN0b3JhZ2VtdXRhdGVkIiwibXV0YXRlZFBhcnRzIiwiUmVhZE9ubHkiLCJfcm9vdCIsIndhaXRGb3IiLCJfd2FpdGluZ0ZvciIsIl93YWl0aW5nUXVldWUiLCJvYmplY3RTdG9yZSIsIl9zcGluQ291bnQiLCJhYm9ydCIsIl9tZW1vaXplZFRhYmxlcyIsIlRhYmxlIiwiWHQiLCJKdCIsIlp0IiwiZW4iLCJvbmx5IiwidG4iLCJubiIsInJuIiwic24iLCJ1cHBlckJvdW5kIiwibG93ZXJCb3VuZCIsImJvdW5kIiwiaGFzR2V0QWxsIiwib2JqZWN0U3RvcmVOYW1lcyIsInRhYmxlcyIsImF1dG9JbmNyZW1lbnQiLCJpc1ByaW1hcnlLZXkiLCJpbmRleE5hbWVzIiwibXVsdGlFbnRyeSIsIm1hdGNoIiwiX3BvcyIsImdldEFsbCIsImdldEFsbEtleXMiLCJvcGVuS2V5Q3Vyc29yIiwiX19faWQiLCJjb250aW51ZVByaW1hcnlLZXkiLCJNSU5fS0VZIiwiTUFYX0tFWSIsImFuIiwiX25vdmlwIiwiSURCS2V5UmFuZ2UiLCJkYmNvcmUiLCJfbWlkZGxld2FyZXMiLCJ1biIsIlRyYW5zYWN0aW9uIiwibG4iLCJjbiIsIl9jZmciLCJ2ZXJzaW9uIiwiaG4iLCJfc3RvcmVOYW1lcyIsImZuIiwicG9wdWxhdGUiLCJfdmVyc2lvbnMiLCJ5biIsImRic2NoZW1hIiwibW4iLCJkbiIsImNoYW5nZSIsInJlY3JlYXRlIiwiVXBncmFkZSIsInBuIiwiZGVsZXRlSW5kZXgiLCJkZWwiLCJjb250ZW50VXBncmFkZSIsImRlbGV0ZU9iamVjdFN0b3JlIiwiY29udGFpbnMiLCJkZWYiLCJjcmVhdGVPYmplY3RTdG9yZSIsImNyZWF0ZUluZGV4IiwiX2hhc0dldEFsbCIsIldvcmtlckdsb2JhbFNjb3BlIiwidm4iLCJfcGFyc2VTdG9yZXNTcGVjIiwidHJpbSIsInJlcGxhY2UiLCJzdG9yZXMiLCJzdG9yZXNTb3VyY2UiLCJfYWxsVGFibGVzIiwidXBncmFkZSIsImduIiwiX2RiTmFtZXNEQiIsIiRuIiwiYWRkb25zIiwiZGJuYW1lcyIsImJuIiwiZGF0YWJhc2VzIiwiX24iLCJ3biIsInVzZXJBZ2VudERhdGEiLCJzZXRJbnRlcnZhbCIsImNsZWFySW50ZXJ2YWwiLCJrbiIsInRocm93IiwiRW4iLCJQbiIsIlByZW1hdHVyZUNvbW1pdCIsIktuIiwiT24iLCJsZXZlbCIsImlzVmlydHVhbCIsImtleVRhaWwiLCJrZXlMZW5ndGgiLCJTbiIsIkFuIiwiZGVsZXRpbmciLCJjcmVhdGluZyIsInVwZGF0aW5nIiwiQ24iLCJqbiIsIl9jYWNoZSIsIkRuIiwiSW4iLCJCbiIsIk1uIiwiVG4iLCJGbiIsInVwIiwiTm4iLCJhZGRLZXkiLCJhZGRLZXlzIiwicW4iLCJzdWJzY3IiLCJ2ZXJubyIsImRlcGVuZGVuY2llcyIsIm9uUmVhZHlCZWluZ0ZpcmVkIiwiZGJSZWFkeVJlc29sdmUiLCJjYW5jZWxPcGVuIiwib3BlbkNhbmNlbGxlciIsImF1dG9TY2hlbWEiLCJyZWFkeSIsInZpcCIsImNvbXBsZXRlIiwiVmVyc2lvbiIsIl9JREJLZXlSYW5nZSIsIm5ld1ZlcnNpb24iLCJjbG9zZSIsIm9sZFZlcnNpb24iLCJfZmlyZU9uQmxvY2tlZCIsInZjRmlyZWQiLCJ1c2UiLCJyb3VuZCIsIl93aGVuUmVhZHkiLCJ1bnVzZSIsIm9uYmxvY2tlZCIsIm9udXBncmFkZW5lZWRlZCIsImFsbG93RW1wdHlEQiIsImRlbGV0ZURhdGFiYXNlIiwiTm9TdWNoRGF0YWJhc2UiLCJwb3ciLCJvbnZlcnNpb25jaGFuZ2UiLCJvbmNsb3NlIiwieG4iLCJiYWNrZW5kREIiLCJoYXNCZWVuQ2xvc2VkIiwiaGFzRmFpbGVkIiwiZHluYW1pY2FsbHlPcGVuZWQiLCJfdHJhbnNhY3Rpb24iLCJTdWJUcmFuc2FjdGlvbiIsIkludmFsaWRUYWJsZSIsIlVuIiwib2JzZXJ2YWJsZSIsIkxuIiwiX3N1YnNjcmliZSIsIlZuIiwiWW4iLCJtb3pJbmRleGVkREIiLCJ3ZWJraXRJbmRleGVkREIiLCJtc0luZGV4ZWREQiIsIndlYmtpdElEQktleVJhbmdlIiwiem4iLCJHbiIsIkhuIiwiZXhpc3RzIiwiZ2V0RGF0YWJhc2VOYW1lcyIsImlnbm9yZVRyYW5zYWN0aW9uIiwiYXN5bmMiLCJzcGF3biIsImN1cnJlbnRUcmFuc2FjdGlvbiIsImRlYnVnIiwiZGVyaXZlIiwicHJvcHMiLCJvdmVycmlkZSIsIkV2ZW50cyIsImxpdmVRdWVyeSIsImNsb3NlZCIsIlJuIiwiZXh0ZW5kT2JzZXJ2YWJpbGl0eVNldCIsImdldEJ5S2V5UGF0aCIsInNldEJ5S2V5UGF0aCIsImRlbEJ5S2V5UGF0aCIsInNoYWxsb3dDbG9uZSIsImRlZXBDbG9uZSIsImdldE9iamVjdERpZmYiLCJhc2FwIiwibWluS2V5IiwiY29ubmVjdGlvbnMiLCJlcnJuYW1lcyIsInNlbVZlciIsIm1heEtleSIsImFkZEV2ZW50TGlzdGVuZXIiLCJpbml0Q3VzdG9tRXZlbnQiLCJCcm9hZGNhc3RDaGFubmVsIiwicG9zdE1lc3NhZ2UiLCJvbm1lc3NhZ2UiLCJsb2NhbFN0b3JhZ2UiLCJzZXRJdGVtIiwidHJpZyIsInJhbmRvbSIsImNoYW5nZWRQYXJ0cyIsImNsaWVudHMiLCJtYXRjaEFsbCIsImluY2x1ZGVVbmNvbnRyb2xsZWQiLCJwYXJzZSIsIm5ld1ZhbHVlIiwic2VydmljZVdvcmtlciIsIkRhdGFiYXNlIiwic3VwZXIiLCJJbnRlcm5hbFR5cGUiLCJOb2RlSXRlbVBhaXIiLCJpdGVtIiwibm9kZSIsImluZm9Ob2RlIiwiem1hcCIsInNtYXAiLCJpbmZvIiwiY2hpbGRyZW4iLCJjdXJyZW50IiwiaXNsb3QiLCJ2c2xvdCIsIlJlbmRlclBpZWNlSW5mbyIsInBpZWNlIiwic2xvdCIsImluZm9Db21wdXRlZCIsIm9yaWdpbiIsImdyb3VwIiwidmlzaWJsZSIsIlJlbmRlclBpZWNlIiwicGllY2VOb2RlIiwicmVzb2x2ZWRQaWVjZSIsImNhbnZhcyIsIm9yaWdpbmFsUGllY2UiLCJuYXZlbCIsIkdldFdlYkdMVGV4dHVyZSIsImdsIiwiX3RleHR1cmVJZCIsIkdldFZhbHVlIiwidGV4dHVyZUlkIiwiY3JlYXRlVGV4dHVyZSIsImJpbmRUZXh0dXJlIiwiVEVYVFVSRV8yRCIsInBpeGVsU3RvcmVpIiwiVU5QQUNLX1BSRU1VTFRJUExZX0FMUEhBX1dFQkdMIiwidGV4SW1hZ2UyRCIsIlJHQkEiLCJ3aWR0aCIsImhlaWdodCIsIlVOU0lHTkVEX0JZVEUiLCJ0ZXhQYXJhbWV0ZXJpIiwiVEVYVFVSRV9XUkFQX1MiLCJDTEFNUF9UT19FREdFIiwiVEVYVFVSRV9XUkFQX1QiLCJURVhUVVJFX01JTl9GSUxURVIiLCJMSU5FQVIiLCJHZXRDYW52YXNUZXh0dXJlIiwiX2NhbnZhcyIsImNhbnZhc1RhcmdldCIsInN0eWxlIiwiZGlzcGxheSIsImJvZHkiLCJhcHBlbmRDaGlsZCIsImdldENvbnRleHQiLCJwdXRJbWFnZURhdGEiLCJyZW1vdmUiLCJSZXR1cm5JZkV4aXN0cyIsImltYWdlcyIsInBhdGgiLCJpbWFnZVNwbGl0IiwiaW1hZ2VOYW1lIiwibm9kZVBhdGgiLCJJdGVtVXRpbGl0aWVzIiwiSXNGYWNlSWQiLCJJc0ZhY2VPckFjY2Vzc29yeUlkIiwiR2V0SXRlbUltZyIsInJlZ2lvbiIsImltZ1BhdGgiLCJHZXRJdGVtSW1nUGF0aCIsIkdldEZvbGRlckZvckl0ZW0iLCJHZXRGb2xkZXJGb3JJdGVtSWQiLCJmb2xkZXIiLCJmbG9vciIsImdldEZvbGRlcnMiLCJkaXYxMDAwMCIsInBhZFN0YXJ0IiwiZGl2MTAwMCIsInRvOERpZ2l0IiwiZm9sZGVyNiIsImdldEltYWdlcyIsImZvbGRlck5hbWUiLCJmb2xkZXJzIiwiUmVuZGVyYWJsZUJvdW5kcyIsImxlZnRzIiwicmlnaHRzIiwidG9wcyIsImJvdHRvbXMiLCJ6b29tIiwicmlnaHQiLCJib3R0b20iLCJzaXplIiwiQ2FsY0ZlZXRDZW50ZXJQb3NpdGlvbiIsInJlcXVlc3QiLCJib3VuZHMiLCJhbmNob3JzIiwiY2FsY3VsYXRlZE9mZnNldCIsImNhbGN1bGF0ZWRPZmZzZXRzIiwiYmFja0JvZHkiLCJwb3NpdGlvbiIsImZsaXBYIiwiQ2FsY0JvdW5kcyIsImxvY2tzIiwibG9ja2VkUGllY2VzIiwibG9ja05hbWUiLCJSZW5kZXJQbGFuIiwiZnJhbWVQYWlycyIsImNvcHlGcm9tUGxhbiIsImxvYWRlZFBpZWNlcyIsIm1pbmltdW1EZWxheSIsImZlZXRDZW50ZXIiLCJJbml0aWFsaXplIiwicGllY2VPdmVycmlkZXMiLCJHZXRNYXBwaW5ncyIsImNhbnZhc1BpZWNlcyIsImNoaWxkIiwicmVzb2x2ZWRDYW52YXNQaWVjZXMiLCJjYW52YXNQaWVjZSIsInJlc29sdmVkIiwibmV4dFJlc29sdmVkIiwiZGVsYXlzIiwicGllY2VzIiwic2xvdHMiLCJvdmVycmlkZXMiLCJhc3NpZ24iLCJtaW5EZWxheSIsIkxvYWRQaWVjZXMiLCJhbGxQaWVjZXMiLCJmYWNlUHJvcGVydHkiLCJoYXNGYWNlIiwiYWxsb3dlZFBpZWNlcyIsInBpZWNlTmFtZSIsImxvY2tlZEluSXRlbXMiLCJkZW1hbmRMb2NrIiwiem1hcExpbmUiLCJyZXF1aXJlZExvY2tzIiwiZXhjbHVzaXZlTG9jayIsIkJ1aWxkRXF1aXBFeGNsdXNpdmVMb2NrcyIsInBpZWNlUmVxdWlyZWRMb2NrIiwicGllY2VIYXNMb2NrcyIsInJlcXVpcmVkTG9jayIsImhhc0xvY2siLCJhbGxvd0NvbmZsaWN0aW5nTG9ja3NXaXRoIiwibG9ja0JsYW1lIiwiQ29tcHV0ZUxvY2tzIiwiYWN0aW9uIiwiTnVtYmVyIiwiZnJhbWUiLCJhZHZhbmNlZCIsImFuY2hvcmVkT2Zmc2V0TmFtZSIsImZpbmQiLCJhbmNob3JOYW1lIiwiYW5jaG9yZWRPZmZzZXQiLCJhbmNob3JlZFRvIiwiY29tcHV0ZWRPZmZzZXQiLCJiYXNlZE9mZkFuY2hvciIsImFuY2hvckRpc3RhbmNlIiwiY2hpbGRPZmZzZXROYW1lIiwiY2hpbGRPZmZzZXQiLCJjb21wdXRlZE5ld0FuY2hvciIsIkJ1aWxkQW5jaG9ycyIsImZpcnN0SXRlbSIsIlJlbmRlciIsIkdlbmVyYXRlSW1hZ2VUb0NhbnZhcyIsInJlbmRlcmVkQ2FudmFzIiwiY3R4IiwiZ2xvYmFsQ29tcG9zaXRlT3BlcmF0aW9uIiwidHJhbnNsYXRlIiwic2NhbGUiLCJpbnRlcm5hbCIsInJlYWxSZW5kZXJMb2NhdGlvbiIsInBpZWNlVGV4dHVyZSIsInNhdmUiLCJvcmlnaW5hbE9wdGlvbnMiLCJIYWlyRHllIiwib2Zmc2V0QWxwaGEiLCJzZWxlY3RlZEl0ZW1zIiwiSGFpciIsImFscGhhIiwiZ2xvYmFsQWxwaGEiLCJoYWlyRHllIiwiZHJhd0ltYWdlIiwicmVzdG9yZSIsIkFuaW1hdGVkUmVuZGVyUGxhbiIsInJlbmRlcmVyIiwibWF4RnJhbWVzQ2FsY3VsYXRvciIsImVxdWlwT3ZlcnJpZGVzIiwiT3JpZ2luYWxSZW5kZXJSZXF1ZXN0IiwiQ2FudmFzIiwiY29udGV4dCIsImZyYW1lcyIsImZyYW1lSW5kZXgiLCJQcmVwYXJlIiwic2VsZWN0ZWRJdGVtUG9zaXRpb25CeUlkIiwibWF4RmFjZUZyYW1lcyIsIm1heEZyYW1lcyIsIkdldE1heEZhY2VGcmFtZXMiLCJHZXRNYXhGcmFtZXMiLCJtYXhGcmFtZSIsInRpbWVPZmZzZXQiLCJyZW1haW5pbmdUaW1lRGVsYXlzIiwicHJldmlvdXNGcmFtZSIsImZyYW1lTnVtYmVyVHJhY2tlciIsImZyYW1lUmVuZGVyUmVxdWVzdCIsImVsYXBzZWRUaW1lIiwiaXRlbUlkIiwiZnJhbWVSZW5kZXJQbGFuIiwiR2VuZXJhdGVSZW5kZXJQbGFuIiwiZGVsYXkiLCJyZW1haW5pbmdEZWxheSIsIm9yaWdpbmFsQWN0aW9uIiwiZnJhbWVDb3B5IiwiZmVldFBvc2l0aW9ucyIsImZyYW1lUGxhbiIsIk1heEZlZXRQb3NpdGlvbiIsIm1heEZlZXREaWZmZXJlbmNlIiwid2lkdGhzIiwiaGVpZ2h0cyIsIlJlcGxhY2VDYW52YXMiLCJSZW5kZXJTaW5nbGVGcmFtZSIsInJlbmRlcmVkIiwiY2VudGVyIiwiZGVzdGluYXRpb25PZmZzZXQiLCJjbGVhclJlY3QiLCJSZW5kZXJMb29wIiwibmV4dEZyYW1lVGltZW91dCIsIlN0b3AiLCJDaGFyYWN0ZXJSZW5kZXJlciIsIml0ZW1VdGlsaXR5IiwiZGF0YUZhY3RvcnkiLCJjYWNoZWRQbGFucyIsIkhhc2hSZW5kZXJQbGFuUmVxdWVzdCIsImhhc2hQaWVjZXMiLCJlbW90aW9uIiwic2tpbiIsIm1lcmNFYXJzIiwiaWxsaXVtRWFycyIsImNvbG9ySWQiLCJpdGVtTmFtZSIsIkdlbmVyYXRlQW5pbWF0ZWRSZW5kZXJQbGFuIiwicGxhbiIsImhhc2giLCJjYWNoZWQiLCJtYXhCb2R5RnJhbWUiLCJtYXhGYWNlRnJhbWUiLCJHZXRGcmFtZU5vZGVzIiwicmVuZGVyUGxhbiIsImZhY2VGcmFtZXMiLCJpc0ZhY2UiLCJhbmltYXRpb25Ob2RlIiwiR2V0QW5pbWF0aW9uTm9kZSIsImZyYW1lSW5kZXhlcyIsImZyYW1lTnVtYmVyIiwiaW1nIiwiYW5pbWF0aW9uIiwid2VhcG9uVHlwZSIsImZvbGRlclBhaXJzIiwicGFpciIsIm1hdGNoZWRJdGVtSWQiLCJub2RlcyIsIk1hcEl0ZW1Ub0ZyYW1lTm9kZSIsInBlcmNlbnRpbGUiLCJoYWlyIiwiaGFpck5vZGUiLCJoYWlySWQiLCJtYXBwZWRIYWlySWQiLCJtYXBwZWQiLCJnZXRabWFwIiwiZ2V0U21hcCIsImZyYW1lTm9kZSIsIlBvc3NpYmxlUGF0aFByZWZpeGVzIiwiQmFja2dyb3VuZCIsIkZvb3Rob2xkIiwiTGFkZGVyUm9wZSIsIkxpZmUiLCJNYXBJbmZvIiwiTWFwTGF5ZXJJbmZvIiwiTWFwT2JqZWN0IiwiTWFwVGlsZSIsIk1hcExheWVyIiwibGF5ZXJOb2RlIiwiTG9hZCIsIkxvYWRJbmZvIiwiSW5mbyIsInRpbGVTZXQiLCJMb2FkVGlsZXMiLCJMb2FkT2JqZWN0cyIsIm9iamVjdHNOb2RlIiwiT2JqZWN0cyIsIm9iamVjdE5vZGUiLCJPYmplY3RTZXROYW1lIiwiTGlzdFplcm8iLCJMaXN0T25lIiwiTGlzdFR3byIsInF1ZXN0SWRzIiwidGFncyIsImZyb250Iiwicm90YXRpb24iLCJ6MiIsImdyb3VwTmFtZSIsImFic0ltZ1BhdGgiLCJvYmpTZXQiLCJnZXRJbWFnZVdpdGhQb3NzaWJsZVByZWZpeGVzIiwiT2JqZWN0U2V0IiwidGlsZVNldE1hZ2F6aW5lIiwiVGlsZVNldE5vZGUiLCJ0aWxlc05vZGUiLCJUaWxlcyIsInRpbGVOb2RlIiwidGlsZSIsInRpbGVJZCIsIlRpbGVOb2RlIiwiUG9ydGFsIiwiTWFwIiwibWFwTm9kZSIsIkxvYWRQb3J0YWxzIiwiTG9hZExpZmUiLCJMb2FkRm9vdGhvbGRzIiwiTG9hZExhZGRlclJvcGUiLCJMb2FkU2VhdHMiLCJMb2FkQmFja2dyb3VuZHMiLCJMYXllcnMiLCJsYXllckluZGV4IiwiTG9hZExheWVyIiwiTGlua3NUbyIsIkJhY2tncm91bmRNdXNpYyIsIlJldHVybk1hcCIsIklzUmV0dXJuTWFwIiwiSXNUb3duIiwiSXNTd2ltIiwiTW9iUmF0ZSIsIk1hcE1hcmsiLCJNaW5pbXVtU3RhckZvcmNlIiwiTWluaW11bUFyY2FuZUZvcmNlIiwiTWluaW11bUxldmVsIiwicG9ydGFscyIsIlBvcnRhbHMiLCJwb3J0YWxOb2RlIiwicG9ydGFsUmVzdWx0IiwidGFyZ2V0TWFwSWQiLCJ0YXJnZXROYW1lIiwiaW1hZ2UiLCJvbmx5T25jZSIsImxpZmVzIiwibGlmZVRlbXBsYXRlcyIsImxpZmVOb2RlIiwibGlmZVJlc3VsdCIsIndhbGtMZWZ0Iiwid2Fsa1JpZ2h0IiwiZmgiLCJoaWRkZW4iLCJmb290SG9sZHMiLCJmb290SG9sZFJlc3VsdHMiLCJsYXllciIsImZoUHJvcCIsInByZXYiLCJ4MSIsIngyIiwieTEiLCJ5MiIsImxhZGRlclJvcGVzIiwiTGFkZGVyUm9wZXMiLCJsYWRkZXJSb3BlIiwibGFkZGVyUm9wZVJlc3VsdCIsIklzTGFkZGVyIiwiYmFja2dyb3VuZHMiLCJCYWNrZ3JvdW5kcyIsImJhY2tncm91bmROb2RlIiwiYmFja2dyb3VuZFNldElkIiwiYmFja2dyb3VuZFNldE5hbWUiLCJyeCIsInJ5IiwiY3giLCJjeSIsImFuaW1hdGVkIiwiYmFja2dyb3VuZEdyb3VwIiwiUGF0aCIsImJhY2tncm91bmQiLCJzZWF0cyIsIlNlYXRzIiwiTWFwUmVuZGVyZXIiLCJtYXBJZCIsIkxvYWRNYXAiLCJtYXBJZFN0ciIsInBhZExlZnQiLCJzdWJzdHJpbmciLCJQcm9ncmVzc01vbml0b3IiLCJOb3RpZnlPbkNvbXBsZXRlIiwiTmFtZSIsIkNvbXBsZXRlZExlbmd0aCIsIlN0YXJ0ZWRBdCIsIkRhdGUiLCJTZXRMZW5ndGgiLCJMZW5ndGgiLCJSZXBvcnROZXdMZW5ndGgiLCJSZXBvcnREb25lIiwiRG9uZSIsIkRvbmVBdCIsImNhbGxiYWNrIiwiUmVwb3J0RXJyb3IiLCJSZXBvcnRSZXRyeUF0dGVtcHQiLCJyZXRyeUluZGV4IiwiUmV0cnlJbmRleCIsIlJldHJpZWRBdCIsIlJldHJ5U3VjY2VzcyIsIlJlcG9ydFJldHJ5U3VjY2VzcyIsIlJlZ2lzdGVyTm90aWZ5T25Db21wbGV0ZSIsIlJlcG9ydEZyb21JbnRlcm5hbENhY2hlIiwiRnJvbUludGVybmFsQ2FjaGUiLCJSZXF1ZXN0SG9sZGVyIiwiTmV0d29yayIsImRhdGFiYXNlIiwiUHJvZ3Jlc3NNb25pdG9yQ2FsbGJhY2siLCJSZXRyaWVzQWxsb3dlZCIsIlJldHJ5RGVsYXkiLCJSZWdpc3RlckV2ZW50TW9uaXRvciIsIlNldFJldHJ5Q291bnQiLCJyZXRyeUNvdW50IiwiZG93bmxvYWQiLCJyZXNwb25zZSIsInJlYWRlciIsImNvbnRlbnRMZW5ndGgiLCJtb25pdG9yIiwiZnJvbURhdGFiYXNlIiwicmVxdWVzdHMiLCJmZXRjaCIsImdldFJlYWRlciIsImhlYWRlcnMiLCJyZXMiLCJyZWNlaXZlZExlbmd0aCIsInJlYWQiLCJyZXRyeVN1Y2Nlc3MiLCJwYXlsb2FkIiwiZmV0Y2hKc29uIiwicmF3UGF5bG9hZCIsInJhd0pzb24iLCJmZXRjaEFiIiwiQmluYXJ5UmVhZGVyIiwiYWIiLCJzdGFydFBvc2l0aW9uIiwidmlldyIsIkRhdGFWaWV3IiwiQWR2YW5jZSIsIlJlYWRCeXRlIiwiZ2V0SW50OCIsIlJlYWRVQnl0ZSIsImdldFVpbnQ4IiwiUmVhZEludDE2IiwiZ2V0SW50MTYiLCJSZWFkVUludDE2IiwiZ2V0VWludDE2IiwiUmVhZEludDMyIiwiZ2V0SW50MzIiLCJSZWFkVUludDMyIiwiZ2V0VWludDMyIiwiUmVhZEludDY0IiwiZ2V0QmlnSW50NjQiLCJSZWFkVUludDY0IiwiZ2V0QmlnVWludDY0IiwiUmVhZFNpbmdsZSIsImdldEZsb2F0MzIiLCJSZWFkRG91YmxlIiwiZ2V0RmxvYXQ2NCIsIlJlYWRXWlNpbmdsZSIsInBvc3NpYmxlIiwiUmVhZFdaSW50IiwiUmVhZFdaU3RyaW5nQmxvY2siLCJSZWFkV1pTdHJpbmciLCJpc1VuaWNvZGUiLCJyZXNTdHIiLCJjaGFyQXQiLCJSZWFkQ2FudmFzIiwiZm9ybWF0IiwiaW1hZ2VMZW5ndGgiLCJuZXdDb3B5IiwiaW5mbGF0ZWQiLCJleHBlY3RlZENvdW50IiwiZGlmZmVyZW5jZSIsIm5ld0luZmxhdGVkIiwiSW1hZ2VEYXRhIiwiVWludDhDbGFtcGVkQXJyYXkiLCJQcm9wZXJ0eSIsImlubGluayIsIkhhbmRsZUlubGluayIsIm91dGxpbmsiLCJIYW5kbGVPdXRsaW5rIiwicGF0aFNwbGl0IiwidGhpc0NoaWxkIiwiRmluZEFuZFJlc29sdmUiLCJlbmRzV2l0aCIsInRoYXQiLCJpbmxpbmtUYXJnZXQiLCJpbWdDb250YWluZXIiLCJmb3VuZCIsIm91dGxpbmtUYXJnZXQiLCJ3ekNvbnRhaW5lciIsImZvdW5kRGF0YSIsIlZhbHVlUHJvcGVydHkiLCJBdWRpb1Byb3BlcnR5IiwiZHVyYXRpb24iLCJQbGF5IiwibG9vcCIsImF1ZGlvQ3R4IiwiQXVkaW9Db250ZXh0IiwiYXVkaW9TcmMiLCJjcmVhdGVCdWZmZXJTb3VyY2UiLCJhdWRpb0FuYWx5c2VyIiwiY3JlYXRlQW5hbHlzZXIiLCJwbGF5aW5nUHJvbWlzZSIsImRlY29kZUF1ZGlvRGF0YSIsImF1ZGlvQnVmZmVyIiwiYW5hbHlzZXIiLCJjb25uZWN0IiwiZGVzdGluYXRpb24iLCJhdWRpbyIsIm9uZW5kZWQiLCJpc1BsYXlpbmciLCJQcm9wZXJ0eUxpc3QiLCJMb2FkQ2hpbGRyZW4iLCJibG9ja0xlbmd0aCIsIm5ld1Bvc2l0aW9uIiwiRXh0ZW5kZWRQcm9wZXJ0eVZhbHVlIiwicHJvcGVydHlUeXBlIiwiQ2FudmFzUHJvcGVydHkiLCJjb252ZXhDb3VudCIsImNvbnZleENoaWxkcmVuIiwiY29udmV4UHJvcCIsImZvcm1hdDEiLCJmb3JtYXQyIiwiY2FudmFzTG9jYXRpb24iLCJvbGRQb3NpdGlvbiIsIkltYWdlUHJvcGVydHkiLCJQS0cxRmFjdG9yeSIsIm5ldHdvcmsiLCJ3ekVuZFBvaW50IiwiZW5kUG9pbnQiLCJpbWFnZUNhY2hlIiwiaW1hZ2VBQkNhY2hlIiwiaW1hZ2VzQ2FjaGUiLCJmb2xkZXJDYWNoZSIsInZlcnNpb25Qc2V1ZG9SZXNvbHZlcnMiLCJ6bWFwQ2FjaGUiLCJzbWFwQ2FjaGUiLCJjb21waWxlZFBhdGgiLCJjcmVhdGVkIiwiaW1hZ2VzSnNvbiIsImdldEltYWdlQUIiLCJzaGE1MTIiLCJnZXRWZXJzaW9uUmVzb2x2ZXIiLCJwcmVmaXhlcyIsInByZXZpb3VzIiwicHJldmlvdXNWYWx1ZSIsImdldEltYWdlIiwicHNldWRvUmVzb2x2ZXIiLCJjb25maWciLCJEYXRhRmFjdG9yeSIsIkVuZHBvaW50Il0sInNvdXJjZVJvb3QiOiIifQ==
\ No newline at end of file
